// Code generated by ent, DO NOT EDIT.

package workflowdata

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the workflowdata type in the database.
	Label = "workflow_data"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDuration holds the string denoting the duration field in the database.
	FieldDuration = "duration"
	// FieldPaused holds the string denoting the paused field in the database.
	FieldPaused = "paused"
	// FieldResumable holds the string denoting the resumable field in the database.
	FieldResumable = "resumable"
	// FieldInput holds the string denoting the input field in the database.
	FieldInput = "input"
	// FieldAttempt holds the string denoting the attempt field in the database.
	FieldAttempt = "attempt"
	// EdgeEntity holds the string denoting the entity edge name in mutations.
	EdgeEntity = "entity"
	// Table holds the table name of the workflowdata in the database.
	Table = "workflow_data"
	// EntityTable is the table that holds the entity relation/edge.
	EntityTable = "workflow_data"
	// EntityInverseTable is the table name for the Entity entity.
	// It exists in this package in order to avoid circular dependency with the "entity" package.
	EntityInverseTable = "entities"
	// EntityColumn is the table column denoting the entity relation/edge.
	EntityColumn = "entity_workflow_data"
)

// Columns holds all SQL columns for workflowdata fields.
var Columns = []string{
	FieldID,
	FieldDuration,
	FieldPaused,
	FieldResumable,
	FieldInput,
	FieldAttempt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "workflow_data"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"entity_workflow_data",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultPaused holds the default value on creation for the "paused" field.
	DefaultPaused bool
	// DefaultResumable holds the default value on creation for the "resumable" field.
	DefaultResumable bool
	// DefaultAttempt holds the default value on creation for the "attempt" field.
	DefaultAttempt int
)

// OrderOption defines the ordering options for the WorkflowData queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDuration orders the results by the duration field.
func ByDuration(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDuration, opts...).ToFunc()
}

// ByPaused orders the results by the paused field.
func ByPaused(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaused, opts...).ToFunc()
}

// ByResumable orders the results by the resumable field.
func ByResumable(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResumable, opts...).ToFunc()
}

// ByAttempt orders the results by the attempt field.
func ByAttempt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAttempt, opts...).ToFunc()
}

// ByEntityField orders the results by entity field.
func ByEntityField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEntityStep(), sql.OrderByField(field, opts...))
	}
}
func newEntityStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EntityInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, EntityTable, EntityColumn),
	)
}
