// Code generated by ent, DO NOT EDIT.

package sideeffectdata

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the sideeffectdata type in the database.
	Label = "side_effect_data"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldInput holds the string denoting the input field in the database.
	FieldInput = "input"
	// FieldOutput holds the string denoting the output field in the database.
	FieldOutput = "output"
	// EdgeEntity holds the string denoting the entity edge name in mutations.
	EdgeEntity = "entity"
	// Table holds the table name of the sideeffectdata in the database.
	Table = "side_effect_data"
	// EntityTable is the table that holds the entity relation/edge.
	EntityTable = "side_effect_data"
	// EntityInverseTable is the table name for the Entity entity.
	// It exists in this package in order to avoid circular dependency with the "entity" package.
	EntityInverseTable = "entities"
	// EntityColumn is the table column denoting the entity relation/edge.
	EntityColumn = "entity_side_effect_data"
)

// Columns holds all SQL columns for sideeffectdata fields.
var Columns = []string{
	FieldID,
	FieldInput,
	FieldOutput,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "side_effect_data"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"entity_side_effect_data",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the SideEffectData queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEntityField orders the results by entity field.
func ByEntityField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEntityStep(), sql.OrderByField(field, opts...))
	}
}
func newEntityStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EntityInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, EntityTable, EntityColumn),
	)
}
