// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/predicate"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/sideeffectexecution"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/sideeffectexecutiondata"
)

// SideEffectExecutionDataUpdate is the builder for updating SideEffectExecutionData entities.
type SideEffectExecutionDataUpdate struct {
	config
	hooks    []Hook
	mutation *SideEffectExecutionDataMutation
}

// Where appends a list predicates to the SideEffectExecutionDataUpdate builder.
func (seedu *SideEffectExecutionDataUpdate) Where(ps ...predicate.SideEffectExecutionData) *SideEffectExecutionDataUpdate {
	seedu.mutation.Where(ps...)
	return seedu
}

// SetEffectTime sets the "effect_time" field.
func (seedu *SideEffectExecutionDataUpdate) SetEffectTime(t time.Time) *SideEffectExecutionDataUpdate {
	seedu.mutation.SetEffectTime(t)
	return seedu
}

// SetNillableEffectTime sets the "effect_time" field if the given value is not nil.
func (seedu *SideEffectExecutionDataUpdate) SetNillableEffectTime(t *time.Time) *SideEffectExecutionDataUpdate {
	if t != nil {
		seedu.SetEffectTime(*t)
	}
	return seedu
}

// ClearEffectTime clears the value of the "effect_time" field.
func (seedu *SideEffectExecutionDataUpdate) ClearEffectTime() *SideEffectExecutionDataUpdate {
	seedu.mutation.ClearEffectTime()
	return seedu
}

// SetEffectMetadata sets the "effect_metadata" field.
func (seedu *SideEffectExecutionDataUpdate) SetEffectMetadata(u []uint8) *SideEffectExecutionDataUpdate {
	seedu.mutation.SetEffectMetadata(u)
	return seedu
}

// AppendEffectMetadata appends u to the "effect_metadata" field.
func (seedu *SideEffectExecutionDataUpdate) AppendEffectMetadata(u []uint8) *SideEffectExecutionDataUpdate {
	seedu.mutation.AppendEffectMetadata(u)
	return seedu
}

// ClearEffectMetadata clears the value of the "effect_metadata" field.
func (seedu *SideEffectExecutionDataUpdate) ClearEffectMetadata() *SideEffectExecutionDataUpdate {
	seedu.mutation.ClearEffectMetadata()
	return seedu
}

// SetExecutionContext sets the "execution_context" field.
func (seedu *SideEffectExecutionDataUpdate) SetExecutionContext(u []uint8) *SideEffectExecutionDataUpdate {
	seedu.mutation.SetExecutionContext(u)
	return seedu
}

// AppendExecutionContext appends u to the "execution_context" field.
func (seedu *SideEffectExecutionDataUpdate) AppendExecutionContext(u []uint8) *SideEffectExecutionDataUpdate {
	seedu.mutation.AppendExecutionContext(u)
	return seedu
}

// ClearExecutionContext clears the value of the "execution_context" field.
func (seedu *SideEffectExecutionDataUpdate) ClearExecutionContext() *SideEffectExecutionDataUpdate {
	seedu.mutation.ClearExecutionContext()
	return seedu
}

// SetSideEffectExecutionID sets the "side_effect_execution" edge to the SideEffectExecution entity by ID.
func (seedu *SideEffectExecutionDataUpdate) SetSideEffectExecutionID(id int) *SideEffectExecutionDataUpdate {
	seedu.mutation.SetSideEffectExecutionID(id)
	return seedu
}

// SetSideEffectExecution sets the "side_effect_execution" edge to the SideEffectExecution entity.
func (seedu *SideEffectExecutionDataUpdate) SetSideEffectExecution(s *SideEffectExecution) *SideEffectExecutionDataUpdate {
	return seedu.SetSideEffectExecutionID(s.ID)
}

// Mutation returns the SideEffectExecutionDataMutation object of the builder.
func (seedu *SideEffectExecutionDataUpdate) Mutation() *SideEffectExecutionDataMutation {
	return seedu.mutation
}

// ClearSideEffectExecution clears the "side_effect_execution" edge to the SideEffectExecution entity.
func (seedu *SideEffectExecutionDataUpdate) ClearSideEffectExecution() *SideEffectExecutionDataUpdate {
	seedu.mutation.ClearSideEffectExecution()
	return seedu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (seedu *SideEffectExecutionDataUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, seedu.sqlSave, seedu.mutation, seedu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (seedu *SideEffectExecutionDataUpdate) SaveX(ctx context.Context) int {
	affected, err := seedu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (seedu *SideEffectExecutionDataUpdate) Exec(ctx context.Context) error {
	_, err := seedu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (seedu *SideEffectExecutionDataUpdate) ExecX(ctx context.Context) {
	if err := seedu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (seedu *SideEffectExecutionDataUpdate) check() error {
	if seedu.mutation.SideEffectExecutionCleared() && len(seedu.mutation.SideEffectExecutionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SideEffectExecutionData.side_effect_execution"`)
	}
	return nil
}

func (seedu *SideEffectExecutionDataUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := seedu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(sideeffectexecutiondata.Table, sideeffectexecutiondata.Columns, sqlgraph.NewFieldSpec(sideeffectexecutiondata.FieldID, field.TypeInt))
	if ps := seedu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := seedu.mutation.EffectTime(); ok {
		_spec.SetField(sideeffectexecutiondata.FieldEffectTime, field.TypeTime, value)
	}
	if seedu.mutation.EffectTimeCleared() {
		_spec.ClearField(sideeffectexecutiondata.FieldEffectTime, field.TypeTime)
	}
	if value, ok := seedu.mutation.EffectMetadata(); ok {
		_spec.SetField(sideeffectexecutiondata.FieldEffectMetadata, field.TypeJSON, value)
	}
	if value, ok := seedu.mutation.AppendedEffectMetadata(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, sideeffectexecutiondata.FieldEffectMetadata, value)
		})
	}
	if seedu.mutation.EffectMetadataCleared() {
		_spec.ClearField(sideeffectexecutiondata.FieldEffectMetadata, field.TypeJSON)
	}
	if value, ok := seedu.mutation.ExecutionContext(); ok {
		_spec.SetField(sideeffectexecutiondata.FieldExecutionContext, field.TypeJSON, value)
	}
	if value, ok := seedu.mutation.AppendedExecutionContext(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, sideeffectexecutiondata.FieldExecutionContext, value)
		})
	}
	if seedu.mutation.ExecutionContextCleared() {
		_spec.ClearField(sideeffectexecutiondata.FieldExecutionContext, field.TypeJSON)
	}
	if seedu.mutation.SideEffectExecutionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   sideeffectexecutiondata.SideEffectExecutionTable,
			Columns: []string{sideeffectexecutiondata.SideEffectExecutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sideeffectexecution.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := seedu.mutation.SideEffectExecutionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   sideeffectexecutiondata.SideEffectExecutionTable,
			Columns: []string{sideeffectexecutiondata.SideEffectExecutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sideeffectexecution.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, seedu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sideeffectexecutiondata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	seedu.mutation.done = true
	return n, nil
}

// SideEffectExecutionDataUpdateOne is the builder for updating a single SideEffectExecutionData entity.
type SideEffectExecutionDataUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SideEffectExecutionDataMutation
}

// SetEffectTime sets the "effect_time" field.
func (seeduo *SideEffectExecutionDataUpdateOne) SetEffectTime(t time.Time) *SideEffectExecutionDataUpdateOne {
	seeduo.mutation.SetEffectTime(t)
	return seeduo
}

// SetNillableEffectTime sets the "effect_time" field if the given value is not nil.
func (seeduo *SideEffectExecutionDataUpdateOne) SetNillableEffectTime(t *time.Time) *SideEffectExecutionDataUpdateOne {
	if t != nil {
		seeduo.SetEffectTime(*t)
	}
	return seeduo
}

// ClearEffectTime clears the value of the "effect_time" field.
func (seeduo *SideEffectExecutionDataUpdateOne) ClearEffectTime() *SideEffectExecutionDataUpdateOne {
	seeduo.mutation.ClearEffectTime()
	return seeduo
}

// SetEffectMetadata sets the "effect_metadata" field.
func (seeduo *SideEffectExecutionDataUpdateOne) SetEffectMetadata(u []uint8) *SideEffectExecutionDataUpdateOne {
	seeduo.mutation.SetEffectMetadata(u)
	return seeduo
}

// AppendEffectMetadata appends u to the "effect_metadata" field.
func (seeduo *SideEffectExecutionDataUpdateOne) AppendEffectMetadata(u []uint8) *SideEffectExecutionDataUpdateOne {
	seeduo.mutation.AppendEffectMetadata(u)
	return seeduo
}

// ClearEffectMetadata clears the value of the "effect_metadata" field.
func (seeduo *SideEffectExecutionDataUpdateOne) ClearEffectMetadata() *SideEffectExecutionDataUpdateOne {
	seeduo.mutation.ClearEffectMetadata()
	return seeduo
}

// SetExecutionContext sets the "execution_context" field.
func (seeduo *SideEffectExecutionDataUpdateOne) SetExecutionContext(u []uint8) *SideEffectExecutionDataUpdateOne {
	seeduo.mutation.SetExecutionContext(u)
	return seeduo
}

// AppendExecutionContext appends u to the "execution_context" field.
func (seeduo *SideEffectExecutionDataUpdateOne) AppendExecutionContext(u []uint8) *SideEffectExecutionDataUpdateOne {
	seeduo.mutation.AppendExecutionContext(u)
	return seeduo
}

// ClearExecutionContext clears the value of the "execution_context" field.
func (seeduo *SideEffectExecutionDataUpdateOne) ClearExecutionContext() *SideEffectExecutionDataUpdateOne {
	seeduo.mutation.ClearExecutionContext()
	return seeduo
}

// SetSideEffectExecutionID sets the "side_effect_execution" edge to the SideEffectExecution entity by ID.
func (seeduo *SideEffectExecutionDataUpdateOne) SetSideEffectExecutionID(id int) *SideEffectExecutionDataUpdateOne {
	seeduo.mutation.SetSideEffectExecutionID(id)
	return seeduo
}

// SetSideEffectExecution sets the "side_effect_execution" edge to the SideEffectExecution entity.
func (seeduo *SideEffectExecutionDataUpdateOne) SetSideEffectExecution(s *SideEffectExecution) *SideEffectExecutionDataUpdateOne {
	return seeduo.SetSideEffectExecutionID(s.ID)
}

// Mutation returns the SideEffectExecutionDataMutation object of the builder.
func (seeduo *SideEffectExecutionDataUpdateOne) Mutation() *SideEffectExecutionDataMutation {
	return seeduo.mutation
}

// ClearSideEffectExecution clears the "side_effect_execution" edge to the SideEffectExecution entity.
func (seeduo *SideEffectExecutionDataUpdateOne) ClearSideEffectExecution() *SideEffectExecutionDataUpdateOne {
	seeduo.mutation.ClearSideEffectExecution()
	return seeduo
}

// Where appends a list predicates to the SideEffectExecutionDataUpdate builder.
func (seeduo *SideEffectExecutionDataUpdateOne) Where(ps ...predicate.SideEffectExecutionData) *SideEffectExecutionDataUpdateOne {
	seeduo.mutation.Where(ps...)
	return seeduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (seeduo *SideEffectExecutionDataUpdateOne) Select(field string, fields ...string) *SideEffectExecutionDataUpdateOne {
	seeduo.fields = append([]string{field}, fields...)
	return seeduo
}

// Save executes the query and returns the updated SideEffectExecutionData entity.
func (seeduo *SideEffectExecutionDataUpdateOne) Save(ctx context.Context) (*SideEffectExecutionData, error) {
	return withHooks(ctx, seeduo.sqlSave, seeduo.mutation, seeduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (seeduo *SideEffectExecutionDataUpdateOne) SaveX(ctx context.Context) *SideEffectExecutionData {
	node, err := seeduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (seeduo *SideEffectExecutionDataUpdateOne) Exec(ctx context.Context) error {
	_, err := seeduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (seeduo *SideEffectExecutionDataUpdateOne) ExecX(ctx context.Context) {
	if err := seeduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (seeduo *SideEffectExecutionDataUpdateOne) check() error {
	if seeduo.mutation.SideEffectExecutionCleared() && len(seeduo.mutation.SideEffectExecutionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SideEffectExecutionData.side_effect_execution"`)
	}
	return nil
}

func (seeduo *SideEffectExecutionDataUpdateOne) sqlSave(ctx context.Context) (_node *SideEffectExecutionData, err error) {
	if err := seeduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(sideeffectexecutiondata.Table, sideeffectexecutiondata.Columns, sqlgraph.NewFieldSpec(sideeffectexecutiondata.FieldID, field.TypeInt))
	id, ok := seeduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SideEffectExecutionData.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := seeduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sideeffectexecutiondata.FieldID)
		for _, f := range fields {
			if !sideeffectexecutiondata.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sideeffectexecutiondata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := seeduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := seeduo.mutation.EffectTime(); ok {
		_spec.SetField(sideeffectexecutiondata.FieldEffectTime, field.TypeTime, value)
	}
	if seeduo.mutation.EffectTimeCleared() {
		_spec.ClearField(sideeffectexecutiondata.FieldEffectTime, field.TypeTime)
	}
	if value, ok := seeduo.mutation.EffectMetadata(); ok {
		_spec.SetField(sideeffectexecutiondata.FieldEffectMetadata, field.TypeJSON, value)
	}
	if value, ok := seeduo.mutation.AppendedEffectMetadata(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, sideeffectexecutiondata.FieldEffectMetadata, value)
		})
	}
	if seeduo.mutation.EffectMetadataCleared() {
		_spec.ClearField(sideeffectexecutiondata.FieldEffectMetadata, field.TypeJSON)
	}
	if value, ok := seeduo.mutation.ExecutionContext(); ok {
		_spec.SetField(sideeffectexecutiondata.FieldExecutionContext, field.TypeJSON, value)
	}
	if value, ok := seeduo.mutation.AppendedExecutionContext(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, sideeffectexecutiondata.FieldExecutionContext, value)
		})
	}
	if seeduo.mutation.ExecutionContextCleared() {
		_spec.ClearField(sideeffectexecutiondata.FieldExecutionContext, field.TypeJSON)
	}
	if seeduo.mutation.SideEffectExecutionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   sideeffectexecutiondata.SideEffectExecutionTable,
			Columns: []string{sideeffectexecutiondata.SideEffectExecutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sideeffectexecution.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := seeduo.mutation.SideEffectExecutionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   sideeffectexecutiondata.SideEffectExecutionTable,
			Columns: []string{sideeffectexecutiondata.SideEffectExecutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sideeffectexecution.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SideEffectExecutionData{config: seeduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, seeduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sideeffectexecutiondata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	seeduo.mutation.done = true
	return _node, nil
}
