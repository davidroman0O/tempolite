// Code generated by ent, DO NOT EDIT.

package hierarchy

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the hierarchy type in the database.
	Label = "hierarchy"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRunID holds the string denoting the run_id field in the database.
	FieldRunID = "run_id"
	// FieldParentEntityID holds the string denoting the parent_entity_id field in the database.
	FieldParentEntityID = "parent_entity_id"
	// FieldChildEntityID holds the string denoting the child_entity_id field in the database.
	FieldChildEntityID = "child_entity_id"
	// FieldParentExecutionID holds the string denoting the parent_execution_id field in the database.
	FieldParentExecutionID = "parent_execution_id"
	// FieldChildExecutionID holds the string denoting the child_execution_id field in the database.
	FieldChildExecutionID = "child_execution_id"
	// FieldParentStepID holds the string denoting the parent_step_id field in the database.
	FieldParentStepID = "parent_step_id"
	// FieldChildStepID holds the string denoting the child_step_id field in the database.
	FieldChildStepID = "child_step_id"
	// FieldChildType holds the string denoting the childtype field in the database.
	FieldChildType = "child_type"
	// FieldParentType holds the string denoting the parenttype field in the database.
	FieldParentType = "parent_type"
	// EdgeRun holds the string denoting the run edge name in mutations.
	EdgeRun = "run"
	// EdgeParentEntity holds the string denoting the parent_entity edge name in mutations.
	EdgeParentEntity = "parent_entity"
	// EdgeChildEntity holds the string denoting the child_entity edge name in mutations.
	EdgeChildEntity = "child_entity"
	// Table holds the table name of the hierarchy in the database.
	Table = "hierarchies"
	// RunTable is the table that holds the run relation/edge.
	RunTable = "hierarchies"
	// RunInverseTable is the table name for the Run entity.
	// It exists in this package in order to avoid circular dependency with the "run" package.
	RunInverseTable = "runs"
	// RunColumn is the table column denoting the run relation/edge.
	RunColumn = "run_id"
	// ParentEntityTable is the table that holds the parent_entity relation/edge.
	ParentEntityTable = "hierarchies"
	// ParentEntityInverseTable is the table name for the Entity entity.
	// It exists in this package in order to avoid circular dependency with the "entity" package.
	ParentEntityInverseTable = "entities"
	// ParentEntityColumn is the table column denoting the parent_entity relation/edge.
	ParentEntityColumn = "parent_entity_id"
	// ChildEntityTable is the table that holds the child_entity relation/edge.
	ChildEntityTable = "hierarchies"
	// ChildEntityInverseTable is the table name for the Entity entity.
	// It exists in this package in order to avoid circular dependency with the "entity" package.
	ChildEntityInverseTable = "entities"
	// ChildEntityColumn is the table column denoting the child_entity relation/edge.
	ChildEntityColumn = "child_entity_id"
)

// Columns holds all SQL columns for hierarchy fields.
var Columns = []string{
	FieldID,
	FieldRunID,
	FieldParentEntityID,
	FieldChildEntityID,
	FieldParentExecutionID,
	FieldChildExecutionID,
	FieldParentStepID,
	FieldChildStepID,
	FieldChildType,
	FieldParentType,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// ChildType defines the type for the "childType" enum field.
type ChildType string

// ChildType values.
const (
	ChildTypeWorkflow   ChildType = "Workflow"
	ChildTypeActivity   ChildType = "Activity"
	ChildTypeSaga       ChildType = "Saga"
	ChildTypeSideEffect ChildType = "SideEffect"
)

func (ct ChildType) String() string {
	return string(ct)
}

// ChildTypeValidator is a validator for the "childType" field enum values. It is called by the builders before save.
func ChildTypeValidator(ct ChildType) error {
	switch ct {
	case ChildTypeWorkflow, ChildTypeActivity, ChildTypeSaga, ChildTypeSideEffect:
		return nil
	default:
		return fmt.Errorf("hierarchy: invalid enum value for childType field: %q", ct)
	}
}

// ParentType defines the type for the "parentType" enum field.
type ParentType string

// ParentType values.
const (
	ParentTypeWorkflow   ParentType = "Workflow"
	ParentTypeActivity   ParentType = "Activity"
	ParentTypeSaga       ParentType = "Saga"
	ParentTypeSideEffect ParentType = "SideEffect"
)

func (pt ParentType) String() string {
	return string(pt)
}

// ParentTypeValidator is a validator for the "parentType" field enum values. It is called by the builders before save.
func ParentTypeValidator(pt ParentType) error {
	switch pt {
	case ParentTypeWorkflow, ParentTypeActivity, ParentTypeSaga, ParentTypeSideEffect:
		return nil
	default:
		return fmt.Errorf("hierarchy: invalid enum value for parentType field: %q", pt)
	}
}

// OrderOption defines the ordering options for the Hierarchy queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByRunID orders the results by the run_id field.
func ByRunID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRunID, opts...).ToFunc()
}

// ByParentEntityID orders the results by the parent_entity_id field.
func ByParentEntityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParentEntityID, opts...).ToFunc()
}

// ByChildEntityID orders the results by the child_entity_id field.
func ByChildEntityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChildEntityID, opts...).ToFunc()
}

// ByParentExecutionID orders the results by the parent_execution_id field.
func ByParentExecutionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParentExecutionID, opts...).ToFunc()
}

// ByChildExecutionID orders the results by the child_execution_id field.
func ByChildExecutionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChildExecutionID, opts...).ToFunc()
}

// ByParentStepID orders the results by the parent_step_id field.
func ByParentStepID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParentStepID, opts...).ToFunc()
}

// ByChildStepID orders the results by the child_step_id field.
func ByChildStepID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChildStepID, opts...).ToFunc()
}

// ByChildType orders the results by the childType field.
func ByChildType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChildType, opts...).ToFunc()
}

// ByParentType orders the results by the parentType field.
func ByParentType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParentType, opts...).ToFunc()
}

// ByRunField orders the results by run field.
func ByRunField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRunStep(), sql.OrderByField(field, opts...))
	}
}

// ByParentEntityField orders the results by parent_entity field.
func ByParentEntityField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newParentEntityStep(), sql.OrderByField(field, opts...))
	}
}

// ByChildEntityField orders the results by child_entity field.
func ByChildEntityField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newChildEntityStep(), sql.OrderByField(field, opts...))
	}
}
func newRunStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RunInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, RunTable, RunColumn),
	)
}
func newParentEntityStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ParentEntityInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ParentEntityTable, ParentEntityColumn),
	)
}
func newChildEntityStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ChildEntityInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ChildEntityTable, ChildEntityColumn),
	)
}
