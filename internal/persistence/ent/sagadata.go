// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/entity"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/sagadata"
)

// SagaData is the model entity for the SagaData schema.
type SagaData struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Compensating holds the value of the "compensating" field.
	Compensating bool `json:"compensating,omitempty"`
	// CompensationData holds the value of the "compensation_data" field.
	CompensationData [][]uint8 `json:"compensation_data,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SagaDataQuery when eager-loading is set.
	Edges            SagaDataEdges `json:"edges"`
	entity_saga_data *int
	selectValues     sql.SelectValues
}

// SagaDataEdges holds the relations/edges for other nodes in the graph.
type SagaDataEdges struct {
	// Entity holds the value of the entity edge.
	Entity *Entity `json:"entity,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EntityOrErr returns the Entity value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SagaDataEdges) EntityOrErr() (*Entity, error) {
	if e.Entity != nil {
		return e.Entity, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: entity.Label}
	}
	return nil, &NotLoadedError{edge: "entity"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SagaData) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sagadata.FieldCompensationData:
			values[i] = new([]byte)
		case sagadata.FieldCompensating:
			values[i] = new(sql.NullBool)
		case sagadata.FieldID:
			values[i] = new(sql.NullInt64)
		case sagadata.ForeignKeys[0]: // entity_saga_data
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SagaData fields.
func (sd *SagaData) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sagadata.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sd.ID = int(value.Int64)
		case sagadata.FieldCompensating:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field compensating", values[i])
			} else if value.Valid {
				sd.Compensating = value.Bool
			}
		case sagadata.FieldCompensationData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field compensation_data", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &sd.CompensationData); err != nil {
					return fmt.Errorf("unmarshal field compensation_data: %w", err)
				}
			}
		case sagadata.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field entity_saga_data", value)
			} else if value.Valid {
				sd.entity_saga_data = new(int)
				*sd.entity_saga_data = int(value.Int64)
			}
		default:
			sd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SagaData.
// This includes values selected through modifiers, order, etc.
func (sd *SagaData) Value(name string) (ent.Value, error) {
	return sd.selectValues.Get(name)
}

// QueryEntity queries the "entity" edge of the SagaData entity.
func (sd *SagaData) QueryEntity() *EntityQuery {
	return NewSagaDataClient(sd.config).QueryEntity(sd)
}

// Update returns a builder for updating this SagaData.
// Note that you need to call SagaData.Unwrap() before calling this method if this SagaData
// was returned from a transaction, and the transaction was committed or rolled back.
func (sd *SagaData) Update() *SagaDataUpdateOne {
	return NewSagaDataClient(sd.config).UpdateOne(sd)
}

// Unwrap unwraps the SagaData entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sd *SagaData) Unwrap() *SagaData {
	_tx, ok := sd.config.driver.(*txDriver)
	if !ok {
		panic("ent: SagaData is not a transactional entity")
	}
	sd.config.driver = _tx.drv
	return sd
}

// String implements the fmt.Stringer.
func (sd *SagaData) String() string {
	var builder strings.Builder
	builder.WriteString("SagaData(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sd.ID))
	builder.WriteString("compensating=")
	builder.WriteString(fmt.Sprintf("%v", sd.Compensating))
	builder.WriteString(", ")
	builder.WriteString("compensation_data=")
	builder.WriteString(fmt.Sprintf("%v", sd.CompensationData))
	builder.WriteByte(')')
	return builder.String()
}

// SagaDataSlice is a parsable slice of SagaData.
type SagaDataSlice []*SagaData
