// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/entity"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/workflowdata"
)

// WorkflowDataCreate is the builder for creating a WorkflowData entity.
type WorkflowDataCreate struct {
	config
	mutation *WorkflowDataMutation
	hooks    []Hook
}

// SetDuration sets the "duration" field.
func (wdc *WorkflowDataCreate) SetDuration(s string) *WorkflowDataCreate {
	wdc.mutation.SetDuration(s)
	return wdc
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (wdc *WorkflowDataCreate) SetNillableDuration(s *string) *WorkflowDataCreate {
	if s != nil {
		wdc.SetDuration(*s)
	}
	return wdc
}

// SetPaused sets the "paused" field.
func (wdc *WorkflowDataCreate) SetPaused(b bool) *WorkflowDataCreate {
	wdc.mutation.SetPaused(b)
	return wdc
}

// SetNillablePaused sets the "paused" field if the given value is not nil.
func (wdc *WorkflowDataCreate) SetNillablePaused(b *bool) *WorkflowDataCreate {
	if b != nil {
		wdc.SetPaused(*b)
	}
	return wdc
}

// SetResumable sets the "resumable" field.
func (wdc *WorkflowDataCreate) SetResumable(b bool) *WorkflowDataCreate {
	wdc.mutation.SetResumable(b)
	return wdc
}

// SetNillableResumable sets the "resumable" field if the given value is not nil.
func (wdc *WorkflowDataCreate) SetNillableResumable(b *bool) *WorkflowDataCreate {
	if b != nil {
		wdc.SetResumable(*b)
	}
	return wdc
}

// SetInput sets the "input" field.
func (wdc *WorkflowDataCreate) SetInput(u [][]uint8) *WorkflowDataCreate {
	wdc.mutation.SetInput(u)
	return wdc
}

// SetAttempt sets the "attempt" field.
func (wdc *WorkflowDataCreate) SetAttempt(i int) *WorkflowDataCreate {
	wdc.mutation.SetAttempt(i)
	return wdc
}

// SetNillableAttempt sets the "attempt" field if the given value is not nil.
func (wdc *WorkflowDataCreate) SetNillableAttempt(i *int) *WorkflowDataCreate {
	if i != nil {
		wdc.SetAttempt(*i)
	}
	return wdc
}

// SetEntityID sets the "entity" edge to the Entity entity by ID.
func (wdc *WorkflowDataCreate) SetEntityID(id int) *WorkflowDataCreate {
	wdc.mutation.SetEntityID(id)
	return wdc
}

// SetEntity sets the "entity" edge to the Entity entity.
func (wdc *WorkflowDataCreate) SetEntity(e *Entity) *WorkflowDataCreate {
	return wdc.SetEntityID(e.ID)
}

// Mutation returns the WorkflowDataMutation object of the builder.
func (wdc *WorkflowDataCreate) Mutation() *WorkflowDataMutation {
	return wdc.mutation
}

// Save creates the WorkflowData in the database.
func (wdc *WorkflowDataCreate) Save(ctx context.Context) (*WorkflowData, error) {
	wdc.defaults()
	return withHooks(ctx, wdc.sqlSave, wdc.mutation, wdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wdc *WorkflowDataCreate) SaveX(ctx context.Context) *WorkflowData {
	v, err := wdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wdc *WorkflowDataCreate) Exec(ctx context.Context) error {
	_, err := wdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wdc *WorkflowDataCreate) ExecX(ctx context.Context) {
	if err := wdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wdc *WorkflowDataCreate) defaults() {
	if _, ok := wdc.mutation.Paused(); !ok {
		v := workflowdata.DefaultPaused
		wdc.mutation.SetPaused(v)
	}
	if _, ok := wdc.mutation.Resumable(); !ok {
		v := workflowdata.DefaultResumable
		wdc.mutation.SetResumable(v)
	}
	if _, ok := wdc.mutation.Attempt(); !ok {
		v := workflowdata.DefaultAttempt
		wdc.mutation.SetAttempt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wdc *WorkflowDataCreate) check() error {
	if _, ok := wdc.mutation.Paused(); !ok {
		return &ValidationError{Name: "paused", err: errors.New(`ent: missing required field "WorkflowData.paused"`)}
	}
	if _, ok := wdc.mutation.Resumable(); !ok {
		return &ValidationError{Name: "resumable", err: errors.New(`ent: missing required field "WorkflowData.resumable"`)}
	}
	if _, ok := wdc.mutation.Attempt(); !ok {
		return &ValidationError{Name: "attempt", err: errors.New(`ent: missing required field "WorkflowData.attempt"`)}
	}
	if len(wdc.mutation.EntityIDs()) == 0 {
		return &ValidationError{Name: "entity", err: errors.New(`ent: missing required edge "WorkflowData.entity"`)}
	}
	return nil
}

func (wdc *WorkflowDataCreate) sqlSave(ctx context.Context) (*WorkflowData, error) {
	if err := wdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	wdc.mutation.id = &_node.ID
	wdc.mutation.done = true
	return _node, nil
}

func (wdc *WorkflowDataCreate) createSpec() (*WorkflowData, *sqlgraph.CreateSpec) {
	var (
		_node = &WorkflowData{config: wdc.config}
		_spec = sqlgraph.NewCreateSpec(workflowdata.Table, sqlgraph.NewFieldSpec(workflowdata.FieldID, field.TypeInt))
	)
	if value, ok := wdc.mutation.Duration(); ok {
		_spec.SetField(workflowdata.FieldDuration, field.TypeString, value)
		_node.Duration = value
	}
	if value, ok := wdc.mutation.Paused(); ok {
		_spec.SetField(workflowdata.FieldPaused, field.TypeBool, value)
		_node.Paused = value
	}
	if value, ok := wdc.mutation.Resumable(); ok {
		_spec.SetField(workflowdata.FieldResumable, field.TypeBool, value)
		_node.Resumable = value
	}
	if value, ok := wdc.mutation.Input(); ok {
		_spec.SetField(workflowdata.FieldInput, field.TypeJSON, value)
		_node.Input = value
	}
	if value, ok := wdc.mutation.Attempt(); ok {
		_spec.SetField(workflowdata.FieldAttempt, field.TypeInt, value)
		_node.Attempt = value
	}
	if nodes := wdc.mutation.EntityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   workflowdata.EntityTable,
			Columns: []string{workflowdata.EntityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.entity_workflow_data = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// WorkflowDataCreateBulk is the builder for creating many WorkflowData entities in bulk.
type WorkflowDataCreateBulk struct {
	config
	err      error
	builders []*WorkflowDataCreate
}

// Save creates the WorkflowData entities in the database.
func (wdcb *WorkflowDataCreateBulk) Save(ctx context.Context) ([]*WorkflowData, error) {
	if wdcb.err != nil {
		return nil, wdcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(wdcb.builders))
	nodes := make([]*WorkflowData, len(wdcb.builders))
	mutators := make([]Mutator, len(wdcb.builders))
	for i := range wdcb.builders {
		func(i int, root context.Context) {
			builder := wdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WorkflowDataMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wdcb *WorkflowDataCreateBulk) SaveX(ctx context.Context) []*WorkflowData {
	v, err := wdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wdcb *WorkflowDataCreateBulk) Exec(ctx context.Context) error {
	_, err := wdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wdcb *WorkflowDataCreateBulk) ExecX(ctx context.Context) {
	if err := wdcb.Exec(ctx); err != nil {
		panic(err)
	}
}
