// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/activityexecution"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/activityexecutiondata"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/execution"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/predicate"
)

// ActivityExecutionUpdate is the builder for updating ActivityExecution entities.
type ActivityExecutionUpdate struct {
	config
	hooks    []Hook
	mutation *ActivityExecutionMutation
}

// Where appends a list predicates to the ActivityExecutionUpdate builder.
func (aeu *ActivityExecutionUpdate) Where(ps ...predicate.ActivityExecution) *ActivityExecutionUpdate {
	aeu.mutation.Where(ps...)
	return aeu
}

// SetAttempt sets the "attempt" field.
func (aeu *ActivityExecutionUpdate) SetAttempt(i int) *ActivityExecutionUpdate {
	aeu.mutation.ResetAttempt()
	aeu.mutation.SetAttempt(i)
	return aeu
}

// SetNillableAttempt sets the "attempt" field if the given value is not nil.
func (aeu *ActivityExecutionUpdate) SetNillableAttempt(i *int) *ActivityExecutionUpdate {
	if i != nil {
		aeu.SetAttempt(*i)
	}
	return aeu
}

// AddAttempt adds i to the "attempt" field.
func (aeu *ActivityExecutionUpdate) AddAttempt(i int) *ActivityExecutionUpdate {
	aeu.mutation.AddAttempt(i)
	return aeu
}

// SetInput sets the "input" field.
func (aeu *ActivityExecutionUpdate) SetInput(u [][]uint8) *ActivityExecutionUpdate {
	aeu.mutation.SetInput(u)
	return aeu
}

// AppendInput appends u to the "input" field.
func (aeu *ActivityExecutionUpdate) AppendInput(u [][]uint8) *ActivityExecutionUpdate {
	aeu.mutation.AppendInput(u)
	return aeu
}

// ClearInput clears the value of the "input" field.
func (aeu *ActivityExecutionUpdate) ClearInput() *ActivityExecutionUpdate {
	aeu.mutation.ClearInput()
	return aeu
}

// SetExecutionID sets the "execution" edge to the Execution entity by ID.
func (aeu *ActivityExecutionUpdate) SetExecutionID(id int) *ActivityExecutionUpdate {
	aeu.mutation.SetExecutionID(id)
	return aeu
}

// SetExecution sets the "execution" edge to the Execution entity.
func (aeu *ActivityExecutionUpdate) SetExecution(e *Execution) *ActivityExecutionUpdate {
	return aeu.SetExecutionID(e.ID)
}

// SetExecutionDataID sets the "execution_data" edge to the ActivityExecutionData entity by ID.
func (aeu *ActivityExecutionUpdate) SetExecutionDataID(id int) *ActivityExecutionUpdate {
	aeu.mutation.SetExecutionDataID(id)
	return aeu
}

// SetNillableExecutionDataID sets the "execution_data" edge to the ActivityExecutionData entity by ID if the given value is not nil.
func (aeu *ActivityExecutionUpdate) SetNillableExecutionDataID(id *int) *ActivityExecutionUpdate {
	if id != nil {
		aeu = aeu.SetExecutionDataID(*id)
	}
	return aeu
}

// SetExecutionData sets the "execution_data" edge to the ActivityExecutionData entity.
func (aeu *ActivityExecutionUpdate) SetExecutionData(a *ActivityExecutionData) *ActivityExecutionUpdate {
	return aeu.SetExecutionDataID(a.ID)
}

// Mutation returns the ActivityExecutionMutation object of the builder.
func (aeu *ActivityExecutionUpdate) Mutation() *ActivityExecutionMutation {
	return aeu.mutation
}

// ClearExecution clears the "execution" edge to the Execution entity.
func (aeu *ActivityExecutionUpdate) ClearExecution() *ActivityExecutionUpdate {
	aeu.mutation.ClearExecution()
	return aeu
}

// ClearExecutionData clears the "execution_data" edge to the ActivityExecutionData entity.
func (aeu *ActivityExecutionUpdate) ClearExecutionData() *ActivityExecutionUpdate {
	aeu.mutation.ClearExecutionData()
	return aeu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aeu *ActivityExecutionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, aeu.sqlSave, aeu.mutation, aeu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aeu *ActivityExecutionUpdate) SaveX(ctx context.Context) int {
	affected, err := aeu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aeu *ActivityExecutionUpdate) Exec(ctx context.Context) error {
	_, err := aeu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aeu *ActivityExecutionUpdate) ExecX(ctx context.Context) {
	if err := aeu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aeu *ActivityExecutionUpdate) check() error {
	if aeu.mutation.ExecutionCleared() && len(aeu.mutation.ExecutionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ActivityExecution.execution"`)
	}
	return nil
}

func (aeu *ActivityExecutionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := aeu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(activityexecution.Table, activityexecution.Columns, sqlgraph.NewFieldSpec(activityexecution.FieldID, field.TypeInt))
	if ps := aeu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aeu.mutation.Attempt(); ok {
		_spec.SetField(activityexecution.FieldAttempt, field.TypeInt, value)
	}
	if value, ok := aeu.mutation.AddedAttempt(); ok {
		_spec.AddField(activityexecution.FieldAttempt, field.TypeInt, value)
	}
	if value, ok := aeu.mutation.Input(); ok {
		_spec.SetField(activityexecution.FieldInput, field.TypeJSON, value)
	}
	if value, ok := aeu.mutation.AppendedInput(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, activityexecution.FieldInput, value)
		})
	}
	if aeu.mutation.InputCleared() {
		_spec.ClearField(activityexecution.FieldInput, field.TypeJSON)
	}
	if aeu.mutation.ExecutionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   activityexecution.ExecutionTable,
			Columns: []string{activityexecution.ExecutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(execution.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aeu.mutation.ExecutionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   activityexecution.ExecutionTable,
			Columns: []string{activityexecution.ExecutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(execution.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aeu.mutation.ExecutionDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   activityexecution.ExecutionDataTable,
			Columns: []string{activityexecution.ExecutionDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activityexecutiondata.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aeu.mutation.ExecutionDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   activityexecution.ExecutionDataTable,
			Columns: []string{activityexecution.ExecutionDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activityexecutiondata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aeu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{activityexecution.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	aeu.mutation.done = true
	return n, nil
}

// ActivityExecutionUpdateOne is the builder for updating a single ActivityExecution entity.
type ActivityExecutionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ActivityExecutionMutation
}

// SetAttempt sets the "attempt" field.
func (aeuo *ActivityExecutionUpdateOne) SetAttempt(i int) *ActivityExecutionUpdateOne {
	aeuo.mutation.ResetAttempt()
	aeuo.mutation.SetAttempt(i)
	return aeuo
}

// SetNillableAttempt sets the "attempt" field if the given value is not nil.
func (aeuo *ActivityExecutionUpdateOne) SetNillableAttempt(i *int) *ActivityExecutionUpdateOne {
	if i != nil {
		aeuo.SetAttempt(*i)
	}
	return aeuo
}

// AddAttempt adds i to the "attempt" field.
func (aeuo *ActivityExecutionUpdateOne) AddAttempt(i int) *ActivityExecutionUpdateOne {
	aeuo.mutation.AddAttempt(i)
	return aeuo
}

// SetInput sets the "input" field.
func (aeuo *ActivityExecutionUpdateOne) SetInput(u [][]uint8) *ActivityExecutionUpdateOne {
	aeuo.mutation.SetInput(u)
	return aeuo
}

// AppendInput appends u to the "input" field.
func (aeuo *ActivityExecutionUpdateOne) AppendInput(u [][]uint8) *ActivityExecutionUpdateOne {
	aeuo.mutation.AppendInput(u)
	return aeuo
}

// ClearInput clears the value of the "input" field.
func (aeuo *ActivityExecutionUpdateOne) ClearInput() *ActivityExecutionUpdateOne {
	aeuo.mutation.ClearInput()
	return aeuo
}

// SetExecutionID sets the "execution" edge to the Execution entity by ID.
func (aeuo *ActivityExecutionUpdateOne) SetExecutionID(id int) *ActivityExecutionUpdateOne {
	aeuo.mutation.SetExecutionID(id)
	return aeuo
}

// SetExecution sets the "execution" edge to the Execution entity.
func (aeuo *ActivityExecutionUpdateOne) SetExecution(e *Execution) *ActivityExecutionUpdateOne {
	return aeuo.SetExecutionID(e.ID)
}

// SetExecutionDataID sets the "execution_data" edge to the ActivityExecutionData entity by ID.
func (aeuo *ActivityExecutionUpdateOne) SetExecutionDataID(id int) *ActivityExecutionUpdateOne {
	aeuo.mutation.SetExecutionDataID(id)
	return aeuo
}

// SetNillableExecutionDataID sets the "execution_data" edge to the ActivityExecutionData entity by ID if the given value is not nil.
func (aeuo *ActivityExecutionUpdateOne) SetNillableExecutionDataID(id *int) *ActivityExecutionUpdateOne {
	if id != nil {
		aeuo = aeuo.SetExecutionDataID(*id)
	}
	return aeuo
}

// SetExecutionData sets the "execution_data" edge to the ActivityExecutionData entity.
func (aeuo *ActivityExecutionUpdateOne) SetExecutionData(a *ActivityExecutionData) *ActivityExecutionUpdateOne {
	return aeuo.SetExecutionDataID(a.ID)
}

// Mutation returns the ActivityExecutionMutation object of the builder.
func (aeuo *ActivityExecutionUpdateOne) Mutation() *ActivityExecutionMutation {
	return aeuo.mutation
}

// ClearExecution clears the "execution" edge to the Execution entity.
func (aeuo *ActivityExecutionUpdateOne) ClearExecution() *ActivityExecutionUpdateOne {
	aeuo.mutation.ClearExecution()
	return aeuo
}

// ClearExecutionData clears the "execution_data" edge to the ActivityExecutionData entity.
func (aeuo *ActivityExecutionUpdateOne) ClearExecutionData() *ActivityExecutionUpdateOne {
	aeuo.mutation.ClearExecutionData()
	return aeuo
}

// Where appends a list predicates to the ActivityExecutionUpdate builder.
func (aeuo *ActivityExecutionUpdateOne) Where(ps ...predicate.ActivityExecution) *ActivityExecutionUpdateOne {
	aeuo.mutation.Where(ps...)
	return aeuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aeuo *ActivityExecutionUpdateOne) Select(field string, fields ...string) *ActivityExecutionUpdateOne {
	aeuo.fields = append([]string{field}, fields...)
	return aeuo
}

// Save executes the query and returns the updated ActivityExecution entity.
func (aeuo *ActivityExecutionUpdateOne) Save(ctx context.Context) (*ActivityExecution, error) {
	return withHooks(ctx, aeuo.sqlSave, aeuo.mutation, aeuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aeuo *ActivityExecutionUpdateOne) SaveX(ctx context.Context) *ActivityExecution {
	node, err := aeuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aeuo *ActivityExecutionUpdateOne) Exec(ctx context.Context) error {
	_, err := aeuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aeuo *ActivityExecutionUpdateOne) ExecX(ctx context.Context) {
	if err := aeuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aeuo *ActivityExecutionUpdateOne) check() error {
	if aeuo.mutation.ExecutionCleared() && len(aeuo.mutation.ExecutionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ActivityExecution.execution"`)
	}
	return nil
}

func (aeuo *ActivityExecutionUpdateOne) sqlSave(ctx context.Context) (_node *ActivityExecution, err error) {
	if err := aeuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(activityexecution.Table, activityexecution.Columns, sqlgraph.NewFieldSpec(activityexecution.FieldID, field.TypeInt))
	id, ok := aeuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ActivityExecution.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aeuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, activityexecution.FieldID)
		for _, f := range fields {
			if !activityexecution.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != activityexecution.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aeuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aeuo.mutation.Attempt(); ok {
		_spec.SetField(activityexecution.FieldAttempt, field.TypeInt, value)
	}
	if value, ok := aeuo.mutation.AddedAttempt(); ok {
		_spec.AddField(activityexecution.FieldAttempt, field.TypeInt, value)
	}
	if value, ok := aeuo.mutation.Input(); ok {
		_spec.SetField(activityexecution.FieldInput, field.TypeJSON, value)
	}
	if value, ok := aeuo.mutation.AppendedInput(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, activityexecution.FieldInput, value)
		})
	}
	if aeuo.mutation.InputCleared() {
		_spec.ClearField(activityexecution.FieldInput, field.TypeJSON)
	}
	if aeuo.mutation.ExecutionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   activityexecution.ExecutionTable,
			Columns: []string{activityexecution.ExecutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(execution.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aeuo.mutation.ExecutionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   activityexecution.ExecutionTable,
			Columns: []string{activityexecution.ExecutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(execution.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aeuo.mutation.ExecutionDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   activityexecution.ExecutionDataTable,
			Columns: []string{activityexecution.ExecutionDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activityexecutiondata.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aeuo.mutation.ExecutionDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   activityexecution.ExecutionDataTable,
			Columns: []string{activityexecution.ExecutionDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activityexecutiondata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ActivityExecution{config: aeuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aeuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{activityexecution.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aeuo.mutation.done = true
	return _node, nil
}
