// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/entity"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/predicate"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/version"
)

// VersionUpdate is the builder for updating Version entities.
type VersionUpdate struct {
	config
	hooks    []Hook
	mutation *VersionMutation
}

// Where appends a list predicates to the VersionUpdate builder.
func (vu *VersionUpdate) Where(ps ...predicate.Version) *VersionUpdate {
	vu.mutation.Where(ps...)
	return vu
}

// SetVersion sets the "version" field.
func (vu *VersionUpdate) SetVersion(i int) *VersionUpdate {
	vu.mutation.ResetVersion()
	vu.mutation.SetVersion(i)
	return vu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (vu *VersionUpdate) SetNillableVersion(i *int) *VersionUpdate {
	if i != nil {
		vu.SetVersion(*i)
	}
	return vu
}

// AddVersion adds i to the "version" field.
func (vu *VersionUpdate) AddVersion(i int) *VersionUpdate {
	vu.mutation.AddVersion(i)
	return vu
}

// SetData sets the "data" field.
func (vu *VersionUpdate) SetData(m map[string]interface{}) *VersionUpdate {
	vu.mutation.SetData(m)
	return vu
}

// SetEntityID sets the "entity" edge to the Entity entity by ID.
func (vu *VersionUpdate) SetEntityID(id int) *VersionUpdate {
	vu.mutation.SetEntityID(id)
	return vu
}

// SetEntity sets the "entity" edge to the Entity entity.
func (vu *VersionUpdate) SetEntity(e *Entity) *VersionUpdate {
	return vu.SetEntityID(e.ID)
}

// Mutation returns the VersionMutation object of the builder.
func (vu *VersionUpdate) Mutation() *VersionMutation {
	return vu.mutation
}

// ClearEntity clears the "entity" edge to the Entity entity.
func (vu *VersionUpdate) ClearEntity() *VersionUpdate {
	vu.mutation.ClearEntity()
	return vu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vu *VersionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, vu.sqlSave, vu.mutation, vu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vu *VersionUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *VersionUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *VersionUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vu *VersionUpdate) check() error {
	if v, ok := vu.mutation.Version(); ok {
		if err := version.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`ent: validator failed for field "Version.version": %w`, err)}
		}
	}
	if vu.mutation.EntityCleared() && len(vu.mutation.EntityIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Version.entity"`)
	}
	return nil
}

func (vu *VersionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := vu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(version.Table, version.Columns, sqlgraph.NewFieldSpec(version.FieldID, field.TypeInt))
	if ps := vu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vu.mutation.Version(); ok {
		_spec.SetField(version.FieldVersion, field.TypeInt, value)
	}
	if value, ok := vu.mutation.AddedVersion(); ok {
		_spec.AddField(version.FieldVersion, field.TypeInt, value)
	}
	if value, ok := vu.mutation.Data(); ok {
		_spec.SetField(version.FieldData, field.TypeJSON, value)
	}
	if vu.mutation.EntityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   version.EntityTable,
			Columns: []string{version.EntityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.EntityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   version.EntityTable,
			Columns: []string{version.EntityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{version.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vu.mutation.done = true
	return n, nil
}

// VersionUpdateOne is the builder for updating a single Version entity.
type VersionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VersionMutation
}

// SetVersion sets the "version" field.
func (vuo *VersionUpdateOne) SetVersion(i int) *VersionUpdateOne {
	vuo.mutation.ResetVersion()
	vuo.mutation.SetVersion(i)
	return vuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (vuo *VersionUpdateOne) SetNillableVersion(i *int) *VersionUpdateOne {
	if i != nil {
		vuo.SetVersion(*i)
	}
	return vuo
}

// AddVersion adds i to the "version" field.
func (vuo *VersionUpdateOne) AddVersion(i int) *VersionUpdateOne {
	vuo.mutation.AddVersion(i)
	return vuo
}

// SetData sets the "data" field.
func (vuo *VersionUpdateOne) SetData(m map[string]interface{}) *VersionUpdateOne {
	vuo.mutation.SetData(m)
	return vuo
}

// SetEntityID sets the "entity" edge to the Entity entity by ID.
func (vuo *VersionUpdateOne) SetEntityID(id int) *VersionUpdateOne {
	vuo.mutation.SetEntityID(id)
	return vuo
}

// SetEntity sets the "entity" edge to the Entity entity.
func (vuo *VersionUpdateOne) SetEntity(e *Entity) *VersionUpdateOne {
	return vuo.SetEntityID(e.ID)
}

// Mutation returns the VersionMutation object of the builder.
func (vuo *VersionUpdateOne) Mutation() *VersionMutation {
	return vuo.mutation
}

// ClearEntity clears the "entity" edge to the Entity entity.
func (vuo *VersionUpdateOne) ClearEntity() *VersionUpdateOne {
	vuo.mutation.ClearEntity()
	return vuo
}

// Where appends a list predicates to the VersionUpdate builder.
func (vuo *VersionUpdateOne) Where(ps ...predicate.Version) *VersionUpdateOne {
	vuo.mutation.Where(ps...)
	return vuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vuo *VersionUpdateOne) Select(field string, fields ...string) *VersionUpdateOne {
	vuo.fields = append([]string{field}, fields...)
	return vuo
}

// Save executes the query and returns the updated Version entity.
func (vuo *VersionUpdateOne) Save(ctx context.Context) (*Version, error) {
	return withHooks(ctx, vuo.sqlSave, vuo.mutation, vuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *VersionUpdateOne) SaveX(ctx context.Context) *Version {
	node, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuo *VersionUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *VersionUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vuo *VersionUpdateOne) check() error {
	if v, ok := vuo.mutation.Version(); ok {
		if err := version.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`ent: validator failed for field "Version.version": %w`, err)}
		}
	}
	if vuo.mutation.EntityCleared() && len(vuo.mutation.EntityIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Version.entity"`)
	}
	return nil
}

func (vuo *VersionUpdateOne) sqlSave(ctx context.Context) (_node *Version, err error) {
	if err := vuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(version.Table, version.Columns, sqlgraph.NewFieldSpec(version.FieldID, field.TypeInt))
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Version.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, version.FieldID)
		for _, f := range fields {
			if !version.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != version.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vuo.mutation.Version(); ok {
		_spec.SetField(version.FieldVersion, field.TypeInt, value)
	}
	if value, ok := vuo.mutation.AddedVersion(); ok {
		_spec.AddField(version.FieldVersion, field.TypeInt, value)
	}
	if value, ok := vuo.mutation.Data(); ok {
		_spec.SetField(version.FieldData, field.TypeJSON, value)
	}
	if vuo.mutation.EntityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   version.EntityTable,
			Columns: []string{version.EntityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.EntityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   version.EntityTable,
			Columns: []string{version.EntityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Version{config: vuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{version.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vuo.mutation.done = true
	return _node, nil
}
