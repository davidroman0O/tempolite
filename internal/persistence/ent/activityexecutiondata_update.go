// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/activityexecution"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/activityexecutiondata"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/predicate"
)

// ActivityExecutionDataUpdate is the builder for updating ActivityExecutionData entities.
type ActivityExecutionDataUpdate struct {
	config
	hooks    []Hook
	mutation *ActivityExecutionDataMutation
}

// Where appends a list predicates to the ActivityExecutionDataUpdate builder.
func (aedu *ActivityExecutionDataUpdate) Where(ps ...predicate.ActivityExecutionData) *ActivityExecutionDataUpdate {
	aedu.mutation.Where(ps...)
	return aedu
}

// SetHeartbeats sets the "heartbeats" field.
func (aedu *ActivityExecutionDataUpdate) SetHeartbeats(u [][]uint8) *ActivityExecutionDataUpdate {
	aedu.mutation.SetHeartbeats(u)
	return aedu
}

// AppendHeartbeats appends u to the "heartbeats" field.
func (aedu *ActivityExecutionDataUpdate) AppendHeartbeats(u [][]uint8) *ActivityExecutionDataUpdate {
	aedu.mutation.AppendHeartbeats(u)
	return aedu
}

// ClearHeartbeats clears the value of the "heartbeats" field.
func (aedu *ActivityExecutionDataUpdate) ClearHeartbeats() *ActivityExecutionDataUpdate {
	aedu.mutation.ClearHeartbeats()
	return aedu
}

// SetLastHeartbeat sets the "last_heartbeat" field.
func (aedu *ActivityExecutionDataUpdate) SetLastHeartbeat(t time.Time) *ActivityExecutionDataUpdate {
	aedu.mutation.SetLastHeartbeat(t)
	return aedu
}

// SetNillableLastHeartbeat sets the "last_heartbeat" field if the given value is not nil.
func (aedu *ActivityExecutionDataUpdate) SetNillableLastHeartbeat(t *time.Time) *ActivityExecutionDataUpdate {
	if t != nil {
		aedu.SetLastHeartbeat(*t)
	}
	return aedu
}

// ClearLastHeartbeat clears the value of the "last_heartbeat" field.
func (aedu *ActivityExecutionDataUpdate) ClearLastHeartbeat() *ActivityExecutionDataUpdate {
	aedu.mutation.ClearLastHeartbeat()
	return aedu
}

// SetProgress sets the "progress" field.
func (aedu *ActivityExecutionDataUpdate) SetProgress(u []uint8) *ActivityExecutionDataUpdate {
	aedu.mutation.SetProgress(u)
	return aedu
}

// AppendProgress appends u to the "progress" field.
func (aedu *ActivityExecutionDataUpdate) AppendProgress(u []uint8) *ActivityExecutionDataUpdate {
	aedu.mutation.AppendProgress(u)
	return aedu
}

// ClearProgress clears the value of the "progress" field.
func (aedu *ActivityExecutionDataUpdate) ClearProgress() *ActivityExecutionDataUpdate {
	aedu.mutation.ClearProgress()
	return aedu
}

// SetExecutionDetails sets the "execution_details" field.
func (aedu *ActivityExecutionDataUpdate) SetExecutionDetails(u []uint8) *ActivityExecutionDataUpdate {
	aedu.mutation.SetExecutionDetails(u)
	return aedu
}

// AppendExecutionDetails appends u to the "execution_details" field.
func (aedu *ActivityExecutionDataUpdate) AppendExecutionDetails(u []uint8) *ActivityExecutionDataUpdate {
	aedu.mutation.AppendExecutionDetails(u)
	return aedu
}

// ClearExecutionDetails clears the value of the "execution_details" field.
func (aedu *ActivityExecutionDataUpdate) ClearExecutionDetails() *ActivityExecutionDataUpdate {
	aedu.mutation.ClearExecutionDetails()
	return aedu
}

// SetActivityExecutionID sets the "activity_execution" edge to the ActivityExecution entity by ID.
func (aedu *ActivityExecutionDataUpdate) SetActivityExecutionID(id int) *ActivityExecutionDataUpdate {
	aedu.mutation.SetActivityExecutionID(id)
	return aedu
}

// SetActivityExecution sets the "activity_execution" edge to the ActivityExecution entity.
func (aedu *ActivityExecutionDataUpdate) SetActivityExecution(a *ActivityExecution) *ActivityExecutionDataUpdate {
	return aedu.SetActivityExecutionID(a.ID)
}

// Mutation returns the ActivityExecutionDataMutation object of the builder.
func (aedu *ActivityExecutionDataUpdate) Mutation() *ActivityExecutionDataMutation {
	return aedu.mutation
}

// ClearActivityExecution clears the "activity_execution" edge to the ActivityExecution entity.
func (aedu *ActivityExecutionDataUpdate) ClearActivityExecution() *ActivityExecutionDataUpdate {
	aedu.mutation.ClearActivityExecution()
	return aedu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aedu *ActivityExecutionDataUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, aedu.sqlSave, aedu.mutation, aedu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aedu *ActivityExecutionDataUpdate) SaveX(ctx context.Context) int {
	affected, err := aedu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aedu *ActivityExecutionDataUpdate) Exec(ctx context.Context) error {
	_, err := aedu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aedu *ActivityExecutionDataUpdate) ExecX(ctx context.Context) {
	if err := aedu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aedu *ActivityExecutionDataUpdate) check() error {
	if aedu.mutation.ActivityExecutionCleared() && len(aedu.mutation.ActivityExecutionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ActivityExecutionData.activity_execution"`)
	}
	return nil
}

func (aedu *ActivityExecutionDataUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := aedu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(activityexecutiondata.Table, activityexecutiondata.Columns, sqlgraph.NewFieldSpec(activityexecutiondata.FieldID, field.TypeInt))
	if ps := aedu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aedu.mutation.Heartbeats(); ok {
		_spec.SetField(activityexecutiondata.FieldHeartbeats, field.TypeJSON, value)
	}
	if value, ok := aedu.mutation.AppendedHeartbeats(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, activityexecutiondata.FieldHeartbeats, value)
		})
	}
	if aedu.mutation.HeartbeatsCleared() {
		_spec.ClearField(activityexecutiondata.FieldHeartbeats, field.TypeJSON)
	}
	if value, ok := aedu.mutation.LastHeartbeat(); ok {
		_spec.SetField(activityexecutiondata.FieldLastHeartbeat, field.TypeTime, value)
	}
	if aedu.mutation.LastHeartbeatCleared() {
		_spec.ClearField(activityexecutiondata.FieldLastHeartbeat, field.TypeTime)
	}
	if value, ok := aedu.mutation.Progress(); ok {
		_spec.SetField(activityexecutiondata.FieldProgress, field.TypeJSON, value)
	}
	if value, ok := aedu.mutation.AppendedProgress(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, activityexecutiondata.FieldProgress, value)
		})
	}
	if aedu.mutation.ProgressCleared() {
		_spec.ClearField(activityexecutiondata.FieldProgress, field.TypeJSON)
	}
	if value, ok := aedu.mutation.ExecutionDetails(); ok {
		_spec.SetField(activityexecutiondata.FieldExecutionDetails, field.TypeJSON, value)
	}
	if value, ok := aedu.mutation.AppendedExecutionDetails(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, activityexecutiondata.FieldExecutionDetails, value)
		})
	}
	if aedu.mutation.ExecutionDetailsCleared() {
		_spec.ClearField(activityexecutiondata.FieldExecutionDetails, field.TypeJSON)
	}
	if aedu.mutation.ActivityExecutionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   activityexecutiondata.ActivityExecutionTable,
			Columns: []string{activityexecutiondata.ActivityExecutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activityexecution.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aedu.mutation.ActivityExecutionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   activityexecutiondata.ActivityExecutionTable,
			Columns: []string{activityexecutiondata.ActivityExecutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activityexecution.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aedu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{activityexecutiondata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	aedu.mutation.done = true
	return n, nil
}

// ActivityExecutionDataUpdateOne is the builder for updating a single ActivityExecutionData entity.
type ActivityExecutionDataUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ActivityExecutionDataMutation
}

// SetHeartbeats sets the "heartbeats" field.
func (aeduo *ActivityExecutionDataUpdateOne) SetHeartbeats(u [][]uint8) *ActivityExecutionDataUpdateOne {
	aeduo.mutation.SetHeartbeats(u)
	return aeduo
}

// AppendHeartbeats appends u to the "heartbeats" field.
func (aeduo *ActivityExecutionDataUpdateOne) AppendHeartbeats(u [][]uint8) *ActivityExecutionDataUpdateOne {
	aeduo.mutation.AppendHeartbeats(u)
	return aeduo
}

// ClearHeartbeats clears the value of the "heartbeats" field.
func (aeduo *ActivityExecutionDataUpdateOne) ClearHeartbeats() *ActivityExecutionDataUpdateOne {
	aeduo.mutation.ClearHeartbeats()
	return aeduo
}

// SetLastHeartbeat sets the "last_heartbeat" field.
func (aeduo *ActivityExecutionDataUpdateOne) SetLastHeartbeat(t time.Time) *ActivityExecutionDataUpdateOne {
	aeduo.mutation.SetLastHeartbeat(t)
	return aeduo
}

// SetNillableLastHeartbeat sets the "last_heartbeat" field if the given value is not nil.
func (aeduo *ActivityExecutionDataUpdateOne) SetNillableLastHeartbeat(t *time.Time) *ActivityExecutionDataUpdateOne {
	if t != nil {
		aeduo.SetLastHeartbeat(*t)
	}
	return aeduo
}

// ClearLastHeartbeat clears the value of the "last_heartbeat" field.
func (aeduo *ActivityExecutionDataUpdateOne) ClearLastHeartbeat() *ActivityExecutionDataUpdateOne {
	aeduo.mutation.ClearLastHeartbeat()
	return aeduo
}

// SetProgress sets the "progress" field.
func (aeduo *ActivityExecutionDataUpdateOne) SetProgress(u []uint8) *ActivityExecutionDataUpdateOne {
	aeduo.mutation.SetProgress(u)
	return aeduo
}

// AppendProgress appends u to the "progress" field.
func (aeduo *ActivityExecutionDataUpdateOne) AppendProgress(u []uint8) *ActivityExecutionDataUpdateOne {
	aeduo.mutation.AppendProgress(u)
	return aeduo
}

// ClearProgress clears the value of the "progress" field.
func (aeduo *ActivityExecutionDataUpdateOne) ClearProgress() *ActivityExecutionDataUpdateOne {
	aeduo.mutation.ClearProgress()
	return aeduo
}

// SetExecutionDetails sets the "execution_details" field.
func (aeduo *ActivityExecutionDataUpdateOne) SetExecutionDetails(u []uint8) *ActivityExecutionDataUpdateOne {
	aeduo.mutation.SetExecutionDetails(u)
	return aeduo
}

// AppendExecutionDetails appends u to the "execution_details" field.
func (aeduo *ActivityExecutionDataUpdateOne) AppendExecutionDetails(u []uint8) *ActivityExecutionDataUpdateOne {
	aeduo.mutation.AppendExecutionDetails(u)
	return aeduo
}

// ClearExecutionDetails clears the value of the "execution_details" field.
func (aeduo *ActivityExecutionDataUpdateOne) ClearExecutionDetails() *ActivityExecutionDataUpdateOne {
	aeduo.mutation.ClearExecutionDetails()
	return aeduo
}

// SetActivityExecutionID sets the "activity_execution" edge to the ActivityExecution entity by ID.
func (aeduo *ActivityExecutionDataUpdateOne) SetActivityExecutionID(id int) *ActivityExecutionDataUpdateOne {
	aeduo.mutation.SetActivityExecutionID(id)
	return aeduo
}

// SetActivityExecution sets the "activity_execution" edge to the ActivityExecution entity.
func (aeduo *ActivityExecutionDataUpdateOne) SetActivityExecution(a *ActivityExecution) *ActivityExecutionDataUpdateOne {
	return aeduo.SetActivityExecutionID(a.ID)
}

// Mutation returns the ActivityExecutionDataMutation object of the builder.
func (aeduo *ActivityExecutionDataUpdateOne) Mutation() *ActivityExecutionDataMutation {
	return aeduo.mutation
}

// ClearActivityExecution clears the "activity_execution" edge to the ActivityExecution entity.
func (aeduo *ActivityExecutionDataUpdateOne) ClearActivityExecution() *ActivityExecutionDataUpdateOne {
	aeduo.mutation.ClearActivityExecution()
	return aeduo
}

// Where appends a list predicates to the ActivityExecutionDataUpdate builder.
func (aeduo *ActivityExecutionDataUpdateOne) Where(ps ...predicate.ActivityExecutionData) *ActivityExecutionDataUpdateOne {
	aeduo.mutation.Where(ps...)
	return aeduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aeduo *ActivityExecutionDataUpdateOne) Select(field string, fields ...string) *ActivityExecutionDataUpdateOne {
	aeduo.fields = append([]string{field}, fields...)
	return aeduo
}

// Save executes the query and returns the updated ActivityExecutionData entity.
func (aeduo *ActivityExecutionDataUpdateOne) Save(ctx context.Context) (*ActivityExecutionData, error) {
	return withHooks(ctx, aeduo.sqlSave, aeduo.mutation, aeduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aeduo *ActivityExecutionDataUpdateOne) SaveX(ctx context.Context) *ActivityExecutionData {
	node, err := aeduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aeduo *ActivityExecutionDataUpdateOne) Exec(ctx context.Context) error {
	_, err := aeduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aeduo *ActivityExecutionDataUpdateOne) ExecX(ctx context.Context) {
	if err := aeduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aeduo *ActivityExecutionDataUpdateOne) check() error {
	if aeduo.mutation.ActivityExecutionCleared() && len(aeduo.mutation.ActivityExecutionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ActivityExecutionData.activity_execution"`)
	}
	return nil
}

func (aeduo *ActivityExecutionDataUpdateOne) sqlSave(ctx context.Context) (_node *ActivityExecutionData, err error) {
	if err := aeduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(activityexecutiondata.Table, activityexecutiondata.Columns, sqlgraph.NewFieldSpec(activityexecutiondata.FieldID, field.TypeInt))
	id, ok := aeduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ActivityExecutionData.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aeduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, activityexecutiondata.FieldID)
		for _, f := range fields {
			if !activityexecutiondata.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != activityexecutiondata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aeduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aeduo.mutation.Heartbeats(); ok {
		_spec.SetField(activityexecutiondata.FieldHeartbeats, field.TypeJSON, value)
	}
	if value, ok := aeduo.mutation.AppendedHeartbeats(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, activityexecutiondata.FieldHeartbeats, value)
		})
	}
	if aeduo.mutation.HeartbeatsCleared() {
		_spec.ClearField(activityexecutiondata.FieldHeartbeats, field.TypeJSON)
	}
	if value, ok := aeduo.mutation.LastHeartbeat(); ok {
		_spec.SetField(activityexecutiondata.FieldLastHeartbeat, field.TypeTime, value)
	}
	if aeduo.mutation.LastHeartbeatCleared() {
		_spec.ClearField(activityexecutiondata.FieldLastHeartbeat, field.TypeTime)
	}
	if value, ok := aeduo.mutation.Progress(); ok {
		_spec.SetField(activityexecutiondata.FieldProgress, field.TypeJSON, value)
	}
	if value, ok := aeduo.mutation.AppendedProgress(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, activityexecutiondata.FieldProgress, value)
		})
	}
	if aeduo.mutation.ProgressCleared() {
		_spec.ClearField(activityexecutiondata.FieldProgress, field.TypeJSON)
	}
	if value, ok := aeduo.mutation.ExecutionDetails(); ok {
		_spec.SetField(activityexecutiondata.FieldExecutionDetails, field.TypeJSON, value)
	}
	if value, ok := aeduo.mutation.AppendedExecutionDetails(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, activityexecutiondata.FieldExecutionDetails, value)
		})
	}
	if aeduo.mutation.ExecutionDetailsCleared() {
		_spec.ClearField(activityexecutiondata.FieldExecutionDetails, field.TypeJSON)
	}
	if aeduo.mutation.ActivityExecutionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   activityexecutiondata.ActivityExecutionTable,
			Columns: []string{activityexecutiondata.ActivityExecutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activityexecution.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aeduo.mutation.ActivityExecutionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   activityexecutiondata.ActivityExecutionTable,
			Columns: []string{activityexecutiondata.ActivityExecutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activityexecution.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ActivityExecutionData{config: aeduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aeduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{activityexecutiondata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aeduo.mutation.done = true
	return _node, nil
}
