// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/activitydata"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/entity"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/execution"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/queue"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/run"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/sagadata"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/sideeffectdata"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/version"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/workflowdata"
)

// EntityCreate is the builder for creating a Entity entity.
type EntityCreate struct {
	config
	mutation *EntityMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (ec *EntityCreate) SetCreatedAt(t time.Time) *EntityCreate {
	ec.mutation.SetCreatedAt(t)
	return ec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ec *EntityCreate) SetNillableCreatedAt(t *time.Time) *EntityCreate {
	if t != nil {
		ec.SetCreatedAt(*t)
	}
	return ec
}

// SetUpdatedAt sets the "updated_at" field.
func (ec *EntityCreate) SetUpdatedAt(t time.Time) *EntityCreate {
	ec.mutation.SetUpdatedAt(t)
	return ec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ec *EntityCreate) SetNillableUpdatedAt(t *time.Time) *EntityCreate {
	if t != nil {
		ec.SetUpdatedAt(*t)
	}
	return ec
}

// SetHandlerName sets the "handler_name" field.
func (ec *EntityCreate) SetHandlerName(s string) *EntityCreate {
	ec.mutation.SetHandlerName(s)
	return ec
}

// SetType sets the "type" field.
func (ec *EntityCreate) SetType(e entity.Type) *EntityCreate {
	ec.mutation.SetType(e)
	return ec
}

// SetStepID sets the "step_id" field.
func (ec *EntityCreate) SetStepID(s string) *EntityCreate {
	ec.mutation.SetStepID(s)
	return ec
}

// SetRunID sets the "run" edge to the Run entity by ID.
func (ec *EntityCreate) SetRunID(id int) *EntityCreate {
	ec.mutation.SetRunID(id)
	return ec
}

// SetRun sets the "run" edge to the Run entity.
func (ec *EntityCreate) SetRun(r *Run) *EntityCreate {
	return ec.SetRunID(r.ID)
}

// AddExecutionIDs adds the "executions" edge to the Execution entity by IDs.
func (ec *EntityCreate) AddExecutionIDs(ids ...int) *EntityCreate {
	ec.mutation.AddExecutionIDs(ids...)
	return ec
}

// AddExecutions adds the "executions" edges to the Execution entity.
func (ec *EntityCreate) AddExecutions(e ...*Execution) *EntityCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ec.AddExecutionIDs(ids...)
}

// AddQueueIDs adds the "queues" edge to the Queue entity by IDs.
func (ec *EntityCreate) AddQueueIDs(ids ...int) *EntityCreate {
	ec.mutation.AddQueueIDs(ids...)
	return ec
}

// AddQueues adds the "queues" edges to the Queue entity.
func (ec *EntityCreate) AddQueues(q ...*Queue) *EntityCreate {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return ec.AddQueueIDs(ids...)
}

// AddVersionIDs adds the "versions" edge to the Version entity by IDs.
func (ec *EntityCreate) AddVersionIDs(ids ...int) *EntityCreate {
	ec.mutation.AddVersionIDs(ids...)
	return ec
}

// AddVersions adds the "versions" edges to the Version entity.
func (ec *EntityCreate) AddVersions(v ...*Version) *EntityCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return ec.AddVersionIDs(ids...)
}

// SetWorkflowDataID sets the "workflow_data" edge to the WorkflowData entity by ID.
func (ec *EntityCreate) SetWorkflowDataID(id int) *EntityCreate {
	ec.mutation.SetWorkflowDataID(id)
	return ec
}

// SetNillableWorkflowDataID sets the "workflow_data" edge to the WorkflowData entity by ID if the given value is not nil.
func (ec *EntityCreate) SetNillableWorkflowDataID(id *int) *EntityCreate {
	if id != nil {
		ec = ec.SetWorkflowDataID(*id)
	}
	return ec
}

// SetWorkflowData sets the "workflow_data" edge to the WorkflowData entity.
func (ec *EntityCreate) SetWorkflowData(w *WorkflowData) *EntityCreate {
	return ec.SetWorkflowDataID(w.ID)
}

// SetActivityDataID sets the "activity_data" edge to the ActivityData entity by ID.
func (ec *EntityCreate) SetActivityDataID(id int) *EntityCreate {
	ec.mutation.SetActivityDataID(id)
	return ec
}

// SetNillableActivityDataID sets the "activity_data" edge to the ActivityData entity by ID if the given value is not nil.
func (ec *EntityCreate) SetNillableActivityDataID(id *int) *EntityCreate {
	if id != nil {
		ec = ec.SetActivityDataID(*id)
	}
	return ec
}

// SetActivityData sets the "activity_data" edge to the ActivityData entity.
func (ec *EntityCreate) SetActivityData(a *ActivityData) *EntityCreate {
	return ec.SetActivityDataID(a.ID)
}

// SetSagaDataID sets the "saga_data" edge to the SagaData entity by ID.
func (ec *EntityCreate) SetSagaDataID(id int) *EntityCreate {
	ec.mutation.SetSagaDataID(id)
	return ec
}

// SetNillableSagaDataID sets the "saga_data" edge to the SagaData entity by ID if the given value is not nil.
func (ec *EntityCreate) SetNillableSagaDataID(id *int) *EntityCreate {
	if id != nil {
		ec = ec.SetSagaDataID(*id)
	}
	return ec
}

// SetSagaData sets the "saga_data" edge to the SagaData entity.
func (ec *EntityCreate) SetSagaData(s *SagaData) *EntityCreate {
	return ec.SetSagaDataID(s.ID)
}

// SetSideEffectDataID sets the "side_effect_data" edge to the SideEffectData entity by ID.
func (ec *EntityCreate) SetSideEffectDataID(id int) *EntityCreate {
	ec.mutation.SetSideEffectDataID(id)
	return ec
}

// SetNillableSideEffectDataID sets the "side_effect_data" edge to the SideEffectData entity by ID if the given value is not nil.
func (ec *EntityCreate) SetNillableSideEffectDataID(id *int) *EntityCreate {
	if id != nil {
		ec = ec.SetSideEffectDataID(*id)
	}
	return ec
}

// SetSideEffectData sets the "side_effect_data" edge to the SideEffectData entity.
func (ec *EntityCreate) SetSideEffectData(s *SideEffectData) *EntityCreate {
	return ec.SetSideEffectDataID(s.ID)
}

// Mutation returns the EntityMutation object of the builder.
func (ec *EntityCreate) Mutation() *EntityMutation {
	return ec.mutation
}

// Save creates the Entity in the database.
func (ec *EntityCreate) Save(ctx context.Context) (*Entity, error) {
	ec.defaults()
	return withHooks(ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EntityCreate) SaveX(ctx context.Context) *Entity {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *EntityCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *EntityCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ec *EntityCreate) defaults() {
	if _, ok := ec.mutation.CreatedAt(); !ok {
		v := entity.DefaultCreatedAt()
		ec.mutation.SetCreatedAt(v)
	}
	if _, ok := ec.mutation.UpdatedAt(); !ok {
		v := entity.DefaultUpdatedAt()
		ec.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *EntityCreate) check() error {
	if _, ok := ec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Entity.created_at"`)}
	}
	if _, ok := ec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Entity.updated_at"`)}
	}
	if _, ok := ec.mutation.HandlerName(); !ok {
		return &ValidationError{Name: "handler_name", err: errors.New(`ent: missing required field "Entity.handler_name"`)}
	}
	if v, ok := ec.mutation.HandlerName(); ok {
		if err := entity.HandlerNameValidator(v); err != nil {
			return &ValidationError{Name: "handler_name", err: fmt.Errorf(`ent: validator failed for field "Entity.handler_name": %w`, err)}
		}
	}
	if _, ok := ec.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Entity.type"`)}
	}
	if v, ok := ec.mutation.GetType(); ok {
		if err := entity.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Entity.type": %w`, err)}
		}
	}
	if _, ok := ec.mutation.StepID(); !ok {
		return &ValidationError{Name: "step_id", err: errors.New(`ent: missing required field "Entity.step_id"`)}
	}
	if len(ec.mutation.RunIDs()) == 0 {
		return &ValidationError{Name: "run", err: errors.New(`ent: missing required edge "Entity.run"`)}
	}
	return nil
}

func (ec *EntityCreate) sqlSave(ctx context.Context) (*Entity, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *EntityCreate) createSpec() (*Entity, *sqlgraph.CreateSpec) {
	var (
		_node = &Entity{config: ec.config}
		_spec = sqlgraph.NewCreateSpec(entity.Table, sqlgraph.NewFieldSpec(entity.FieldID, field.TypeInt))
	)
	if value, ok := ec.mutation.CreatedAt(); ok {
		_spec.SetField(entity.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ec.mutation.UpdatedAt(); ok {
		_spec.SetField(entity.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ec.mutation.HandlerName(); ok {
		_spec.SetField(entity.FieldHandlerName, field.TypeString, value)
		_node.HandlerName = value
	}
	if value, ok := ec.mutation.GetType(); ok {
		_spec.SetField(entity.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := ec.mutation.StepID(); ok {
		_spec.SetField(entity.FieldStepID, field.TypeString, value)
		_node.StepID = value
	}
	if nodes := ec.mutation.RunIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entity.RunTable,
			Columns: []string{entity.RunColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(run.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.run_entities = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.ExecutionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.ExecutionsTable,
			Columns: []string{entity.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(execution.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.QueuesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.QueuesTable,
			Columns: entity.QueuesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(queue.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.VersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.VersionsTable,
			Columns: []string{entity.VersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(version.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.WorkflowDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   entity.WorkflowDataTable,
			Columns: []string{entity.WorkflowDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowdata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.ActivityDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   entity.ActivityDataTable,
			Columns: []string{entity.ActivityDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activitydata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.SagaDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   entity.SagaDataTable,
			Columns: []string{entity.SagaDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagadata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.SideEffectDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   entity.SideEffectDataTable,
			Columns: []string{entity.SideEffectDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sideeffectdata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EntityCreateBulk is the builder for creating many Entity entities in bulk.
type EntityCreateBulk struct {
	config
	err      error
	builders []*EntityCreate
}

// Save creates the Entity entities in the database.
func (ecb *EntityCreateBulk) Save(ctx context.Context) ([]*Entity, error) {
	if ecb.err != nil {
		return nil, ecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Entity, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EntityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *EntityCreateBulk) SaveX(ctx context.Context) []*Entity {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *EntityCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *EntityCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}
