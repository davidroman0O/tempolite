// Code generated by ent, DO NOT EDIT.

package version

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the version type in the database.
	Label = "version"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldChangeID holds the string denoting the changeid field in the database.
	FieldChangeID = "change_id"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldData holds the string denoting the data field in the database.
	FieldData = "data"
	// EdgeEntity holds the string denoting the entity edge name in mutations.
	EdgeEntity = "entity"
	// Table holds the table name of the version in the database.
	Table = "versions"
	// EntityTable is the table that holds the entity relation/edge.
	EntityTable = "versions"
	// EntityInverseTable is the table name for the Entity entity.
	// It exists in this package in order to avoid circular dependency with the "entity" package.
	EntityInverseTable = "entities"
	// EntityColumn is the table column denoting the entity relation/edge.
	EntityColumn = "entity_versions"
)

// Columns holds all SQL columns for version fields.
var Columns = []string{
	FieldID,
	FieldChangeID,
	FieldVersion,
	FieldData,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "versions"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"entity_versions",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// VersionValidator is a validator for the "version" field. It is called by the builders before save.
	VersionValidator func(int) error
)

// OrderOption defines the ordering options for the Version queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByChangeID orders the results by the changeID field.
func ByChangeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChangeID, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// ByEntityField orders the results by entity field.
func ByEntityField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEntityStep(), sql.OrderByField(field, opts...))
	}
}
func newEntityStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EntityInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, EntityTable, EntityColumn),
	)
}
