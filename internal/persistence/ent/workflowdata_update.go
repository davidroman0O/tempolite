// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/entity"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/predicate"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/workflowdata"
)

// WorkflowDataUpdate is the builder for updating WorkflowData entities.
type WorkflowDataUpdate struct {
	config
	hooks    []Hook
	mutation *WorkflowDataMutation
}

// Where appends a list predicates to the WorkflowDataUpdate builder.
func (wdu *WorkflowDataUpdate) Where(ps ...predicate.WorkflowData) *WorkflowDataUpdate {
	wdu.mutation.Where(ps...)
	return wdu
}

// SetDuration sets the "duration" field.
func (wdu *WorkflowDataUpdate) SetDuration(s string) *WorkflowDataUpdate {
	wdu.mutation.SetDuration(s)
	return wdu
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (wdu *WorkflowDataUpdate) SetNillableDuration(s *string) *WorkflowDataUpdate {
	if s != nil {
		wdu.SetDuration(*s)
	}
	return wdu
}

// ClearDuration clears the value of the "duration" field.
func (wdu *WorkflowDataUpdate) ClearDuration() *WorkflowDataUpdate {
	wdu.mutation.ClearDuration()
	return wdu
}

// SetPaused sets the "paused" field.
func (wdu *WorkflowDataUpdate) SetPaused(b bool) *WorkflowDataUpdate {
	wdu.mutation.SetPaused(b)
	return wdu
}

// SetNillablePaused sets the "paused" field if the given value is not nil.
func (wdu *WorkflowDataUpdate) SetNillablePaused(b *bool) *WorkflowDataUpdate {
	if b != nil {
		wdu.SetPaused(*b)
	}
	return wdu
}

// SetResumable sets the "resumable" field.
func (wdu *WorkflowDataUpdate) SetResumable(b bool) *WorkflowDataUpdate {
	wdu.mutation.SetResumable(b)
	return wdu
}

// SetNillableResumable sets the "resumable" field if the given value is not nil.
func (wdu *WorkflowDataUpdate) SetNillableResumable(b *bool) *WorkflowDataUpdate {
	if b != nil {
		wdu.SetResumable(*b)
	}
	return wdu
}

// SetInput sets the "input" field.
func (wdu *WorkflowDataUpdate) SetInput(u [][]uint8) *WorkflowDataUpdate {
	wdu.mutation.SetInput(u)
	return wdu
}

// AppendInput appends u to the "input" field.
func (wdu *WorkflowDataUpdate) AppendInput(u [][]uint8) *WorkflowDataUpdate {
	wdu.mutation.AppendInput(u)
	return wdu
}

// ClearInput clears the value of the "input" field.
func (wdu *WorkflowDataUpdate) ClearInput() *WorkflowDataUpdate {
	wdu.mutation.ClearInput()
	return wdu
}

// SetAttempt sets the "attempt" field.
func (wdu *WorkflowDataUpdate) SetAttempt(i int) *WorkflowDataUpdate {
	wdu.mutation.ResetAttempt()
	wdu.mutation.SetAttempt(i)
	return wdu
}

// SetNillableAttempt sets the "attempt" field if the given value is not nil.
func (wdu *WorkflowDataUpdate) SetNillableAttempt(i *int) *WorkflowDataUpdate {
	if i != nil {
		wdu.SetAttempt(*i)
	}
	return wdu
}

// AddAttempt adds i to the "attempt" field.
func (wdu *WorkflowDataUpdate) AddAttempt(i int) *WorkflowDataUpdate {
	wdu.mutation.AddAttempt(i)
	return wdu
}

// SetEntityID sets the "entity" edge to the Entity entity by ID.
func (wdu *WorkflowDataUpdate) SetEntityID(id int) *WorkflowDataUpdate {
	wdu.mutation.SetEntityID(id)
	return wdu
}

// SetEntity sets the "entity" edge to the Entity entity.
func (wdu *WorkflowDataUpdate) SetEntity(e *Entity) *WorkflowDataUpdate {
	return wdu.SetEntityID(e.ID)
}

// Mutation returns the WorkflowDataMutation object of the builder.
func (wdu *WorkflowDataUpdate) Mutation() *WorkflowDataMutation {
	return wdu.mutation
}

// ClearEntity clears the "entity" edge to the Entity entity.
func (wdu *WorkflowDataUpdate) ClearEntity() *WorkflowDataUpdate {
	wdu.mutation.ClearEntity()
	return wdu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wdu *WorkflowDataUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, wdu.sqlSave, wdu.mutation, wdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wdu *WorkflowDataUpdate) SaveX(ctx context.Context) int {
	affected, err := wdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wdu *WorkflowDataUpdate) Exec(ctx context.Context) error {
	_, err := wdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wdu *WorkflowDataUpdate) ExecX(ctx context.Context) {
	if err := wdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wdu *WorkflowDataUpdate) check() error {
	if wdu.mutation.EntityCleared() && len(wdu.mutation.EntityIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkflowData.entity"`)
	}
	return nil
}

func (wdu *WorkflowDataUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := wdu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(workflowdata.Table, workflowdata.Columns, sqlgraph.NewFieldSpec(workflowdata.FieldID, field.TypeInt))
	if ps := wdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wdu.mutation.Duration(); ok {
		_spec.SetField(workflowdata.FieldDuration, field.TypeString, value)
	}
	if wdu.mutation.DurationCleared() {
		_spec.ClearField(workflowdata.FieldDuration, field.TypeString)
	}
	if value, ok := wdu.mutation.Paused(); ok {
		_spec.SetField(workflowdata.FieldPaused, field.TypeBool, value)
	}
	if value, ok := wdu.mutation.Resumable(); ok {
		_spec.SetField(workflowdata.FieldResumable, field.TypeBool, value)
	}
	if value, ok := wdu.mutation.Input(); ok {
		_spec.SetField(workflowdata.FieldInput, field.TypeJSON, value)
	}
	if value, ok := wdu.mutation.AppendedInput(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, workflowdata.FieldInput, value)
		})
	}
	if wdu.mutation.InputCleared() {
		_spec.ClearField(workflowdata.FieldInput, field.TypeJSON)
	}
	if value, ok := wdu.mutation.Attempt(); ok {
		_spec.SetField(workflowdata.FieldAttempt, field.TypeInt, value)
	}
	if value, ok := wdu.mutation.AddedAttempt(); ok {
		_spec.AddField(workflowdata.FieldAttempt, field.TypeInt, value)
	}
	if wdu.mutation.EntityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   workflowdata.EntityTable,
			Columns: []string{workflowdata.EntityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wdu.mutation.EntityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   workflowdata.EntityTable,
			Columns: []string{workflowdata.EntityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workflowdata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wdu.mutation.done = true
	return n, nil
}

// WorkflowDataUpdateOne is the builder for updating a single WorkflowData entity.
type WorkflowDataUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WorkflowDataMutation
}

// SetDuration sets the "duration" field.
func (wduo *WorkflowDataUpdateOne) SetDuration(s string) *WorkflowDataUpdateOne {
	wduo.mutation.SetDuration(s)
	return wduo
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (wduo *WorkflowDataUpdateOne) SetNillableDuration(s *string) *WorkflowDataUpdateOne {
	if s != nil {
		wduo.SetDuration(*s)
	}
	return wduo
}

// ClearDuration clears the value of the "duration" field.
func (wduo *WorkflowDataUpdateOne) ClearDuration() *WorkflowDataUpdateOne {
	wduo.mutation.ClearDuration()
	return wduo
}

// SetPaused sets the "paused" field.
func (wduo *WorkflowDataUpdateOne) SetPaused(b bool) *WorkflowDataUpdateOne {
	wduo.mutation.SetPaused(b)
	return wduo
}

// SetNillablePaused sets the "paused" field if the given value is not nil.
func (wduo *WorkflowDataUpdateOne) SetNillablePaused(b *bool) *WorkflowDataUpdateOne {
	if b != nil {
		wduo.SetPaused(*b)
	}
	return wduo
}

// SetResumable sets the "resumable" field.
func (wduo *WorkflowDataUpdateOne) SetResumable(b bool) *WorkflowDataUpdateOne {
	wduo.mutation.SetResumable(b)
	return wduo
}

// SetNillableResumable sets the "resumable" field if the given value is not nil.
func (wduo *WorkflowDataUpdateOne) SetNillableResumable(b *bool) *WorkflowDataUpdateOne {
	if b != nil {
		wduo.SetResumable(*b)
	}
	return wduo
}

// SetInput sets the "input" field.
func (wduo *WorkflowDataUpdateOne) SetInput(u [][]uint8) *WorkflowDataUpdateOne {
	wduo.mutation.SetInput(u)
	return wduo
}

// AppendInput appends u to the "input" field.
func (wduo *WorkflowDataUpdateOne) AppendInput(u [][]uint8) *WorkflowDataUpdateOne {
	wduo.mutation.AppendInput(u)
	return wduo
}

// ClearInput clears the value of the "input" field.
func (wduo *WorkflowDataUpdateOne) ClearInput() *WorkflowDataUpdateOne {
	wduo.mutation.ClearInput()
	return wduo
}

// SetAttempt sets the "attempt" field.
func (wduo *WorkflowDataUpdateOne) SetAttempt(i int) *WorkflowDataUpdateOne {
	wduo.mutation.ResetAttempt()
	wduo.mutation.SetAttempt(i)
	return wduo
}

// SetNillableAttempt sets the "attempt" field if the given value is not nil.
func (wduo *WorkflowDataUpdateOne) SetNillableAttempt(i *int) *WorkflowDataUpdateOne {
	if i != nil {
		wduo.SetAttempt(*i)
	}
	return wduo
}

// AddAttempt adds i to the "attempt" field.
func (wduo *WorkflowDataUpdateOne) AddAttempt(i int) *WorkflowDataUpdateOne {
	wduo.mutation.AddAttempt(i)
	return wduo
}

// SetEntityID sets the "entity" edge to the Entity entity by ID.
func (wduo *WorkflowDataUpdateOne) SetEntityID(id int) *WorkflowDataUpdateOne {
	wduo.mutation.SetEntityID(id)
	return wduo
}

// SetEntity sets the "entity" edge to the Entity entity.
func (wduo *WorkflowDataUpdateOne) SetEntity(e *Entity) *WorkflowDataUpdateOne {
	return wduo.SetEntityID(e.ID)
}

// Mutation returns the WorkflowDataMutation object of the builder.
func (wduo *WorkflowDataUpdateOne) Mutation() *WorkflowDataMutation {
	return wduo.mutation
}

// ClearEntity clears the "entity" edge to the Entity entity.
func (wduo *WorkflowDataUpdateOne) ClearEntity() *WorkflowDataUpdateOne {
	wduo.mutation.ClearEntity()
	return wduo
}

// Where appends a list predicates to the WorkflowDataUpdate builder.
func (wduo *WorkflowDataUpdateOne) Where(ps ...predicate.WorkflowData) *WorkflowDataUpdateOne {
	wduo.mutation.Where(ps...)
	return wduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wduo *WorkflowDataUpdateOne) Select(field string, fields ...string) *WorkflowDataUpdateOne {
	wduo.fields = append([]string{field}, fields...)
	return wduo
}

// Save executes the query and returns the updated WorkflowData entity.
func (wduo *WorkflowDataUpdateOne) Save(ctx context.Context) (*WorkflowData, error) {
	return withHooks(ctx, wduo.sqlSave, wduo.mutation, wduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wduo *WorkflowDataUpdateOne) SaveX(ctx context.Context) *WorkflowData {
	node, err := wduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wduo *WorkflowDataUpdateOne) Exec(ctx context.Context) error {
	_, err := wduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wduo *WorkflowDataUpdateOne) ExecX(ctx context.Context) {
	if err := wduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wduo *WorkflowDataUpdateOne) check() error {
	if wduo.mutation.EntityCleared() && len(wduo.mutation.EntityIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkflowData.entity"`)
	}
	return nil
}

func (wduo *WorkflowDataUpdateOne) sqlSave(ctx context.Context) (_node *WorkflowData, err error) {
	if err := wduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(workflowdata.Table, workflowdata.Columns, sqlgraph.NewFieldSpec(workflowdata.FieldID, field.TypeInt))
	id, ok := wduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WorkflowData.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workflowdata.FieldID)
		for _, f := range fields {
			if !workflowdata.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != workflowdata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wduo.mutation.Duration(); ok {
		_spec.SetField(workflowdata.FieldDuration, field.TypeString, value)
	}
	if wduo.mutation.DurationCleared() {
		_spec.ClearField(workflowdata.FieldDuration, field.TypeString)
	}
	if value, ok := wduo.mutation.Paused(); ok {
		_spec.SetField(workflowdata.FieldPaused, field.TypeBool, value)
	}
	if value, ok := wduo.mutation.Resumable(); ok {
		_spec.SetField(workflowdata.FieldResumable, field.TypeBool, value)
	}
	if value, ok := wduo.mutation.Input(); ok {
		_spec.SetField(workflowdata.FieldInput, field.TypeJSON, value)
	}
	if value, ok := wduo.mutation.AppendedInput(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, workflowdata.FieldInput, value)
		})
	}
	if wduo.mutation.InputCleared() {
		_spec.ClearField(workflowdata.FieldInput, field.TypeJSON)
	}
	if value, ok := wduo.mutation.Attempt(); ok {
		_spec.SetField(workflowdata.FieldAttempt, field.TypeInt, value)
	}
	if value, ok := wduo.mutation.AddedAttempt(); ok {
		_spec.AddField(workflowdata.FieldAttempt, field.TypeInt, value)
	}
	if wduo.mutation.EntityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   workflowdata.EntityTable,
			Columns: []string{workflowdata.EntityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wduo.mutation.EntityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   workflowdata.EntityTable,
			Columns: []string{workflowdata.EntityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &WorkflowData{config: wduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workflowdata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wduo.mutation.done = true
	return _node, nil
}
