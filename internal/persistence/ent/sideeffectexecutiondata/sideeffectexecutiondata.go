// Code generated by ent, DO NOT EDIT.

package sideeffectexecutiondata

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the sideeffectexecutiondata type in the database.
	Label = "side_effect_execution_data"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEffectTime holds the string denoting the effect_time field in the database.
	FieldEffectTime = "effect_time"
	// FieldEffectMetadata holds the string denoting the effect_metadata field in the database.
	FieldEffectMetadata = "effect_metadata"
	// FieldExecutionContext holds the string denoting the execution_context field in the database.
	FieldExecutionContext = "execution_context"
	// EdgeSideEffectExecution holds the string denoting the side_effect_execution edge name in mutations.
	EdgeSideEffectExecution = "side_effect_execution"
	// Table holds the table name of the sideeffectexecutiondata in the database.
	Table = "side_effect_execution_data"
	// SideEffectExecutionTable is the table that holds the side_effect_execution relation/edge.
	SideEffectExecutionTable = "side_effect_execution_data"
	// SideEffectExecutionInverseTable is the table name for the SideEffectExecution entity.
	// It exists in this package in order to avoid circular dependency with the "sideeffectexecution" package.
	SideEffectExecutionInverseTable = "side_effect_executions"
	// SideEffectExecutionColumn is the table column denoting the side_effect_execution relation/edge.
	SideEffectExecutionColumn = "side_effect_execution_execution_data"
)

// Columns holds all SQL columns for sideeffectexecutiondata fields.
var Columns = []string{
	FieldID,
	FieldEffectTime,
	FieldEffectMetadata,
	FieldExecutionContext,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "side_effect_execution_data"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"side_effect_execution_execution_data",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the SideEffectExecutionData queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEffectTime orders the results by the effect_time field.
func ByEffectTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEffectTime, opts...).ToFunc()
}

// BySideEffectExecutionField orders the results by side_effect_execution field.
func BySideEffectExecutionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSideEffectExecutionStep(), sql.OrderByField(field, opts...))
	}
}
func newSideEffectExecutionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SideEffectExecutionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, SideEffectExecutionTable, SideEffectExecutionColumn),
	)
}
