// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/activityexecutiondata"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/predicate"
)

// ActivityExecutionDataDelete is the builder for deleting a ActivityExecutionData entity.
type ActivityExecutionDataDelete struct {
	config
	hooks    []Hook
	mutation *ActivityExecutionDataMutation
}

// Where appends a list predicates to the ActivityExecutionDataDelete builder.
func (aedd *ActivityExecutionDataDelete) Where(ps ...predicate.ActivityExecutionData) *ActivityExecutionDataDelete {
	aedd.mutation.Where(ps...)
	return aedd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (aedd *ActivityExecutionDataDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, aedd.sqlExec, aedd.mutation, aedd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (aedd *ActivityExecutionDataDelete) ExecX(ctx context.Context) int {
	n, err := aedd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (aedd *ActivityExecutionDataDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(activityexecutiondata.Table, sqlgraph.NewFieldSpec(activityexecutiondata.FieldID, field.TypeInt))
	if ps := aedd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, aedd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	aedd.mutation.done = true
	return affected, err
}

// ActivityExecutionDataDeleteOne is the builder for deleting a single ActivityExecutionData entity.
type ActivityExecutionDataDeleteOne struct {
	aedd *ActivityExecutionDataDelete
}

// Where appends a list predicates to the ActivityExecutionDataDelete builder.
func (aeddo *ActivityExecutionDataDeleteOne) Where(ps ...predicate.ActivityExecutionData) *ActivityExecutionDataDeleteOne {
	aeddo.aedd.mutation.Where(ps...)
	return aeddo
}

// Exec executes the deletion query.
func (aeddo *ActivityExecutionDataDeleteOne) Exec(ctx context.Context) error {
	n, err := aeddo.aedd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{activityexecutiondata.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (aeddo *ActivityExecutionDataDeleteOne) ExecX(ctx context.Context) {
	if err := aeddo.Exec(ctx); err != nil {
		panic(err)
	}
}
