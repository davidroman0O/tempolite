// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/entity"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/sideeffectdata"
)

// SideEffectDataCreate is the builder for creating a SideEffectData entity.
type SideEffectDataCreate struct {
	config
	mutation *SideEffectDataMutation
	hooks    []Hook
}

// SetEntityID sets the "entity" edge to the Entity entity by ID.
func (sedc *SideEffectDataCreate) SetEntityID(id int) *SideEffectDataCreate {
	sedc.mutation.SetEntityID(id)
	return sedc
}

// SetEntity sets the "entity" edge to the Entity entity.
func (sedc *SideEffectDataCreate) SetEntity(e *Entity) *SideEffectDataCreate {
	return sedc.SetEntityID(e.ID)
}

// Mutation returns the SideEffectDataMutation object of the builder.
func (sedc *SideEffectDataCreate) Mutation() *SideEffectDataMutation {
	return sedc.mutation
}

// Save creates the SideEffectData in the database.
func (sedc *SideEffectDataCreate) Save(ctx context.Context) (*SideEffectData, error) {
	return withHooks(ctx, sedc.sqlSave, sedc.mutation, sedc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sedc *SideEffectDataCreate) SaveX(ctx context.Context) *SideEffectData {
	v, err := sedc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sedc *SideEffectDataCreate) Exec(ctx context.Context) error {
	_, err := sedc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sedc *SideEffectDataCreate) ExecX(ctx context.Context) {
	if err := sedc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sedc *SideEffectDataCreate) check() error {
	if len(sedc.mutation.EntityIDs()) == 0 {
		return &ValidationError{Name: "entity", err: errors.New(`ent: missing required edge "SideEffectData.entity"`)}
	}
	return nil
}

func (sedc *SideEffectDataCreate) sqlSave(ctx context.Context) (*SideEffectData, error) {
	if err := sedc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sedc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sedc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sedc.mutation.id = &_node.ID
	sedc.mutation.done = true
	return _node, nil
}

func (sedc *SideEffectDataCreate) createSpec() (*SideEffectData, *sqlgraph.CreateSpec) {
	var (
		_node = &SideEffectData{config: sedc.config}
		_spec = sqlgraph.NewCreateSpec(sideeffectdata.Table, sqlgraph.NewFieldSpec(sideeffectdata.FieldID, field.TypeInt))
	)
	if nodes := sedc.mutation.EntityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   sideeffectdata.EntityTable,
			Columns: []string{sideeffectdata.EntityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.entity_side_effect_data = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SideEffectDataCreateBulk is the builder for creating many SideEffectData entities in bulk.
type SideEffectDataCreateBulk struct {
	config
	err      error
	builders []*SideEffectDataCreate
}

// Save creates the SideEffectData entities in the database.
func (sedcb *SideEffectDataCreateBulk) Save(ctx context.Context) ([]*SideEffectData, error) {
	if sedcb.err != nil {
		return nil, sedcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sedcb.builders))
	nodes := make([]*SideEffectData, len(sedcb.builders))
	mutators := make([]Mutator, len(sedcb.builders))
	for i := range sedcb.builders {
		func(i int, root context.Context) {
			builder := sedcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SideEffectDataMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sedcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sedcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sedcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sedcb *SideEffectDataCreateBulk) SaveX(ctx context.Context) []*SideEffectData {
	v, err := sedcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sedcb *SideEffectDataCreateBulk) Exec(ctx context.Context) error {
	_, err := sedcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sedcb *SideEffectDataCreateBulk) ExecX(ctx context.Context) {
	if err := sedcb.Exec(ctx); err != nil {
		panic(err)
	}
}
