// Code generated by ent, DO NOT EDIT.

package hook

import (
	"context"
	"fmt"

	"github.com/davidroman0O/tempolite/internal/persistence/ent"
)

// The ActivityDataFunc type is an adapter to allow the use of ordinary
// function as ActivityData mutator.
type ActivityDataFunc func(context.Context, *ent.ActivityDataMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ActivityDataFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ActivityDataMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ActivityDataMutation", m)
}

// The ActivityExecutionFunc type is an adapter to allow the use of ordinary
// function as ActivityExecution mutator.
type ActivityExecutionFunc func(context.Context, *ent.ActivityExecutionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ActivityExecutionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ActivityExecutionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ActivityExecutionMutation", m)
}

// The ActivityExecutionDataFunc type is an adapter to allow the use of ordinary
// function as ActivityExecutionData mutator.
type ActivityExecutionDataFunc func(context.Context, *ent.ActivityExecutionDataMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ActivityExecutionDataFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ActivityExecutionDataMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ActivityExecutionDataMutation", m)
}

// The EntityFunc type is an adapter to allow the use of ordinary
// function as Entity mutator.
type EntityFunc func(context.Context, *ent.EntityMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f EntityFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.EntityMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.EntityMutation", m)
}

// The ExecutionFunc type is an adapter to allow the use of ordinary
// function as Execution mutator.
type ExecutionFunc func(context.Context, *ent.ExecutionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ExecutionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ExecutionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ExecutionMutation", m)
}

// The HierarchyFunc type is an adapter to allow the use of ordinary
// function as Hierarchy mutator.
type HierarchyFunc func(context.Context, *ent.HierarchyMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f HierarchyFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.HierarchyMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.HierarchyMutation", m)
}

// The QueueFunc type is an adapter to allow the use of ordinary
// function as Queue mutator.
type QueueFunc func(context.Context, *ent.QueueMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f QueueFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.QueueMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.QueueMutation", m)
}

// The RunFunc type is an adapter to allow the use of ordinary
// function as Run mutator.
type RunFunc func(context.Context, *ent.RunMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f RunFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.RunMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.RunMutation", m)
}

// The SagaDataFunc type is an adapter to allow the use of ordinary
// function as SagaData mutator.
type SagaDataFunc func(context.Context, *ent.SagaDataMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SagaDataFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.SagaDataMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SagaDataMutation", m)
}

// The SagaExecutionFunc type is an adapter to allow the use of ordinary
// function as SagaExecution mutator.
type SagaExecutionFunc func(context.Context, *ent.SagaExecutionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SagaExecutionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.SagaExecutionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SagaExecutionMutation", m)
}

// The SagaExecutionDataFunc type is an adapter to allow the use of ordinary
// function as SagaExecutionData mutator.
type SagaExecutionDataFunc func(context.Context, *ent.SagaExecutionDataMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SagaExecutionDataFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.SagaExecutionDataMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SagaExecutionDataMutation", m)
}

// The SideEffectDataFunc type is an adapter to allow the use of ordinary
// function as SideEffectData mutator.
type SideEffectDataFunc func(context.Context, *ent.SideEffectDataMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SideEffectDataFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.SideEffectDataMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SideEffectDataMutation", m)
}

// The SideEffectExecutionFunc type is an adapter to allow the use of ordinary
// function as SideEffectExecution mutator.
type SideEffectExecutionFunc func(context.Context, *ent.SideEffectExecutionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SideEffectExecutionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.SideEffectExecutionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SideEffectExecutionMutation", m)
}

// The SideEffectExecutionDataFunc type is an adapter to allow the use of ordinary
// function as SideEffectExecutionData mutator.
type SideEffectExecutionDataFunc func(context.Context, *ent.SideEffectExecutionDataMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SideEffectExecutionDataFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.SideEffectExecutionDataMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SideEffectExecutionDataMutation", m)
}

// The VersionFunc type is an adapter to allow the use of ordinary
// function as Version mutator.
type VersionFunc func(context.Context, *ent.VersionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f VersionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.VersionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.VersionMutation", m)
}

// The WorkflowDataFunc type is an adapter to allow the use of ordinary
// function as WorkflowData mutator.
type WorkflowDataFunc func(context.Context, *ent.WorkflowDataMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f WorkflowDataFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.WorkflowDataMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.WorkflowDataMutation", m)
}

// The WorkflowExecutionFunc type is an adapter to allow the use of ordinary
// function as WorkflowExecution mutator.
type WorkflowExecutionFunc func(context.Context, *ent.WorkflowExecutionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f WorkflowExecutionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.WorkflowExecutionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.WorkflowExecutionMutation", m)
}

// The WorkflowExecutionDataFunc type is an adapter to allow the use of ordinary
// function as WorkflowExecutionData mutator.
type WorkflowExecutionDataFunc func(context.Context, *ent.WorkflowExecutionDataMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f WorkflowExecutionDataFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.WorkflowExecutionDataMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.WorkflowExecutionDataMutation", m)
}

// Condition is a hook condition function.
type Condition func(context.Context, ent.Mutation) bool

// And groups conditions with the AND operator.
func And(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if !first(ctx, m) || !second(ctx, m) {
			return false
		}
		for _, cond := range rest {
			if !cond(ctx, m) {
				return false
			}
		}
		return true
	}
}

// Or groups conditions with the OR operator.
func Or(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if first(ctx, m) || second(ctx, m) {
			return true
		}
		for _, cond := range rest {
			if cond(ctx, m) {
				return true
			}
		}
		return false
	}
}

// Not negates a given condition.
func Not(cond Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		return !cond(ctx, m)
	}
}

// HasOp is a condition testing mutation operation.
func HasOp(op ent.Op) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		return m.Op().Is(op)
	}
}

// HasAddedFields is a condition validating `.AddedField` on fields.
func HasAddedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.AddedField(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.AddedField(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasClearedFields is a condition validating `.FieldCleared` on fields.
func HasClearedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if exists := m.FieldCleared(field); !exists {
			return false
		}
		for _, field := range fields {
			if exists := m.FieldCleared(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasFields is a condition validating `.Field` on fields.
func HasFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.Field(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.Field(field); !exists {
				return false
			}
		}
		return true
	}
}

// If executes the given hook under condition.
//
//	hook.If(ComputeAverage, And(HasFields(...), HasAddedFields(...)))
func If(hk ent.Hook, cond Condition) ent.Hook {
	return func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if cond(ctx, m) {
				return hk(next).Mutate(ctx, m)
			}
			return next.Mutate(ctx, m)
		})
	}
}

// On executes the given hook only for the given operation.
//
//	hook.On(Log, ent.Delete|ent.Create)
func On(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, HasOp(op))
}

// Unless skips the given hook only for the given operation.
//
//	hook.Unless(Log, ent.Update|ent.UpdateOne)
func Unless(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, Not(HasOp(op)))
}

// FixedError is a hook returning a fixed error.
func FixedError(err error) ent.Hook {
	return func(ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(context.Context, ent.Mutation) (ent.Value, error) {
			return nil, err
		})
	}
}

// Reject returns a hook that rejects all operations that match op.
//
//	func (T) Hooks() []ent.Hook {
//		return []ent.Hook{
//			Reject(ent.Delete|ent.Update),
//		}
//	}
func Reject(op ent.Op) ent.Hook {
	hk := FixedError(fmt.Errorf("%s operation is not allowed", op))
	return On(hk, op)
}

// Chain acts as a list of hooks and is effectively immutable.
// Once created, it will always hold the same set of hooks in the same order.
type Chain struct {
	hooks []ent.Hook
}

// NewChain creates a new chain of hooks.
func NewChain(hooks ...ent.Hook) Chain {
	return Chain{append([]ent.Hook(nil), hooks...)}
}

// Hook chains the list of hooks and returns the final hook.
func (c Chain) Hook() ent.Hook {
	return func(mutator ent.Mutator) ent.Mutator {
		for i := len(c.hooks) - 1; i >= 0; i-- {
			mutator = c.hooks[i](mutator)
		}
		return mutator
	}
}

// Append extends a chain, adding the specified hook
// as the last ones in the mutation flow.
func (c Chain) Append(hooks ...ent.Hook) Chain {
	newHooks := make([]ent.Hook, 0, len(c.hooks)+len(hooks))
	newHooks = append(newHooks, c.hooks...)
	newHooks = append(newHooks, hooks...)
	return Chain{newHooks}
}

// Extend extends a chain, adding the specified chain
// as the last ones in the mutation flow.
func (c Chain) Extend(chain Chain) Chain {
	return c.Append(chain.hooks...)
}
