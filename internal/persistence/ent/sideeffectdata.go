// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/entity"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/sideeffectdata"
)

// SideEffectData is the model entity for the SideEffectData schema.
type SideEffectData struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Input holds the value of the "input" field.
	Input [][]uint8 `json:"input,omitempty"`
	// Output holds the value of the "output" field.
	Output [][]uint8 `json:"output,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SideEffectDataQuery when eager-loading is set.
	Edges                   SideEffectDataEdges `json:"edges"`
	entity_side_effect_data *int
	selectValues            sql.SelectValues
}

// SideEffectDataEdges holds the relations/edges for other nodes in the graph.
type SideEffectDataEdges struct {
	// Entity holds the value of the entity edge.
	Entity *Entity `json:"entity,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EntityOrErr returns the Entity value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SideEffectDataEdges) EntityOrErr() (*Entity, error) {
	if e.Entity != nil {
		return e.Entity, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: entity.Label}
	}
	return nil, &NotLoadedError{edge: "entity"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SideEffectData) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sideeffectdata.FieldInput, sideeffectdata.FieldOutput:
			values[i] = new([]byte)
		case sideeffectdata.FieldID:
			values[i] = new(sql.NullInt64)
		case sideeffectdata.ForeignKeys[0]: // entity_side_effect_data
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SideEffectData fields.
func (sed *SideEffectData) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sideeffectdata.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sed.ID = int(value.Int64)
		case sideeffectdata.FieldInput:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field input", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &sed.Input); err != nil {
					return fmt.Errorf("unmarshal field input: %w", err)
				}
			}
		case sideeffectdata.FieldOutput:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field output", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &sed.Output); err != nil {
					return fmt.Errorf("unmarshal field output: %w", err)
				}
			}
		case sideeffectdata.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field entity_side_effect_data", value)
			} else if value.Valid {
				sed.entity_side_effect_data = new(int)
				*sed.entity_side_effect_data = int(value.Int64)
			}
		default:
			sed.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SideEffectData.
// This includes values selected through modifiers, order, etc.
func (sed *SideEffectData) Value(name string) (ent.Value, error) {
	return sed.selectValues.Get(name)
}

// QueryEntity queries the "entity" edge of the SideEffectData entity.
func (sed *SideEffectData) QueryEntity() *EntityQuery {
	return NewSideEffectDataClient(sed.config).QueryEntity(sed)
}

// Update returns a builder for updating this SideEffectData.
// Note that you need to call SideEffectData.Unwrap() before calling this method if this SideEffectData
// was returned from a transaction, and the transaction was committed or rolled back.
func (sed *SideEffectData) Update() *SideEffectDataUpdateOne {
	return NewSideEffectDataClient(sed.config).UpdateOne(sed)
}

// Unwrap unwraps the SideEffectData entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sed *SideEffectData) Unwrap() *SideEffectData {
	_tx, ok := sed.config.driver.(*txDriver)
	if !ok {
		panic("ent: SideEffectData is not a transactional entity")
	}
	sed.config.driver = _tx.drv
	return sed
}

// String implements the fmt.Stringer.
func (sed *SideEffectData) String() string {
	var builder strings.Builder
	builder.WriteString("SideEffectData(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sed.ID))
	builder.WriteString("input=")
	builder.WriteString(fmt.Sprintf("%v", sed.Input))
	builder.WriteString(", ")
	builder.WriteString("output=")
	builder.WriteString(fmt.Sprintf("%v", sed.Output))
	builder.WriteByte(')')
	return builder.String()
}

// SideEffectDataSlice is a parsable slice of SideEffectData.
type SideEffectDataSlice []*SideEffectData
