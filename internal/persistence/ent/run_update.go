// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/entity"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/hierarchy"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/predicate"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/run"
)

// RunUpdate is the builder for updating Run entities.
type RunUpdate struct {
	config
	hooks    []Hook
	mutation *RunMutation
}

// Where appends a list predicates to the RunUpdate builder.
func (ru *RunUpdate) Where(ps ...predicate.Run) *RunUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *RunUpdate) SetUpdatedAt(t time.Time) *RunUpdate {
	ru.mutation.SetUpdatedAt(t)
	return ru
}

// SetStatus sets the "status" field.
func (ru *RunUpdate) SetStatus(r run.Status) *RunUpdate {
	ru.mutation.SetStatus(r)
	return ru
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ru *RunUpdate) SetNillableStatus(r *run.Status) *RunUpdate {
	if r != nil {
		ru.SetStatus(*r)
	}
	return ru
}

// AddEntityIDs adds the "entities" edge to the Entity entity by IDs.
func (ru *RunUpdate) AddEntityIDs(ids ...int) *RunUpdate {
	ru.mutation.AddEntityIDs(ids...)
	return ru
}

// AddEntities adds the "entities" edges to the Entity entity.
func (ru *RunUpdate) AddEntities(e ...*Entity) *RunUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ru.AddEntityIDs(ids...)
}

// AddHierarchyIDs adds the "hierarchies" edge to the Hierarchy entity by IDs.
func (ru *RunUpdate) AddHierarchyIDs(ids ...int) *RunUpdate {
	ru.mutation.AddHierarchyIDs(ids...)
	return ru
}

// AddHierarchies adds the "hierarchies" edges to the Hierarchy entity.
func (ru *RunUpdate) AddHierarchies(h ...*Hierarchy) *RunUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return ru.AddHierarchyIDs(ids...)
}

// Mutation returns the RunMutation object of the builder.
func (ru *RunUpdate) Mutation() *RunMutation {
	return ru.mutation
}

// ClearEntities clears all "entities" edges to the Entity entity.
func (ru *RunUpdate) ClearEntities() *RunUpdate {
	ru.mutation.ClearEntities()
	return ru
}

// RemoveEntityIDs removes the "entities" edge to Entity entities by IDs.
func (ru *RunUpdate) RemoveEntityIDs(ids ...int) *RunUpdate {
	ru.mutation.RemoveEntityIDs(ids...)
	return ru
}

// RemoveEntities removes "entities" edges to Entity entities.
func (ru *RunUpdate) RemoveEntities(e ...*Entity) *RunUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ru.RemoveEntityIDs(ids...)
}

// ClearHierarchies clears all "hierarchies" edges to the Hierarchy entity.
func (ru *RunUpdate) ClearHierarchies() *RunUpdate {
	ru.mutation.ClearHierarchies()
	return ru
}

// RemoveHierarchyIDs removes the "hierarchies" edge to Hierarchy entities by IDs.
func (ru *RunUpdate) RemoveHierarchyIDs(ids ...int) *RunUpdate {
	ru.mutation.RemoveHierarchyIDs(ids...)
	return ru
}

// RemoveHierarchies removes "hierarchies" edges to Hierarchy entities.
func (ru *RunUpdate) RemoveHierarchies(h ...*Hierarchy) *RunUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return ru.RemoveHierarchyIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RunUpdate) Save(ctx context.Context) (int, error) {
	ru.defaults()
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RunUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RunUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RunUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *RunUpdate) defaults() {
	if _, ok := ru.mutation.UpdatedAt(); !ok {
		v := run.UpdateDefaultUpdatedAt()
		ru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *RunUpdate) check() error {
	if v, ok := ru.mutation.Status(); ok {
		if err := run.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Run.status": %w`, err)}
		}
	}
	return nil
}

func (ru *RunUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(run.Table, run.Columns, sqlgraph.NewFieldSpec(run.FieldID, field.TypeInt))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.SetField(run.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ru.mutation.Status(); ok {
		_spec.SetField(run.FieldStatus, field.TypeEnum, value)
	}
	if ru.mutation.EntitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   run.EntitiesTable,
			Columns: []string{run.EntitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedEntitiesIDs(); len(nodes) > 0 && !ru.mutation.EntitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   run.EntitiesTable,
			Columns: []string{run.EntitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.EntitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   run.EntitiesTable,
			Columns: []string{run.EntitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.HierarchiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   run.HierarchiesTable,
			Columns: []string{run.HierarchiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hierarchy.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedHierarchiesIDs(); len(nodes) > 0 && !ru.mutation.HierarchiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   run.HierarchiesTable,
			Columns: []string{run.HierarchiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hierarchy.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.HierarchiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   run.HierarchiesTable,
			Columns: []string{run.HierarchiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hierarchy.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{run.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RunUpdateOne is the builder for updating a single Run entity.
type RunUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RunMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *RunUpdateOne) SetUpdatedAt(t time.Time) *RunUpdateOne {
	ruo.mutation.SetUpdatedAt(t)
	return ruo
}

// SetStatus sets the "status" field.
func (ruo *RunUpdateOne) SetStatus(r run.Status) *RunUpdateOne {
	ruo.mutation.SetStatus(r)
	return ruo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ruo *RunUpdateOne) SetNillableStatus(r *run.Status) *RunUpdateOne {
	if r != nil {
		ruo.SetStatus(*r)
	}
	return ruo
}

// AddEntityIDs adds the "entities" edge to the Entity entity by IDs.
func (ruo *RunUpdateOne) AddEntityIDs(ids ...int) *RunUpdateOne {
	ruo.mutation.AddEntityIDs(ids...)
	return ruo
}

// AddEntities adds the "entities" edges to the Entity entity.
func (ruo *RunUpdateOne) AddEntities(e ...*Entity) *RunUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ruo.AddEntityIDs(ids...)
}

// AddHierarchyIDs adds the "hierarchies" edge to the Hierarchy entity by IDs.
func (ruo *RunUpdateOne) AddHierarchyIDs(ids ...int) *RunUpdateOne {
	ruo.mutation.AddHierarchyIDs(ids...)
	return ruo
}

// AddHierarchies adds the "hierarchies" edges to the Hierarchy entity.
func (ruo *RunUpdateOne) AddHierarchies(h ...*Hierarchy) *RunUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return ruo.AddHierarchyIDs(ids...)
}

// Mutation returns the RunMutation object of the builder.
func (ruo *RunUpdateOne) Mutation() *RunMutation {
	return ruo.mutation
}

// ClearEntities clears all "entities" edges to the Entity entity.
func (ruo *RunUpdateOne) ClearEntities() *RunUpdateOne {
	ruo.mutation.ClearEntities()
	return ruo
}

// RemoveEntityIDs removes the "entities" edge to Entity entities by IDs.
func (ruo *RunUpdateOne) RemoveEntityIDs(ids ...int) *RunUpdateOne {
	ruo.mutation.RemoveEntityIDs(ids...)
	return ruo
}

// RemoveEntities removes "entities" edges to Entity entities.
func (ruo *RunUpdateOne) RemoveEntities(e ...*Entity) *RunUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ruo.RemoveEntityIDs(ids...)
}

// ClearHierarchies clears all "hierarchies" edges to the Hierarchy entity.
func (ruo *RunUpdateOne) ClearHierarchies() *RunUpdateOne {
	ruo.mutation.ClearHierarchies()
	return ruo
}

// RemoveHierarchyIDs removes the "hierarchies" edge to Hierarchy entities by IDs.
func (ruo *RunUpdateOne) RemoveHierarchyIDs(ids ...int) *RunUpdateOne {
	ruo.mutation.RemoveHierarchyIDs(ids...)
	return ruo
}

// RemoveHierarchies removes "hierarchies" edges to Hierarchy entities.
func (ruo *RunUpdateOne) RemoveHierarchies(h ...*Hierarchy) *RunUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return ruo.RemoveHierarchyIDs(ids...)
}

// Where appends a list predicates to the RunUpdate builder.
func (ruo *RunUpdateOne) Where(ps ...predicate.Run) *RunUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RunUpdateOne) Select(field string, fields ...string) *RunUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Run entity.
func (ruo *RunUpdateOne) Save(ctx context.Context) (*Run, error) {
	ruo.defaults()
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RunUpdateOne) SaveX(ctx context.Context) *Run {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RunUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RunUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *RunUpdateOne) defaults() {
	if _, ok := ruo.mutation.UpdatedAt(); !ok {
		v := run.UpdateDefaultUpdatedAt()
		ruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RunUpdateOne) check() error {
	if v, ok := ruo.mutation.Status(); ok {
		if err := run.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Run.status": %w`, err)}
		}
	}
	return nil
}

func (ruo *RunUpdateOne) sqlSave(ctx context.Context) (_node *Run, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(run.Table, run.Columns, sqlgraph.NewFieldSpec(run.FieldID, field.TypeInt))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Run.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, run.FieldID)
		for _, f := range fields {
			if !run.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != run.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.SetField(run.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.Status(); ok {
		_spec.SetField(run.FieldStatus, field.TypeEnum, value)
	}
	if ruo.mutation.EntitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   run.EntitiesTable,
			Columns: []string{run.EntitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedEntitiesIDs(); len(nodes) > 0 && !ruo.mutation.EntitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   run.EntitiesTable,
			Columns: []string{run.EntitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.EntitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   run.EntitiesTable,
			Columns: []string{run.EntitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.HierarchiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   run.HierarchiesTable,
			Columns: []string{run.HierarchiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hierarchy.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedHierarchiesIDs(); len(nodes) > 0 && !ruo.mutation.HierarchiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   run.HierarchiesTable,
			Columns: []string{run.HierarchiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hierarchy.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.HierarchiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   run.HierarchiesTable,
			Columns: []string{run.HierarchiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hierarchy.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Run{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{run.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
