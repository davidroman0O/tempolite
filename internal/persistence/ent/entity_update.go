// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/activitydata"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/entity"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/execution"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/predicate"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/queue"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/run"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/sagadata"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/sideeffectdata"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/version"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/workflowdata"
)

// EntityUpdate is the builder for updating Entity entities.
type EntityUpdate struct {
	config
	hooks    []Hook
	mutation *EntityMutation
}

// Where appends a list predicates to the EntityUpdate builder.
func (eu *EntityUpdate) Where(ps ...predicate.Entity) *EntityUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetUpdatedAt sets the "updated_at" field.
func (eu *EntityUpdate) SetUpdatedAt(t time.Time) *EntityUpdate {
	eu.mutation.SetUpdatedAt(t)
	return eu
}

// SetHandlerName sets the "handler_name" field.
func (eu *EntityUpdate) SetHandlerName(s string) *EntityUpdate {
	eu.mutation.SetHandlerName(s)
	return eu
}

// SetNillableHandlerName sets the "handler_name" field if the given value is not nil.
func (eu *EntityUpdate) SetNillableHandlerName(s *string) *EntityUpdate {
	if s != nil {
		eu.SetHandlerName(*s)
	}
	return eu
}

// SetStatus sets the "status" field.
func (eu *EntityUpdate) SetStatus(e entity.Status) *EntityUpdate {
	eu.mutation.SetStatus(e)
	return eu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (eu *EntityUpdate) SetNillableStatus(e *entity.Status) *EntityUpdate {
	if e != nil {
		eu.SetStatus(*e)
	}
	return eu
}

// SetStepID sets the "step_id" field.
func (eu *EntityUpdate) SetStepID(s string) *EntityUpdate {
	eu.mutation.SetStepID(s)
	return eu
}

// SetNillableStepID sets the "step_id" field if the given value is not nil.
func (eu *EntityUpdate) SetNillableStepID(s *string) *EntityUpdate {
	if s != nil {
		eu.SetStepID(*s)
	}
	return eu
}

// SetRunID sets the "run" edge to the Run entity by ID.
func (eu *EntityUpdate) SetRunID(id int) *EntityUpdate {
	eu.mutation.SetRunID(id)
	return eu
}

// SetRun sets the "run" edge to the Run entity.
func (eu *EntityUpdate) SetRun(r *Run) *EntityUpdate {
	return eu.SetRunID(r.ID)
}

// AddExecutionIDs adds the "executions" edge to the Execution entity by IDs.
func (eu *EntityUpdate) AddExecutionIDs(ids ...int) *EntityUpdate {
	eu.mutation.AddExecutionIDs(ids...)
	return eu
}

// AddExecutions adds the "executions" edges to the Execution entity.
func (eu *EntityUpdate) AddExecutions(e ...*Execution) *EntityUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.AddExecutionIDs(ids...)
}

// SetQueueID sets the "queue" edge to the Queue entity by ID.
func (eu *EntityUpdate) SetQueueID(id int) *EntityUpdate {
	eu.mutation.SetQueueID(id)
	return eu
}

// SetNillableQueueID sets the "queue" edge to the Queue entity by ID if the given value is not nil.
func (eu *EntityUpdate) SetNillableQueueID(id *int) *EntityUpdate {
	if id != nil {
		eu = eu.SetQueueID(*id)
	}
	return eu
}

// SetQueue sets the "queue" edge to the Queue entity.
func (eu *EntityUpdate) SetQueue(q *Queue) *EntityUpdate {
	return eu.SetQueueID(q.ID)
}

// AddVersionIDs adds the "versions" edge to the Version entity by IDs.
func (eu *EntityUpdate) AddVersionIDs(ids ...int) *EntityUpdate {
	eu.mutation.AddVersionIDs(ids...)
	return eu
}

// AddVersions adds the "versions" edges to the Version entity.
func (eu *EntityUpdate) AddVersions(v ...*Version) *EntityUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return eu.AddVersionIDs(ids...)
}

// SetWorkflowDataID sets the "workflow_data" edge to the WorkflowData entity by ID.
func (eu *EntityUpdate) SetWorkflowDataID(id int) *EntityUpdate {
	eu.mutation.SetWorkflowDataID(id)
	return eu
}

// SetNillableWorkflowDataID sets the "workflow_data" edge to the WorkflowData entity by ID if the given value is not nil.
func (eu *EntityUpdate) SetNillableWorkflowDataID(id *int) *EntityUpdate {
	if id != nil {
		eu = eu.SetWorkflowDataID(*id)
	}
	return eu
}

// SetWorkflowData sets the "workflow_data" edge to the WorkflowData entity.
func (eu *EntityUpdate) SetWorkflowData(w *WorkflowData) *EntityUpdate {
	return eu.SetWorkflowDataID(w.ID)
}

// SetActivityDataID sets the "activity_data" edge to the ActivityData entity by ID.
func (eu *EntityUpdate) SetActivityDataID(id int) *EntityUpdate {
	eu.mutation.SetActivityDataID(id)
	return eu
}

// SetNillableActivityDataID sets the "activity_data" edge to the ActivityData entity by ID if the given value is not nil.
func (eu *EntityUpdate) SetNillableActivityDataID(id *int) *EntityUpdate {
	if id != nil {
		eu = eu.SetActivityDataID(*id)
	}
	return eu
}

// SetActivityData sets the "activity_data" edge to the ActivityData entity.
func (eu *EntityUpdate) SetActivityData(a *ActivityData) *EntityUpdate {
	return eu.SetActivityDataID(a.ID)
}

// SetSagaDataID sets the "saga_data" edge to the SagaData entity by ID.
func (eu *EntityUpdate) SetSagaDataID(id int) *EntityUpdate {
	eu.mutation.SetSagaDataID(id)
	return eu
}

// SetNillableSagaDataID sets the "saga_data" edge to the SagaData entity by ID if the given value is not nil.
func (eu *EntityUpdate) SetNillableSagaDataID(id *int) *EntityUpdate {
	if id != nil {
		eu = eu.SetSagaDataID(*id)
	}
	return eu
}

// SetSagaData sets the "saga_data" edge to the SagaData entity.
func (eu *EntityUpdate) SetSagaData(s *SagaData) *EntityUpdate {
	return eu.SetSagaDataID(s.ID)
}

// SetSideEffectDataID sets the "side_effect_data" edge to the SideEffectData entity by ID.
func (eu *EntityUpdate) SetSideEffectDataID(id int) *EntityUpdate {
	eu.mutation.SetSideEffectDataID(id)
	return eu
}

// SetNillableSideEffectDataID sets the "side_effect_data" edge to the SideEffectData entity by ID if the given value is not nil.
func (eu *EntityUpdate) SetNillableSideEffectDataID(id *int) *EntityUpdate {
	if id != nil {
		eu = eu.SetSideEffectDataID(*id)
	}
	return eu
}

// SetSideEffectData sets the "side_effect_data" edge to the SideEffectData entity.
func (eu *EntityUpdate) SetSideEffectData(s *SideEffectData) *EntityUpdate {
	return eu.SetSideEffectDataID(s.ID)
}

// Mutation returns the EntityMutation object of the builder.
func (eu *EntityUpdate) Mutation() *EntityMutation {
	return eu.mutation
}

// ClearRun clears the "run" edge to the Run entity.
func (eu *EntityUpdate) ClearRun() *EntityUpdate {
	eu.mutation.ClearRun()
	return eu
}

// ClearExecutions clears all "executions" edges to the Execution entity.
func (eu *EntityUpdate) ClearExecutions() *EntityUpdate {
	eu.mutation.ClearExecutions()
	return eu
}

// RemoveExecutionIDs removes the "executions" edge to Execution entities by IDs.
func (eu *EntityUpdate) RemoveExecutionIDs(ids ...int) *EntityUpdate {
	eu.mutation.RemoveExecutionIDs(ids...)
	return eu
}

// RemoveExecutions removes "executions" edges to Execution entities.
func (eu *EntityUpdate) RemoveExecutions(e ...*Execution) *EntityUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.RemoveExecutionIDs(ids...)
}

// ClearQueue clears the "queue" edge to the Queue entity.
func (eu *EntityUpdate) ClearQueue() *EntityUpdate {
	eu.mutation.ClearQueue()
	return eu
}

// ClearVersions clears all "versions" edges to the Version entity.
func (eu *EntityUpdate) ClearVersions() *EntityUpdate {
	eu.mutation.ClearVersions()
	return eu
}

// RemoveVersionIDs removes the "versions" edge to Version entities by IDs.
func (eu *EntityUpdate) RemoveVersionIDs(ids ...int) *EntityUpdate {
	eu.mutation.RemoveVersionIDs(ids...)
	return eu
}

// RemoveVersions removes "versions" edges to Version entities.
func (eu *EntityUpdate) RemoveVersions(v ...*Version) *EntityUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return eu.RemoveVersionIDs(ids...)
}

// ClearWorkflowData clears the "workflow_data" edge to the WorkflowData entity.
func (eu *EntityUpdate) ClearWorkflowData() *EntityUpdate {
	eu.mutation.ClearWorkflowData()
	return eu
}

// ClearActivityData clears the "activity_data" edge to the ActivityData entity.
func (eu *EntityUpdate) ClearActivityData() *EntityUpdate {
	eu.mutation.ClearActivityData()
	return eu
}

// ClearSagaData clears the "saga_data" edge to the SagaData entity.
func (eu *EntityUpdate) ClearSagaData() *EntityUpdate {
	eu.mutation.ClearSagaData()
	return eu
}

// ClearSideEffectData clears the "side_effect_data" edge to the SideEffectData entity.
func (eu *EntityUpdate) ClearSideEffectData() *EntityUpdate {
	eu.mutation.ClearSideEffectData()
	return eu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EntityUpdate) Save(ctx context.Context) (int, error) {
	eu.defaults()
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EntityUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EntityUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EntityUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eu *EntityUpdate) defaults() {
	if _, ok := eu.mutation.UpdatedAt(); !ok {
		v := entity.UpdateDefaultUpdatedAt()
		eu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eu *EntityUpdate) check() error {
	if v, ok := eu.mutation.HandlerName(); ok {
		if err := entity.HandlerNameValidator(v); err != nil {
			return &ValidationError{Name: "handler_name", err: fmt.Errorf(`ent: validator failed for field "Entity.handler_name": %w`, err)}
		}
	}
	if v, ok := eu.mutation.Status(); ok {
		if err := entity.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Entity.status": %w`, err)}
		}
	}
	if eu.mutation.RunCleared() && len(eu.mutation.RunIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Entity.run"`)
	}
	return nil
}

func (eu *EntityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := eu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(entity.Table, entity.Columns, sqlgraph.NewFieldSpec(entity.FieldID, field.TypeInt))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.UpdatedAt(); ok {
		_spec.SetField(entity.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := eu.mutation.HandlerName(); ok {
		_spec.SetField(entity.FieldHandlerName, field.TypeString, value)
	}
	if value, ok := eu.mutation.Status(); ok {
		_spec.SetField(entity.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := eu.mutation.StepID(); ok {
		_spec.SetField(entity.FieldStepID, field.TypeString, value)
	}
	if eu.mutation.RunCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entity.RunTable,
			Columns: []string{entity.RunColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(run.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RunIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entity.RunTable,
			Columns: []string{entity.RunColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(run.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.ExecutionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.ExecutionsTable,
			Columns: []string{entity.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(execution.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedExecutionsIDs(); len(nodes) > 0 && !eu.mutation.ExecutionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.ExecutionsTable,
			Columns: []string{entity.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(execution.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.ExecutionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.ExecutionsTable,
			Columns: []string{entity.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(execution.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.QueueCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entity.QueueTable,
			Columns: []string{entity.QueueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(queue.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.QueueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entity.QueueTable,
			Columns: []string{entity.QueueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(queue.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.VersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.VersionsTable,
			Columns: []string{entity.VersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(version.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedVersionsIDs(); len(nodes) > 0 && !eu.mutation.VersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.VersionsTable,
			Columns: []string{entity.VersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(version.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.VersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.VersionsTable,
			Columns: []string{entity.VersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(version.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.WorkflowDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   entity.WorkflowDataTable,
			Columns: []string{entity.WorkflowDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowdata.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.WorkflowDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   entity.WorkflowDataTable,
			Columns: []string{entity.WorkflowDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowdata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.ActivityDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   entity.ActivityDataTable,
			Columns: []string{entity.ActivityDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activitydata.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.ActivityDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   entity.ActivityDataTable,
			Columns: []string{entity.ActivityDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activitydata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.SagaDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   entity.SagaDataTable,
			Columns: []string{entity.SagaDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagadata.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.SagaDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   entity.SagaDataTable,
			Columns: []string{entity.SagaDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagadata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.SideEffectDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   entity.SideEffectDataTable,
			Columns: []string{entity.SideEffectDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sideeffectdata.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.SideEffectDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   entity.SideEffectDataTable,
			Columns: []string{entity.SideEffectDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sideeffectdata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// EntityUpdateOne is the builder for updating a single Entity entity.
type EntityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EntityMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (euo *EntityUpdateOne) SetUpdatedAt(t time.Time) *EntityUpdateOne {
	euo.mutation.SetUpdatedAt(t)
	return euo
}

// SetHandlerName sets the "handler_name" field.
func (euo *EntityUpdateOne) SetHandlerName(s string) *EntityUpdateOne {
	euo.mutation.SetHandlerName(s)
	return euo
}

// SetNillableHandlerName sets the "handler_name" field if the given value is not nil.
func (euo *EntityUpdateOne) SetNillableHandlerName(s *string) *EntityUpdateOne {
	if s != nil {
		euo.SetHandlerName(*s)
	}
	return euo
}

// SetStatus sets the "status" field.
func (euo *EntityUpdateOne) SetStatus(e entity.Status) *EntityUpdateOne {
	euo.mutation.SetStatus(e)
	return euo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (euo *EntityUpdateOne) SetNillableStatus(e *entity.Status) *EntityUpdateOne {
	if e != nil {
		euo.SetStatus(*e)
	}
	return euo
}

// SetStepID sets the "step_id" field.
func (euo *EntityUpdateOne) SetStepID(s string) *EntityUpdateOne {
	euo.mutation.SetStepID(s)
	return euo
}

// SetNillableStepID sets the "step_id" field if the given value is not nil.
func (euo *EntityUpdateOne) SetNillableStepID(s *string) *EntityUpdateOne {
	if s != nil {
		euo.SetStepID(*s)
	}
	return euo
}

// SetRunID sets the "run" edge to the Run entity by ID.
func (euo *EntityUpdateOne) SetRunID(id int) *EntityUpdateOne {
	euo.mutation.SetRunID(id)
	return euo
}

// SetRun sets the "run" edge to the Run entity.
func (euo *EntityUpdateOne) SetRun(r *Run) *EntityUpdateOne {
	return euo.SetRunID(r.ID)
}

// AddExecutionIDs adds the "executions" edge to the Execution entity by IDs.
func (euo *EntityUpdateOne) AddExecutionIDs(ids ...int) *EntityUpdateOne {
	euo.mutation.AddExecutionIDs(ids...)
	return euo
}

// AddExecutions adds the "executions" edges to the Execution entity.
func (euo *EntityUpdateOne) AddExecutions(e ...*Execution) *EntityUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.AddExecutionIDs(ids...)
}

// SetQueueID sets the "queue" edge to the Queue entity by ID.
func (euo *EntityUpdateOne) SetQueueID(id int) *EntityUpdateOne {
	euo.mutation.SetQueueID(id)
	return euo
}

// SetNillableQueueID sets the "queue" edge to the Queue entity by ID if the given value is not nil.
func (euo *EntityUpdateOne) SetNillableQueueID(id *int) *EntityUpdateOne {
	if id != nil {
		euo = euo.SetQueueID(*id)
	}
	return euo
}

// SetQueue sets the "queue" edge to the Queue entity.
func (euo *EntityUpdateOne) SetQueue(q *Queue) *EntityUpdateOne {
	return euo.SetQueueID(q.ID)
}

// AddVersionIDs adds the "versions" edge to the Version entity by IDs.
func (euo *EntityUpdateOne) AddVersionIDs(ids ...int) *EntityUpdateOne {
	euo.mutation.AddVersionIDs(ids...)
	return euo
}

// AddVersions adds the "versions" edges to the Version entity.
func (euo *EntityUpdateOne) AddVersions(v ...*Version) *EntityUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return euo.AddVersionIDs(ids...)
}

// SetWorkflowDataID sets the "workflow_data" edge to the WorkflowData entity by ID.
func (euo *EntityUpdateOne) SetWorkflowDataID(id int) *EntityUpdateOne {
	euo.mutation.SetWorkflowDataID(id)
	return euo
}

// SetNillableWorkflowDataID sets the "workflow_data" edge to the WorkflowData entity by ID if the given value is not nil.
func (euo *EntityUpdateOne) SetNillableWorkflowDataID(id *int) *EntityUpdateOne {
	if id != nil {
		euo = euo.SetWorkflowDataID(*id)
	}
	return euo
}

// SetWorkflowData sets the "workflow_data" edge to the WorkflowData entity.
func (euo *EntityUpdateOne) SetWorkflowData(w *WorkflowData) *EntityUpdateOne {
	return euo.SetWorkflowDataID(w.ID)
}

// SetActivityDataID sets the "activity_data" edge to the ActivityData entity by ID.
func (euo *EntityUpdateOne) SetActivityDataID(id int) *EntityUpdateOne {
	euo.mutation.SetActivityDataID(id)
	return euo
}

// SetNillableActivityDataID sets the "activity_data" edge to the ActivityData entity by ID if the given value is not nil.
func (euo *EntityUpdateOne) SetNillableActivityDataID(id *int) *EntityUpdateOne {
	if id != nil {
		euo = euo.SetActivityDataID(*id)
	}
	return euo
}

// SetActivityData sets the "activity_data" edge to the ActivityData entity.
func (euo *EntityUpdateOne) SetActivityData(a *ActivityData) *EntityUpdateOne {
	return euo.SetActivityDataID(a.ID)
}

// SetSagaDataID sets the "saga_data" edge to the SagaData entity by ID.
func (euo *EntityUpdateOne) SetSagaDataID(id int) *EntityUpdateOne {
	euo.mutation.SetSagaDataID(id)
	return euo
}

// SetNillableSagaDataID sets the "saga_data" edge to the SagaData entity by ID if the given value is not nil.
func (euo *EntityUpdateOne) SetNillableSagaDataID(id *int) *EntityUpdateOne {
	if id != nil {
		euo = euo.SetSagaDataID(*id)
	}
	return euo
}

// SetSagaData sets the "saga_data" edge to the SagaData entity.
func (euo *EntityUpdateOne) SetSagaData(s *SagaData) *EntityUpdateOne {
	return euo.SetSagaDataID(s.ID)
}

// SetSideEffectDataID sets the "side_effect_data" edge to the SideEffectData entity by ID.
func (euo *EntityUpdateOne) SetSideEffectDataID(id int) *EntityUpdateOne {
	euo.mutation.SetSideEffectDataID(id)
	return euo
}

// SetNillableSideEffectDataID sets the "side_effect_data" edge to the SideEffectData entity by ID if the given value is not nil.
func (euo *EntityUpdateOne) SetNillableSideEffectDataID(id *int) *EntityUpdateOne {
	if id != nil {
		euo = euo.SetSideEffectDataID(*id)
	}
	return euo
}

// SetSideEffectData sets the "side_effect_data" edge to the SideEffectData entity.
func (euo *EntityUpdateOne) SetSideEffectData(s *SideEffectData) *EntityUpdateOne {
	return euo.SetSideEffectDataID(s.ID)
}

// Mutation returns the EntityMutation object of the builder.
func (euo *EntityUpdateOne) Mutation() *EntityMutation {
	return euo.mutation
}

// ClearRun clears the "run" edge to the Run entity.
func (euo *EntityUpdateOne) ClearRun() *EntityUpdateOne {
	euo.mutation.ClearRun()
	return euo
}

// ClearExecutions clears all "executions" edges to the Execution entity.
func (euo *EntityUpdateOne) ClearExecutions() *EntityUpdateOne {
	euo.mutation.ClearExecutions()
	return euo
}

// RemoveExecutionIDs removes the "executions" edge to Execution entities by IDs.
func (euo *EntityUpdateOne) RemoveExecutionIDs(ids ...int) *EntityUpdateOne {
	euo.mutation.RemoveExecutionIDs(ids...)
	return euo
}

// RemoveExecutions removes "executions" edges to Execution entities.
func (euo *EntityUpdateOne) RemoveExecutions(e ...*Execution) *EntityUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.RemoveExecutionIDs(ids...)
}

// ClearQueue clears the "queue" edge to the Queue entity.
func (euo *EntityUpdateOne) ClearQueue() *EntityUpdateOne {
	euo.mutation.ClearQueue()
	return euo
}

// ClearVersions clears all "versions" edges to the Version entity.
func (euo *EntityUpdateOne) ClearVersions() *EntityUpdateOne {
	euo.mutation.ClearVersions()
	return euo
}

// RemoveVersionIDs removes the "versions" edge to Version entities by IDs.
func (euo *EntityUpdateOne) RemoveVersionIDs(ids ...int) *EntityUpdateOne {
	euo.mutation.RemoveVersionIDs(ids...)
	return euo
}

// RemoveVersions removes "versions" edges to Version entities.
func (euo *EntityUpdateOne) RemoveVersions(v ...*Version) *EntityUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return euo.RemoveVersionIDs(ids...)
}

// ClearWorkflowData clears the "workflow_data" edge to the WorkflowData entity.
func (euo *EntityUpdateOne) ClearWorkflowData() *EntityUpdateOne {
	euo.mutation.ClearWorkflowData()
	return euo
}

// ClearActivityData clears the "activity_data" edge to the ActivityData entity.
func (euo *EntityUpdateOne) ClearActivityData() *EntityUpdateOne {
	euo.mutation.ClearActivityData()
	return euo
}

// ClearSagaData clears the "saga_data" edge to the SagaData entity.
func (euo *EntityUpdateOne) ClearSagaData() *EntityUpdateOne {
	euo.mutation.ClearSagaData()
	return euo
}

// ClearSideEffectData clears the "side_effect_data" edge to the SideEffectData entity.
func (euo *EntityUpdateOne) ClearSideEffectData() *EntityUpdateOne {
	euo.mutation.ClearSideEffectData()
	return euo
}

// Where appends a list predicates to the EntityUpdate builder.
func (euo *EntityUpdateOne) Where(ps ...predicate.Entity) *EntityUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EntityUpdateOne) Select(field string, fields ...string) *EntityUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Entity entity.
func (euo *EntityUpdateOne) Save(ctx context.Context) (*Entity, error) {
	euo.defaults()
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EntityUpdateOne) SaveX(ctx context.Context) *Entity {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EntityUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EntityUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (euo *EntityUpdateOne) defaults() {
	if _, ok := euo.mutation.UpdatedAt(); !ok {
		v := entity.UpdateDefaultUpdatedAt()
		euo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euo *EntityUpdateOne) check() error {
	if v, ok := euo.mutation.HandlerName(); ok {
		if err := entity.HandlerNameValidator(v); err != nil {
			return &ValidationError{Name: "handler_name", err: fmt.Errorf(`ent: validator failed for field "Entity.handler_name": %w`, err)}
		}
	}
	if v, ok := euo.mutation.Status(); ok {
		if err := entity.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Entity.status": %w`, err)}
		}
	}
	if euo.mutation.RunCleared() && len(euo.mutation.RunIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Entity.run"`)
	}
	return nil
}

func (euo *EntityUpdateOne) sqlSave(ctx context.Context) (_node *Entity, err error) {
	if err := euo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(entity.Table, entity.Columns, sqlgraph.NewFieldSpec(entity.FieldID, field.TypeInt))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Entity.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, entity.FieldID)
		for _, f := range fields {
			if !entity.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != entity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.UpdatedAt(); ok {
		_spec.SetField(entity.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := euo.mutation.HandlerName(); ok {
		_spec.SetField(entity.FieldHandlerName, field.TypeString, value)
	}
	if value, ok := euo.mutation.Status(); ok {
		_spec.SetField(entity.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := euo.mutation.StepID(); ok {
		_spec.SetField(entity.FieldStepID, field.TypeString, value)
	}
	if euo.mutation.RunCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entity.RunTable,
			Columns: []string{entity.RunColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(run.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RunIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entity.RunTable,
			Columns: []string{entity.RunColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(run.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.ExecutionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.ExecutionsTable,
			Columns: []string{entity.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(execution.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedExecutionsIDs(); len(nodes) > 0 && !euo.mutation.ExecutionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.ExecutionsTable,
			Columns: []string{entity.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(execution.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.ExecutionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.ExecutionsTable,
			Columns: []string{entity.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(execution.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.QueueCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entity.QueueTable,
			Columns: []string{entity.QueueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(queue.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.QueueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entity.QueueTable,
			Columns: []string{entity.QueueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(queue.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.VersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.VersionsTable,
			Columns: []string{entity.VersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(version.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedVersionsIDs(); len(nodes) > 0 && !euo.mutation.VersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.VersionsTable,
			Columns: []string{entity.VersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(version.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.VersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.VersionsTable,
			Columns: []string{entity.VersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(version.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.WorkflowDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   entity.WorkflowDataTable,
			Columns: []string{entity.WorkflowDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowdata.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.WorkflowDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   entity.WorkflowDataTable,
			Columns: []string{entity.WorkflowDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowdata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.ActivityDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   entity.ActivityDataTable,
			Columns: []string{entity.ActivityDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activitydata.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.ActivityDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   entity.ActivityDataTable,
			Columns: []string{entity.ActivityDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activitydata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.SagaDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   entity.SagaDataTable,
			Columns: []string{entity.SagaDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagadata.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.SagaDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   entity.SagaDataTable,
			Columns: []string{entity.SagaDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagadata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.SideEffectDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   entity.SideEffectDataTable,
			Columns: []string{entity.SideEffectDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sideeffectdata.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.SideEffectDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   entity.SideEffectDataTable,
			Columns: []string{entity.SideEffectDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sideeffectdata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Entity{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
