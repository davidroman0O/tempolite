// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/activityexecution"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/entity"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/execution"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/predicate"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/sagaexecution"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/sideeffectexecution"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/workflowexecution"
)

// ExecutionQuery is the builder for querying Execution entities.
type ExecutionQuery struct {
	config
	ctx                     *QueryContext
	order                   []execution.OrderOption
	inters                  []Interceptor
	predicates              []predicate.Execution
	withEntity              *EntityQuery
	withWorkflowExecution   *WorkflowExecutionQuery
	withActivityExecution   *ActivityExecutionQuery
	withSagaExecution       *SagaExecutionQuery
	withSideEffectExecution *SideEffectExecutionQuery
	withFKs                 bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ExecutionQuery builder.
func (eq *ExecutionQuery) Where(ps ...predicate.Execution) *ExecutionQuery {
	eq.predicates = append(eq.predicates, ps...)
	return eq
}

// Limit the number of records to be returned by this query.
func (eq *ExecutionQuery) Limit(limit int) *ExecutionQuery {
	eq.ctx.Limit = &limit
	return eq
}

// Offset to start from.
func (eq *ExecutionQuery) Offset(offset int) *ExecutionQuery {
	eq.ctx.Offset = &offset
	return eq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (eq *ExecutionQuery) Unique(unique bool) *ExecutionQuery {
	eq.ctx.Unique = &unique
	return eq
}

// Order specifies how the records should be ordered.
func (eq *ExecutionQuery) Order(o ...execution.OrderOption) *ExecutionQuery {
	eq.order = append(eq.order, o...)
	return eq
}

// QueryEntity chains the current query on the "entity" edge.
func (eq *ExecutionQuery) QueryEntity() *EntityQuery {
	query := (&EntityClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(execution.Table, execution.FieldID, selector),
			sqlgraph.To(entity.Table, entity.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, execution.EntityTable, execution.EntityColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryWorkflowExecution chains the current query on the "workflow_execution" edge.
func (eq *ExecutionQuery) QueryWorkflowExecution() *WorkflowExecutionQuery {
	query := (&WorkflowExecutionClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(execution.Table, execution.FieldID, selector),
			sqlgraph.To(workflowexecution.Table, workflowexecution.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, execution.WorkflowExecutionTable, execution.WorkflowExecutionColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryActivityExecution chains the current query on the "activity_execution" edge.
func (eq *ExecutionQuery) QueryActivityExecution() *ActivityExecutionQuery {
	query := (&ActivityExecutionClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(execution.Table, execution.FieldID, selector),
			sqlgraph.To(activityexecution.Table, activityexecution.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, execution.ActivityExecutionTable, execution.ActivityExecutionColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySagaExecution chains the current query on the "saga_execution" edge.
func (eq *ExecutionQuery) QuerySagaExecution() *SagaExecutionQuery {
	query := (&SagaExecutionClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(execution.Table, execution.FieldID, selector),
			sqlgraph.To(sagaexecution.Table, sagaexecution.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, execution.SagaExecutionTable, execution.SagaExecutionColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySideEffectExecution chains the current query on the "side_effect_execution" edge.
func (eq *ExecutionQuery) QuerySideEffectExecution() *SideEffectExecutionQuery {
	query := (&SideEffectExecutionClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(execution.Table, execution.FieldID, selector),
			sqlgraph.To(sideeffectexecution.Table, sideeffectexecution.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, execution.SideEffectExecutionTable, execution.SideEffectExecutionColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Execution entity from the query.
// Returns a *NotFoundError when no Execution was found.
func (eq *ExecutionQuery) First(ctx context.Context) (*Execution, error) {
	nodes, err := eq.Limit(1).All(setContextOp(ctx, eq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{execution.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (eq *ExecutionQuery) FirstX(ctx context.Context) *Execution {
	node, err := eq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Execution ID from the query.
// Returns a *NotFoundError when no Execution ID was found.
func (eq *ExecutionQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = eq.Limit(1).IDs(setContextOp(ctx, eq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{execution.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (eq *ExecutionQuery) FirstIDX(ctx context.Context) int {
	id, err := eq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Execution entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Execution entity is found.
// Returns a *NotFoundError when no Execution entities are found.
func (eq *ExecutionQuery) Only(ctx context.Context) (*Execution, error) {
	nodes, err := eq.Limit(2).All(setContextOp(ctx, eq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{execution.Label}
	default:
		return nil, &NotSingularError{execution.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (eq *ExecutionQuery) OnlyX(ctx context.Context) *Execution {
	node, err := eq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Execution ID in the query.
// Returns a *NotSingularError when more than one Execution ID is found.
// Returns a *NotFoundError when no entities are found.
func (eq *ExecutionQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = eq.Limit(2).IDs(setContextOp(ctx, eq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{execution.Label}
	default:
		err = &NotSingularError{execution.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (eq *ExecutionQuery) OnlyIDX(ctx context.Context) int {
	id, err := eq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Executions.
func (eq *ExecutionQuery) All(ctx context.Context) ([]*Execution, error) {
	ctx = setContextOp(ctx, eq.ctx, ent.OpQueryAll)
	if err := eq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Execution, *ExecutionQuery]()
	return withInterceptors[[]*Execution](ctx, eq, qr, eq.inters)
}

// AllX is like All, but panics if an error occurs.
func (eq *ExecutionQuery) AllX(ctx context.Context) []*Execution {
	nodes, err := eq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Execution IDs.
func (eq *ExecutionQuery) IDs(ctx context.Context) (ids []int, err error) {
	if eq.ctx.Unique == nil && eq.path != nil {
		eq.Unique(true)
	}
	ctx = setContextOp(ctx, eq.ctx, ent.OpQueryIDs)
	if err = eq.Select(execution.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (eq *ExecutionQuery) IDsX(ctx context.Context) []int {
	ids, err := eq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (eq *ExecutionQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, eq.ctx, ent.OpQueryCount)
	if err := eq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, eq, querierCount[*ExecutionQuery](), eq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (eq *ExecutionQuery) CountX(ctx context.Context) int {
	count, err := eq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (eq *ExecutionQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, eq.ctx, ent.OpQueryExist)
	switch _, err := eq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (eq *ExecutionQuery) ExistX(ctx context.Context) bool {
	exist, err := eq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ExecutionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (eq *ExecutionQuery) Clone() *ExecutionQuery {
	if eq == nil {
		return nil
	}
	return &ExecutionQuery{
		config:                  eq.config,
		ctx:                     eq.ctx.Clone(),
		order:                   append([]execution.OrderOption{}, eq.order...),
		inters:                  append([]Interceptor{}, eq.inters...),
		predicates:              append([]predicate.Execution{}, eq.predicates...),
		withEntity:              eq.withEntity.Clone(),
		withWorkflowExecution:   eq.withWorkflowExecution.Clone(),
		withActivityExecution:   eq.withActivityExecution.Clone(),
		withSagaExecution:       eq.withSagaExecution.Clone(),
		withSideEffectExecution: eq.withSideEffectExecution.Clone(),
		// clone intermediate query.
		sql:  eq.sql.Clone(),
		path: eq.path,
	}
}

// WithEntity tells the query-builder to eager-load the nodes that are connected to
// the "entity" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *ExecutionQuery) WithEntity(opts ...func(*EntityQuery)) *ExecutionQuery {
	query := (&EntityClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withEntity = query
	return eq
}

// WithWorkflowExecution tells the query-builder to eager-load the nodes that are connected to
// the "workflow_execution" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *ExecutionQuery) WithWorkflowExecution(opts ...func(*WorkflowExecutionQuery)) *ExecutionQuery {
	query := (&WorkflowExecutionClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withWorkflowExecution = query
	return eq
}

// WithActivityExecution tells the query-builder to eager-load the nodes that are connected to
// the "activity_execution" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *ExecutionQuery) WithActivityExecution(opts ...func(*ActivityExecutionQuery)) *ExecutionQuery {
	query := (&ActivityExecutionClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withActivityExecution = query
	return eq
}

// WithSagaExecution tells the query-builder to eager-load the nodes that are connected to
// the "saga_execution" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *ExecutionQuery) WithSagaExecution(opts ...func(*SagaExecutionQuery)) *ExecutionQuery {
	query := (&SagaExecutionClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withSagaExecution = query
	return eq
}

// WithSideEffectExecution tells the query-builder to eager-load the nodes that are connected to
// the "side_effect_execution" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *ExecutionQuery) WithSideEffectExecution(opts ...func(*SideEffectExecutionQuery)) *ExecutionQuery {
	query := (&SideEffectExecutionClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withSideEffectExecution = query
	return eq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Execution.Query().
//		GroupBy(execution.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (eq *ExecutionQuery) GroupBy(field string, fields ...string) *ExecutionGroupBy {
	eq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ExecutionGroupBy{build: eq}
	grbuild.flds = &eq.ctx.Fields
	grbuild.label = execution.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Execution.Query().
//		Select(execution.FieldCreatedAt).
//		Scan(ctx, &v)
func (eq *ExecutionQuery) Select(fields ...string) *ExecutionSelect {
	eq.ctx.Fields = append(eq.ctx.Fields, fields...)
	sbuild := &ExecutionSelect{ExecutionQuery: eq}
	sbuild.label = execution.Label
	sbuild.flds, sbuild.scan = &eq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ExecutionSelect configured with the given aggregations.
func (eq *ExecutionQuery) Aggregate(fns ...AggregateFunc) *ExecutionSelect {
	return eq.Select().Aggregate(fns...)
}

func (eq *ExecutionQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range eq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, eq); err != nil {
				return err
			}
		}
	}
	for _, f := range eq.ctx.Fields {
		if !execution.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if eq.path != nil {
		prev, err := eq.path(ctx)
		if err != nil {
			return err
		}
		eq.sql = prev
	}
	return nil
}

func (eq *ExecutionQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Execution, error) {
	var (
		nodes       = []*Execution{}
		withFKs     = eq.withFKs
		_spec       = eq.querySpec()
		loadedTypes = [5]bool{
			eq.withEntity != nil,
			eq.withWorkflowExecution != nil,
			eq.withActivityExecution != nil,
			eq.withSagaExecution != nil,
			eq.withSideEffectExecution != nil,
		}
	)
	if eq.withEntity != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, execution.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Execution).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Execution{config: eq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, eq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := eq.withEntity; query != nil {
		if err := eq.loadEntity(ctx, query, nodes, nil,
			func(n *Execution, e *Entity) { n.Edges.Entity = e }); err != nil {
			return nil, err
		}
	}
	if query := eq.withWorkflowExecution; query != nil {
		if err := eq.loadWorkflowExecution(ctx, query, nodes, nil,
			func(n *Execution, e *WorkflowExecution) { n.Edges.WorkflowExecution = e }); err != nil {
			return nil, err
		}
	}
	if query := eq.withActivityExecution; query != nil {
		if err := eq.loadActivityExecution(ctx, query, nodes, nil,
			func(n *Execution, e *ActivityExecution) { n.Edges.ActivityExecution = e }); err != nil {
			return nil, err
		}
	}
	if query := eq.withSagaExecution; query != nil {
		if err := eq.loadSagaExecution(ctx, query, nodes, nil,
			func(n *Execution, e *SagaExecution) { n.Edges.SagaExecution = e }); err != nil {
			return nil, err
		}
	}
	if query := eq.withSideEffectExecution; query != nil {
		if err := eq.loadSideEffectExecution(ctx, query, nodes, nil,
			func(n *Execution, e *SideEffectExecution) { n.Edges.SideEffectExecution = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (eq *ExecutionQuery) loadEntity(ctx context.Context, query *EntityQuery, nodes []*Execution, init func(*Execution), assign func(*Execution, *Entity)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Execution)
	for i := range nodes {
		if nodes[i].entity_executions == nil {
			continue
		}
		fk := *nodes[i].entity_executions
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(entity.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "entity_executions" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (eq *ExecutionQuery) loadWorkflowExecution(ctx context.Context, query *WorkflowExecutionQuery, nodes []*Execution, init func(*Execution), assign func(*Execution, *WorkflowExecution)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Execution)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.WorkflowExecution(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(execution.WorkflowExecutionColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.execution_workflow_execution
		if fk == nil {
			return fmt.Errorf(`foreign-key "execution_workflow_execution" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "execution_workflow_execution" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *ExecutionQuery) loadActivityExecution(ctx context.Context, query *ActivityExecutionQuery, nodes []*Execution, init func(*Execution), assign func(*Execution, *ActivityExecution)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Execution)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.ActivityExecution(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(execution.ActivityExecutionColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.execution_activity_execution
		if fk == nil {
			return fmt.Errorf(`foreign-key "execution_activity_execution" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "execution_activity_execution" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *ExecutionQuery) loadSagaExecution(ctx context.Context, query *SagaExecutionQuery, nodes []*Execution, init func(*Execution), assign func(*Execution, *SagaExecution)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Execution)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.SagaExecution(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(execution.SagaExecutionColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.execution_saga_execution
		if fk == nil {
			return fmt.Errorf(`foreign-key "execution_saga_execution" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "execution_saga_execution" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *ExecutionQuery) loadSideEffectExecution(ctx context.Context, query *SideEffectExecutionQuery, nodes []*Execution, init func(*Execution), assign func(*Execution, *SideEffectExecution)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Execution)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.SideEffectExecution(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(execution.SideEffectExecutionColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.execution_side_effect_execution
		if fk == nil {
			return fmt.Errorf(`foreign-key "execution_side_effect_execution" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "execution_side_effect_execution" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (eq *ExecutionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := eq.querySpec()
	_spec.Node.Columns = eq.ctx.Fields
	if len(eq.ctx.Fields) > 0 {
		_spec.Unique = eq.ctx.Unique != nil && *eq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, eq.driver, _spec)
}

func (eq *ExecutionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(execution.Table, execution.Columns, sqlgraph.NewFieldSpec(execution.FieldID, field.TypeInt))
	_spec.From = eq.sql
	if unique := eq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if eq.path != nil {
		_spec.Unique = true
	}
	if fields := eq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, execution.FieldID)
		for i := range fields {
			if fields[i] != execution.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := eq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := eq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := eq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := eq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (eq *ExecutionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(eq.driver.Dialect())
	t1 := builder.Table(execution.Table)
	columns := eq.ctx.Fields
	if len(columns) == 0 {
		columns = execution.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if eq.sql != nil {
		selector = eq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if eq.ctx.Unique != nil && *eq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range eq.predicates {
		p(selector)
	}
	for _, p := range eq.order {
		p(selector)
	}
	if offset := eq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := eq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ExecutionGroupBy is the group-by builder for Execution entities.
type ExecutionGroupBy struct {
	selector
	build *ExecutionQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (egb *ExecutionGroupBy) Aggregate(fns ...AggregateFunc) *ExecutionGroupBy {
	egb.fns = append(egb.fns, fns...)
	return egb
}

// Scan applies the selector query and scans the result into the given value.
func (egb *ExecutionGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, egb.build.ctx, ent.OpQueryGroupBy)
	if err := egb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ExecutionQuery, *ExecutionGroupBy](ctx, egb.build, egb, egb.build.inters, v)
}

func (egb *ExecutionGroupBy) sqlScan(ctx context.Context, root *ExecutionQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(egb.fns))
	for _, fn := range egb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*egb.flds)+len(egb.fns))
		for _, f := range *egb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*egb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := egb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ExecutionSelect is the builder for selecting fields of Execution entities.
type ExecutionSelect struct {
	*ExecutionQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (es *ExecutionSelect) Aggregate(fns ...AggregateFunc) *ExecutionSelect {
	es.fns = append(es.fns, fns...)
	return es
}

// Scan applies the selector query and scans the result into the given value.
func (es *ExecutionSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, es.ctx, ent.OpQuerySelect)
	if err := es.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ExecutionQuery, *ExecutionSelect](ctx, es.ExecutionQuery, es, es.inters, v)
}

func (es *ExecutionSelect) sqlScan(ctx context.Context, root *ExecutionQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(es.fns))
	for _, fn := range es.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*es.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := es.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
