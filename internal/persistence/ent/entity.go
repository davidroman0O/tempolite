// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/activitydata"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/entity"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/queue"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/run"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/sagadata"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/sideeffectdata"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/workflowdata"
)

// Entity is the model entity for the Entity schema.
type Entity struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// HandlerName holds the value of the "handler_name" field.
	HandlerName string `json:"handler_name,omitempty"`
	// Type holds the value of the "type" field.
	Type entity.Type `json:"type,omitempty"`
	// Status holds the value of the "status" field.
	Status entity.Status `json:"status,omitempty"`
	// StepID holds the value of the "step_id" field.
	StepID string `json:"step_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EntityQuery when eager-loading is set.
	Edges          EntityEdges `json:"edges"`
	queue_entities *int
	run_entities   *int
	selectValues   sql.SelectValues
}

// EntityEdges holds the relations/edges for other nodes in the graph.
type EntityEdges struct {
	// Run holds the value of the run edge.
	Run *Run `json:"run,omitempty"`
	// Executions holds the value of the executions edge.
	Executions []*Execution `json:"executions,omitempty"`
	// Queue holds the value of the queue edge.
	Queue *Queue `json:"queue,omitempty"`
	// Versions holds the value of the versions edge.
	Versions []*Version `json:"versions,omitempty"`
	// WorkflowData holds the value of the workflow_data edge.
	WorkflowData *WorkflowData `json:"workflow_data,omitempty"`
	// ActivityData holds the value of the activity_data edge.
	ActivityData *ActivityData `json:"activity_data,omitempty"`
	// SagaData holds the value of the saga_data edge.
	SagaData *SagaData `json:"saga_data,omitempty"`
	// SideEffectData holds the value of the side_effect_data edge.
	SideEffectData *SideEffectData `json:"side_effect_data,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [8]bool
}

// RunOrErr returns the Run value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EntityEdges) RunOrErr() (*Run, error) {
	if e.Run != nil {
		return e.Run, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: run.Label}
	}
	return nil, &NotLoadedError{edge: "run"}
}

// ExecutionsOrErr returns the Executions value or an error if the edge
// was not loaded in eager-loading.
func (e EntityEdges) ExecutionsOrErr() ([]*Execution, error) {
	if e.loadedTypes[1] {
		return e.Executions, nil
	}
	return nil, &NotLoadedError{edge: "executions"}
}

// QueueOrErr returns the Queue value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EntityEdges) QueueOrErr() (*Queue, error) {
	if e.Queue != nil {
		return e.Queue, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: queue.Label}
	}
	return nil, &NotLoadedError{edge: "queue"}
}

// VersionsOrErr returns the Versions value or an error if the edge
// was not loaded in eager-loading.
func (e EntityEdges) VersionsOrErr() ([]*Version, error) {
	if e.loadedTypes[3] {
		return e.Versions, nil
	}
	return nil, &NotLoadedError{edge: "versions"}
}

// WorkflowDataOrErr returns the WorkflowData value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EntityEdges) WorkflowDataOrErr() (*WorkflowData, error) {
	if e.WorkflowData != nil {
		return e.WorkflowData, nil
	} else if e.loadedTypes[4] {
		return nil, &NotFoundError{label: workflowdata.Label}
	}
	return nil, &NotLoadedError{edge: "workflow_data"}
}

// ActivityDataOrErr returns the ActivityData value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EntityEdges) ActivityDataOrErr() (*ActivityData, error) {
	if e.ActivityData != nil {
		return e.ActivityData, nil
	} else if e.loadedTypes[5] {
		return nil, &NotFoundError{label: activitydata.Label}
	}
	return nil, &NotLoadedError{edge: "activity_data"}
}

// SagaDataOrErr returns the SagaData value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EntityEdges) SagaDataOrErr() (*SagaData, error) {
	if e.SagaData != nil {
		return e.SagaData, nil
	} else if e.loadedTypes[6] {
		return nil, &NotFoundError{label: sagadata.Label}
	}
	return nil, &NotLoadedError{edge: "saga_data"}
}

// SideEffectDataOrErr returns the SideEffectData value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EntityEdges) SideEffectDataOrErr() (*SideEffectData, error) {
	if e.SideEffectData != nil {
		return e.SideEffectData, nil
	} else if e.loadedTypes[7] {
		return nil, &NotFoundError{label: sideeffectdata.Label}
	}
	return nil, &NotLoadedError{edge: "side_effect_data"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Entity) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case entity.FieldID:
			values[i] = new(sql.NullInt64)
		case entity.FieldHandlerName, entity.FieldType, entity.FieldStatus, entity.FieldStepID:
			values[i] = new(sql.NullString)
		case entity.FieldCreatedAt, entity.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case entity.ForeignKeys[0]: // queue_entities
			values[i] = new(sql.NullInt64)
		case entity.ForeignKeys[1]: // run_entities
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Entity fields.
func (e *Entity) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case entity.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = int(value.Int64)
		case entity.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				e.CreatedAt = value.Time
			}
		case entity.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				e.UpdatedAt = value.Time
			}
		case entity.FieldHandlerName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field handler_name", values[i])
			} else if value.Valid {
				e.HandlerName = value.String
			}
		case entity.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				e.Type = entity.Type(value.String)
			}
		case entity.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				e.Status = entity.Status(value.String)
			}
		case entity.FieldStepID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field step_id", values[i])
			} else if value.Valid {
				e.StepID = value.String
			}
		case entity.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field queue_entities", value)
			} else if value.Valid {
				e.queue_entities = new(int)
				*e.queue_entities = int(value.Int64)
			}
		case entity.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field run_entities", value)
			} else if value.Valid {
				e.run_entities = new(int)
				*e.run_entities = int(value.Int64)
			}
		default:
			e.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Entity.
// This includes values selected through modifiers, order, etc.
func (e *Entity) Value(name string) (ent.Value, error) {
	return e.selectValues.Get(name)
}

// QueryRun queries the "run" edge of the Entity entity.
func (e *Entity) QueryRun() *RunQuery {
	return NewEntityClient(e.config).QueryRun(e)
}

// QueryExecutions queries the "executions" edge of the Entity entity.
func (e *Entity) QueryExecutions() *ExecutionQuery {
	return NewEntityClient(e.config).QueryExecutions(e)
}

// QueryQueue queries the "queue" edge of the Entity entity.
func (e *Entity) QueryQueue() *QueueQuery {
	return NewEntityClient(e.config).QueryQueue(e)
}

// QueryVersions queries the "versions" edge of the Entity entity.
func (e *Entity) QueryVersions() *VersionQuery {
	return NewEntityClient(e.config).QueryVersions(e)
}

// QueryWorkflowData queries the "workflow_data" edge of the Entity entity.
func (e *Entity) QueryWorkflowData() *WorkflowDataQuery {
	return NewEntityClient(e.config).QueryWorkflowData(e)
}

// QueryActivityData queries the "activity_data" edge of the Entity entity.
func (e *Entity) QueryActivityData() *ActivityDataQuery {
	return NewEntityClient(e.config).QueryActivityData(e)
}

// QuerySagaData queries the "saga_data" edge of the Entity entity.
func (e *Entity) QuerySagaData() *SagaDataQuery {
	return NewEntityClient(e.config).QuerySagaData(e)
}

// QuerySideEffectData queries the "side_effect_data" edge of the Entity entity.
func (e *Entity) QuerySideEffectData() *SideEffectDataQuery {
	return NewEntityClient(e.config).QuerySideEffectData(e)
}

// Update returns a builder for updating this Entity.
// Note that you need to call Entity.Unwrap() before calling this method if this Entity
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Entity) Update() *EntityUpdateOne {
	return NewEntityClient(e.config).UpdateOne(e)
}

// Unwrap unwraps the Entity entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Entity) Unwrap() *Entity {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Entity is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Entity) String() string {
	var builder strings.Builder
	builder.WriteString("Entity(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("created_at=")
	builder.WriteString(e.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(e.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("handler_name=")
	builder.WriteString(e.HandlerName)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", e.Type))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", e.Status))
	builder.WriteString(", ")
	builder.WriteString("step_id=")
	builder.WriteString(e.StepID)
	builder.WriteByte(')')
	return builder.String()
}

// Entities is a parsable slice of Entity.
type Entities []*Entity
