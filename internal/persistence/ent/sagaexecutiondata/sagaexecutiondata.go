// Code generated by ent, DO NOT EDIT.

package sagaexecutiondata

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the sagaexecutiondata type in the database.
	Label = "saga_execution_data"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTransactionHistory holds the string denoting the transaction_history field in the database.
	FieldTransactionHistory = "transaction_history"
	// FieldCompensationHistory holds the string denoting the compensation_history field in the database.
	FieldCompensationHistory = "compensation_history"
	// FieldLastTransaction holds the string denoting the last_transaction field in the database.
	FieldLastTransaction = "last_transaction"
	// EdgeSagaExecution holds the string denoting the saga_execution edge name in mutations.
	EdgeSagaExecution = "saga_execution"
	// Table holds the table name of the sagaexecutiondata in the database.
	Table = "saga_execution_data"
	// SagaExecutionTable is the table that holds the saga_execution relation/edge.
	SagaExecutionTable = "saga_execution_data"
	// SagaExecutionInverseTable is the table name for the SagaExecution entity.
	// It exists in this package in order to avoid circular dependency with the "sagaexecution" package.
	SagaExecutionInverseTable = "saga_executions"
	// SagaExecutionColumn is the table column denoting the saga_execution relation/edge.
	SagaExecutionColumn = "saga_execution_execution_data"
)

// Columns holds all SQL columns for sagaexecutiondata fields.
var Columns = []string{
	FieldID,
	FieldTransactionHistory,
	FieldCompensationHistory,
	FieldLastTransaction,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "saga_execution_data"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"saga_execution_execution_data",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the SagaExecutionData queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByLastTransaction orders the results by the last_transaction field.
func ByLastTransaction(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastTransaction, opts...).ToFunc()
}

// BySagaExecutionField orders the results by saga_execution field.
func BySagaExecutionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSagaExecutionStep(), sql.OrderByField(field, opts...))
	}
}
func newSagaExecutionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SagaExecutionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, SagaExecutionTable, SagaExecutionColumn),
	)
}
