// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/activitydata"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/entity"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/schema"
)

// ActivityDataCreate is the builder for creating a ActivityData entity.
type ActivityDataCreate struct {
	config
	mutation *ActivityDataMutation
	hooks    []Hook
}

// SetTimeout sets the "timeout" field.
func (adc *ActivityDataCreate) SetTimeout(i int64) *ActivityDataCreate {
	adc.mutation.SetTimeout(i)
	return adc
}

// SetNillableTimeout sets the "timeout" field if the given value is not nil.
func (adc *ActivityDataCreate) SetNillableTimeout(i *int64) *ActivityDataCreate {
	if i != nil {
		adc.SetTimeout(*i)
	}
	return adc
}

// SetMaxAttempts sets the "max_attempts" field.
func (adc *ActivityDataCreate) SetMaxAttempts(i int) *ActivityDataCreate {
	adc.mutation.SetMaxAttempts(i)
	return adc
}

// SetNillableMaxAttempts sets the "max_attempts" field if the given value is not nil.
func (adc *ActivityDataCreate) SetNillableMaxAttempts(i *int) *ActivityDataCreate {
	if i != nil {
		adc.SetMaxAttempts(*i)
	}
	return adc
}

// SetScheduledFor sets the "scheduled_for" field.
func (adc *ActivityDataCreate) SetScheduledFor(t time.Time) *ActivityDataCreate {
	adc.mutation.SetScheduledFor(t)
	return adc
}

// SetNillableScheduledFor sets the "scheduled_for" field if the given value is not nil.
func (adc *ActivityDataCreate) SetNillableScheduledFor(t *time.Time) *ActivityDataCreate {
	if t != nil {
		adc.SetScheduledFor(*t)
	}
	return adc
}

// SetRetryPolicy sets the "retry_policy" field.
func (adc *ActivityDataCreate) SetRetryPolicy(sp *schema.RetryPolicy) *ActivityDataCreate {
	adc.mutation.SetRetryPolicy(sp)
	return adc
}

// SetInput sets the "input" field.
func (adc *ActivityDataCreate) SetInput(u [][]uint8) *ActivityDataCreate {
	adc.mutation.SetInput(u)
	return adc
}

// SetOutput sets the "output" field.
func (adc *ActivityDataCreate) SetOutput(u [][]uint8) *ActivityDataCreate {
	adc.mutation.SetOutput(u)
	return adc
}

// SetAttempt sets the "attempt" field.
func (adc *ActivityDataCreate) SetAttempt(i int) *ActivityDataCreate {
	adc.mutation.SetAttempt(i)
	return adc
}

// SetNillableAttempt sets the "attempt" field if the given value is not nil.
func (adc *ActivityDataCreate) SetNillableAttempt(i *int) *ActivityDataCreate {
	if i != nil {
		adc.SetAttempt(*i)
	}
	return adc
}

// SetEntityID sets the "entity" edge to the Entity entity by ID.
func (adc *ActivityDataCreate) SetEntityID(id int) *ActivityDataCreate {
	adc.mutation.SetEntityID(id)
	return adc
}

// SetEntity sets the "entity" edge to the Entity entity.
func (adc *ActivityDataCreate) SetEntity(e *Entity) *ActivityDataCreate {
	return adc.SetEntityID(e.ID)
}

// Mutation returns the ActivityDataMutation object of the builder.
func (adc *ActivityDataCreate) Mutation() *ActivityDataMutation {
	return adc.mutation
}

// Save creates the ActivityData in the database.
func (adc *ActivityDataCreate) Save(ctx context.Context) (*ActivityData, error) {
	adc.defaults()
	return withHooks(ctx, adc.sqlSave, adc.mutation, adc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (adc *ActivityDataCreate) SaveX(ctx context.Context) *ActivityData {
	v, err := adc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (adc *ActivityDataCreate) Exec(ctx context.Context) error {
	_, err := adc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (adc *ActivityDataCreate) ExecX(ctx context.Context) {
	if err := adc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (adc *ActivityDataCreate) defaults() {
	if _, ok := adc.mutation.MaxAttempts(); !ok {
		v := activitydata.DefaultMaxAttempts
		adc.mutation.SetMaxAttempts(v)
	}
	if _, ok := adc.mutation.RetryPolicy(); !ok {
		v := activitydata.DefaultRetryPolicy
		adc.mutation.SetRetryPolicy(v)
	}
	if _, ok := adc.mutation.Attempt(); !ok {
		v := activitydata.DefaultAttempt
		adc.mutation.SetAttempt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (adc *ActivityDataCreate) check() error {
	if _, ok := adc.mutation.MaxAttempts(); !ok {
		return &ValidationError{Name: "max_attempts", err: errors.New(`ent: missing required field "ActivityData.max_attempts"`)}
	}
	if _, ok := adc.mutation.RetryPolicy(); !ok {
		return &ValidationError{Name: "retry_policy", err: errors.New(`ent: missing required field "ActivityData.retry_policy"`)}
	}
	if _, ok := adc.mutation.Attempt(); !ok {
		return &ValidationError{Name: "attempt", err: errors.New(`ent: missing required field "ActivityData.attempt"`)}
	}
	if len(adc.mutation.EntityIDs()) == 0 {
		return &ValidationError{Name: "entity", err: errors.New(`ent: missing required edge "ActivityData.entity"`)}
	}
	return nil
}

func (adc *ActivityDataCreate) sqlSave(ctx context.Context) (*ActivityData, error) {
	if err := adc.check(); err != nil {
		return nil, err
	}
	_node, _spec := adc.createSpec()
	if err := sqlgraph.CreateNode(ctx, adc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	adc.mutation.id = &_node.ID
	adc.mutation.done = true
	return _node, nil
}

func (adc *ActivityDataCreate) createSpec() (*ActivityData, *sqlgraph.CreateSpec) {
	var (
		_node = &ActivityData{config: adc.config}
		_spec = sqlgraph.NewCreateSpec(activitydata.Table, sqlgraph.NewFieldSpec(activitydata.FieldID, field.TypeInt))
	)
	if value, ok := adc.mutation.Timeout(); ok {
		_spec.SetField(activitydata.FieldTimeout, field.TypeInt64, value)
		_node.Timeout = value
	}
	if value, ok := adc.mutation.MaxAttempts(); ok {
		_spec.SetField(activitydata.FieldMaxAttempts, field.TypeInt, value)
		_node.MaxAttempts = value
	}
	if value, ok := adc.mutation.ScheduledFor(); ok {
		_spec.SetField(activitydata.FieldScheduledFor, field.TypeTime, value)
		_node.ScheduledFor = value
	}
	if value, ok := adc.mutation.RetryPolicy(); ok {
		_spec.SetField(activitydata.FieldRetryPolicy, field.TypeJSON, value)
		_node.RetryPolicy = value
	}
	if value, ok := adc.mutation.Input(); ok {
		_spec.SetField(activitydata.FieldInput, field.TypeJSON, value)
		_node.Input = value
	}
	if value, ok := adc.mutation.Output(); ok {
		_spec.SetField(activitydata.FieldOutput, field.TypeJSON, value)
		_node.Output = value
	}
	if value, ok := adc.mutation.Attempt(); ok {
		_spec.SetField(activitydata.FieldAttempt, field.TypeInt, value)
		_node.Attempt = value
	}
	if nodes := adc.mutation.EntityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   activitydata.EntityTable,
			Columns: []string{activitydata.EntityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.entity_activity_data = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ActivityDataCreateBulk is the builder for creating many ActivityData entities in bulk.
type ActivityDataCreateBulk struct {
	config
	err      error
	builders []*ActivityDataCreate
}

// Save creates the ActivityData entities in the database.
func (adcb *ActivityDataCreateBulk) Save(ctx context.Context) ([]*ActivityData, error) {
	if adcb.err != nil {
		return nil, adcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(adcb.builders))
	nodes := make([]*ActivityData, len(adcb.builders))
	mutators := make([]Mutator, len(adcb.builders))
	for i := range adcb.builders {
		func(i int, root context.Context) {
			builder := adcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ActivityDataMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, adcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, adcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, adcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (adcb *ActivityDataCreateBulk) SaveX(ctx context.Context) []*ActivityData {
	v, err := adcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (adcb *ActivityDataCreateBulk) Exec(ctx context.Context) error {
	_, err := adcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (adcb *ActivityDataCreateBulk) ExecX(ctx context.Context) {
	if err := adcb.Exec(ctx); err != nil {
		panic(err)
	}
}
