// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/sideeffectexecution"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/sideeffectexecutiondata"
)

// SideEffectExecutionDataCreate is the builder for creating a SideEffectExecutionData entity.
type SideEffectExecutionDataCreate struct {
	config
	mutation *SideEffectExecutionDataMutation
	hooks    []Hook
}

// SetOutputs sets the "outputs" field.
func (seedc *SideEffectExecutionDataCreate) SetOutputs(u [][]uint8) *SideEffectExecutionDataCreate {
	seedc.mutation.SetOutputs(u)
	return seedc
}

// SetSideEffectExecutionID sets the "side_effect_execution" edge to the SideEffectExecution entity by ID.
func (seedc *SideEffectExecutionDataCreate) SetSideEffectExecutionID(id int) *SideEffectExecutionDataCreate {
	seedc.mutation.SetSideEffectExecutionID(id)
	return seedc
}

// SetSideEffectExecution sets the "side_effect_execution" edge to the SideEffectExecution entity.
func (seedc *SideEffectExecutionDataCreate) SetSideEffectExecution(s *SideEffectExecution) *SideEffectExecutionDataCreate {
	return seedc.SetSideEffectExecutionID(s.ID)
}

// Mutation returns the SideEffectExecutionDataMutation object of the builder.
func (seedc *SideEffectExecutionDataCreate) Mutation() *SideEffectExecutionDataMutation {
	return seedc.mutation
}

// Save creates the SideEffectExecutionData in the database.
func (seedc *SideEffectExecutionDataCreate) Save(ctx context.Context) (*SideEffectExecutionData, error) {
	return withHooks(ctx, seedc.sqlSave, seedc.mutation, seedc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (seedc *SideEffectExecutionDataCreate) SaveX(ctx context.Context) *SideEffectExecutionData {
	v, err := seedc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (seedc *SideEffectExecutionDataCreate) Exec(ctx context.Context) error {
	_, err := seedc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (seedc *SideEffectExecutionDataCreate) ExecX(ctx context.Context) {
	if err := seedc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (seedc *SideEffectExecutionDataCreate) check() error {
	if len(seedc.mutation.SideEffectExecutionIDs()) == 0 {
		return &ValidationError{Name: "side_effect_execution", err: errors.New(`ent: missing required edge "SideEffectExecutionData.side_effect_execution"`)}
	}
	return nil
}

func (seedc *SideEffectExecutionDataCreate) sqlSave(ctx context.Context) (*SideEffectExecutionData, error) {
	if err := seedc.check(); err != nil {
		return nil, err
	}
	_node, _spec := seedc.createSpec()
	if err := sqlgraph.CreateNode(ctx, seedc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	seedc.mutation.id = &_node.ID
	seedc.mutation.done = true
	return _node, nil
}

func (seedc *SideEffectExecutionDataCreate) createSpec() (*SideEffectExecutionData, *sqlgraph.CreateSpec) {
	var (
		_node = &SideEffectExecutionData{config: seedc.config}
		_spec = sqlgraph.NewCreateSpec(sideeffectexecutiondata.Table, sqlgraph.NewFieldSpec(sideeffectexecutiondata.FieldID, field.TypeInt))
	)
	if value, ok := seedc.mutation.Outputs(); ok {
		_spec.SetField(sideeffectexecutiondata.FieldOutputs, field.TypeJSON, value)
		_node.Outputs = value
	}
	if nodes := seedc.mutation.SideEffectExecutionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   sideeffectexecutiondata.SideEffectExecutionTable,
			Columns: []string{sideeffectexecutiondata.SideEffectExecutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sideeffectexecution.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.side_effect_execution_execution_data = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SideEffectExecutionDataCreateBulk is the builder for creating many SideEffectExecutionData entities in bulk.
type SideEffectExecutionDataCreateBulk struct {
	config
	err      error
	builders []*SideEffectExecutionDataCreate
}

// Save creates the SideEffectExecutionData entities in the database.
func (seedcb *SideEffectExecutionDataCreateBulk) Save(ctx context.Context) ([]*SideEffectExecutionData, error) {
	if seedcb.err != nil {
		return nil, seedcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(seedcb.builders))
	nodes := make([]*SideEffectExecutionData, len(seedcb.builders))
	mutators := make([]Mutator, len(seedcb.builders))
	for i := range seedcb.builders {
		func(i int, root context.Context) {
			builder := seedcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SideEffectExecutionDataMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, seedcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, seedcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, seedcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (seedcb *SideEffectExecutionDataCreateBulk) SaveX(ctx context.Context) []*SideEffectExecutionData {
	v, err := seedcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (seedcb *SideEffectExecutionDataCreateBulk) Exec(ctx context.Context) error {
	_, err := seedcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (seedcb *SideEffectExecutionDataCreateBulk) ExecX(ctx context.Context) {
	if err := seedcb.Exec(ctx); err != nil {
		panic(err)
	}
}
