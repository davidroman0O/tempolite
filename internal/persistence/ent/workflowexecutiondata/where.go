// Code generated by ent, DO NOT EDIT.

package workflowexecutiondata

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.WorkflowExecutionData {
	return predicate.WorkflowExecutionData(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.WorkflowExecutionData {
	return predicate.WorkflowExecutionData(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.WorkflowExecutionData {
	return predicate.WorkflowExecutionData(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.WorkflowExecutionData {
	return predicate.WorkflowExecutionData(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.WorkflowExecutionData {
	return predicate.WorkflowExecutionData(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.WorkflowExecutionData {
	return predicate.WorkflowExecutionData(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.WorkflowExecutionData {
	return predicate.WorkflowExecutionData(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.WorkflowExecutionData {
	return predicate.WorkflowExecutionData(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.WorkflowExecutionData {
	return predicate.WorkflowExecutionData(sql.FieldLTE(FieldID, id))
}

// Error applies equality check predicate on the "error" field. It's identical to ErrorEQ.
func Error(v string) predicate.WorkflowExecutionData {
	return predicate.WorkflowExecutionData(sql.FieldEQ(FieldError, v))
}

// ErrorEQ applies the EQ predicate on the "error" field.
func ErrorEQ(v string) predicate.WorkflowExecutionData {
	return predicate.WorkflowExecutionData(sql.FieldEQ(FieldError, v))
}

// ErrorNEQ applies the NEQ predicate on the "error" field.
func ErrorNEQ(v string) predicate.WorkflowExecutionData {
	return predicate.WorkflowExecutionData(sql.FieldNEQ(FieldError, v))
}

// ErrorIn applies the In predicate on the "error" field.
func ErrorIn(vs ...string) predicate.WorkflowExecutionData {
	return predicate.WorkflowExecutionData(sql.FieldIn(FieldError, vs...))
}

// ErrorNotIn applies the NotIn predicate on the "error" field.
func ErrorNotIn(vs ...string) predicate.WorkflowExecutionData {
	return predicate.WorkflowExecutionData(sql.FieldNotIn(FieldError, vs...))
}

// ErrorGT applies the GT predicate on the "error" field.
func ErrorGT(v string) predicate.WorkflowExecutionData {
	return predicate.WorkflowExecutionData(sql.FieldGT(FieldError, v))
}

// ErrorGTE applies the GTE predicate on the "error" field.
func ErrorGTE(v string) predicate.WorkflowExecutionData {
	return predicate.WorkflowExecutionData(sql.FieldGTE(FieldError, v))
}

// ErrorLT applies the LT predicate on the "error" field.
func ErrorLT(v string) predicate.WorkflowExecutionData {
	return predicate.WorkflowExecutionData(sql.FieldLT(FieldError, v))
}

// ErrorLTE applies the LTE predicate on the "error" field.
func ErrorLTE(v string) predicate.WorkflowExecutionData {
	return predicate.WorkflowExecutionData(sql.FieldLTE(FieldError, v))
}

// ErrorContains applies the Contains predicate on the "error" field.
func ErrorContains(v string) predicate.WorkflowExecutionData {
	return predicate.WorkflowExecutionData(sql.FieldContains(FieldError, v))
}

// ErrorHasPrefix applies the HasPrefix predicate on the "error" field.
func ErrorHasPrefix(v string) predicate.WorkflowExecutionData {
	return predicate.WorkflowExecutionData(sql.FieldHasPrefix(FieldError, v))
}

// ErrorHasSuffix applies the HasSuffix predicate on the "error" field.
func ErrorHasSuffix(v string) predicate.WorkflowExecutionData {
	return predicate.WorkflowExecutionData(sql.FieldHasSuffix(FieldError, v))
}

// ErrorIsNil applies the IsNil predicate on the "error" field.
func ErrorIsNil() predicate.WorkflowExecutionData {
	return predicate.WorkflowExecutionData(sql.FieldIsNull(FieldError))
}

// ErrorNotNil applies the NotNil predicate on the "error" field.
func ErrorNotNil() predicate.WorkflowExecutionData {
	return predicate.WorkflowExecutionData(sql.FieldNotNull(FieldError))
}

// ErrorEqualFold applies the EqualFold predicate on the "error" field.
func ErrorEqualFold(v string) predicate.WorkflowExecutionData {
	return predicate.WorkflowExecutionData(sql.FieldEqualFold(FieldError, v))
}

// ErrorContainsFold applies the ContainsFold predicate on the "error" field.
func ErrorContainsFold(v string) predicate.WorkflowExecutionData {
	return predicate.WorkflowExecutionData(sql.FieldContainsFold(FieldError, v))
}

// OutputIsNil applies the IsNil predicate on the "output" field.
func OutputIsNil() predicate.WorkflowExecutionData {
	return predicate.WorkflowExecutionData(sql.FieldIsNull(FieldOutput))
}

// OutputNotNil applies the NotNil predicate on the "output" field.
func OutputNotNil() predicate.WorkflowExecutionData {
	return predicate.WorkflowExecutionData(sql.FieldNotNull(FieldOutput))
}

// HasWorkflowExecution applies the HasEdge predicate on the "workflow_execution" edge.
func HasWorkflowExecution() predicate.WorkflowExecutionData {
	return predicate.WorkflowExecutionData(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, WorkflowExecutionTable, WorkflowExecutionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWorkflowExecutionWith applies the HasEdge predicate on the "workflow_execution" edge with a given conditions (other predicates).
func HasWorkflowExecutionWith(preds ...predicate.WorkflowExecution) predicate.WorkflowExecutionData {
	return predicate.WorkflowExecutionData(func(s *sql.Selector) {
		step := newWorkflowExecutionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.WorkflowExecutionData) predicate.WorkflowExecutionData {
	return predicate.WorkflowExecutionData(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.WorkflowExecutionData) predicate.WorkflowExecutionData {
	return predicate.WorkflowExecutionData(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.WorkflowExecutionData) predicate.WorkflowExecutionData {
	return predicate.WorkflowExecutionData(sql.NotPredicates(p))
}
