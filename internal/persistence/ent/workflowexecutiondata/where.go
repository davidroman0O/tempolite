// Code generated by ent, DO NOT EDIT.

package workflowexecutiondata

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.WorkflowExecutionData {
	return predicate.WorkflowExecutionData(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.WorkflowExecutionData {
	return predicate.WorkflowExecutionData(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.WorkflowExecutionData {
	return predicate.WorkflowExecutionData(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.WorkflowExecutionData {
	return predicate.WorkflowExecutionData(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.WorkflowExecutionData {
	return predicate.WorkflowExecutionData(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.WorkflowExecutionData {
	return predicate.WorkflowExecutionData(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.WorkflowExecutionData {
	return predicate.WorkflowExecutionData(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.WorkflowExecutionData {
	return predicate.WorkflowExecutionData(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.WorkflowExecutionData {
	return predicate.WorkflowExecutionData(sql.FieldLTE(FieldID, id))
}

// LastHeartbeat applies equality check predicate on the "last_heartbeat" field. It's identical to LastHeartbeatEQ.
func LastHeartbeat(v time.Time) predicate.WorkflowExecutionData {
	return predicate.WorkflowExecutionData(sql.FieldEQ(FieldLastHeartbeat, v))
}

// LastHeartbeatEQ applies the EQ predicate on the "last_heartbeat" field.
func LastHeartbeatEQ(v time.Time) predicate.WorkflowExecutionData {
	return predicate.WorkflowExecutionData(sql.FieldEQ(FieldLastHeartbeat, v))
}

// LastHeartbeatNEQ applies the NEQ predicate on the "last_heartbeat" field.
func LastHeartbeatNEQ(v time.Time) predicate.WorkflowExecutionData {
	return predicate.WorkflowExecutionData(sql.FieldNEQ(FieldLastHeartbeat, v))
}

// LastHeartbeatIn applies the In predicate on the "last_heartbeat" field.
func LastHeartbeatIn(vs ...time.Time) predicate.WorkflowExecutionData {
	return predicate.WorkflowExecutionData(sql.FieldIn(FieldLastHeartbeat, vs...))
}

// LastHeartbeatNotIn applies the NotIn predicate on the "last_heartbeat" field.
func LastHeartbeatNotIn(vs ...time.Time) predicate.WorkflowExecutionData {
	return predicate.WorkflowExecutionData(sql.FieldNotIn(FieldLastHeartbeat, vs...))
}

// LastHeartbeatGT applies the GT predicate on the "last_heartbeat" field.
func LastHeartbeatGT(v time.Time) predicate.WorkflowExecutionData {
	return predicate.WorkflowExecutionData(sql.FieldGT(FieldLastHeartbeat, v))
}

// LastHeartbeatGTE applies the GTE predicate on the "last_heartbeat" field.
func LastHeartbeatGTE(v time.Time) predicate.WorkflowExecutionData {
	return predicate.WorkflowExecutionData(sql.FieldGTE(FieldLastHeartbeat, v))
}

// LastHeartbeatLT applies the LT predicate on the "last_heartbeat" field.
func LastHeartbeatLT(v time.Time) predicate.WorkflowExecutionData {
	return predicate.WorkflowExecutionData(sql.FieldLT(FieldLastHeartbeat, v))
}

// LastHeartbeatLTE applies the LTE predicate on the "last_heartbeat" field.
func LastHeartbeatLTE(v time.Time) predicate.WorkflowExecutionData {
	return predicate.WorkflowExecutionData(sql.FieldLTE(FieldLastHeartbeat, v))
}

// LastHeartbeatIsNil applies the IsNil predicate on the "last_heartbeat" field.
func LastHeartbeatIsNil() predicate.WorkflowExecutionData {
	return predicate.WorkflowExecutionData(sql.FieldIsNull(FieldLastHeartbeat))
}

// LastHeartbeatNotNil applies the NotNil predicate on the "last_heartbeat" field.
func LastHeartbeatNotNil() predicate.WorkflowExecutionData {
	return predicate.WorkflowExecutionData(sql.FieldNotNull(FieldLastHeartbeat))
}

// OutputsIsNil applies the IsNil predicate on the "outputs" field.
func OutputsIsNil() predicate.WorkflowExecutionData {
	return predicate.WorkflowExecutionData(sql.FieldIsNull(FieldOutputs))
}

// OutputsNotNil applies the NotNil predicate on the "outputs" field.
func OutputsNotNil() predicate.WorkflowExecutionData {
	return predicate.WorkflowExecutionData(sql.FieldNotNull(FieldOutputs))
}

// HasWorkflowExecution applies the HasEdge predicate on the "workflow_execution" edge.
func HasWorkflowExecution() predicate.WorkflowExecutionData {
	return predicate.WorkflowExecutionData(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, WorkflowExecutionTable, WorkflowExecutionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWorkflowExecutionWith applies the HasEdge predicate on the "workflow_execution" edge with a given conditions (other predicates).
func HasWorkflowExecutionWith(preds ...predicate.WorkflowExecution) predicate.WorkflowExecutionData {
	return predicate.WorkflowExecutionData(func(s *sql.Selector) {
		step := newWorkflowExecutionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.WorkflowExecutionData) predicate.WorkflowExecutionData {
	return predicate.WorkflowExecutionData(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.WorkflowExecutionData) predicate.WorkflowExecutionData {
	return predicate.WorkflowExecutionData(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.WorkflowExecutionData) predicate.WorkflowExecutionData {
	return predicate.WorkflowExecutionData(sql.NotPredicates(p))
}
