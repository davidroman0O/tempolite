// Code generated by ent, DO NOT EDIT.

package workflowexecutiondata

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the workflowexecutiondata type in the database.
	Label = "workflow_execution_data"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldError holds the string denoting the error field in the database.
	FieldError = "error"
	// FieldOutput holds the string denoting the output field in the database.
	FieldOutput = "output"
	// EdgeWorkflowExecution holds the string denoting the workflow_execution edge name in mutations.
	EdgeWorkflowExecution = "workflow_execution"
	// Table holds the table name of the workflowexecutiondata in the database.
	Table = "workflow_execution_data"
	// WorkflowExecutionTable is the table that holds the workflow_execution relation/edge.
	WorkflowExecutionTable = "workflow_execution_data"
	// WorkflowExecutionInverseTable is the table name for the WorkflowExecution entity.
	// It exists in this package in order to avoid circular dependency with the "workflowexecution" package.
	WorkflowExecutionInverseTable = "workflow_executions"
	// WorkflowExecutionColumn is the table column denoting the workflow_execution relation/edge.
	WorkflowExecutionColumn = "workflow_execution_execution_data"
)

// Columns holds all SQL columns for workflowexecutiondata fields.
var Columns = []string{
	FieldID,
	FieldError,
	FieldOutput,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "workflow_execution_data"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"workflow_execution_execution_data",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the WorkflowExecutionData queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByError orders the results by the error field.
func ByError(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldError, opts...).ToFunc()
}

// ByWorkflowExecutionField orders the results by workflow_execution field.
func ByWorkflowExecutionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWorkflowExecutionStep(), sql.OrderByField(field, opts...))
	}
}
func newWorkflowExecutionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WorkflowExecutionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, WorkflowExecutionTable, WorkflowExecutionColumn),
	)
}
