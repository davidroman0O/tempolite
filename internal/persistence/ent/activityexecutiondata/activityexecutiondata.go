// Code generated by ent, DO NOT EDIT.

package activityexecutiondata

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the activityexecutiondata type in the database.
	Label = "activity_execution_data"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldLastHeartbeat holds the string denoting the last_heartbeat field in the database.
	FieldLastHeartbeat = "last_heartbeat"
	// FieldOutputs holds the string denoting the outputs field in the database.
	FieldOutputs = "outputs"
	// EdgeActivityExecution holds the string denoting the activity_execution edge name in mutations.
	EdgeActivityExecution = "activity_execution"
	// Table holds the table name of the activityexecutiondata in the database.
	Table = "activity_execution_data"
	// ActivityExecutionTable is the table that holds the activity_execution relation/edge.
	ActivityExecutionTable = "activity_execution_data"
	// ActivityExecutionInverseTable is the table name for the ActivityExecution entity.
	// It exists in this package in order to avoid circular dependency with the "activityexecution" package.
	ActivityExecutionInverseTable = "activity_executions"
	// ActivityExecutionColumn is the table column denoting the activity_execution relation/edge.
	ActivityExecutionColumn = "activity_execution_execution_data"
)

// Columns holds all SQL columns for activityexecutiondata fields.
var Columns = []string{
	FieldID,
	FieldLastHeartbeat,
	FieldOutputs,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "activity_execution_data"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"activity_execution_execution_data",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the ActivityExecutionData queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByLastHeartbeat orders the results by the last_heartbeat field.
func ByLastHeartbeat(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastHeartbeat, opts...).ToFunc()
}

// ByActivityExecutionField orders the results by activity_execution field.
func ByActivityExecutionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newActivityExecutionStep(), sql.OrderByField(field, opts...))
	}
}
func newActivityExecutionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ActivityExecutionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, ActivityExecutionTable, ActivityExecutionColumn),
	)
}
