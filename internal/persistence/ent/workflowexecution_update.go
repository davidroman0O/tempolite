// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/execution"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/predicate"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/workflowexecution"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/workflowexecutiondata"
)

// WorkflowExecutionUpdate is the builder for updating WorkflowExecution entities.
type WorkflowExecutionUpdate struct {
	config
	hooks    []Hook
	mutation *WorkflowExecutionMutation
}

// Where appends a list predicates to the WorkflowExecutionUpdate builder.
func (weu *WorkflowExecutionUpdate) Where(ps ...predicate.WorkflowExecution) *WorkflowExecutionUpdate {
	weu.mutation.Where(ps...)
	return weu
}

// SetInputs sets the "inputs" field.
func (weu *WorkflowExecutionUpdate) SetInputs(u [][]uint8) *WorkflowExecutionUpdate {
	weu.mutation.SetInputs(u)
	return weu
}

// AppendInputs appends u to the "inputs" field.
func (weu *WorkflowExecutionUpdate) AppendInputs(u [][]uint8) *WorkflowExecutionUpdate {
	weu.mutation.AppendInputs(u)
	return weu
}

// ClearInputs clears the value of the "inputs" field.
func (weu *WorkflowExecutionUpdate) ClearInputs() *WorkflowExecutionUpdate {
	weu.mutation.ClearInputs()
	return weu
}

// SetExecutionID sets the "execution" edge to the Execution entity by ID.
func (weu *WorkflowExecutionUpdate) SetExecutionID(id int) *WorkflowExecutionUpdate {
	weu.mutation.SetExecutionID(id)
	return weu
}

// SetExecution sets the "execution" edge to the Execution entity.
func (weu *WorkflowExecutionUpdate) SetExecution(e *Execution) *WorkflowExecutionUpdate {
	return weu.SetExecutionID(e.ID)
}

// SetExecutionDataID sets the "execution_data" edge to the WorkflowExecutionData entity by ID.
func (weu *WorkflowExecutionUpdate) SetExecutionDataID(id int) *WorkflowExecutionUpdate {
	weu.mutation.SetExecutionDataID(id)
	return weu
}

// SetNillableExecutionDataID sets the "execution_data" edge to the WorkflowExecutionData entity by ID if the given value is not nil.
func (weu *WorkflowExecutionUpdate) SetNillableExecutionDataID(id *int) *WorkflowExecutionUpdate {
	if id != nil {
		weu = weu.SetExecutionDataID(*id)
	}
	return weu
}

// SetExecutionData sets the "execution_data" edge to the WorkflowExecutionData entity.
func (weu *WorkflowExecutionUpdate) SetExecutionData(w *WorkflowExecutionData) *WorkflowExecutionUpdate {
	return weu.SetExecutionDataID(w.ID)
}

// Mutation returns the WorkflowExecutionMutation object of the builder.
func (weu *WorkflowExecutionUpdate) Mutation() *WorkflowExecutionMutation {
	return weu.mutation
}

// ClearExecution clears the "execution" edge to the Execution entity.
func (weu *WorkflowExecutionUpdate) ClearExecution() *WorkflowExecutionUpdate {
	weu.mutation.ClearExecution()
	return weu
}

// ClearExecutionData clears the "execution_data" edge to the WorkflowExecutionData entity.
func (weu *WorkflowExecutionUpdate) ClearExecutionData() *WorkflowExecutionUpdate {
	weu.mutation.ClearExecutionData()
	return weu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (weu *WorkflowExecutionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, weu.sqlSave, weu.mutation, weu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (weu *WorkflowExecutionUpdate) SaveX(ctx context.Context) int {
	affected, err := weu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (weu *WorkflowExecutionUpdate) Exec(ctx context.Context) error {
	_, err := weu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (weu *WorkflowExecutionUpdate) ExecX(ctx context.Context) {
	if err := weu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (weu *WorkflowExecutionUpdate) check() error {
	if weu.mutation.ExecutionCleared() && len(weu.mutation.ExecutionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkflowExecution.execution"`)
	}
	return nil
}

func (weu *WorkflowExecutionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := weu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(workflowexecution.Table, workflowexecution.Columns, sqlgraph.NewFieldSpec(workflowexecution.FieldID, field.TypeInt))
	if ps := weu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := weu.mutation.Inputs(); ok {
		_spec.SetField(workflowexecution.FieldInputs, field.TypeJSON, value)
	}
	if value, ok := weu.mutation.AppendedInputs(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, workflowexecution.FieldInputs, value)
		})
	}
	if weu.mutation.InputsCleared() {
		_spec.ClearField(workflowexecution.FieldInputs, field.TypeJSON)
	}
	if weu.mutation.ExecutionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   workflowexecution.ExecutionTable,
			Columns: []string{workflowexecution.ExecutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(execution.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weu.mutation.ExecutionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   workflowexecution.ExecutionTable,
			Columns: []string{workflowexecution.ExecutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(execution.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if weu.mutation.ExecutionDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   workflowexecution.ExecutionDataTable,
			Columns: []string{workflowexecution.ExecutionDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowexecutiondata.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weu.mutation.ExecutionDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   workflowexecution.ExecutionDataTable,
			Columns: []string{workflowexecution.ExecutionDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowexecutiondata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, weu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workflowexecution.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	weu.mutation.done = true
	return n, nil
}

// WorkflowExecutionUpdateOne is the builder for updating a single WorkflowExecution entity.
type WorkflowExecutionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WorkflowExecutionMutation
}

// SetInputs sets the "inputs" field.
func (weuo *WorkflowExecutionUpdateOne) SetInputs(u [][]uint8) *WorkflowExecutionUpdateOne {
	weuo.mutation.SetInputs(u)
	return weuo
}

// AppendInputs appends u to the "inputs" field.
func (weuo *WorkflowExecutionUpdateOne) AppendInputs(u [][]uint8) *WorkflowExecutionUpdateOne {
	weuo.mutation.AppendInputs(u)
	return weuo
}

// ClearInputs clears the value of the "inputs" field.
func (weuo *WorkflowExecutionUpdateOne) ClearInputs() *WorkflowExecutionUpdateOne {
	weuo.mutation.ClearInputs()
	return weuo
}

// SetExecutionID sets the "execution" edge to the Execution entity by ID.
func (weuo *WorkflowExecutionUpdateOne) SetExecutionID(id int) *WorkflowExecutionUpdateOne {
	weuo.mutation.SetExecutionID(id)
	return weuo
}

// SetExecution sets the "execution" edge to the Execution entity.
func (weuo *WorkflowExecutionUpdateOne) SetExecution(e *Execution) *WorkflowExecutionUpdateOne {
	return weuo.SetExecutionID(e.ID)
}

// SetExecutionDataID sets the "execution_data" edge to the WorkflowExecutionData entity by ID.
func (weuo *WorkflowExecutionUpdateOne) SetExecutionDataID(id int) *WorkflowExecutionUpdateOne {
	weuo.mutation.SetExecutionDataID(id)
	return weuo
}

// SetNillableExecutionDataID sets the "execution_data" edge to the WorkflowExecutionData entity by ID if the given value is not nil.
func (weuo *WorkflowExecutionUpdateOne) SetNillableExecutionDataID(id *int) *WorkflowExecutionUpdateOne {
	if id != nil {
		weuo = weuo.SetExecutionDataID(*id)
	}
	return weuo
}

// SetExecutionData sets the "execution_data" edge to the WorkflowExecutionData entity.
func (weuo *WorkflowExecutionUpdateOne) SetExecutionData(w *WorkflowExecutionData) *WorkflowExecutionUpdateOne {
	return weuo.SetExecutionDataID(w.ID)
}

// Mutation returns the WorkflowExecutionMutation object of the builder.
func (weuo *WorkflowExecutionUpdateOne) Mutation() *WorkflowExecutionMutation {
	return weuo.mutation
}

// ClearExecution clears the "execution" edge to the Execution entity.
func (weuo *WorkflowExecutionUpdateOne) ClearExecution() *WorkflowExecutionUpdateOne {
	weuo.mutation.ClearExecution()
	return weuo
}

// ClearExecutionData clears the "execution_data" edge to the WorkflowExecutionData entity.
func (weuo *WorkflowExecutionUpdateOne) ClearExecutionData() *WorkflowExecutionUpdateOne {
	weuo.mutation.ClearExecutionData()
	return weuo
}

// Where appends a list predicates to the WorkflowExecutionUpdate builder.
func (weuo *WorkflowExecutionUpdateOne) Where(ps ...predicate.WorkflowExecution) *WorkflowExecutionUpdateOne {
	weuo.mutation.Where(ps...)
	return weuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (weuo *WorkflowExecutionUpdateOne) Select(field string, fields ...string) *WorkflowExecutionUpdateOne {
	weuo.fields = append([]string{field}, fields...)
	return weuo
}

// Save executes the query and returns the updated WorkflowExecution entity.
func (weuo *WorkflowExecutionUpdateOne) Save(ctx context.Context) (*WorkflowExecution, error) {
	return withHooks(ctx, weuo.sqlSave, weuo.mutation, weuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (weuo *WorkflowExecutionUpdateOne) SaveX(ctx context.Context) *WorkflowExecution {
	node, err := weuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (weuo *WorkflowExecutionUpdateOne) Exec(ctx context.Context) error {
	_, err := weuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (weuo *WorkflowExecutionUpdateOne) ExecX(ctx context.Context) {
	if err := weuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (weuo *WorkflowExecutionUpdateOne) check() error {
	if weuo.mutation.ExecutionCleared() && len(weuo.mutation.ExecutionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkflowExecution.execution"`)
	}
	return nil
}

func (weuo *WorkflowExecutionUpdateOne) sqlSave(ctx context.Context) (_node *WorkflowExecution, err error) {
	if err := weuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(workflowexecution.Table, workflowexecution.Columns, sqlgraph.NewFieldSpec(workflowexecution.FieldID, field.TypeInt))
	id, ok := weuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WorkflowExecution.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := weuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workflowexecution.FieldID)
		for _, f := range fields {
			if !workflowexecution.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != workflowexecution.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := weuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := weuo.mutation.Inputs(); ok {
		_spec.SetField(workflowexecution.FieldInputs, field.TypeJSON, value)
	}
	if value, ok := weuo.mutation.AppendedInputs(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, workflowexecution.FieldInputs, value)
		})
	}
	if weuo.mutation.InputsCleared() {
		_spec.ClearField(workflowexecution.FieldInputs, field.TypeJSON)
	}
	if weuo.mutation.ExecutionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   workflowexecution.ExecutionTable,
			Columns: []string{workflowexecution.ExecutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(execution.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weuo.mutation.ExecutionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   workflowexecution.ExecutionTable,
			Columns: []string{workflowexecution.ExecutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(execution.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if weuo.mutation.ExecutionDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   workflowexecution.ExecutionDataTable,
			Columns: []string{workflowexecution.ExecutionDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowexecutiondata.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weuo.mutation.ExecutionDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   workflowexecution.ExecutionDataTable,
			Columns: []string{workflowexecution.ExecutionDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowexecutiondata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &WorkflowExecution{config: weuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, weuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workflowexecution.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	weuo.mutation.done = true
	return _node, nil
}
