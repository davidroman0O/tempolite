// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/predicate"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/sideeffectexecution"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/sideeffectexecutiondata"
)

// SideEffectExecutionDataQuery is the builder for querying SideEffectExecutionData entities.
type SideEffectExecutionDataQuery struct {
	config
	ctx                     *QueryContext
	order                   []sideeffectexecutiondata.OrderOption
	inters                  []Interceptor
	predicates              []predicate.SideEffectExecutionData
	withSideEffectExecution *SideEffectExecutionQuery
	withFKs                 bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SideEffectExecutionDataQuery builder.
func (seedq *SideEffectExecutionDataQuery) Where(ps ...predicate.SideEffectExecutionData) *SideEffectExecutionDataQuery {
	seedq.predicates = append(seedq.predicates, ps...)
	return seedq
}

// Limit the number of records to be returned by this query.
func (seedq *SideEffectExecutionDataQuery) Limit(limit int) *SideEffectExecutionDataQuery {
	seedq.ctx.Limit = &limit
	return seedq
}

// Offset to start from.
func (seedq *SideEffectExecutionDataQuery) Offset(offset int) *SideEffectExecutionDataQuery {
	seedq.ctx.Offset = &offset
	return seedq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (seedq *SideEffectExecutionDataQuery) Unique(unique bool) *SideEffectExecutionDataQuery {
	seedq.ctx.Unique = &unique
	return seedq
}

// Order specifies how the records should be ordered.
func (seedq *SideEffectExecutionDataQuery) Order(o ...sideeffectexecutiondata.OrderOption) *SideEffectExecutionDataQuery {
	seedq.order = append(seedq.order, o...)
	return seedq
}

// QuerySideEffectExecution chains the current query on the "side_effect_execution" edge.
func (seedq *SideEffectExecutionDataQuery) QuerySideEffectExecution() *SideEffectExecutionQuery {
	query := (&SideEffectExecutionClient{config: seedq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := seedq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := seedq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(sideeffectexecutiondata.Table, sideeffectexecutiondata.FieldID, selector),
			sqlgraph.To(sideeffectexecution.Table, sideeffectexecution.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, sideeffectexecutiondata.SideEffectExecutionTable, sideeffectexecutiondata.SideEffectExecutionColumn),
		)
		fromU = sqlgraph.SetNeighbors(seedq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first SideEffectExecutionData entity from the query.
// Returns a *NotFoundError when no SideEffectExecutionData was found.
func (seedq *SideEffectExecutionDataQuery) First(ctx context.Context) (*SideEffectExecutionData, error) {
	nodes, err := seedq.Limit(1).All(setContextOp(ctx, seedq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{sideeffectexecutiondata.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (seedq *SideEffectExecutionDataQuery) FirstX(ctx context.Context) *SideEffectExecutionData {
	node, err := seedq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SideEffectExecutionData ID from the query.
// Returns a *NotFoundError when no SideEffectExecutionData ID was found.
func (seedq *SideEffectExecutionDataQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = seedq.Limit(1).IDs(setContextOp(ctx, seedq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{sideeffectexecutiondata.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (seedq *SideEffectExecutionDataQuery) FirstIDX(ctx context.Context) int {
	id, err := seedq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SideEffectExecutionData entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one SideEffectExecutionData entity is found.
// Returns a *NotFoundError when no SideEffectExecutionData entities are found.
func (seedq *SideEffectExecutionDataQuery) Only(ctx context.Context) (*SideEffectExecutionData, error) {
	nodes, err := seedq.Limit(2).All(setContextOp(ctx, seedq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{sideeffectexecutiondata.Label}
	default:
		return nil, &NotSingularError{sideeffectexecutiondata.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (seedq *SideEffectExecutionDataQuery) OnlyX(ctx context.Context) *SideEffectExecutionData {
	node, err := seedq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SideEffectExecutionData ID in the query.
// Returns a *NotSingularError when more than one SideEffectExecutionData ID is found.
// Returns a *NotFoundError when no entities are found.
func (seedq *SideEffectExecutionDataQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = seedq.Limit(2).IDs(setContextOp(ctx, seedq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{sideeffectexecutiondata.Label}
	default:
		err = &NotSingularError{sideeffectexecutiondata.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (seedq *SideEffectExecutionDataQuery) OnlyIDX(ctx context.Context) int {
	id, err := seedq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SideEffectExecutionDataSlice.
func (seedq *SideEffectExecutionDataQuery) All(ctx context.Context) ([]*SideEffectExecutionData, error) {
	ctx = setContextOp(ctx, seedq.ctx, ent.OpQueryAll)
	if err := seedq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*SideEffectExecutionData, *SideEffectExecutionDataQuery]()
	return withInterceptors[[]*SideEffectExecutionData](ctx, seedq, qr, seedq.inters)
}

// AllX is like All, but panics if an error occurs.
func (seedq *SideEffectExecutionDataQuery) AllX(ctx context.Context) []*SideEffectExecutionData {
	nodes, err := seedq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SideEffectExecutionData IDs.
func (seedq *SideEffectExecutionDataQuery) IDs(ctx context.Context) (ids []int, err error) {
	if seedq.ctx.Unique == nil && seedq.path != nil {
		seedq.Unique(true)
	}
	ctx = setContextOp(ctx, seedq.ctx, ent.OpQueryIDs)
	if err = seedq.Select(sideeffectexecutiondata.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (seedq *SideEffectExecutionDataQuery) IDsX(ctx context.Context) []int {
	ids, err := seedq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (seedq *SideEffectExecutionDataQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, seedq.ctx, ent.OpQueryCount)
	if err := seedq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, seedq, querierCount[*SideEffectExecutionDataQuery](), seedq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (seedq *SideEffectExecutionDataQuery) CountX(ctx context.Context) int {
	count, err := seedq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (seedq *SideEffectExecutionDataQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, seedq.ctx, ent.OpQueryExist)
	switch _, err := seedq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (seedq *SideEffectExecutionDataQuery) ExistX(ctx context.Context) bool {
	exist, err := seedq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SideEffectExecutionDataQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (seedq *SideEffectExecutionDataQuery) Clone() *SideEffectExecutionDataQuery {
	if seedq == nil {
		return nil
	}
	return &SideEffectExecutionDataQuery{
		config:                  seedq.config,
		ctx:                     seedq.ctx.Clone(),
		order:                   append([]sideeffectexecutiondata.OrderOption{}, seedq.order...),
		inters:                  append([]Interceptor{}, seedq.inters...),
		predicates:              append([]predicate.SideEffectExecutionData{}, seedq.predicates...),
		withSideEffectExecution: seedq.withSideEffectExecution.Clone(),
		// clone intermediate query.
		sql:  seedq.sql.Clone(),
		path: seedq.path,
	}
}

// WithSideEffectExecution tells the query-builder to eager-load the nodes that are connected to
// the "side_effect_execution" edge. The optional arguments are used to configure the query builder of the edge.
func (seedq *SideEffectExecutionDataQuery) WithSideEffectExecution(opts ...func(*SideEffectExecutionQuery)) *SideEffectExecutionDataQuery {
	query := (&SideEffectExecutionClient{config: seedq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	seedq.withSideEffectExecution = query
	return seedq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Outputs [][]uint8 `json:"outputs,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SideEffectExecutionData.Query().
//		GroupBy(sideeffectexecutiondata.FieldOutputs).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (seedq *SideEffectExecutionDataQuery) GroupBy(field string, fields ...string) *SideEffectExecutionDataGroupBy {
	seedq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &SideEffectExecutionDataGroupBy{build: seedq}
	grbuild.flds = &seedq.ctx.Fields
	grbuild.label = sideeffectexecutiondata.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Outputs [][]uint8 `json:"outputs,omitempty"`
//	}
//
//	client.SideEffectExecutionData.Query().
//		Select(sideeffectexecutiondata.FieldOutputs).
//		Scan(ctx, &v)
func (seedq *SideEffectExecutionDataQuery) Select(fields ...string) *SideEffectExecutionDataSelect {
	seedq.ctx.Fields = append(seedq.ctx.Fields, fields...)
	sbuild := &SideEffectExecutionDataSelect{SideEffectExecutionDataQuery: seedq}
	sbuild.label = sideeffectexecutiondata.Label
	sbuild.flds, sbuild.scan = &seedq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a SideEffectExecutionDataSelect configured with the given aggregations.
func (seedq *SideEffectExecutionDataQuery) Aggregate(fns ...AggregateFunc) *SideEffectExecutionDataSelect {
	return seedq.Select().Aggregate(fns...)
}

func (seedq *SideEffectExecutionDataQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range seedq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, seedq); err != nil {
				return err
			}
		}
	}
	for _, f := range seedq.ctx.Fields {
		if !sideeffectexecutiondata.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if seedq.path != nil {
		prev, err := seedq.path(ctx)
		if err != nil {
			return err
		}
		seedq.sql = prev
	}
	return nil
}

func (seedq *SideEffectExecutionDataQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*SideEffectExecutionData, error) {
	var (
		nodes       = []*SideEffectExecutionData{}
		withFKs     = seedq.withFKs
		_spec       = seedq.querySpec()
		loadedTypes = [1]bool{
			seedq.withSideEffectExecution != nil,
		}
	)
	if seedq.withSideEffectExecution != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, sideeffectexecutiondata.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*SideEffectExecutionData).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &SideEffectExecutionData{config: seedq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, seedq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := seedq.withSideEffectExecution; query != nil {
		if err := seedq.loadSideEffectExecution(ctx, query, nodes, nil,
			func(n *SideEffectExecutionData, e *SideEffectExecution) { n.Edges.SideEffectExecution = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (seedq *SideEffectExecutionDataQuery) loadSideEffectExecution(ctx context.Context, query *SideEffectExecutionQuery, nodes []*SideEffectExecutionData, init func(*SideEffectExecutionData), assign func(*SideEffectExecutionData, *SideEffectExecution)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*SideEffectExecutionData)
	for i := range nodes {
		if nodes[i].side_effect_execution_execution_data == nil {
			continue
		}
		fk := *nodes[i].side_effect_execution_execution_data
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(sideeffectexecution.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "side_effect_execution_execution_data" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (seedq *SideEffectExecutionDataQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := seedq.querySpec()
	_spec.Node.Columns = seedq.ctx.Fields
	if len(seedq.ctx.Fields) > 0 {
		_spec.Unique = seedq.ctx.Unique != nil && *seedq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, seedq.driver, _spec)
}

func (seedq *SideEffectExecutionDataQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(sideeffectexecutiondata.Table, sideeffectexecutiondata.Columns, sqlgraph.NewFieldSpec(sideeffectexecutiondata.FieldID, field.TypeInt))
	_spec.From = seedq.sql
	if unique := seedq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if seedq.path != nil {
		_spec.Unique = true
	}
	if fields := seedq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sideeffectexecutiondata.FieldID)
		for i := range fields {
			if fields[i] != sideeffectexecutiondata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := seedq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := seedq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := seedq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := seedq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (seedq *SideEffectExecutionDataQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(seedq.driver.Dialect())
	t1 := builder.Table(sideeffectexecutiondata.Table)
	columns := seedq.ctx.Fields
	if len(columns) == 0 {
		columns = sideeffectexecutiondata.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if seedq.sql != nil {
		selector = seedq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if seedq.ctx.Unique != nil && *seedq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range seedq.predicates {
		p(selector)
	}
	for _, p := range seedq.order {
		p(selector)
	}
	if offset := seedq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := seedq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// SideEffectExecutionDataGroupBy is the group-by builder for SideEffectExecutionData entities.
type SideEffectExecutionDataGroupBy struct {
	selector
	build *SideEffectExecutionDataQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (seedgb *SideEffectExecutionDataGroupBy) Aggregate(fns ...AggregateFunc) *SideEffectExecutionDataGroupBy {
	seedgb.fns = append(seedgb.fns, fns...)
	return seedgb
}

// Scan applies the selector query and scans the result into the given value.
func (seedgb *SideEffectExecutionDataGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, seedgb.build.ctx, ent.OpQueryGroupBy)
	if err := seedgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SideEffectExecutionDataQuery, *SideEffectExecutionDataGroupBy](ctx, seedgb.build, seedgb, seedgb.build.inters, v)
}

func (seedgb *SideEffectExecutionDataGroupBy) sqlScan(ctx context.Context, root *SideEffectExecutionDataQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(seedgb.fns))
	for _, fn := range seedgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*seedgb.flds)+len(seedgb.fns))
		for _, f := range *seedgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*seedgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := seedgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// SideEffectExecutionDataSelect is the builder for selecting fields of SideEffectExecutionData entities.
type SideEffectExecutionDataSelect struct {
	*SideEffectExecutionDataQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (seeds *SideEffectExecutionDataSelect) Aggregate(fns ...AggregateFunc) *SideEffectExecutionDataSelect {
	seeds.fns = append(seeds.fns, fns...)
	return seeds
}

// Scan applies the selector query and scans the result into the given value.
func (seeds *SideEffectExecutionDataSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, seeds.ctx, ent.OpQuerySelect)
	if err := seeds.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SideEffectExecutionDataQuery, *SideEffectExecutionDataSelect](ctx, seeds.SideEffectExecutionDataQuery, seeds, seeds.inters, v)
}

func (seeds *SideEffectExecutionDataSelect) sqlScan(ctx context.Context, root *SideEffectExecutionDataQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(seeds.fns))
	for _, fn := range seeds.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*seeds.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := seeds.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
