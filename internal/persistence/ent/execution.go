// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/activityexecution"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/entity"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/execution"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/sagaexecution"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/sideeffectexecution"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/workflowexecution"
)

// Execution is the model entity for the Execution schema.
type Execution struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// StartedAt holds the value of the "started_at" field.
	StartedAt time.Time `json:"started_at,omitempty"`
	// CompletedAt holds the value of the "completed_at" field.
	CompletedAt *time.Time `json:"completed_at,omitempty"`
	// Status holds the value of the "status" field.
	Status execution.Status `json:"status,omitempty"`
	// Error holds the value of the "error" field.
	Error string `json:"error,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ExecutionQuery when eager-loading is set.
	Edges             ExecutionEdges `json:"edges"`
	entity_executions *int
	selectValues      sql.SelectValues
}

// ExecutionEdges holds the relations/edges for other nodes in the graph.
type ExecutionEdges struct {
	// Entity holds the value of the entity edge.
	Entity *Entity `json:"entity,omitempty"`
	// WorkflowExecution holds the value of the workflow_execution edge.
	WorkflowExecution *WorkflowExecution `json:"workflow_execution,omitempty"`
	// ActivityExecution holds the value of the activity_execution edge.
	ActivityExecution *ActivityExecution `json:"activity_execution,omitempty"`
	// SagaExecution holds the value of the saga_execution edge.
	SagaExecution *SagaExecution `json:"saga_execution,omitempty"`
	// SideEffectExecution holds the value of the side_effect_execution edge.
	SideEffectExecution *SideEffectExecution `json:"side_effect_execution,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// EntityOrErr returns the Entity value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ExecutionEdges) EntityOrErr() (*Entity, error) {
	if e.Entity != nil {
		return e.Entity, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: entity.Label}
	}
	return nil, &NotLoadedError{edge: "entity"}
}

// WorkflowExecutionOrErr returns the WorkflowExecution value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ExecutionEdges) WorkflowExecutionOrErr() (*WorkflowExecution, error) {
	if e.WorkflowExecution != nil {
		return e.WorkflowExecution, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: workflowexecution.Label}
	}
	return nil, &NotLoadedError{edge: "workflow_execution"}
}

// ActivityExecutionOrErr returns the ActivityExecution value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ExecutionEdges) ActivityExecutionOrErr() (*ActivityExecution, error) {
	if e.ActivityExecution != nil {
		return e.ActivityExecution, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: activityexecution.Label}
	}
	return nil, &NotLoadedError{edge: "activity_execution"}
}

// SagaExecutionOrErr returns the SagaExecution value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ExecutionEdges) SagaExecutionOrErr() (*SagaExecution, error) {
	if e.SagaExecution != nil {
		return e.SagaExecution, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: sagaexecution.Label}
	}
	return nil, &NotLoadedError{edge: "saga_execution"}
}

// SideEffectExecutionOrErr returns the SideEffectExecution value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ExecutionEdges) SideEffectExecutionOrErr() (*SideEffectExecution, error) {
	if e.SideEffectExecution != nil {
		return e.SideEffectExecution, nil
	} else if e.loadedTypes[4] {
		return nil, &NotFoundError{label: sideeffectexecution.Label}
	}
	return nil, &NotLoadedError{edge: "side_effect_execution"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Execution) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case execution.FieldID:
			values[i] = new(sql.NullInt64)
		case execution.FieldStatus, execution.FieldError:
			values[i] = new(sql.NullString)
		case execution.FieldCreatedAt, execution.FieldUpdatedAt, execution.FieldStartedAt, execution.FieldCompletedAt:
			values[i] = new(sql.NullTime)
		case execution.ForeignKeys[0]: // entity_executions
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Execution fields.
func (e *Execution) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case execution.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = int(value.Int64)
		case execution.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				e.CreatedAt = value.Time
			}
		case execution.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				e.UpdatedAt = value.Time
			}
		case execution.FieldStartedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field started_at", values[i])
			} else if value.Valid {
				e.StartedAt = value.Time
			}
		case execution.FieldCompletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field completed_at", values[i])
			} else if value.Valid {
				e.CompletedAt = new(time.Time)
				*e.CompletedAt = value.Time
			}
		case execution.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				e.Status = execution.Status(value.String)
			}
		case execution.FieldError:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field error", values[i])
			} else if value.Valid {
				e.Error = value.String
			}
		case execution.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field entity_executions", value)
			} else if value.Valid {
				e.entity_executions = new(int)
				*e.entity_executions = int(value.Int64)
			}
		default:
			e.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Execution.
// This includes values selected through modifiers, order, etc.
func (e *Execution) Value(name string) (ent.Value, error) {
	return e.selectValues.Get(name)
}

// QueryEntity queries the "entity" edge of the Execution entity.
func (e *Execution) QueryEntity() *EntityQuery {
	return NewExecutionClient(e.config).QueryEntity(e)
}

// QueryWorkflowExecution queries the "workflow_execution" edge of the Execution entity.
func (e *Execution) QueryWorkflowExecution() *WorkflowExecutionQuery {
	return NewExecutionClient(e.config).QueryWorkflowExecution(e)
}

// QueryActivityExecution queries the "activity_execution" edge of the Execution entity.
func (e *Execution) QueryActivityExecution() *ActivityExecutionQuery {
	return NewExecutionClient(e.config).QueryActivityExecution(e)
}

// QuerySagaExecution queries the "saga_execution" edge of the Execution entity.
func (e *Execution) QuerySagaExecution() *SagaExecutionQuery {
	return NewExecutionClient(e.config).QuerySagaExecution(e)
}

// QuerySideEffectExecution queries the "side_effect_execution" edge of the Execution entity.
func (e *Execution) QuerySideEffectExecution() *SideEffectExecutionQuery {
	return NewExecutionClient(e.config).QuerySideEffectExecution(e)
}

// Update returns a builder for updating this Execution.
// Note that you need to call Execution.Unwrap() before calling this method if this Execution
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Execution) Update() *ExecutionUpdateOne {
	return NewExecutionClient(e.config).UpdateOne(e)
}

// Unwrap unwraps the Execution entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Execution) Unwrap() *Execution {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Execution is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Execution) String() string {
	var builder strings.Builder
	builder.WriteString("Execution(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("created_at=")
	builder.WriteString(e.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(e.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("started_at=")
	builder.WriteString(e.StartedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := e.CompletedAt; v != nil {
		builder.WriteString("completed_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", e.Status))
	builder.WriteString(", ")
	builder.WriteString("error=")
	builder.WriteString(e.Error)
	builder.WriteByte(')')
	return builder.String()
}

// Executions is a parsable slice of Execution.
type Executions []*Execution
