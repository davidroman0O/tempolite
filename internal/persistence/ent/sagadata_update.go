// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/entity"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/predicate"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/sagadata"
)

// SagaDataUpdate is the builder for updating SagaData entities.
type SagaDataUpdate struct {
	config
	hooks    []Hook
	mutation *SagaDataMutation
}

// Where appends a list predicates to the SagaDataUpdate builder.
func (sdu *SagaDataUpdate) Where(ps ...predicate.SagaData) *SagaDataUpdate {
	sdu.mutation.Where(ps...)
	return sdu
}

// SetCompensating sets the "compensating" field.
func (sdu *SagaDataUpdate) SetCompensating(b bool) *SagaDataUpdate {
	sdu.mutation.SetCompensating(b)
	return sdu
}

// SetNillableCompensating sets the "compensating" field if the given value is not nil.
func (sdu *SagaDataUpdate) SetNillableCompensating(b *bool) *SagaDataUpdate {
	if b != nil {
		sdu.SetCompensating(*b)
	}
	return sdu
}

// SetCompensationData sets the "compensation_data" field.
func (sdu *SagaDataUpdate) SetCompensationData(u [][]uint8) *SagaDataUpdate {
	sdu.mutation.SetCompensationData(u)
	return sdu
}

// AppendCompensationData appends u to the "compensation_data" field.
func (sdu *SagaDataUpdate) AppendCompensationData(u [][]uint8) *SagaDataUpdate {
	sdu.mutation.AppendCompensationData(u)
	return sdu
}

// ClearCompensationData clears the value of the "compensation_data" field.
func (sdu *SagaDataUpdate) ClearCompensationData() *SagaDataUpdate {
	sdu.mutation.ClearCompensationData()
	return sdu
}

// SetEntityID sets the "entity" edge to the Entity entity by ID.
func (sdu *SagaDataUpdate) SetEntityID(id int) *SagaDataUpdate {
	sdu.mutation.SetEntityID(id)
	return sdu
}

// SetEntity sets the "entity" edge to the Entity entity.
func (sdu *SagaDataUpdate) SetEntity(e *Entity) *SagaDataUpdate {
	return sdu.SetEntityID(e.ID)
}

// Mutation returns the SagaDataMutation object of the builder.
func (sdu *SagaDataUpdate) Mutation() *SagaDataMutation {
	return sdu.mutation
}

// ClearEntity clears the "entity" edge to the Entity entity.
func (sdu *SagaDataUpdate) ClearEntity() *SagaDataUpdate {
	sdu.mutation.ClearEntity()
	return sdu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sdu *SagaDataUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, sdu.sqlSave, sdu.mutation, sdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sdu *SagaDataUpdate) SaveX(ctx context.Context) int {
	affected, err := sdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sdu *SagaDataUpdate) Exec(ctx context.Context) error {
	_, err := sdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sdu *SagaDataUpdate) ExecX(ctx context.Context) {
	if err := sdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sdu *SagaDataUpdate) check() error {
	if sdu.mutation.EntityCleared() && len(sdu.mutation.EntityIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SagaData.entity"`)
	}
	return nil
}

func (sdu *SagaDataUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sdu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(sagadata.Table, sagadata.Columns, sqlgraph.NewFieldSpec(sagadata.FieldID, field.TypeInt))
	if ps := sdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sdu.mutation.Compensating(); ok {
		_spec.SetField(sagadata.FieldCompensating, field.TypeBool, value)
	}
	if value, ok := sdu.mutation.CompensationData(); ok {
		_spec.SetField(sagadata.FieldCompensationData, field.TypeJSON, value)
	}
	if value, ok := sdu.mutation.AppendedCompensationData(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, sagadata.FieldCompensationData, value)
		})
	}
	if sdu.mutation.CompensationDataCleared() {
		_spec.ClearField(sagadata.FieldCompensationData, field.TypeJSON)
	}
	if sdu.mutation.EntityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   sagadata.EntityTable,
			Columns: []string{sagadata.EntityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sdu.mutation.EntityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   sagadata.EntityTable,
			Columns: []string{sagadata.EntityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sagadata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sdu.mutation.done = true
	return n, nil
}

// SagaDataUpdateOne is the builder for updating a single SagaData entity.
type SagaDataUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SagaDataMutation
}

// SetCompensating sets the "compensating" field.
func (sduo *SagaDataUpdateOne) SetCompensating(b bool) *SagaDataUpdateOne {
	sduo.mutation.SetCompensating(b)
	return sduo
}

// SetNillableCompensating sets the "compensating" field if the given value is not nil.
func (sduo *SagaDataUpdateOne) SetNillableCompensating(b *bool) *SagaDataUpdateOne {
	if b != nil {
		sduo.SetCompensating(*b)
	}
	return sduo
}

// SetCompensationData sets the "compensation_data" field.
func (sduo *SagaDataUpdateOne) SetCompensationData(u [][]uint8) *SagaDataUpdateOne {
	sduo.mutation.SetCompensationData(u)
	return sduo
}

// AppendCompensationData appends u to the "compensation_data" field.
func (sduo *SagaDataUpdateOne) AppendCompensationData(u [][]uint8) *SagaDataUpdateOne {
	sduo.mutation.AppendCompensationData(u)
	return sduo
}

// ClearCompensationData clears the value of the "compensation_data" field.
func (sduo *SagaDataUpdateOne) ClearCompensationData() *SagaDataUpdateOne {
	sduo.mutation.ClearCompensationData()
	return sduo
}

// SetEntityID sets the "entity" edge to the Entity entity by ID.
func (sduo *SagaDataUpdateOne) SetEntityID(id int) *SagaDataUpdateOne {
	sduo.mutation.SetEntityID(id)
	return sduo
}

// SetEntity sets the "entity" edge to the Entity entity.
func (sduo *SagaDataUpdateOne) SetEntity(e *Entity) *SagaDataUpdateOne {
	return sduo.SetEntityID(e.ID)
}

// Mutation returns the SagaDataMutation object of the builder.
func (sduo *SagaDataUpdateOne) Mutation() *SagaDataMutation {
	return sduo.mutation
}

// ClearEntity clears the "entity" edge to the Entity entity.
func (sduo *SagaDataUpdateOne) ClearEntity() *SagaDataUpdateOne {
	sduo.mutation.ClearEntity()
	return sduo
}

// Where appends a list predicates to the SagaDataUpdate builder.
func (sduo *SagaDataUpdateOne) Where(ps ...predicate.SagaData) *SagaDataUpdateOne {
	sduo.mutation.Where(ps...)
	return sduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sduo *SagaDataUpdateOne) Select(field string, fields ...string) *SagaDataUpdateOne {
	sduo.fields = append([]string{field}, fields...)
	return sduo
}

// Save executes the query and returns the updated SagaData entity.
func (sduo *SagaDataUpdateOne) Save(ctx context.Context) (*SagaData, error) {
	return withHooks(ctx, sduo.sqlSave, sduo.mutation, sduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sduo *SagaDataUpdateOne) SaveX(ctx context.Context) *SagaData {
	node, err := sduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sduo *SagaDataUpdateOne) Exec(ctx context.Context) error {
	_, err := sduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sduo *SagaDataUpdateOne) ExecX(ctx context.Context) {
	if err := sduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sduo *SagaDataUpdateOne) check() error {
	if sduo.mutation.EntityCleared() && len(sduo.mutation.EntityIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SagaData.entity"`)
	}
	return nil
}

func (sduo *SagaDataUpdateOne) sqlSave(ctx context.Context) (_node *SagaData, err error) {
	if err := sduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(sagadata.Table, sagadata.Columns, sqlgraph.NewFieldSpec(sagadata.FieldID, field.TypeInt))
	id, ok := sduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SagaData.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sagadata.FieldID)
		for _, f := range fields {
			if !sagadata.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sagadata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sduo.mutation.Compensating(); ok {
		_spec.SetField(sagadata.FieldCompensating, field.TypeBool, value)
	}
	if value, ok := sduo.mutation.CompensationData(); ok {
		_spec.SetField(sagadata.FieldCompensationData, field.TypeJSON, value)
	}
	if value, ok := sduo.mutation.AppendedCompensationData(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, sagadata.FieldCompensationData, value)
		})
	}
	if sduo.mutation.CompensationDataCleared() {
		_spec.ClearField(sagadata.FieldCompensationData, field.TypeJSON)
	}
	if sduo.mutation.EntityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   sagadata.EntityTable,
			Columns: []string{sagadata.EntityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sduo.mutation.EntityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   sagadata.EntityTable,
			Columns: []string{sagadata.EntityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SagaData{config: sduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sagadata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sduo.mutation.done = true
	return _node, nil
}
