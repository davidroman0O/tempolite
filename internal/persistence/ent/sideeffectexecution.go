// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/execution"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/sideeffectexecution"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/sideeffectexecutiondata"
)

// SideEffectExecution is the model entity for the SideEffectExecution schema.
type SideEffectExecution struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SideEffectExecutionQuery when eager-loading is set.
	Edges                           SideEffectExecutionEdges `json:"edges"`
	execution_side_effect_execution *int
	selectValues                    sql.SelectValues
}

// SideEffectExecutionEdges holds the relations/edges for other nodes in the graph.
type SideEffectExecutionEdges struct {
	// Execution holds the value of the execution edge.
	Execution *Execution `json:"execution,omitempty"`
	// ExecutionData holds the value of the execution_data edge.
	ExecutionData *SideEffectExecutionData `json:"execution_data,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ExecutionOrErr returns the Execution value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SideEffectExecutionEdges) ExecutionOrErr() (*Execution, error) {
	if e.Execution != nil {
		return e.Execution, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: execution.Label}
	}
	return nil, &NotLoadedError{edge: "execution"}
}

// ExecutionDataOrErr returns the ExecutionData value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SideEffectExecutionEdges) ExecutionDataOrErr() (*SideEffectExecutionData, error) {
	if e.ExecutionData != nil {
		return e.ExecutionData, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: sideeffectexecutiondata.Label}
	}
	return nil, &NotLoadedError{edge: "execution_data"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SideEffectExecution) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sideeffectexecution.FieldID:
			values[i] = new(sql.NullInt64)
		case sideeffectexecution.ForeignKeys[0]: // execution_side_effect_execution
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SideEffectExecution fields.
func (see *SideEffectExecution) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sideeffectexecution.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			see.ID = int(value.Int64)
		case sideeffectexecution.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field execution_side_effect_execution", value)
			} else if value.Valid {
				see.execution_side_effect_execution = new(int)
				*see.execution_side_effect_execution = int(value.Int64)
			}
		default:
			see.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SideEffectExecution.
// This includes values selected through modifiers, order, etc.
func (see *SideEffectExecution) Value(name string) (ent.Value, error) {
	return see.selectValues.Get(name)
}

// QueryExecution queries the "execution" edge of the SideEffectExecution entity.
func (see *SideEffectExecution) QueryExecution() *ExecutionQuery {
	return NewSideEffectExecutionClient(see.config).QueryExecution(see)
}

// QueryExecutionData queries the "execution_data" edge of the SideEffectExecution entity.
func (see *SideEffectExecution) QueryExecutionData() *SideEffectExecutionDataQuery {
	return NewSideEffectExecutionClient(see.config).QueryExecutionData(see)
}

// Update returns a builder for updating this SideEffectExecution.
// Note that you need to call SideEffectExecution.Unwrap() before calling this method if this SideEffectExecution
// was returned from a transaction, and the transaction was committed or rolled back.
func (see *SideEffectExecution) Update() *SideEffectExecutionUpdateOne {
	return NewSideEffectExecutionClient(see.config).UpdateOne(see)
}

// Unwrap unwraps the SideEffectExecution entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (see *SideEffectExecution) Unwrap() *SideEffectExecution {
	_tx, ok := see.config.driver.(*txDriver)
	if !ok {
		panic("ent: SideEffectExecution is not a transactional entity")
	}
	see.config.driver = _tx.drv
	return see
}

// String implements the fmt.Stringer.
func (see *SideEffectExecution) String() string {
	var builder strings.Builder
	builder.WriteString("SideEffectExecution(")
	builder.WriteString(fmt.Sprintf("id=%v", see.ID))
	builder.WriteByte(')')
	return builder.String()
}

// SideEffectExecutions is a parsable slice of SideEffectExecution.
type SideEffectExecutions []*SideEffectExecution
