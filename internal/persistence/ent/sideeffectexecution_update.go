// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/execution"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/predicate"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/sideeffectexecution"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/sideeffectexecutiondata"
)

// SideEffectExecutionUpdate is the builder for updating SideEffectExecution entities.
type SideEffectExecutionUpdate struct {
	config
	hooks    []Hook
	mutation *SideEffectExecutionMutation
}

// Where appends a list predicates to the SideEffectExecutionUpdate builder.
func (seeu *SideEffectExecutionUpdate) Where(ps ...predicate.SideEffectExecution) *SideEffectExecutionUpdate {
	seeu.mutation.Where(ps...)
	return seeu
}

// SetResult sets the "result" field.
func (seeu *SideEffectExecutionUpdate) SetResult(u []uint8) *SideEffectExecutionUpdate {
	seeu.mutation.SetResult(u)
	return seeu
}

// AppendResult appends u to the "result" field.
func (seeu *SideEffectExecutionUpdate) AppendResult(u []uint8) *SideEffectExecutionUpdate {
	seeu.mutation.AppendResult(u)
	return seeu
}

// ClearResult clears the value of the "result" field.
func (seeu *SideEffectExecutionUpdate) ClearResult() *SideEffectExecutionUpdate {
	seeu.mutation.ClearResult()
	return seeu
}

// SetExecutionID sets the "execution" edge to the Execution entity by ID.
func (seeu *SideEffectExecutionUpdate) SetExecutionID(id int) *SideEffectExecutionUpdate {
	seeu.mutation.SetExecutionID(id)
	return seeu
}

// SetExecution sets the "execution" edge to the Execution entity.
func (seeu *SideEffectExecutionUpdate) SetExecution(e *Execution) *SideEffectExecutionUpdate {
	return seeu.SetExecutionID(e.ID)
}

// SetExecutionDataID sets the "execution_data" edge to the SideEffectExecutionData entity by ID.
func (seeu *SideEffectExecutionUpdate) SetExecutionDataID(id int) *SideEffectExecutionUpdate {
	seeu.mutation.SetExecutionDataID(id)
	return seeu
}

// SetNillableExecutionDataID sets the "execution_data" edge to the SideEffectExecutionData entity by ID if the given value is not nil.
func (seeu *SideEffectExecutionUpdate) SetNillableExecutionDataID(id *int) *SideEffectExecutionUpdate {
	if id != nil {
		seeu = seeu.SetExecutionDataID(*id)
	}
	return seeu
}

// SetExecutionData sets the "execution_data" edge to the SideEffectExecutionData entity.
func (seeu *SideEffectExecutionUpdate) SetExecutionData(s *SideEffectExecutionData) *SideEffectExecutionUpdate {
	return seeu.SetExecutionDataID(s.ID)
}

// Mutation returns the SideEffectExecutionMutation object of the builder.
func (seeu *SideEffectExecutionUpdate) Mutation() *SideEffectExecutionMutation {
	return seeu.mutation
}

// ClearExecution clears the "execution" edge to the Execution entity.
func (seeu *SideEffectExecutionUpdate) ClearExecution() *SideEffectExecutionUpdate {
	seeu.mutation.ClearExecution()
	return seeu
}

// ClearExecutionData clears the "execution_data" edge to the SideEffectExecutionData entity.
func (seeu *SideEffectExecutionUpdate) ClearExecutionData() *SideEffectExecutionUpdate {
	seeu.mutation.ClearExecutionData()
	return seeu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (seeu *SideEffectExecutionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, seeu.sqlSave, seeu.mutation, seeu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (seeu *SideEffectExecutionUpdate) SaveX(ctx context.Context) int {
	affected, err := seeu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (seeu *SideEffectExecutionUpdate) Exec(ctx context.Context) error {
	_, err := seeu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (seeu *SideEffectExecutionUpdate) ExecX(ctx context.Context) {
	if err := seeu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (seeu *SideEffectExecutionUpdate) check() error {
	if seeu.mutation.ExecutionCleared() && len(seeu.mutation.ExecutionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SideEffectExecution.execution"`)
	}
	return nil
}

func (seeu *SideEffectExecutionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := seeu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(sideeffectexecution.Table, sideeffectexecution.Columns, sqlgraph.NewFieldSpec(sideeffectexecution.FieldID, field.TypeInt))
	if ps := seeu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := seeu.mutation.Result(); ok {
		_spec.SetField(sideeffectexecution.FieldResult, field.TypeJSON, value)
	}
	if value, ok := seeu.mutation.AppendedResult(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, sideeffectexecution.FieldResult, value)
		})
	}
	if seeu.mutation.ResultCleared() {
		_spec.ClearField(sideeffectexecution.FieldResult, field.TypeJSON)
	}
	if seeu.mutation.ExecutionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   sideeffectexecution.ExecutionTable,
			Columns: []string{sideeffectexecution.ExecutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(execution.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := seeu.mutation.ExecutionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   sideeffectexecution.ExecutionTable,
			Columns: []string{sideeffectexecution.ExecutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(execution.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if seeu.mutation.ExecutionDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   sideeffectexecution.ExecutionDataTable,
			Columns: []string{sideeffectexecution.ExecutionDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sideeffectexecutiondata.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := seeu.mutation.ExecutionDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   sideeffectexecution.ExecutionDataTable,
			Columns: []string{sideeffectexecution.ExecutionDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sideeffectexecutiondata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, seeu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sideeffectexecution.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	seeu.mutation.done = true
	return n, nil
}

// SideEffectExecutionUpdateOne is the builder for updating a single SideEffectExecution entity.
type SideEffectExecutionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SideEffectExecutionMutation
}

// SetResult sets the "result" field.
func (seeuo *SideEffectExecutionUpdateOne) SetResult(u []uint8) *SideEffectExecutionUpdateOne {
	seeuo.mutation.SetResult(u)
	return seeuo
}

// AppendResult appends u to the "result" field.
func (seeuo *SideEffectExecutionUpdateOne) AppendResult(u []uint8) *SideEffectExecutionUpdateOne {
	seeuo.mutation.AppendResult(u)
	return seeuo
}

// ClearResult clears the value of the "result" field.
func (seeuo *SideEffectExecutionUpdateOne) ClearResult() *SideEffectExecutionUpdateOne {
	seeuo.mutation.ClearResult()
	return seeuo
}

// SetExecutionID sets the "execution" edge to the Execution entity by ID.
func (seeuo *SideEffectExecutionUpdateOne) SetExecutionID(id int) *SideEffectExecutionUpdateOne {
	seeuo.mutation.SetExecutionID(id)
	return seeuo
}

// SetExecution sets the "execution" edge to the Execution entity.
func (seeuo *SideEffectExecutionUpdateOne) SetExecution(e *Execution) *SideEffectExecutionUpdateOne {
	return seeuo.SetExecutionID(e.ID)
}

// SetExecutionDataID sets the "execution_data" edge to the SideEffectExecutionData entity by ID.
func (seeuo *SideEffectExecutionUpdateOne) SetExecutionDataID(id int) *SideEffectExecutionUpdateOne {
	seeuo.mutation.SetExecutionDataID(id)
	return seeuo
}

// SetNillableExecutionDataID sets the "execution_data" edge to the SideEffectExecutionData entity by ID if the given value is not nil.
func (seeuo *SideEffectExecutionUpdateOne) SetNillableExecutionDataID(id *int) *SideEffectExecutionUpdateOne {
	if id != nil {
		seeuo = seeuo.SetExecutionDataID(*id)
	}
	return seeuo
}

// SetExecutionData sets the "execution_data" edge to the SideEffectExecutionData entity.
func (seeuo *SideEffectExecutionUpdateOne) SetExecutionData(s *SideEffectExecutionData) *SideEffectExecutionUpdateOne {
	return seeuo.SetExecutionDataID(s.ID)
}

// Mutation returns the SideEffectExecutionMutation object of the builder.
func (seeuo *SideEffectExecutionUpdateOne) Mutation() *SideEffectExecutionMutation {
	return seeuo.mutation
}

// ClearExecution clears the "execution" edge to the Execution entity.
func (seeuo *SideEffectExecutionUpdateOne) ClearExecution() *SideEffectExecutionUpdateOne {
	seeuo.mutation.ClearExecution()
	return seeuo
}

// ClearExecutionData clears the "execution_data" edge to the SideEffectExecutionData entity.
func (seeuo *SideEffectExecutionUpdateOne) ClearExecutionData() *SideEffectExecutionUpdateOne {
	seeuo.mutation.ClearExecutionData()
	return seeuo
}

// Where appends a list predicates to the SideEffectExecutionUpdate builder.
func (seeuo *SideEffectExecutionUpdateOne) Where(ps ...predicate.SideEffectExecution) *SideEffectExecutionUpdateOne {
	seeuo.mutation.Where(ps...)
	return seeuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (seeuo *SideEffectExecutionUpdateOne) Select(field string, fields ...string) *SideEffectExecutionUpdateOne {
	seeuo.fields = append([]string{field}, fields...)
	return seeuo
}

// Save executes the query and returns the updated SideEffectExecution entity.
func (seeuo *SideEffectExecutionUpdateOne) Save(ctx context.Context) (*SideEffectExecution, error) {
	return withHooks(ctx, seeuo.sqlSave, seeuo.mutation, seeuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (seeuo *SideEffectExecutionUpdateOne) SaveX(ctx context.Context) *SideEffectExecution {
	node, err := seeuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (seeuo *SideEffectExecutionUpdateOne) Exec(ctx context.Context) error {
	_, err := seeuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (seeuo *SideEffectExecutionUpdateOne) ExecX(ctx context.Context) {
	if err := seeuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (seeuo *SideEffectExecutionUpdateOne) check() error {
	if seeuo.mutation.ExecutionCleared() && len(seeuo.mutation.ExecutionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SideEffectExecution.execution"`)
	}
	return nil
}

func (seeuo *SideEffectExecutionUpdateOne) sqlSave(ctx context.Context) (_node *SideEffectExecution, err error) {
	if err := seeuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(sideeffectexecution.Table, sideeffectexecution.Columns, sqlgraph.NewFieldSpec(sideeffectexecution.FieldID, field.TypeInt))
	id, ok := seeuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SideEffectExecution.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := seeuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sideeffectexecution.FieldID)
		for _, f := range fields {
			if !sideeffectexecution.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sideeffectexecution.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := seeuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := seeuo.mutation.Result(); ok {
		_spec.SetField(sideeffectexecution.FieldResult, field.TypeJSON, value)
	}
	if value, ok := seeuo.mutation.AppendedResult(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, sideeffectexecution.FieldResult, value)
		})
	}
	if seeuo.mutation.ResultCleared() {
		_spec.ClearField(sideeffectexecution.FieldResult, field.TypeJSON)
	}
	if seeuo.mutation.ExecutionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   sideeffectexecution.ExecutionTable,
			Columns: []string{sideeffectexecution.ExecutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(execution.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := seeuo.mutation.ExecutionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   sideeffectexecution.ExecutionTable,
			Columns: []string{sideeffectexecution.ExecutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(execution.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if seeuo.mutation.ExecutionDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   sideeffectexecution.ExecutionDataTable,
			Columns: []string{sideeffectexecution.ExecutionDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sideeffectexecutiondata.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := seeuo.mutation.ExecutionDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   sideeffectexecution.ExecutionDataTable,
			Columns: []string{sideeffectexecution.ExecutionDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sideeffectexecutiondata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SideEffectExecution{config: seeuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, seeuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sideeffectexecution.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	seeuo.mutation.done = true
	return _node, nil
}
