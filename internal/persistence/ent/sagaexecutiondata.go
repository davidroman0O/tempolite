// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/sagaexecution"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/sagaexecutiondata"
)

// SagaExecutionData is the model entity for the SagaExecutionData schema.
type SagaExecutionData struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TransactionHistory holds the value of the "transaction_history" field.
	TransactionHistory [][]uint8 `json:"transaction_history,omitempty"`
	// CompensationHistory holds the value of the "compensation_history" field.
	CompensationHistory [][]uint8 `json:"compensation_history,omitempty"`
	// LastTransaction holds the value of the "last_transaction" field.
	LastTransaction *time.Time `json:"last_transaction,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SagaExecutionDataQuery when eager-loading is set.
	Edges                         SagaExecutionDataEdges `json:"edges"`
	saga_execution_execution_data *int
	selectValues                  sql.SelectValues
}

// SagaExecutionDataEdges holds the relations/edges for other nodes in the graph.
type SagaExecutionDataEdges struct {
	// SagaExecution holds the value of the saga_execution edge.
	SagaExecution *SagaExecution `json:"saga_execution,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SagaExecutionOrErr returns the SagaExecution value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SagaExecutionDataEdges) SagaExecutionOrErr() (*SagaExecution, error) {
	if e.SagaExecution != nil {
		return e.SagaExecution, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: sagaexecution.Label}
	}
	return nil, &NotLoadedError{edge: "saga_execution"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SagaExecutionData) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sagaexecutiondata.FieldTransactionHistory, sagaexecutiondata.FieldCompensationHistory:
			values[i] = new([]byte)
		case sagaexecutiondata.FieldID:
			values[i] = new(sql.NullInt64)
		case sagaexecutiondata.FieldLastTransaction:
			values[i] = new(sql.NullTime)
		case sagaexecutiondata.ForeignKeys[0]: // saga_execution_execution_data
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SagaExecutionData fields.
func (sed *SagaExecutionData) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sagaexecutiondata.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sed.ID = int(value.Int64)
		case sagaexecutiondata.FieldTransactionHistory:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field transaction_history", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &sed.TransactionHistory); err != nil {
					return fmt.Errorf("unmarshal field transaction_history: %w", err)
				}
			}
		case sagaexecutiondata.FieldCompensationHistory:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field compensation_history", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &sed.CompensationHistory); err != nil {
					return fmt.Errorf("unmarshal field compensation_history: %w", err)
				}
			}
		case sagaexecutiondata.FieldLastTransaction:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_transaction", values[i])
			} else if value.Valid {
				sed.LastTransaction = new(time.Time)
				*sed.LastTransaction = value.Time
			}
		case sagaexecutiondata.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field saga_execution_execution_data", value)
			} else if value.Valid {
				sed.saga_execution_execution_data = new(int)
				*sed.saga_execution_execution_data = int(value.Int64)
			}
		default:
			sed.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SagaExecutionData.
// This includes values selected through modifiers, order, etc.
func (sed *SagaExecutionData) Value(name string) (ent.Value, error) {
	return sed.selectValues.Get(name)
}

// QuerySagaExecution queries the "saga_execution" edge of the SagaExecutionData entity.
func (sed *SagaExecutionData) QuerySagaExecution() *SagaExecutionQuery {
	return NewSagaExecutionDataClient(sed.config).QuerySagaExecution(sed)
}

// Update returns a builder for updating this SagaExecutionData.
// Note that you need to call SagaExecutionData.Unwrap() before calling this method if this SagaExecutionData
// was returned from a transaction, and the transaction was committed or rolled back.
func (sed *SagaExecutionData) Update() *SagaExecutionDataUpdateOne {
	return NewSagaExecutionDataClient(sed.config).UpdateOne(sed)
}

// Unwrap unwraps the SagaExecutionData entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sed *SagaExecutionData) Unwrap() *SagaExecutionData {
	_tx, ok := sed.config.driver.(*txDriver)
	if !ok {
		panic("ent: SagaExecutionData is not a transactional entity")
	}
	sed.config.driver = _tx.drv
	return sed
}

// String implements the fmt.Stringer.
func (sed *SagaExecutionData) String() string {
	var builder strings.Builder
	builder.WriteString("SagaExecutionData(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sed.ID))
	builder.WriteString("transaction_history=")
	builder.WriteString(fmt.Sprintf("%v", sed.TransactionHistory))
	builder.WriteString(", ")
	builder.WriteString("compensation_history=")
	builder.WriteString(fmt.Sprintf("%v", sed.CompensationHistory))
	builder.WriteString(", ")
	if v := sed.LastTransaction; v != nil {
		builder.WriteString("last_transaction=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// SagaExecutionDataSlice is a parsable slice of SagaExecutionData.
type SagaExecutionDataSlice []*SagaExecutionData
