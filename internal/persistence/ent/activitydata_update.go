// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/activitydata"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/entity"
	"github.com/davidroman0O/tempolite/internal/persistence/ent/predicate"
)

// ActivityDataUpdate is the builder for updating ActivityData entities.
type ActivityDataUpdate struct {
	config
	hooks    []Hook
	mutation *ActivityDataMutation
}

// Where appends a list predicates to the ActivityDataUpdate builder.
func (adu *ActivityDataUpdate) Where(ps ...predicate.ActivityData) *ActivityDataUpdate {
	adu.mutation.Where(ps...)
	return adu
}

// SetTimeout sets the "timeout" field.
func (adu *ActivityDataUpdate) SetTimeout(i int64) *ActivityDataUpdate {
	adu.mutation.ResetTimeout()
	adu.mutation.SetTimeout(i)
	return adu
}

// SetNillableTimeout sets the "timeout" field if the given value is not nil.
func (adu *ActivityDataUpdate) SetNillableTimeout(i *int64) *ActivityDataUpdate {
	if i != nil {
		adu.SetTimeout(*i)
	}
	return adu
}

// AddTimeout adds i to the "timeout" field.
func (adu *ActivityDataUpdate) AddTimeout(i int64) *ActivityDataUpdate {
	adu.mutation.AddTimeout(i)
	return adu
}

// ClearTimeout clears the value of the "timeout" field.
func (adu *ActivityDataUpdate) ClearTimeout() *ActivityDataUpdate {
	adu.mutation.ClearTimeout()
	return adu
}

// SetMaxAttempts sets the "max_attempts" field.
func (adu *ActivityDataUpdate) SetMaxAttempts(i int) *ActivityDataUpdate {
	adu.mutation.ResetMaxAttempts()
	adu.mutation.SetMaxAttempts(i)
	return adu
}

// SetNillableMaxAttempts sets the "max_attempts" field if the given value is not nil.
func (adu *ActivityDataUpdate) SetNillableMaxAttempts(i *int) *ActivityDataUpdate {
	if i != nil {
		adu.SetMaxAttempts(*i)
	}
	return adu
}

// AddMaxAttempts adds i to the "max_attempts" field.
func (adu *ActivityDataUpdate) AddMaxAttempts(i int) *ActivityDataUpdate {
	adu.mutation.AddMaxAttempts(i)
	return adu
}

// SetScheduledFor sets the "scheduled_for" field.
func (adu *ActivityDataUpdate) SetScheduledFor(t time.Time) *ActivityDataUpdate {
	adu.mutation.SetScheduledFor(t)
	return adu
}

// SetNillableScheduledFor sets the "scheduled_for" field if the given value is not nil.
func (adu *ActivityDataUpdate) SetNillableScheduledFor(t *time.Time) *ActivityDataUpdate {
	if t != nil {
		adu.SetScheduledFor(*t)
	}
	return adu
}

// ClearScheduledFor clears the value of the "scheduled_for" field.
func (adu *ActivityDataUpdate) ClearScheduledFor() *ActivityDataUpdate {
	adu.mutation.ClearScheduledFor()
	return adu
}

// SetInput sets the "input" field.
func (adu *ActivityDataUpdate) SetInput(u [][]uint8) *ActivityDataUpdate {
	adu.mutation.SetInput(u)
	return adu
}

// AppendInput appends u to the "input" field.
func (adu *ActivityDataUpdate) AppendInput(u [][]uint8) *ActivityDataUpdate {
	adu.mutation.AppendInput(u)
	return adu
}

// ClearInput clears the value of the "input" field.
func (adu *ActivityDataUpdate) ClearInput() *ActivityDataUpdate {
	adu.mutation.ClearInput()
	return adu
}

// SetOutput sets the "output" field.
func (adu *ActivityDataUpdate) SetOutput(u [][]uint8) *ActivityDataUpdate {
	adu.mutation.SetOutput(u)
	return adu
}

// AppendOutput appends u to the "output" field.
func (adu *ActivityDataUpdate) AppendOutput(u [][]uint8) *ActivityDataUpdate {
	adu.mutation.AppendOutput(u)
	return adu
}

// ClearOutput clears the value of the "output" field.
func (adu *ActivityDataUpdate) ClearOutput() *ActivityDataUpdate {
	adu.mutation.ClearOutput()
	return adu
}

// SetAttempt sets the "attempt" field.
func (adu *ActivityDataUpdate) SetAttempt(i int) *ActivityDataUpdate {
	adu.mutation.ResetAttempt()
	adu.mutation.SetAttempt(i)
	return adu
}

// SetNillableAttempt sets the "attempt" field if the given value is not nil.
func (adu *ActivityDataUpdate) SetNillableAttempt(i *int) *ActivityDataUpdate {
	if i != nil {
		adu.SetAttempt(*i)
	}
	return adu
}

// AddAttempt adds i to the "attempt" field.
func (adu *ActivityDataUpdate) AddAttempt(i int) *ActivityDataUpdate {
	adu.mutation.AddAttempt(i)
	return adu
}

// SetEntityID sets the "entity" edge to the Entity entity by ID.
func (adu *ActivityDataUpdate) SetEntityID(id int) *ActivityDataUpdate {
	adu.mutation.SetEntityID(id)
	return adu
}

// SetEntity sets the "entity" edge to the Entity entity.
func (adu *ActivityDataUpdate) SetEntity(e *Entity) *ActivityDataUpdate {
	return adu.SetEntityID(e.ID)
}

// Mutation returns the ActivityDataMutation object of the builder.
func (adu *ActivityDataUpdate) Mutation() *ActivityDataMutation {
	return adu.mutation
}

// ClearEntity clears the "entity" edge to the Entity entity.
func (adu *ActivityDataUpdate) ClearEntity() *ActivityDataUpdate {
	adu.mutation.ClearEntity()
	return adu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (adu *ActivityDataUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, adu.sqlSave, adu.mutation, adu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (adu *ActivityDataUpdate) SaveX(ctx context.Context) int {
	affected, err := adu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (adu *ActivityDataUpdate) Exec(ctx context.Context) error {
	_, err := adu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (adu *ActivityDataUpdate) ExecX(ctx context.Context) {
	if err := adu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (adu *ActivityDataUpdate) check() error {
	if adu.mutation.EntityCleared() && len(adu.mutation.EntityIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ActivityData.entity"`)
	}
	return nil
}

func (adu *ActivityDataUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := adu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(activitydata.Table, activitydata.Columns, sqlgraph.NewFieldSpec(activitydata.FieldID, field.TypeInt))
	if ps := adu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := adu.mutation.Timeout(); ok {
		_spec.SetField(activitydata.FieldTimeout, field.TypeInt64, value)
	}
	if value, ok := adu.mutation.AddedTimeout(); ok {
		_spec.AddField(activitydata.FieldTimeout, field.TypeInt64, value)
	}
	if adu.mutation.TimeoutCleared() {
		_spec.ClearField(activitydata.FieldTimeout, field.TypeInt64)
	}
	if value, ok := adu.mutation.MaxAttempts(); ok {
		_spec.SetField(activitydata.FieldMaxAttempts, field.TypeInt, value)
	}
	if value, ok := adu.mutation.AddedMaxAttempts(); ok {
		_spec.AddField(activitydata.FieldMaxAttempts, field.TypeInt, value)
	}
	if value, ok := adu.mutation.ScheduledFor(); ok {
		_spec.SetField(activitydata.FieldScheduledFor, field.TypeTime, value)
	}
	if adu.mutation.ScheduledForCleared() {
		_spec.ClearField(activitydata.FieldScheduledFor, field.TypeTime)
	}
	if value, ok := adu.mutation.Input(); ok {
		_spec.SetField(activitydata.FieldInput, field.TypeJSON, value)
	}
	if value, ok := adu.mutation.AppendedInput(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, activitydata.FieldInput, value)
		})
	}
	if adu.mutation.InputCleared() {
		_spec.ClearField(activitydata.FieldInput, field.TypeJSON)
	}
	if value, ok := adu.mutation.Output(); ok {
		_spec.SetField(activitydata.FieldOutput, field.TypeJSON, value)
	}
	if value, ok := adu.mutation.AppendedOutput(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, activitydata.FieldOutput, value)
		})
	}
	if adu.mutation.OutputCleared() {
		_spec.ClearField(activitydata.FieldOutput, field.TypeJSON)
	}
	if value, ok := adu.mutation.Attempt(); ok {
		_spec.SetField(activitydata.FieldAttempt, field.TypeInt, value)
	}
	if value, ok := adu.mutation.AddedAttempt(); ok {
		_spec.AddField(activitydata.FieldAttempt, field.TypeInt, value)
	}
	if adu.mutation.EntityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   activitydata.EntityTable,
			Columns: []string{activitydata.EntityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := adu.mutation.EntityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   activitydata.EntityTable,
			Columns: []string{activitydata.EntityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, adu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{activitydata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	adu.mutation.done = true
	return n, nil
}

// ActivityDataUpdateOne is the builder for updating a single ActivityData entity.
type ActivityDataUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ActivityDataMutation
}

// SetTimeout sets the "timeout" field.
func (aduo *ActivityDataUpdateOne) SetTimeout(i int64) *ActivityDataUpdateOne {
	aduo.mutation.ResetTimeout()
	aduo.mutation.SetTimeout(i)
	return aduo
}

// SetNillableTimeout sets the "timeout" field if the given value is not nil.
func (aduo *ActivityDataUpdateOne) SetNillableTimeout(i *int64) *ActivityDataUpdateOne {
	if i != nil {
		aduo.SetTimeout(*i)
	}
	return aduo
}

// AddTimeout adds i to the "timeout" field.
func (aduo *ActivityDataUpdateOne) AddTimeout(i int64) *ActivityDataUpdateOne {
	aduo.mutation.AddTimeout(i)
	return aduo
}

// ClearTimeout clears the value of the "timeout" field.
func (aduo *ActivityDataUpdateOne) ClearTimeout() *ActivityDataUpdateOne {
	aduo.mutation.ClearTimeout()
	return aduo
}

// SetMaxAttempts sets the "max_attempts" field.
func (aduo *ActivityDataUpdateOne) SetMaxAttempts(i int) *ActivityDataUpdateOne {
	aduo.mutation.ResetMaxAttempts()
	aduo.mutation.SetMaxAttempts(i)
	return aduo
}

// SetNillableMaxAttempts sets the "max_attempts" field if the given value is not nil.
func (aduo *ActivityDataUpdateOne) SetNillableMaxAttempts(i *int) *ActivityDataUpdateOne {
	if i != nil {
		aduo.SetMaxAttempts(*i)
	}
	return aduo
}

// AddMaxAttempts adds i to the "max_attempts" field.
func (aduo *ActivityDataUpdateOne) AddMaxAttempts(i int) *ActivityDataUpdateOne {
	aduo.mutation.AddMaxAttempts(i)
	return aduo
}

// SetScheduledFor sets the "scheduled_for" field.
func (aduo *ActivityDataUpdateOne) SetScheduledFor(t time.Time) *ActivityDataUpdateOne {
	aduo.mutation.SetScheduledFor(t)
	return aduo
}

// SetNillableScheduledFor sets the "scheduled_for" field if the given value is not nil.
func (aduo *ActivityDataUpdateOne) SetNillableScheduledFor(t *time.Time) *ActivityDataUpdateOne {
	if t != nil {
		aduo.SetScheduledFor(*t)
	}
	return aduo
}

// ClearScheduledFor clears the value of the "scheduled_for" field.
func (aduo *ActivityDataUpdateOne) ClearScheduledFor() *ActivityDataUpdateOne {
	aduo.mutation.ClearScheduledFor()
	return aduo
}

// SetInput sets the "input" field.
func (aduo *ActivityDataUpdateOne) SetInput(u [][]uint8) *ActivityDataUpdateOne {
	aduo.mutation.SetInput(u)
	return aduo
}

// AppendInput appends u to the "input" field.
func (aduo *ActivityDataUpdateOne) AppendInput(u [][]uint8) *ActivityDataUpdateOne {
	aduo.mutation.AppendInput(u)
	return aduo
}

// ClearInput clears the value of the "input" field.
func (aduo *ActivityDataUpdateOne) ClearInput() *ActivityDataUpdateOne {
	aduo.mutation.ClearInput()
	return aduo
}

// SetOutput sets the "output" field.
func (aduo *ActivityDataUpdateOne) SetOutput(u [][]uint8) *ActivityDataUpdateOne {
	aduo.mutation.SetOutput(u)
	return aduo
}

// AppendOutput appends u to the "output" field.
func (aduo *ActivityDataUpdateOne) AppendOutput(u [][]uint8) *ActivityDataUpdateOne {
	aduo.mutation.AppendOutput(u)
	return aduo
}

// ClearOutput clears the value of the "output" field.
func (aduo *ActivityDataUpdateOne) ClearOutput() *ActivityDataUpdateOne {
	aduo.mutation.ClearOutput()
	return aduo
}

// SetAttempt sets the "attempt" field.
func (aduo *ActivityDataUpdateOne) SetAttempt(i int) *ActivityDataUpdateOne {
	aduo.mutation.ResetAttempt()
	aduo.mutation.SetAttempt(i)
	return aduo
}

// SetNillableAttempt sets the "attempt" field if the given value is not nil.
func (aduo *ActivityDataUpdateOne) SetNillableAttempt(i *int) *ActivityDataUpdateOne {
	if i != nil {
		aduo.SetAttempt(*i)
	}
	return aduo
}

// AddAttempt adds i to the "attempt" field.
func (aduo *ActivityDataUpdateOne) AddAttempt(i int) *ActivityDataUpdateOne {
	aduo.mutation.AddAttempt(i)
	return aduo
}

// SetEntityID sets the "entity" edge to the Entity entity by ID.
func (aduo *ActivityDataUpdateOne) SetEntityID(id int) *ActivityDataUpdateOne {
	aduo.mutation.SetEntityID(id)
	return aduo
}

// SetEntity sets the "entity" edge to the Entity entity.
func (aduo *ActivityDataUpdateOne) SetEntity(e *Entity) *ActivityDataUpdateOne {
	return aduo.SetEntityID(e.ID)
}

// Mutation returns the ActivityDataMutation object of the builder.
func (aduo *ActivityDataUpdateOne) Mutation() *ActivityDataMutation {
	return aduo.mutation
}

// ClearEntity clears the "entity" edge to the Entity entity.
func (aduo *ActivityDataUpdateOne) ClearEntity() *ActivityDataUpdateOne {
	aduo.mutation.ClearEntity()
	return aduo
}

// Where appends a list predicates to the ActivityDataUpdate builder.
func (aduo *ActivityDataUpdateOne) Where(ps ...predicate.ActivityData) *ActivityDataUpdateOne {
	aduo.mutation.Where(ps...)
	return aduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aduo *ActivityDataUpdateOne) Select(field string, fields ...string) *ActivityDataUpdateOne {
	aduo.fields = append([]string{field}, fields...)
	return aduo
}

// Save executes the query and returns the updated ActivityData entity.
func (aduo *ActivityDataUpdateOne) Save(ctx context.Context) (*ActivityData, error) {
	return withHooks(ctx, aduo.sqlSave, aduo.mutation, aduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aduo *ActivityDataUpdateOne) SaveX(ctx context.Context) *ActivityData {
	node, err := aduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aduo *ActivityDataUpdateOne) Exec(ctx context.Context) error {
	_, err := aduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aduo *ActivityDataUpdateOne) ExecX(ctx context.Context) {
	if err := aduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aduo *ActivityDataUpdateOne) check() error {
	if aduo.mutation.EntityCleared() && len(aduo.mutation.EntityIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ActivityData.entity"`)
	}
	return nil
}

func (aduo *ActivityDataUpdateOne) sqlSave(ctx context.Context) (_node *ActivityData, err error) {
	if err := aduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(activitydata.Table, activitydata.Columns, sqlgraph.NewFieldSpec(activitydata.FieldID, field.TypeInt))
	id, ok := aduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ActivityData.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, activitydata.FieldID)
		for _, f := range fields {
			if !activitydata.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != activitydata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aduo.mutation.Timeout(); ok {
		_spec.SetField(activitydata.FieldTimeout, field.TypeInt64, value)
	}
	if value, ok := aduo.mutation.AddedTimeout(); ok {
		_spec.AddField(activitydata.FieldTimeout, field.TypeInt64, value)
	}
	if aduo.mutation.TimeoutCleared() {
		_spec.ClearField(activitydata.FieldTimeout, field.TypeInt64)
	}
	if value, ok := aduo.mutation.MaxAttempts(); ok {
		_spec.SetField(activitydata.FieldMaxAttempts, field.TypeInt, value)
	}
	if value, ok := aduo.mutation.AddedMaxAttempts(); ok {
		_spec.AddField(activitydata.FieldMaxAttempts, field.TypeInt, value)
	}
	if value, ok := aduo.mutation.ScheduledFor(); ok {
		_spec.SetField(activitydata.FieldScheduledFor, field.TypeTime, value)
	}
	if aduo.mutation.ScheduledForCleared() {
		_spec.ClearField(activitydata.FieldScheduledFor, field.TypeTime)
	}
	if value, ok := aduo.mutation.Input(); ok {
		_spec.SetField(activitydata.FieldInput, field.TypeJSON, value)
	}
	if value, ok := aduo.mutation.AppendedInput(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, activitydata.FieldInput, value)
		})
	}
	if aduo.mutation.InputCleared() {
		_spec.ClearField(activitydata.FieldInput, field.TypeJSON)
	}
	if value, ok := aduo.mutation.Output(); ok {
		_spec.SetField(activitydata.FieldOutput, field.TypeJSON, value)
	}
	if value, ok := aduo.mutation.AppendedOutput(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, activitydata.FieldOutput, value)
		})
	}
	if aduo.mutation.OutputCleared() {
		_spec.ClearField(activitydata.FieldOutput, field.TypeJSON)
	}
	if value, ok := aduo.mutation.Attempt(); ok {
		_spec.SetField(activitydata.FieldAttempt, field.TypeInt, value)
	}
	if value, ok := aduo.mutation.AddedAttempt(); ok {
		_spec.AddField(activitydata.FieldAttempt, field.TypeInt, value)
	}
	if aduo.mutation.EntityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   activitydata.EntityTable,
			Columns: []string{activitydata.EntityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aduo.mutation.EntityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   activitydata.EntityTable,
			Columns: []string{activitydata.EntityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ActivityData{config: aduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{activitydata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aduo.mutation.done = true
	return _node, nil
}
