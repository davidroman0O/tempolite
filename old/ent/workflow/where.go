// Code generated by ent, DO NOT EDIT.

package workflow

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/davidroman0O/tempolite/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Workflow {
	return predicate.Workflow(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Workflow {
	return predicate.Workflow(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Workflow {
	return predicate.Workflow(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Workflow {
	return predicate.Workflow(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Workflow {
	return predicate.Workflow(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Workflow {
	return predicate.Workflow(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Workflow {
	return predicate.Workflow(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Workflow {
	return predicate.Workflow(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Workflow {
	return predicate.Workflow(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Workflow {
	return predicate.Workflow(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Workflow {
	return predicate.Workflow(sql.FieldContainsFold(FieldID, id))
}

// StepID applies equality check predicate on the "step_id" field. It's identical to StepIDEQ.
func StepID(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldEQ(FieldStepID, v))
}

// Identity applies equality check predicate on the "identity" field. It's identical to IdentityEQ.
func Identity(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldEQ(FieldIdentity, v))
}

// HandlerName applies equality check predicate on the "handler_name" field. It's identical to HandlerNameEQ.
func HandlerName(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldEQ(FieldHandlerName, v))
}

// QueueName applies equality check predicate on the "queue_name" field. It's identical to QueueNameEQ.
func QueueName(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldEQ(FieldQueueName, v))
}

// IsPaused applies equality check predicate on the "is_paused" field. It's identical to IsPausedEQ.
func IsPaused(v bool) predicate.Workflow {
	return predicate.Workflow(sql.FieldEQ(FieldIsPaused, v))
}

// IsReady applies equality check predicate on the "is_ready" field. It's identical to IsReadyEQ.
func IsReady(v bool) predicate.Workflow {
	return predicate.Workflow(sql.FieldEQ(FieldIsReady, v))
}

// MaxDuration applies equality check predicate on the "max_duration" field. It's identical to MaxDurationEQ.
func MaxDuration(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldEQ(FieldMaxDuration, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Workflow {
	return predicate.Workflow(sql.FieldEQ(FieldCreatedAt, v))
}

// ContinuedFromID applies equality check predicate on the "continued_from_id" field. It's identical to ContinuedFromIDEQ.
func ContinuedFromID(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldEQ(FieldContinuedFromID, v))
}

// RetriedFromID applies equality check predicate on the "retried_from_id" field. It's identical to RetriedFromIDEQ.
func RetriedFromID(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldEQ(FieldRetriedFromID, v))
}

// StepIDEQ applies the EQ predicate on the "step_id" field.
func StepIDEQ(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldEQ(FieldStepID, v))
}

// StepIDNEQ applies the NEQ predicate on the "step_id" field.
func StepIDNEQ(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldNEQ(FieldStepID, v))
}

// StepIDIn applies the In predicate on the "step_id" field.
func StepIDIn(vs ...string) predicate.Workflow {
	return predicate.Workflow(sql.FieldIn(FieldStepID, vs...))
}

// StepIDNotIn applies the NotIn predicate on the "step_id" field.
func StepIDNotIn(vs ...string) predicate.Workflow {
	return predicate.Workflow(sql.FieldNotIn(FieldStepID, vs...))
}

// StepIDGT applies the GT predicate on the "step_id" field.
func StepIDGT(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldGT(FieldStepID, v))
}

// StepIDGTE applies the GTE predicate on the "step_id" field.
func StepIDGTE(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldGTE(FieldStepID, v))
}

// StepIDLT applies the LT predicate on the "step_id" field.
func StepIDLT(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldLT(FieldStepID, v))
}

// StepIDLTE applies the LTE predicate on the "step_id" field.
func StepIDLTE(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldLTE(FieldStepID, v))
}

// StepIDContains applies the Contains predicate on the "step_id" field.
func StepIDContains(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldContains(FieldStepID, v))
}

// StepIDHasPrefix applies the HasPrefix predicate on the "step_id" field.
func StepIDHasPrefix(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldHasPrefix(FieldStepID, v))
}

// StepIDHasSuffix applies the HasSuffix predicate on the "step_id" field.
func StepIDHasSuffix(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldHasSuffix(FieldStepID, v))
}

// StepIDEqualFold applies the EqualFold predicate on the "step_id" field.
func StepIDEqualFold(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldEqualFold(FieldStepID, v))
}

// StepIDContainsFold applies the ContainsFold predicate on the "step_id" field.
func StepIDContainsFold(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldContainsFold(FieldStepID, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Workflow {
	return predicate.Workflow(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Workflow {
	return predicate.Workflow(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Workflow {
	return predicate.Workflow(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Workflow {
	return predicate.Workflow(sql.FieldNotIn(FieldStatus, vs...))
}

// IdentityEQ applies the EQ predicate on the "identity" field.
func IdentityEQ(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldEQ(FieldIdentity, v))
}

// IdentityNEQ applies the NEQ predicate on the "identity" field.
func IdentityNEQ(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldNEQ(FieldIdentity, v))
}

// IdentityIn applies the In predicate on the "identity" field.
func IdentityIn(vs ...string) predicate.Workflow {
	return predicate.Workflow(sql.FieldIn(FieldIdentity, vs...))
}

// IdentityNotIn applies the NotIn predicate on the "identity" field.
func IdentityNotIn(vs ...string) predicate.Workflow {
	return predicate.Workflow(sql.FieldNotIn(FieldIdentity, vs...))
}

// IdentityGT applies the GT predicate on the "identity" field.
func IdentityGT(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldGT(FieldIdentity, v))
}

// IdentityGTE applies the GTE predicate on the "identity" field.
func IdentityGTE(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldGTE(FieldIdentity, v))
}

// IdentityLT applies the LT predicate on the "identity" field.
func IdentityLT(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldLT(FieldIdentity, v))
}

// IdentityLTE applies the LTE predicate on the "identity" field.
func IdentityLTE(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldLTE(FieldIdentity, v))
}

// IdentityContains applies the Contains predicate on the "identity" field.
func IdentityContains(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldContains(FieldIdentity, v))
}

// IdentityHasPrefix applies the HasPrefix predicate on the "identity" field.
func IdentityHasPrefix(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldHasPrefix(FieldIdentity, v))
}

// IdentityHasSuffix applies the HasSuffix predicate on the "identity" field.
func IdentityHasSuffix(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldHasSuffix(FieldIdentity, v))
}

// IdentityEqualFold applies the EqualFold predicate on the "identity" field.
func IdentityEqualFold(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldEqualFold(FieldIdentity, v))
}

// IdentityContainsFold applies the ContainsFold predicate on the "identity" field.
func IdentityContainsFold(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldContainsFold(FieldIdentity, v))
}

// HandlerNameEQ applies the EQ predicate on the "handler_name" field.
func HandlerNameEQ(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldEQ(FieldHandlerName, v))
}

// HandlerNameNEQ applies the NEQ predicate on the "handler_name" field.
func HandlerNameNEQ(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldNEQ(FieldHandlerName, v))
}

// HandlerNameIn applies the In predicate on the "handler_name" field.
func HandlerNameIn(vs ...string) predicate.Workflow {
	return predicate.Workflow(sql.FieldIn(FieldHandlerName, vs...))
}

// HandlerNameNotIn applies the NotIn predicate on the "handler_name" field.
func HandlerNameNotIn(vs ...string) predicate.Workflow {
	return predicate.Workflow(sql.FieldNotIn(FieldHandlerName, vs...))
}

// HandlerNameGT applies the GT predicate on the "handler_name" field.
func HandlerNameGT(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldGT(FieldHandlerName, v))
}

// HandlerNameGTE applies the GTE predicate on the "handler_name" field.
func HandlerNameGTE(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldGTE(FieldHandlerName, v))
}

// HandlerNameLT applies the LT predicate on the "handler_name" field.
func HandlerNameLT(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldLT(FieldHandlerName, v))
}

// HandlerNameLTE applies the LTE predicate on the "handler_name" field.
func HandlerNameLTE(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldLTE(FieldHandlerName, v))
}

// HandlerNameContains applies the Contains predicate on the "handler_name" field.
func HandlerNameContains(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldContains(FieldHandlerName, v))
}

// HandlerNameHasPrefix applies the HasPrefix predicate on the "handler_name" field.
func HandlerNameHasPrefix(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldHasPrefix(FieldHandlerName, v))
}

// HandlerNameHasSuffix applies the HasSuffix predicate on the "handler_name" field.
func HandlerNameHasSuffix(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldHasSuffix(FieldHandlerName, v))
}

// HandlerNameEqualFold applies the EqualFold predicate on the "handler_name" field.
func HandlerNameEqualFold(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldEqualFold(FieldHandlerName, v))
}

// HandlerNameContainsFold applies the ContainsFold predicate on the "handler_name" field.
func HandlerNameContainsFold(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldContainsFold(FieldHandlerName, v))
}

// QueueNameEQ applies the EQ predicate on the "queue_name" field.
func QueueNameEQ(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldEQ(FieldQueueName, v))
}

// QueueNameNEQ applies the NEQ predicate on the "queue_name" field.
func QueueNameNEQ(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldNEQ(FieldQueueName, v))
}

// QueueNameIn applies the In predicate on the "queue_name" field.
func QueueNameIn(vs ...string) predicate.Workflow {
	return predicate.Workflow(sql.FieldIn(FieldQueueName, vs...))
}

// QueueNameNotIn applies the NotIn predicate on the "queue_name" field.
func QueueNameNotIn(vs ...string) predicate.Workflow {
	return predicate.Workflow(sql.FieldNotIn(FieldQueueName, vs...))
}

// QueueNameGT applies the GT predicate on the "queue_name" field.
func QueueNameGT(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldGT(FieldQueueName, v))
}

// QueueNameGTE applies the GTE predicate on the "queue_name" field.
func QueueNameGTE(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldGTE(FieldQueueName, v))
}

// QueueNameLT applies the LT predicate on the "queue_name" field.
func QueueNameLT(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldLT(FieldQueueName, v))
}

// QueueNameLTE applies the LTE predicate on the "queue_name" field.
func QueueNameLTE(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldLTE(FieldQueueName, v))
}

// QueueNameContains applies the Contains predicate on the "queue_name" field.
func QueueNameContains(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldContains(FieldQueueName, v))
}

// QueueNameHasPrefix applies the HasPrefix predicate on the "queue_name" field.
func QueueNameHasPrefix(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldHasPrefix(FieldQueueName, v))
}

// QueueNameHasSuffix applies the HasSuffix predicate on the "queue_name" field.
func QueueNameHasSuffix(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldHasSuffix(FieldQueueName, v))
}

// QueueNameEqualFold applies the EqualFold predicate on the "queue_name" field.
func QueueNameEqualFold(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldEqualFold(FieldQueueName, v))
}

// QueueNameContainsFold applies the ContainsFold predicate on the "queue_name" field.
func QueueNameContainsFold(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldContainsFold(FieldQueueName, v))
}

// RetryPolicyIsNil applies the IsNil predicate on the "retry_policy" field.
func RetryPolicyIsNil() predicate.Workflow {
	return predicate.Workflow(sql.FieldIsNull(FieldRetryPolicy))
}

// RetryPolicyNotNil applies the NotNil predicate on the "retry_policy" field.
func RetryPolicyNotNil() predicate.Workflow {
	return predicate.Workflow(sql.FieldNotNull(FieldRetryPolicy))
}

// IsPausedEQ applies the EQ predicate on the "is_paused" field.
func IsPausedEQ(v bool) predicate.Workflow {
	return predicate.Workflow(sql.FieldEQ(FieldIsPaused, v))
}

// IsPausedNEQ applies the NEQ predicate on the "is_paused" field.
func IsPausedNEQ(v bool) predicate.Workflow {
	return predicate.Workflow(sql.FieldNEQ(FieldIsPaused, v))
}

// IsReadyEQ applies the EQ predicate on the "is_ready" field.
func IsReadyEQ(v bool) predicate.Workflow {
	return predicate.Workflow(sql.FieldEQ(FieldIsReady, v))
}

// IsReadyNEQ applies the NEQ predicate on the "is_ready" field.
func IsReadyNEQ(v bool) predicate.Workflow {
	return predicate.Workflow(sql.FieldNEQ(FieldIsReady, v))
}

// MaxDurationEQ applies the EQ predicate on the "max_duration" field.
func MaxDurationEQ(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldEQ(FieldMaxDuration, v))
}

// MaxDurationNEQ applies the NEQ predicate on the "max_duration" field.
func MaxDurationNEQ(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldNEQ(FieldMaxDuration, v))
}

// MaxDurationIn applies the In predicate on the "max_duration" field.
func MaxDurationIn(vs ...string) predicate.Workflow {
	return predicate.Workflow(sql.FieldIn(FieldMaxDuration, vs...))
}

// MaxDurationNotIn applies the NotIn predicate on the "max_duration" field.
func MaxDurationNotIn(vs ...string) predicate.Workflow {
	return predicate.Workflow(sql.FieldNotIn(FieldMaxDuration, vs...))
}

// MaxDurationGT applies the GT predicate on the "max_duration" field.
func MaxDurationGT(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldGT(FieldMaxDuration, v))
}

// MaxDurationGTE applies the GTE predicate on the "max_duration" field.
func MaxDurationGTE(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldGTE(FieldMaxDuration, v))
}

// MaxDurationLT applies the LT predicate on the "max_duration" field.
func MaxDurationLT(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldLT(FieldMaxDuration, v))
}

// MaxDurationLTE applies the LTE predicate on the "max_duration" field.
func MaxDurationLTE(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldLTE(FieldMaxDuration, v))
}

// MaxDurationContains applies the Contains predicate on the "max_duration" field.
func MaxDurationContains(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldContains(FieldMaxDuration, v))
}

// MaxDurationHasPrefix applies the HasPrefix predicate on the "max_duration" field.
func MaxDurationHasPrefix(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldHasPrefix(FieldMaxDuration, v))
}

// MaxDurationHasSuffix applies the HasSuffix predicate on the "max_duration" field.
func MaxDurationHasSuffix(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldHasSuffix(FieldMaxDuration, v))
}

// MaxDurationIsNil applies the IsNil predicate on the "max_duration" field.
func MaxDurationIsNil() predicate.Workflow {
	return predicate.Workflow(sql.FieldIsNull(FieldMaxDuration))
}

// MaxDurationNotNil applies the NotNil predicate on the "max_duration" field.
func MaxDurationNotNil() predicate.Workflow {
	return predicate.Workflow(sql.FieldNotNull(FieldMaxDuration))
}

// MaxDurationEqualFold applies the EqualFold predicate on the "max_duration" field.
func MaxDurationEqualFold(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldEqualFold(FieldMaxDuration, v))
}

// MaxDurationContainsFold applies the ContainsFold predicate on the "max_duration" field.
func MaxDurationContainsFold(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldContainsFold(FieldMaxDuration, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Workflow {
	return predicate.Workflow(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Workflow {
	return predicate.Workflow(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Workflow {
	return predicate.Workflow(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Workflow {
	return predicate.Workflow(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Workflow {
	return predicate.Workflow(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Workflow {
	return predicate.Workflow(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Workflow {
	return predicate.Workflow(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Workflow {
	return predicate.Workflow(sql.FieldLTE(FieldCreatedAt, v))
}

// ContinuedFromIDEQ applies the EQ predicate on the "continued_from_id" field.
func ContinuedFromIDEQ(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldEQ(FieldContinuedFromID, v))
}

// ContinuedFromIDNEQ applies the NEQ predicate on the "continued_from_id" field.
func ContinuedFromIDNEQ(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldNEQ(FieldContinuedFromID, v))
}

// ContinuedFromIDIn applies the In predicate on the "continued_from_id" field.
func ContinuedFromIDIn(vs ...string) predicate.Workflow {
	return predicate.Workflow(sql.FieldIn(FieldContinuedFromID, vs...))
}

// ContinuedFromIDNotIn applies the NotIn predicate on the "continued_from_id" field.
func ContinuedFromIDNotIn(vs ...string) predicate.Workflow {
	return predicate.Workflow(sql.FieldNotIn(FieldContinuedFromID, vs...))
}

// ContinuedFromIDGT applies the GT predicate on the "continued_from_id" field.
func ContinuedFromIDGT(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldGT(FieldContinuedFromID, v))
}

// ContinuedFromIDGTE applies the GTE predicate on the "continued_from_id" field.
func ContinuedFromIDGTE(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldGTE(FieldContinuedFromID, v))
}

// ContinuedFromIDLT applies the LT predicate on the "continued_from_id" field.
func ContinuedFromIDLT(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldLT(FieldContinuedFromID, v))
}

// ContinuedFromIDLTE applies the LTE predicate on the "continued_from_id" field.
func ContinuedFromIDLTE(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldLTE(FieldContinuedFromID, v))
}

// ContinuedFromIDContains applies the Contains predicate on the "continued_from_id" field.
func ContinuedFromIDContains(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldContains(FieldContinuedFromID, v))
}

// ContinuedFromIDHasPrefix applies the HasPrefix predicate on the "continued_from_id" field.
func ContinuedFromIDHasPrefix(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldHasPrefix(FieldContinuedFromID, v))
}

// ContinuedFromIDHasSuffix applies the HasSuffix predicate on the "continued_from_id" field.
func ContinuedFromIDHasSuffix(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldHasSuffix(FieldContinuedFromID, v))
}

// ContinuedFromIDIsNil applies the IsNil predicate on the "continued_from_id" field.
func ContinuedFromIDIsNil() predicate.Workflow {
	return predicate.Workflow(sql.FieldIsNull(FieldContinuedFromID))
}

// ContinuedFromIDNotNil applies the NotNil predicate on the "continued_from_id" field.
func ContinuedFromIDNotNil() predicate.Workflow {
	return predicate.Workflow(sql.FieldNotNull(FieldContinuedFromID))
}

// ContinuedFromIDEqualFold applies the EqualFold predicate on the "continued_from_id" field.
func ContinuedFromIDEqualFold(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldEqualFold(FieldContinuedFromID, v))
}

// ContinuedFromIDContainsFold applies the ContainsFold predicate on the "continued_from_id" field.
func ContinuedFromIDContainsFold(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldContainsFold(FieldContinuedFromID, v))
}

// RetriedFromIDEQ applies the EQ predicate on the "retried_from_id" field.
func RetriedFromIDEQ(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldEQ(FieldRetriedFromID, v))
}

// RetriedFromIDNEQ applies the NEQ predicate on the "retried_from_id" field.
func RetriedFromIDNEQ(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldNEQ(FieldRetriedFromID, v))
}

// RetriedFromIDIn applies the In predicate on the "retried_from_id" field.
func RetriedFromIDIn(vs ...string) predicate.Workflow {
	return predicate.Workflow(sql.FieldIn(FieldRetriedFromID, vs...))
}

// RetriedFromIDNotIn applies the NotIn predicate on the "retried_from_id" field.
func RetriedFromIDNotIn(vs ...string) predicate.Workflow {
	return predicate.Workflow(sql.FieldNotIn(FieldRetriedFromID, vs...))
}

// RetriedFromIDGT applies the GT predicate on the "retried_from_id" field.
func RetriedFromIDGT(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldGT(FieldRetriedFromID, v))
}

// RetriedFromIDGTE applies the GTE predicate on the "retried_from_id" field.
func RetriedFromIDGTE(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldGTE(FieldRetriedFromID, v))
}

// RetriedFromIDLT applies the LT predicate on the "retried_from_id" field.
func RetriedFromIDLT(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldLT(FieldRetriedFromID, v))
}

// RetriedFromIDLTE applies the LTE predicate on the "retried_from_id" field.
func RetriedFromIDLTE(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldLTE(FieldRetriedFromID, v))
}

// RetriedFromIDContains applies the Contains predicate on the "retried_from_id" field.
func RetriedFromIDContains(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldContains(FieldRetriedFromID, v))
}

// RetriedFromIDHasPrefix applies the HasPrefix predicate on the "retried_from_id" field.
func RetriedFromIDHasPrefix(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldHasPrefix(FieldRetriedFromID, v))
}

// RetriedFromIDHasSuffix applies the HasSuffix predicate on the "retried_from_id" field.
func RetriedFromIDHasSuffix(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldHasSuffix(FieldRetriedFromID, v))
}

// RetriedFromIDIsNil applies the IsNil predicate on the "retried_from_id" field.
func RetriedFromIDIsNil() predicate.Workflow {
	return predicate.Workflow(sql.FieldIsNull(FieldRetriedFromID))
}

// RetriedFromIDNotNil applies the NotNil predicate on the "retried_from_id" field.
func RetriedFromIDNotNil() predicate.Workflow {
	return predicate.Workflow(sql.FieldNotNull(FieldRetriedFromID))
}

// RetriedFromIDEqualFold applies the EqualFold predicate on the "retried_from_id" field.
func RetriedFromIDEqualFold(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldEqualFold(FieldRetriedFromID, v))
}

// RetriedFromIDContainsFold applies the ContainsFold predicate on the "retried_from_id" field.
func RetriedFromIDContainsFold(v string) predicate.Workflow {
	return predicate.Workflow(sql.FieldContainsFold(FieldRetriedFromID, v))
}

// HasExecutions applies the HasEdge predicate on the "executions" edge.
func HasExecutions() predicate.Workflow {
	return predicate.Workflow(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ExecutionsTable, ExecutionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExecutionsWith applies the HasEdge predicate on the "executions" edge with a given conditions (other predicates).
func HasExecutionsWith(preds ...predicate.WorkflowExecution) predicate.Workflow {
	return predicate.Workflow(func(s *sql.Selector) {
		step := newExecutionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasContinuedFrom applies the HasEdge predicate on the "continued_from" edge.
func HasContinuedFrom() predicate.Workflow {
	return predicate.Workflow(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ContinuedFromTable, ContinuedFromColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasContinuedFromWith applies the HasEdge predicate on the "continued_from" edge with a given conditions (other predicates).
func HasContinuedFromWith(preds ...predicate.Workflow) predicate.Workflow {
	return predicate.Workflow(func(s *sql.Selector) {
		step := newContinuedFromStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasContinuedTo applies the HasEdge predicate on the "continued_to" edge.
func HasContinuedTo() predicate.Workflow {
	return predicate.Workflow(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ContinuedToTable, ContinuedToColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasContinuedToWith applies the HasEdge predicate on the "continued_to" edge with a given conditions (other predicates).
func HasContinuedToWith(preds ...predicate.Workflow) predicate.Workflow {
	return predicate.Workflow(func(s *sql.Selector) {
		step := newContinuedToStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRetriedFrom applies the HasEdge predicate on the "retried_from" edge.
func HasRetriedFrom() predicate.Workflow {
	return predicate.Workflow(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RetriedFromTable, RetriedFromColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRetriedFromWith applies the HasEdge predicate on the "retried_from" edge with a given conditions (other predicates).
func HasRetriedFromWith(preds ...predicate.Workflow) predicate.Workflow {
	return predicate.Workflow(func(s *sql.Selector) {
		step := newRetriedFromStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRetriedTo applies the HasEdge predicate on the "retried_to" edge.
func HasRetriedTo() predicate.Workflow {
	return predicate.Workflow(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RetriedToTable, RetriedToColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRetriedToWith applies the HasEdge predicate on the "retried_to" edge with a given conditions (other predicates).
func HasRetriedToWith(preds ...predicate.Workflow) predicate.Workflow {
	return predicate.Workflow(func(s *sql.Selector) {
		step := newRetriedToStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Workflow) predicate.Workflow {
	return predicate.Workflow(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Workflow) predicate.Workflow {
	return predicate.Workflow(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Workflow) predicate.Workflow {
	return predicate.Workflow(sql.NotPredicates(p))
}
