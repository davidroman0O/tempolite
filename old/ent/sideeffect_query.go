// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/tempolite/ent/predicate"
	"github.com/davidroman0O/tempolite/ent/sideeffect"
	"github.com/davidroman0O/tempolite/ent/sideeffectexecution"
)

// SideEffectQuery is the builder for querying SideEffect entities.
type SideEffectQuery struct {
	config
	ctx            *QueryContext
	order          []sideeffect.OrderOption
	inters         []Interceptor
	predicates     []predicate.SideEffect
	withExecutions *SideEffectExecutionQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SideEffectQuery builder.
func (seq *SideEffectQuery) Where(ps ...predicate.SideEffect) *SideEffectQuery {
	seq.predicates = append(seq.predicates, ps...)
	return seq
}

// Limit the number of records to be returned by this query.
func (seq *SideEffectQuery) Limit(limit int) *SideEffectQuery {
	seq.ctx.Limit = &limit
	return seq
}

// Offset to start from.
func (seq *SideEffectQuery) Offset(offset int) *SideEffectQuery {
	seq.ctx.Offset = &offset
	return seq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (seq *SideEffectQuery) Unique(unique bool) *SideEffectQuery {
	seq.ctx.Unique = &unique
	return seq
}

// Order specifies how the records should be ordered.
func (seq *SideEffectQuery) Order(o ...sideeffect.OrderOption) *SideEffectQuery {
	seq.order = append(seq.order, o...)
	return seq
}

// QueryExecutions chains the current query on the "executions" edge.
func (seq *SideEffectQuery) QueryExecutions() *SideEffectExecutionQuery {
	query := (&SideEffectExecutionClient{config: seq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := seq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := seq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(sideeffect.Table, sideeffect.FieldID, selector),
			sqlgraph.To(sideeffectexecution.Table, sideeffectexecution.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, sideeffect.ExecutionsTable, sideeffect.ExecutionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(seq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first SideEffect entity from the query.
// Returns a *NotFoundError when no SideEffect was found.
func (seq *SideEffectQuery) First(ctx context.Context) (*SideEffect, error) {
	nodes, err := seq.Limit(1).All(setContextOp(ctx, seq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{sideeffect.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (seq *SideEffectQuery) FirstX(ctx context.Context) *SideEffect {
	node, err := seq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SideEffect ID from the query.
// Returns a *NotFoundError when no SideEffect ID was found.
func (seq *SideEffectQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = seq.Limit(1).IDs(setContextOp(ctx, seq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{sideeffect.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (seq *SideEffectQuery) FirstIDX(ctx context.Context) string {
	id, err := seq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SideEffect entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one SideEffect entity is found.
// Returns a *NotFoundError when no SideEffect entities are found.
func (seq *SideEffectQuery) Only(ctx context.Context) (*SideEffect, error) {
	nodes, err := seq.Limit(2).All(setContextOp(ctx, seq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{sideeffect.Label}
	default:
		return nil, &NotSingularError{sideeffect.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (seq *SideEffectQuery) OnlyX(ctx context.Context) *SideEffect {
	node, err := seq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SideEffect ID in the query.
// Returns a *NotSingularError when more than one SideEffect ID is found.
// Returns a *NotFoundError when no entities are found.
func (seq *SideEffectQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = seq.Limit(2).IDs(setContextOp(ctx, seq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{sideeffect.Label}
	default:
		err = &NotSingularError{sideeffect.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (seq *SideEffectQuery) OnlyIDX(ctx context.Context) string {
	id, err := seq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SideEffects.
func (seq *SideEffectQuery) All(ctx context.Context) ([]*SideEffect, error) {
	ctx = setContextOp(ctx, seq.ctx, ent.OpQueryAll)
	if err := seq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*SideEffect, *SideEffectQuery]()
	return withInterceptors[[]*SideEffect](ctx, seq, qr, seq.inters)
}

// AllX is like All, but panics if an error occurs.
func (seq *SideEffectQuery) AllX(ctx context.Context) []*SideEffect {
	nodes, err := seq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SideEffect IDs.
func (seq *SideEffectQuery) IDs(ctx context.Context) (ids []string, err error) {
	if seq.ctx.Unique == nil && seq.path != nil {
		seq.Unique(true)
	}
	ctx = setContextOp(ctx, seq.ctx, ent.OpQueryIDs)
	if err = seq.Select(sideeffect.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (seq *SideEffectQuery) IDsX(ctx context.Context) []string {
	ids, err := seq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (seq *SideEffectQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, seq.ctx, ent.OpQueryCount)
	if err := seq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, seq, querierCount[*SideEffectQuery](), seq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (seq *SideEffectQuery) CountX(ctx context.Context) int {
	count, err := seq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (seq *SideEffectQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, seq.ctx, ent.OpQueryExist)
	switch _, err := seq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (seq *SideEffectQuery) ExistX(ctx context.Context) bool {
	exist, err := seq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SideEffectQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (seq *SideEffectQuery) Clone() *SideEffectQuery {
	if seq == nil {
		return nil
	}
	return &SideEffectQuery{
		config:         seq.config,
		ctx:            seq.ctx.Clone(),
		order:          append([]sideeffect.OrderOption{}, seq.order...),
		inters:         append([]Interceptor{}, seq.inters...),
		predicates:     append([]predicate.SideEffect{}, seq.predicates...),
		withExecutions: seq.withExecutions.Clone(),
		// clone intermediate query.
		sql:  seq.sql.Clone(),
		path: seq.path,
	}
}

// WithExecutions tells the query-builder to eager-load the nodes that are connected to
// the "executions" edge. The optional arguments are used to configure the query builder of the edge.
func (seq *SideEffectQuery) WithExecutions(opts ...func(*SideEffectExecutionQuery)) *SideEffectQuery {
	query := (&SideEffectExecutionClient{config: seq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	seq.withExecutions = query
	return seq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Identity string `json:"identity,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SideEffect.Query().
//		GroupBy(sideeffect.FieldIdentity).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (seq *SideEffectQuery) GroupBy(field string, fields ...string) *SideEffectGroupBy {
	seq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &SideEffectGroupBy{build: seq}
	grbuild.flds = &seq.ctx.Fields
	grbuild.label = sideeffect.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Identity string `json:"identity,omitempty"`
//	}
//
//	client.SideEffect.Query().
//		Select(sideeffect.FieldIdentity).
//		Scan(ctx, &v)
func (seq *SideEffectQuery) Select(fields ...string) *SideEffectSelect {
	seq.ctx.Fields = append(seq.ctx.Fields, fields...)
	sbuild := &SideEffectSelect{SideEffectQuery: seq}
	sbuild.label = sideeffect.Label
	sbuild.flds, sbuild.scan = &seq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a SideEffectSelect configured with the given aggregations.
func (seq *SideEffectQuery) Aggregate(fns ...AggregateFunc) *SideEffectSelect {
	return seq.Select().Aggregate(fns...)
}

func (seq *SideEffectQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range seq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, seq); err != nil {
				return err
			}
		}
	}
	for _, f := range seq.ctx.Fields {
		if !sideeffect.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if seq.path != nil {
		prev, err := seq.path(ctx)
		if err != nil {
			return err
		}
		seq.sql = prev
	}
	return nil
}

func (seq *SideEffectQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*SideEffect, error) {
	var (
		nodes       = []*SideEffect{}
		_spec       = seq.querySpec()
		loadedTypes = [1]bool{
			seq.withExecutions != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*SideEffect).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &SideEffect{config: seq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, seq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := seq.withExecutions; query != nil {
		if err := seq.loadExecutions(ctx, query, nodes,
			func(n *SideEffect) { n.Edges.Executions = []*SideEffectExecution{} },
			func(n *SideEffect, e *SideEffectExecution) { n.Edges.Executions = append(n.Edges.Executions, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (seq *SideEffectQuery) loadExecutions(ctx context.Context, query *SideEffectExecutionQuery, nodes []*SideEffect, init func(*SideEffect), assign func(*SideEffect, *SideEffectExecution)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*SideEffect)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.SideEffectExecution(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(sideeffect.ExecutionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.side_effect_executions
		if fk == nil {
			return fmt.Errorf(`foreign-key "side_effect_executions" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "side_effect_executions" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (seq *SideEffectQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := seq.querySpec()
	_spec.Node.Columns = seq.ctx.Fields
	if len(seq.ctx.Fields) > 0 {
		_spec.Unique = seq.ctx.Unique != nil && *seq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, seq.driver, _spec)
}

func (seq *SideEffectQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(sideeffect.Table, sideeffect.Columns, sqlgraph.NewFieldSpec(sideeffect.FieldID, field.TypeString))
	_spec.From = seq.sql
	if unique := seq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if seq.path != nil {
		_spec.Unique = true
	}
	if fields := seq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sideeffect.FieldID)
		for i := range fields {
			if fields[i] != sideeffect.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := seq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := seq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := seq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := seq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (seq *SideEffectQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(seq.driver.Dialect())
	t1 := builder.Table(sideeffect.Table)
	columns := seq.ctx.Fields
	if len(columns) == 0 {
		columns = sideeffect.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if seq.sql != nil {
		selector = seq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if seq.ctx.Unique != nil && *seq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range seq.predicates {
		p(selector)
	}
	for _, p := range seq.order {
		p(selector)
	}
	if offset := seq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := seq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// SideEffectGroupBy is the group-by builder for SideEffect entities.
type SideEffectGroupBy struct {
	selector
	build *SideEffectQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (segb *SideEffectGroupBy) Aggregate(fns ...AggregateFunc) *SideEffectGroupBy {
	segb.fns = append(segb.fns, fns...)
	return segb
}

// Scan applies the selector query and scans the result into the given value.
func (segb *SideEffectGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, segb.build.ctx, ent.OpQueryGroupBy)
	if err := segb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SideEffectQuery, *SideEffectGroupBy](ctx, segb.build, segb, segb.build.inters, v)
}

func (segb *SideEffectGroupBy) sqlScan(ctx context.Context, root *SideEffectQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(segb.fns))
	for _, fn := range segb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*segb.flds)+len(segb.fns))
		for _, f := range *segb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*segb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := segb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// SideEffectSelect is the builder for selecting fields of SideEffect entities.
type SideEffectSelect struct {
	*SideEffectQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ses *SideEffectSelect) Aggregate(fns ...AggregateFunc) *SideEffectSelect {
	ses.fns = append(ses.fns, fns...)
	return ses
}

// Scan applies the selector query and scans the result into the given value.
func (ses *SideEffectSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ses.ctx, ent.OpQuerySelect)
	if err := ses.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SideEffectQuery, *SideEffectSelect](ctx, ses.SideEffectQuery, ses, ses.inters, v)
}

func (ses *SideEffectSelect) sqlScan(ctx context.Context, root *SideEffectQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ses.fns))
	for _, fn := range ses.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ses.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ses.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
