// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/davidroman0O/tempolite/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/davidroman0O/tempolite/ent/activity"
	"github.com/davidroman0O/tempolite/ent/activityexecution"
	"github.com/davidroman0O/tempolite/ent/executionrelationship"
	"github.com/davidroman0O/tempolite/ent/featureflagversion"
	"github.com/davidroman0O/tempolite/ent/run"
	"github.com/davidroman0O/tempolite/ent/saga"
	"github.com/davidroman0O/tempolite/ent/sagaexecution"
	"github.com/davidroman0O/tempolite/ent/sideeffect"
	"github.com/davidroman0O/tempolite/ent/sideeffectexecution"
	"github.com/davidroman0O/tempolite/ent/signal"
	"github.com/davidroman0O/tempolite/ent/signalexecution"
	"github.com/davidroman0O/tempolite/ent/workflow"
	"github.com/davidroman0O/tempolite/ent/workflowexecution"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Activity is the client for interacting with the Activity builders.
	Activity *ActivityClient
	// ActivityExecution is the client for interacting with the ActivityExecution builders.
	ActivityExecution *ActivityExecutionClient
	// ExecutionRelationship is the client for interacting with the ExecutionRelationship builders.
	ExecutionRelationship *ExecutionRelationshipClient
	// FeatureFlagVersion is the client for interacting with the FeatureFlagVersion builders.
	FeatureFlagVersion *FeatureFlagVersionClient
	// Run is the client for interacting with the Run builders.
	Run *RunClient
	// Saga is the client for interacting with the Saga builders.
	Saga *SagaClient
	// SagaExecution is the client for interacting with the SagaExecution builders.
	SagaExecution *SagaExecutionClient
	// SideEffect is the client for interacting with the SideEffect builders.
	SideEffect *SideEffectClient
	// SideEffectExecution is the client for interacting with the SideEffectExecution builders.
	SideEffectExecution *SideEffectExecutionClient
	// Signal is the client for interacting with the Signal builders.
	Signal *SignalClient
	// SignalExecution is the client for interacting with the SignalExecution builders.
	SignalExecution *SignalExecutionClient
	// Workflow is the client for interacting with the Workflow builders.
	Workflow *WorkflowClient
	// WorkflowExecution is the client for interacting with the WorkflowExecution builders.
	WorkflowExecution *WorkflowExecutionClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Activity = NewActivityClient(c.config)
	c.ActivityExecution = NewActivityExecutionClient(c.config)
	c.ExecutionRelationship = NewExecutionRelationshipClient(c.config)
	c.FeatureFlagVersion = NewFeatureFlagVersionClient(c.config)
	c.Run = NewRunClient(c.config)
	c.Saga = NewSagaClient(c.config)
	c.SagaExecution = NewSagaExecutionClient(c.config)
	c.SideEffect = NewSideEffectClient(c.config)
	c.SideEffectExecution = NewSideEffectExecutionClient(c.config)
	c.Signal = NewSignalClient(c.config)
	c.SignalExecution = NewSignalExecutionClient(c.config)
	c.Workflow = NewWorkflowClient(c.config)
	c.WorkflowExecution = NewWorkflowExecutionClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                   ctx,
		config:                cfg,
		Activity:              NewActivityClient(cfg),
		ActivityExecution:     NewActivityExecutionClient(cfg),
		ExecutionRelationship: NewExecutionRelationshipClient(cfg),
		FeatureFlagVersion:    NewFeatureFlagVersionClient(cfg),
		Run:                   NewRunClient(cfg),
		Saga:                  NewSagaClient(cfg),
		SagaExecution:         NewSagaExecutionClient(cfg),
		SideEffect:            NewSideEffectClient(cfg),
		SideEffectExecution:   NewSideEffectExecutionClient(cfg),
		Signal:                NewSignalClient(cfg),
		SignalExecution:       NewSignalExecutionClient(cfg),
		Workflow:              NewWorkflowClient(cfg),
		WorkflowExecution:     NewWorkflowExecutionClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                   ctx,
		config:                cfg,
		Activity:              NewActivityClient(cfg),
		ActivityExecution:     NewActivityExecutionClient(cfg),
		ExecutionRelationship: NewExecutionRelationshipClient(cfg),
		FeatureFlagVersion:    NewFeatureFlagVersionClient(cfg),
		Run:                   NewRunClient(cfg),
		Saga:                  NewSagaClient(cfg),
		SagaExecution:         NewSagaExecutionClient(cfg),
		SideEffect:            NewSideEffectClient(cfg),
		SideEffectExecution:   NewSideEffectExecutionClient(cfg),
		Signal:                NewSignalClient(cfg),
		SignalExecution:       NewSignalExecutionClient(cfg),
		Workflow:              NewWorkflowClient(cfg),
		WorkflowExecution:     NewWorkflowExecutionClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Activity.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Activity, c.ActivityExecution, c.ExecutionRelationship, c.FeatureFlagVersion,
		c.Run, c.Saga, c.SagaExecution, c.SideEffect, c.SideEffectExecution, c.Signal,
		c.SignalExecution, c.Workflow, c.WorkflowExecution,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Activity, c.ActivityExecution, c.ExecutionRelationship, c.FeatureFlagVersion,
		c.Run, c.Saga, c.SagaExecution, c.SideEffect, c.SideEffectExecution, c.Signal,
		c.SignalExecution, c.Workflow, c.WorkflowExecution,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ActivityMutation:
		return c.Activity.mutate(ctx, m)
	case *ActivityExecutionMutation:
		return c.ActivityExecution.mutate(ctx, m)
	case *ExecutionRelationshipMutation:
		return c.ExecutionRelationship.mutate(ctx, m)
	case *FeatureFlagVersionMutation:
		return c.FeatureFlagVersion.mutate(ctx, m)
	case *RunMutation:
		return c.Run.mutate(ctx, m)
	case *SagaMutation:
		return c.Saga.mutate(ctx, m)
	case *SagaExecutionMutation:
		return c.SagaExecution.mutate(ctx, m)
	case *SideEffectMutation:
		return c.SideEffect.mutate(ctx, m)
	case *SideEffectExecutionMutation:
		return c.SideEffectExecution.mutate(ctx, m)
	case *SignalMutation:
		return c.Signal.mutate(ctx, m)
	case *SignalExecutionMutation:
		return c.SignalExecution.mutate(ctx, m)
	case *WorkflowMutation:
		return c.Workflow.mutate(ctx, m)
	case *WorkflowExecutionMutation:
		return c.WorkflowExecution.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// ActivityClient is a client for the Activity schema.
type ActivityClient struct {
	config
}

// NewActivityClient returns a client for the Activity from the given config.
func NewActivityClient(c config) *ActivityClient {
	return &ActivityClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `activity.Hooks(f(g(h())))`.
func (c *ActivityClient) Use(hooks ...Hook) {
	c.hooks.Activity = append(c.hooks.Activity, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `activity.Intercept(f(g(h())))`.
func (c *ActivityClient) Intercept(interceptors ...Interceptor) {
	c.inters.Activity = append(c.inters.Activity, interceptors...)
}

// Create returns a builder for creating a Activity entity.
func (c *ActivityClient) Create() *ActivityCreate {
	mutation := newActivityMutation(c.config, OpCreate)
	return &ActivityCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Activity entities.
func (c *ActivityClient) CreateBulk(builders ...*ActivityCreate) *ActivityCreateBulk {
	return &ActivityCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ActivityClient) MapCreateBulk(slice any, setFunc func(*ActivityCreate, int)) *ActivityCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ActivityCreateBulk{err: fmt.Errorf("calling to ActivityClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ActivityCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ActivityCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Activity.
func (c *ActivityClient) Update() *ActivityUpdate {
	mutation := newActivityMutation(c.config, OpUpdate)
	return &ActivityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ActivityClient) UpdateOne(a *Activity) *ActivityUpdateOne {
	mutation := newActivityMutation(c.config, OpUpdateOne, withActivity(a))
	return &ActivityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ActivityClient) UpdateOneID(id string) *ActivityUpdateOne {
	mutation := newActivityMutation(c.config, OpUpdateOne, withActivityID(id))
	return &ActivityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Activity.
func (c *ActivityClient) Delete() *ActivityDelete {
	mutation := newActivityMutation(c.config, OpDelete)
	return &ActivityDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ActivityClient) DeleteOne(a *Activity) *ActivityDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ActivityClient) DeleteOneID(id string) *ActivityDeleteOne {
	builder := c.Delete().Where(activity.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ActivityDeleteOne{builder}
}

// Query returns a query builder for Activity.
func (c *ActivityClient) Query() *ActivityQuery {
	return &ActivityQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeActivity},
		inters: c.Interceptors(),
	}
}

// Get returns a Activity entity by its id.
func (c *ActivityClient) Get(ctx context.Context, id string) (*Activity, error) {
	return c.Query().Where(activity.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ActivityClient) GetX(ctx context.Context, id string) *Activity {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryExecutions queries the executions edge of a Activity.
func (c *ActivityClient) QueryExecutions(a *Activity) *ActivityExecutionQuery {
	query := (&ActivityExecutionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(activity.Table, activity.FieldID, id),
			sqlgraph.To(activityexecution.Table, activityexecution.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, activity.ExecutionsTable, activity.ExecutionsColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ActivityClient) Hooks() []Hook {
	return c.hooks.Activity
}

// Interceptors returns the client interceptors.
func (c *ActivityClient) Interceptors() []Interceptor {
	return c.inters.Activity
}

func (c *ActivityClient) mutate(ctx context.Context, m *ActivityMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ActivityCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ActivityUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ActivityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ActivityDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Activity mutation op: %q", m.Op())
	}
}

// ActivityExecutionClient is a client for the ActivityExecution schema.
type ActivityExecutionClient struct {
	config
}

// NewActivityExecutionClient returns a client for the ActivityExecution from the given config.
func NewActivityExecutionClient(c config) *ActivityExecutionClient {
	return &ActivityExecutionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `activityexecution.Hooks(f(g(h())))`.
func (c *ActivityExecutionClient) Use(hooks ...Hook) {
	c.hooks.ActivityExecution = append(c.hooks.ActivityExecution, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `activityexecution.Intercept(f(g(h())))`.
func (c *ActivityExecutionClient) Intercept(interceptors ...Interceptor) {
	c.inters.ActivityExecution = append(c.inters.ActivityExecution, interceptors...)
}

// Create returns a builder for creating a ActivityExecution entity.
func (c *ActivityExecutionClient) Create() *ActivityExecutionCreate {
	mutation := newActivityExecutionMutation(c.config, OpCreate)
	return &ActivityExecutionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ActivityExecution entities.
func (c *ActivityExecutionClient) CreateBulk(builders ...*ActivityExecutionCreate) *ActivityExecutionCreateBulk {
	return &ActivityExecutionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ActivityExecutionClient) MapCreateBulk(slice any, setFunc func(*ActivityExecutionCreate, int)) *ActivityExecutionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ActivityExecutionCreateBulk{err: fmt.Errorf("calling to ActivityExecutionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ActivityExecutionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ActivityExecutionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ActivityExecution.
func (c *ActivityExecutionClient) Update() *ActivityExecutionUpdate {
	mutation := newActivityExecutionMutation(c.config, OpUpdate)
	return &ActivityExecutionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ActivityExecutionClient) UpdateOne(ae *ActivityExecution) *ActivityExecutionUpdateOne {
	mutation := newActivityExecutionMutation(c.config, OpUpdateOne, withActivityExecution(ae))
	return &ActivityExecutionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ActivityExecutionClient) UpdateOneID(id string) *ActivityExecutionUpdateOne {
	mutation := newActivityExecutionMutation(c.config, OpUpdateOne, withActivityExecutionID(id))
	return &ActivityExecutionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ActivityExecution.
func (c *ActivityExecutionClient) Delete() *ActivityExecutionDelete {
	mutation := newActivityExecutionMutation(c.config, OpDelete)
	return &ActivityExecutionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ActivityExecutionClient) DeleteOne(ae *ActivityExecution) *ActivityExecutionDeleteOne {
	return c.DeleteOneID(ae.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ActivityExecutionClient) DeleteOneID(id string) *ActivityExecutionDeleteOne {
	builder := c.Delete().Where(activityexecution.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ActivityExecutionDeleteOne{builder}
}

// Query returns a query builder for ActivityExecution.
func (c *ActivityExecutionClient) Query() *ActivityExecutionQuery {
	return &ActivityExecutionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeActivityExecution},
		inters: c.Interceptors(),
	}
}

// Get returns a ActivityExecution entity by its id.
func (c *ActivityExecutionClient) Get(ctx context.Context, id string) (*ActivityExecution, error) {
	return c.Query().Where(activityexecution.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ActivityExecutionClient) GetX(ctx context.Context, id string) *ActivityExecution {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryActivity queries the activity edge of a ActivityExecution.
func (c *ActivityExecutionClient) QueryActivity(ae *ActivityExecution) *ActivityQuery {
	query := (&ActivityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ae.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(activityexecution.Table, activityexecution.FieldID, id),
			sqlgraph.To(activity.Table, activity.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, activityexecution.ActivityTable, activityexecution.ActivityColumn),
		)
		fromV = sqlgraph.Neighbors(ae.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ActivityExecutionClient) Hooks() []Hook {
	return c.hooks.ActivityExecution
}

// Interceptors returns the client interceptors.
func (c *ActivityExecutionClient) Interceptors() []Interceptor {
	return c.inters.ActivityExecution
}

func (c *ActivityExecutionClient) mutate(ctx context.Context, m *ActivityExecutionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ActivityExecutionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ActivityExecutionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ActivityExecutionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ActivityExecutionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ActivityExecution mutation op: %q", m.Op())
	}
}

// ExecutionRelationshipClient is a client for the ExecutionRelationship schema.
type ExecutionRelationshipClient struct {
	config
}

// NewExecutionRelationshipClient returns a client for the ExecutionRelationship from the given config.
func NewExecutionRelationshipClient(c config) *ExecutionRelationshipClient {
	return &ExecutionRelationshipClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `executionrelationship.Hooks(f(g(h())))`.
func (c *ExecutionRelationshipClient) Use(hooks ...Hook) {
	c.hooks.ExecutionRelationship = append(c.hooks.ExecutionRelationship, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `executionrelationship.Intercept(f(g(h())))`.
func (c *ExecutionRelationshipClient) Intercept(interceptors ...Interceptor) {
	c.inters.ExecutionRelationship = append(c.inters.ExecutionRelationship, interceptors...)
}

// Create returns a builder for creating a ExecutionRelationship entity.
func (c *ExecutionRelationshipClient) Create() *ExecutionRelationshipCreate {
	mutation := newExecutionRelationshipMutation(c.config, OpCreate)
	return &ExecutionRelationshipCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ExecutionRelationship entities.
func (c *ExecutionRelationshipClient) CreateBulk(builders ...*ExecutionRelationshipCreate) *ExecutionRelationshipCreateBulk {
	return &ExecutionRelationshipCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ExecutionRelationshipClient) MapCreateBulk(slice any, setFunc func(*ExecutionRelationshipCreate, int)) *ExecutionRelationshipCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ExecutionRelationshipCreateBulk{err: fmt.Errorf("calling to ExecutionRelationshipClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ExecutionRelationshipCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ExecutionRelationshipCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ExecutionRelationship.
func (c *ExecutionRelationshipClient) Update() *ExecutionRelationshipUpdate {
	mutation := newExecutionRelationshipMutation(c.config, OpUpdate)
	return &ExecutionRelationshipUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ExecutionRelationshipClient) UpdateOne(er *ExecutionRelationship) *ExecutionRelationshipUpdateOne {
	mutation := newExecutionRelationshipMutation(c.config, OpUpdateOne, withExecutionRelationship(er))
	return &ExecutionRelationshipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ExecutionRelationshipClient) UpdateOneID(id int) *ExecutionRelationshipUpdateOne {
	mutation := newExecutionRelationshipMutation(c.config, OpUpdateOne, withExecutionRelationshipID(id))
	return &ExecutionRelationshipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ExecutionRelationship.
func (c *ExecutionRelationshipClient) Delete() *ExecutionRelationshipDelete {
	mutation := newExecutionRelationshipMutation(c.config, OpDelete)
	return &ExecutionRelationshipDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ExecutionRelationshipClient) DeleteOne(er *ExecutionRelationship) *ExecutionRelationshipDeleteOne {
	return c.DeleteOneID(er.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ExecutionRelationshipClient) DeleteOneID(id int) *ExecutionRelationshipDeleteOne {
	builder := c.Delete().Where(executionrelationship.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ExecutionRelationshipDeleteOne{builder}
}

// Query returns a query builder for ExecutionRelationship.
func (c *ExecutionRelationshipClient) Query() *ExecutionRelationshipQuery {
	return &ExecutionRelationshipQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeExecutionRelationship},
		inters: c.Interceptors(),
	}
}

// Get returns a ExecutionRelationship entity by its id.
func (c *ExecutionRelationshipClient) Get(ctx context.Context, id int) (*ExecutionRelationship, error) {
	return c.Query().Where(executionrelationship.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ExecutionRelationshipClient) GetX(ctx context.Context, id int) *ExecutionRelationship {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ExecutionRelationshipClient) Hooks() []Hook {
	return c.hooks.ExecutionRelationship
}

// Interceptors returns the client interceptors.
func (c *ExecutionRelationshipClient) Interceptors() []Interceptor {
	return c.inters.ExecutionRelationship
}

func (c *ExecutionRelationshipClient) mutate(ctx context.Context, m *ExecutionRelationshipMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ExecutionRelationshipCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ExecutionRelationshipUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ExecutionRelationshipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ExecutionRelationshipDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ExecutionRelationship mutation op: %q", m.Op())
	}
}

// FeatureFlagVersionClient is a client for the FeatureFlagVersion schema.
type FeatureFlagVersionClient struct {
	config
}

// NewFeatureFlagVersionClient returns a client for the FeatureFlagVersion from the given config.
func NewFeatureFlagVersionClient(c config) *FeatureFlagVersionClient {
	return &FeatureFlagVersionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `featureflagversion.Hooks(f(g(h())))`.
func (c *FeatureFlagVersionClient) Use(hooks ...Hook) {
	c.hooks.FeatureFlagVersion = append(c.hooks.FeatureFlagVersion, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `featureflagversion.Intercept(f(g(h())))`.
func (c *FeatureFlagVersionClient) Intercept(interceptors ...Interceptor) {
	c.inters.FeatureFlagVersion = append(c.inters.FeatureFlagVersion, interceptors...)
}

// Create returns a builder for creating a FeatureFlagVersion entity.
func (c *FeatureFlagVersionClient) Create() *FeatureFlagVersionCreate {
	mutation := newFeatureFlagVersionMutation(c.config, OpCreate)
	return &FeatureFlagVersionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FeatureFlagVersion entities.
func (c *FeatureFlagVersionClient) CreateBulk(builders ...*FeatureFlagVersionCreate) *FeatureFlagVersionCreateBulk {
	return &FeatureFlagVersionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FeatureFlagVersionClient) MapCreateBulk(slice any, setFunc func(*FeatureFlagVersionCreate, int)) *FeatureFlagVersionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FeatureFlagVersionCreateBulk{err: fmt.Errorf("calling to FeatureFlagVersionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FeatureFlagVersionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FeatureFlagVersionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FeatureFlagVersion.
func (c *FeatureFlagVersionClient) Update() *FeatureFlagVersionUpdate {
	mutation := newFeatureFlagVersionMutation(c.config, OpUpdate)
	return &FeatureFlagVersionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FeatureFlagVersionClient) UpdateOne(ffv *FeatureFlagVersion) *FeatureFlagVersionUpdateOne {
	mutation := newFeatureFlagVersionMutation(c.config, OpUpdateOne, withFeatureFlagVersion(ffv))
	return &FeatureFlagVersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FeatureFlagVersionClient) UpdateOneID(id int) *FeatureFlagVersionUpdateOne {
	mutation := newFeatureFlagVersionMutation(c.config, OpUpdateOne, withFeatureFlagVersionID(id))
	return &FeatureFlagVersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FeatureFlagVersion.
func (c *FeatureFlagVersionClient) Delete() *FeatureFlagVersionDelete {
	mutation := newFeatureFlagVersionMutation(c.config, OpDelete)
	return &FeatureFlagVersionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FeatureFlagVersionClient) DeleteOne(ffv *FeatureFlagVersion) *FeatureFlagVersionDeleteOne {
	return c.DeleteOneID(ffv.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FeatureFlagVersionClient) DeleteOneID(id int) *FeatureFlagVersionDeleteOne {
	builder := c.Delete().Where(featureflagversion.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FeatureFlagVersionDeleteOne{builder}
}

// Query returns a query builder for FeatureFlagVersion.
func (c *FeatureFlagVersionClient) Query() *FeatureFlagVersionQuery {
	return &FeatureFlagVersionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFeatureFlagVersion},
		inters: c.Interceptors(),
	}
}

// Get returns a FeatureFlagVersion entity by its id.
func (c *FeatureFlagVersionClient) Get(ctx context.Context, id int) (*FeatureFlagVersion, error) {
	return c.Query().Where(featureflagversion.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FeatureFlagVersionClient) GetX(ctx context.Context, id int) *FeatureFlagVersion {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *FeatureFlagVersionClient) Hooks() []Hook {
	return c.hooks.FeatureFlagVersion
}

// Interceptors returns the client interceptors.
func (c *FeatureFlagVersionClient) Interceptors() []Interceptor {
	return c.inters.FeatureFlagVersion
}

func (c *FeatureFlagVersionClient) mutate(ctx context.Context, m *FeatureFlagVersionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FeatureFlagVersionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FeatureFlagVersionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FeatureFlagVersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FeatureFlagVersionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown FeatureFlagVersion mutation op: %q", m.Op())
	}
}

// RunClient is a client for the Run schema.
type RunClient struct {
	config
}

// NewRunClient returns a client for the Run from the given config.
func NewRunClient(c config) *RunClient {
	return &RunClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `run.Hooks(f(g(h())))`.
func (c *RunClient) Use(hooks ...Hook) {
	c.hooks.Run = append(c.hooks.Run, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `run.Intercept(f(g(h())))`.
func (c *RunClient) Intercept(interceptors ...Interceptor) {
	c.inters.Run = append(c.inters.Run, interceptors...)
}

// Create returns a builder for creating a Run entity.
func (c *RunClient) Create() *RunCreate {
	mutation := newRunMutation(c.config, OpCreate)
	return &RunCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Run entities.
func (c *RunClient) CreateBulk(builders ...*RunCreate) *RunCreateBulk {
	return &RunCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RunClient) MapCreateBulk(slice any, setFunc func(*RunCreate, int)) *RunCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RunCreateBulk{err: fmt.Errorf("calling to RunClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RunCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RunCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Run.
func (c *RunClient) Update() *RunUpdate {
	mutation := newRunMutation(c.config, OpUpdate)
	return &RunUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RunClient) UpdateOne(r *Run) *RunUpdateOne {
	mutation := newRunMutation(c.config, OpUpdateOne, withRun(r))
	return &RunUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RunClient) UpdateOneID(id string) *RunUpdateOne {
	mutation := newRunMutation(c.config, OpUpdateOne, withRunID(id))
	return &RunUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Run.
func (c *RunClient) Delete() *RunDelete {
	mutation := newRunMutation(c.config, OpDelete)
	return &RunDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RunClient) DeleteOne(r *Run) *RunDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RunClient) DeleteOneID(id string) *RunDeleteOne {
	builder := c.Delete().Where(run.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RunDeleteOne{builder}
}

// Query returns a query builder for Run.
func (c *RunClient) Query() *RunQuery {
	return &RunQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRun},
		inters: c.Interceptors(),
	}
}

// Get returns a Run entity by its id.
func (c *RunClient) Get(ctx context.Context, id string) (*Run, error) {
	return c.Query().Where(run.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RunClient) GetX(ctx context.Context, id string) *Run {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWorkflow queries the workflow edge of a Run.
func (c *RunClient) QueryWorkflow(r *Run) *WorkflowQuery {
	query := (&WorkflowClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(run.Table, run.FieldID, id),
			sqlgraph.To(workflow.Table, workflow.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, run.WorkflowTable, run.WorkflowColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryActivity queries the activity edge of a Run.
func (c *RunClient) QueryActivity(r *Run) *ActivityQuery {
	query := (&ActivityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(run.Table, run.FieldID, id),
			sqlgraph.To(activity.Table, activity.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, run.ActivityTable, run.ActivityColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RunClient) Hooks() []Hook {
	return c.hooks.Run
}

// Interceptors returns the client interceptors.
func (c *RunClient) Interceptors() []Interceptor {
	return c.inters.Run
}

func (c *RunClient) mutate(ctx context.Context, m *RunMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RunCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RunUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RunUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RunDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Run mutation op: %q", m.Op())
	}
}

// SagaClient is a client for the Saga schema.
type SagaClient struct {
	config
}

// NewSagaClient returns a client for the Saga from the given config.
func NewSagaClient(c config) *SagaClient {
	return &SagaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `saga.Hooks(f(g(h())))`.
func (c *SagaClient) Use(hooks ...Hook) {
	c.hooks.Saga = append(c.hooks.Saga, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `saga.Intercept(f(g(h())))`.
func (c *SagaClient) Intercept(interceptors ...Interceptor) {
	c.inters.Saga = append(c.inters.Saga, interceptors...)
}

// Create returns a builder for creating a Saga entity.
func (c *SagaClient) Create() *SagaCreate {
	mutation := newSagaMutation(c.config, OpCreate)
	return &SagaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Saga entities.
func (c *SagaClient) CreateBulk(builders ...*SagaCreate) *SagaCreateBulk {
	return &SagaCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SagaClient) MapCreateBulk(slice any, setFunc func(*SagaCreate, int)) *SagaCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SagaCreateBulk{err: fmt.Errorf("calling to SagaClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SagaCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SagaCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Saga.
func (c *SagaClient) Update() *SagaUpdate {
	mutation := newSagaMutation(c.config, OpUpdate)
	return &SagaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SagaClient) UpdateOne(s *Saga) *SagaUpdateOne {
	mutation := newSagaMutation(c.config, OpUpdateOne, withSaga(s))
	return &SagaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SagaClient) UpdateOneID(id string) *SagaUpdateOne {
	mutation := newSagaMutation(c.config, OpUpdateOne, withSagaID(id))
	return &SagaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Saga.
func (c *SagaClient) Delete() *SagaDelete {
	mutation := newSagaMutation(c.config, OpDelete)
	return &SagaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SagaClient) DeleteOne(s *Saga) *SagaDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SagaClient) DeleteOneID(id string) *SagaDeleteOne {
	builder := c.Delete().Where(saga.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SagaDeleteOne{builder}
}

// Query returns a query builder for Saga.
func (c *SagaClient) Query() *SagaQuery {
	return &SagaQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSaga},
		inters: c.Interceptors(),
	}
}

// Get returns a Saga entity by its id.
func (c *SagaClient) Get(ctx context.Context, id string) (*Saga, error) {
	return c.Query().Where(saga.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SagaClient) GetX(ctx context.Context, id string) *Saga {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySteps queries the steps edge of a Saga.
func (c *SagaClient) QuerySteps(s *Saga) *SagaExecutionQuery {
	query := (&SagaExecutionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(saga.Table, saga.FieldID, id),
			sqlgraph.To(sagaexecution.Table, sagaexecution.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, saga.StepsTable, saga.StepsColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SagaClient) Hooks() []Hook {
	return c.hooks.Saga
}

// Interceptors returns the client interceptors.
func (c *SagaClient) Interceptors() []Interceptor {
	return c.inters.Saga
}

func (c *SagaClient) mutate(ctx context.Context, m *SagaMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SagaCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SagaUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SagaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SagaDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Saga mutation op: %q", m.Op())
	}
}

// SagaExecutionClient is a client for the SagaExecution schema.
type SagaExecutionClient struct {
	config
}

// NewSagaExecutionClient returns a client for the SagaExecution from the given config.
func NewSagaExecutionClient(c config) *SagaExecutionClient {
	return &SagaExecutionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sagaexecution.Hooks(f(g(h())))`.
func (c *SagaExecutionClient) Use(hooks ...Hook) {
	c.hooks.SagaExecution = append(c.hooks.SagaExecution, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `sagaexecution.Intercept(f(g(h())))`.
func (c *SagaExecutionClient) Intercept(interceptors ...Interceptor) {
	c.inters.SagaExecution = append(c.inters.SagaExecution, interceptors...)
}

// Create returns a builder for creating a SagaExecution entity.
func (c *SagaExecutionClient) Create() *SagaExecutionCreate {
	mutation := newSagaExecutionMutation(c.config, OpCreate)
	return &SagaExecutionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SagaExecution entities.
func (c *SagaExecutionClient) CreateBulk(builders ...*SagaExecutionCreate) *SagaExecutionCreateBulk {
	return &SagaExecutionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SagaExecutionClient) MapCreateBulk(slice any, setFunc func(*SagaExecutionCreate, int)) *SagaExecutionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SagaExecutionCreateBulk{err: fmt.Errorf("calling to SagaExecutionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SagaExecutionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SagaExecutionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SagaExecution.
func (c *SagaExecutionClient) Update() *SagaExecutionUpdate {
	mutation := newSagaExecutionMutation(c.config, OpUpdate)
	return &SagaExecutionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SagaExecutionClient) UpdateOne(se *SagaExecution) *SagaExecutionUpdateOne {
	mutation := newSagaExecutionMutation(c.config, OpUpdateOne, withSagaExecution(se))
	return &SagaExecutionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SagaExecutionClient) UpdateOneID(id string) *SagaExecutionUpdateOne {
	mutation := newSagaExecutionMutation(c.config, OpUpdateOne, withSagaExecutionID(id))
	return &SagaExecutionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SagaExecution.
func (c *SagaExecutionClient) Delete() *SagaExecutionDelete {
	mutation := newSagaExecutionMutation(c.config, OpDelete)
	return &SagaExecutionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SagaExecutionClient) DeleteOne(se *SagaExecution) *SagaExecutionDeleteOne {
	return c.DeleteOneID(se.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SagaExecutionClient) DeleteOneID(id string) *SagaExecutionDeleteOne {
	builder := c.Delete().Where(sagaexecution.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SagaExecutionDeleteOne{builder}
}

// Query returns a query builder for SagaExecution.
func (c *SagaExecutionClient) Query() *SagaExecutionQuery {
	return &SagaExecutionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSagaExecution},
		inters: c.Interceptors(),
	}
}

// Get returns a SagaExecution entity by its id.
func (c *SagaExecutionClient) Get(ctx context.Context, id string) (*SagaExecution, error) {
	return c.Query().Where(sagaexecution.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SagaExecutionClient) GetX(ctx context.Context, id string) *SagaExecution {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySaga queries the saga edge of a SagaExecution.
func (c *SagaExecutionClient) QuerySaga(se *SagaExecution) *SagaQuery {
	query := (&SagaClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := se.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sagaexecution.Table, sagaexecution.FieldID, id),
			sqlgraph.To(saga.Table, saga.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sagaexecution.SagaTable, sagaexecution.SagaColumn),
		)
		fromV = sqlgraph.Neighbors(se.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SagaExecutionClient) Hooks() []Hook {
	return c.hooks.SagaExecution
}

// Interceptors returns the client interceptors.
func (c *SagaExecutionClient) Interceptors() []Interceptor {
	return c.inters.SagaExecution
}

func (c *SagaExecutionClient) mutate(ctx context.Context, m *SagaExecutionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SagaExecutionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SagaExecutionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SagaExecutionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SagaExecutionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SagaExecution mutation op: %q", m.Op())
	}
}

// SideEffectClient is a client for the SideEffect schema.
type SideEffectClient struct {
	config
}

// NewSideEffectClient returns a client for the SideEffect from the given config.
func NewSideEffectClient(c config) *SideEffectClient {
	return &SideEffectClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sideeffect.Hooks(f(g(h())))`.
func (c *SideEffectClient) Use(hooks ...Hook) {
	c.hooks.SideEffect = append(c.hooks.SideEffect, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `sideeffect.Intercept(f(g(h())))`.
func (c *SideEffectClient) Intercept(interceptors ...Interceptor) {
	c.inters.SideEffect = append(c.inters.SideEffect, interceptors...)
}

// Create returns a builder for creating a SideEffect entity.
func (c *SideEffectClient) Create() *SideEffectCreate {
	mutation := newSideEffectMutation(c.config, OpCreate)
	return &SideEffectCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SideEffect entities.
func (c *SideEffectClient) CreateBulk(builders ...*SideEffectCreate) *SideEffectCreateBulk {
	return &SideEffectCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SideEffectClient) MapCreateBulk(slice any, setFunc func(*SideEffectCreate, int)) *SideEffectCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SideEffectCreateBulk{err: fmt.Errorf("calling to SideEffectClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SideEffectCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SideEffectCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SideEffect.
func (c *SideEffectClient) Update() *SideEffectUpdate {
	mutation := newSideEffectMutation(c.config, OpUpdate)
	return &SideEffectUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SideEffectClient) UpdateOne(se *SideEffect) *SideEffectUpdateOne {
	mutation := newSideEffectMutation(c.config, OpUpdateOne, withSideEffect(se))
	return &SideEffectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SideEffectClient) UpdateOneID(id string) *SideEffectUpdateOne {
	mutation := newSideEffectMutation(c.config, OpUpdateOne, withSideEffectID(id))
	return &SideEffectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SideEffect.
func (c *SideEffectClient) Delete() *SideEffectDelete {
	mutation := newSideEffectMutation(c.config, OpDelete)
	return &SideEffectDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SideEffectClient) DeleteOne(se *SideEffect) *SideEffectDeleteOne {
	return c.DeleteOneID(se.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SideEffectClient) DeleteOneID(id string) *SideEffectDeleteOne {
	builder := c.Delete().Where(sideeffect.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SideEffectDeleteOne{builder}
}

// Query returns a query builder for SideEffect.
func (c *SideEffectClient) Query() *SideEffectQuery {
	return &SideEffectQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSideEffect},
		inters: c.Interceptors(),
	}
}

// Get returns a SideEffect entity by its id.
func (c *SideEffectClient) Get(ctx context.Context, id string) (*SideEffect, error) {
	return c.Query().Where(sideeffect.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SideEffectClient) GetX(ctx context.Context, id string) *SideEffect {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryExecutions queries the executions edge of a SideEffect.
func (c *SideEffectClient) QueryExecutions(se *SideEffect) *SideEffectExecutionQuery {
	query := (&SideEffectExecutionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := se.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sideeffect.Table, sideeffect.FieldID, id),
			sqlgraph.To(sideeffectexecution.Table, sideeffectexecution.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, sideeffect.ExecutionsTable, sideeffect.ExecutionsColumn),
		)
		fromV = sqlgraph.Neighbors(se.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SideEffectClient) Hooks() []Hook {
	return c.hooks.SideEffect
}

// Interceptors returns the client interceptors.
func (c *SideEffectClient) Interceptors() []Interceptor {
	return c.inters.SideEffect
}

func (c *SideEffectClient) mutate(ctx context.Context, m *SideEffectMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SideEffectCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SideEffectUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SideEffectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SideEffectDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SideEffect mutation op: %q", m.Op())
	}
}

// SideEffectExecutionClient is a client for the SideEffectExecution schema.
type SideEffectExecutionClient struct {
	config
}

// NewSideEffectExecutionClient returns a client for the SideEffectExecution from the given config.
func NewSideEffectExecutionClient(c config) *SideEffectExecutionClient {
	return &SideEffectExecutionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sideeffectexecution.Hooks(f(g(h())))`.
func (c *SideEffectExecutionClient) Use(hooks ...Hook) {
	c.hooks.SideEffectExecution = append(c.hooks.SideEffectExecution, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `sideeffectexecution.Intercept(f(g(h())))`.
func (c *SideEffectExecutionClient) Intercept(interceptors ...Interceptor) {
	c.inters.SideEffectExecution = append(c.inters.SideEffectExecution, interceptors...)
}

// Create returns a builder for creating a SideEffectExecution entity.
func (c *SideEffectExecutionClient) Create() *SideEffectExecutionCreate {
	mutation := newSideEffectExecutionMutation(c.config, OpCreate)
	return &SideEffectExecutionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SideEffectExecution entities.
func (c *SideEffectExecutionClient) CreateBulk(builders ...*SideEffectExecutionCreate) *SideEffectExecutionCreateBulk {
	return &SideEffectExecutionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SideEffectExecutionClient) MapCreateBulk(slice any, setFunc func(*SideEffectExecutionCreate, int)) *SideEffectExecutionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SideEffectExecutionCreateBulk{err: fmt.Errorf("calling to SideEffectExecutionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SideEffectExecutionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SideEffectExecutionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SideEffectExecution.
func (c *SideEffectExecutionClient) Update() *SideEffectExecutionUpdate {
	mutation := newSideEffectExecutionMutation(c.config, OpUpdate)
	return &SideEffectExecutionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SideEffectExecutionClient) UpdateOne(see *SideEffectExecution) *SideEffectExecutionUpdateOne {
	mutation := newSideEffectExecutionMutation(c.config, OpUpdateOne, withSideEffectExecution(see))
	return &SideEffectExecutionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SideEffectExecutionClient) UpdateOneID(id string) *SideEffectExecutionUpdateOne {
	mutation := newSideEffectExecutionMutation(c.config, OpUpdateOne, withSideEffectExecutionID(id))
	return &SideEffectExecutionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SideEffectExecution.
func (c *SideEffectExecutionClient) Delete() *SideEffectExecutionDelete {
	mutation := newSideEffectExecutionMutation(c.config, OpDelete)
	return &SideEffectExecutionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SideEffectExecutionClient) DeleteOne(see *SideEffectExecution) *SideEffectExecutionDeleteOne {
	return c.DeleteOneID(see.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SideEffectExecutionClient) DeleteOneID(id string) *SideEffectExecutionDeleteOne {
	builder := c.Delete().Where(sideeffectexecution.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SideEffectExecutionDeleteOne{builder}
}

// Query returns a query builder for SideEffectExecution.
func (c *SideEffectExecutionClient) Query() *SideEffectExecutionQuery {
	return &SideEffectExecutionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSideEffectExecution},
		inters: c.Interceptors(),
	}
}

// Get returns a SideEffectExecution entity by its id.
func (c *SideEffectExecutionClient) Get(ctx context.Context, id string) (*SideEffectExecution, error) {
	return c.Query().Where(sideeffectexecution.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SideEffectExecutionClient) GetX(ctx context.Context, id string) *SideEffectExecution {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySideEffect queries the side_effect edge of a SideEffectExecution.
func (c *SideEffectExecutionClient) QuerySideEffect(see *SideEffectExecution) *SideEffectQuery {
	query := (&SideEffectClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := see.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sideeffectexecution.Table, sideeffectexecution.FieldID, id),
			sqlgraph.To(sideeffect.Table, sideeffect.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sideeffectexecution.SideEffectTable, sideeffectexecution.SideEffectColumn),
		)
		fromV = sqlgraph.Neighbors(see.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SideEffectExecutionClient) Hooks() []Hook {
	return c.hooks.SideEffectExecution
}

// Interceptors returns the client interceptors.
func (c *SideEffectExecutionClient) Interceptors() []Interceptor {
	return c.inters.SideEffectExecution
}

func (c *SideEffectExecutionClient) mutate(ctx context.Context, m *SideEffectExecutionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SideEffectExecutionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SideEffectExecutionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SideEffectExecutionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SideEffectExecutionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SideEffectExecution mutation op: %q", m.Op())
	}
}

// SignalClient is a client for the Signal schema.
type SignalClient struct {
	config
}

// NewSignalClient returns a client for the Signal from the given config.
func NewSignalClient(c config) *SignalClient {
	return &SignalClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `signal.Hooks(f(g(h())))`.
func (c *SignalClient) Use(hooks ...Hook) {
	c.hooks.Signal = append(c.hooks.Signal, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `signal.Intercept(f(g(h())))`.
func (c *SignalClient) Intercept(interceptors ...Interceptor) {
	c.inters.Signal = append(c.inters.Signal, interceptors...)
}

// Create returns a builder for creating a Signal entity.
func (c *SignalClient) Create() *SignalCreate {
	mutation := newSignalMutation(c.config, OpCreate)
	return &SignalCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Signal entities.
func (c *SignalClient) CreateBulk(builders ...*SignalCreate) *SignalCreateBulk {
	return &SignalCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SignalClient) MapCreateBulk(slice any, setFunc func(*SignalCreate, int)) *SignalCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SignalCreateBulk{err: fmt.Errorf("calling to SignalClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SignalCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SignalCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Signal.
func (c *SignalClient) Update() *SignalUpdate {
	mutation := newSignalMutation(c.config, OpUpdate)
	return &SignalUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SignalClient) UpdateOne(s *Signal) *SignalUpdateOne {
	mutation := newSignalMutation(c.config, OpUpdateOne, withSignal(s))
	return &SignalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SignalClient) UpdateOneID(id string) *SignalUpdateOne {
	mutation := newSignalMutation(c.config, OpUpdateOne, withSignalID(id))
	return &SignalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Signal.
func (c *SignalClient) Delete() *SignalDelete {
	mutation := newSignalMutation(c.config, OpDelete)
	return &SignalDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SignalClient) DeleteOne(s *Signal) *SignalDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SignalClient) DeleteOneID(id string) *SignalDeleteOne {
	builder := c.Delete().Where(signal.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SignalDeleteOne{builder}
}

// Query returns a query builder for Signal.
func (c *SignalClient) Query() *SignalQuery {
	return &SignalQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSignal},
		inters: c.Interceptors(),
	}
}

// Get returns a Signal entity by its id.
func (c *SignalClient) Get(ctx context.Context, id string) (*Signal, error) {
	return c.Query().Where(signal.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SignalClient) GetX(ctx context.Context, id string) *Signal {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryExecutions queries the executions edge of a Signal.
func (c *SignalClient) QueryExecutions(s *Signal) *SignalExecutionQuery {
	query := (&SignalExecutionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(signal.Table, signal.FieldID, id),
			sqlgraph.To(signalexecution.Table, signalexecution.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, signal.ExecutionsTable, signal.ExecutionsColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SignalClient) Hooks() []Hook {
	return c.hooks.Signal
}

// Interceptors returns the client interceptors.
func (c *SignalClient) Interceptors() []Interceptor {
	return c.inters.Signal
}

func (c *SignalClient) mutate(ctx context.Context, m *SignalMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SignalCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SignalUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SignalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SignalDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Signal mutation op: %q", m.Op())
	}
}

// SignalExecutionClient is a client for the SignalExecution schema.
type SignalExecutionClient struct {
	config
}

// NewSignalExecutionClient returns a client for the SignalExecution from the given config.
func NewSignalExecutionClient(c config) *SignalExecutionClient {
	return &SignalExecutionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `signalexecution.Hooks(f(g(h())))`.
func (c *SignalExecutionClient) Use(hooks ...Hook) {
	c.hooks.SignalExecution = append(c.hooks.SignalExecution, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `signalexecution.Intercept(f(g(h())))`.
func (c *SignalExecutionClient) Intercept(interceptors ...Interceptor) {
	c.inters.SignalExecution = append(c.inters.SignalExecution, interceptors...)
}

// Create returns a builder for creating a SignalExecution entity.
func (c *SignalExecutionClient) Create() *SignalExecutionCreate {
	mutation := newSignalExecutionMutation(c.config, OpCreate)
	return &SignalExecutionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SignalExecution entities.
func (c *SignalExecutionClient) CreateBulk(builders ...*SignalExecutionCreate) *SignalExecutionCreateBulk {
	return &SignalExecutionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SignalExecutionClient) MapCreateBulk(slice any, setFunc func(*SignalExecutionCreate, int)) *SignalExecutionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SignalExecutionCreateBulk{err: fmt.Errorf("calling to SignalExecutionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SignalExecutionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SignalExecutionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SignalExecution.
func (c *SignalExecutionClient) Update() *SignalExecutionUpdate {
	mutation := newSignalExecutionMutation(c.config, OpUpdate)
	return &SignalExecutionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SignalExecutionClient) UpdateOne(se *SignalExecution) *SignalExecutionUpdateOne {
	mutation := newSignalExecutionMutation(c.config, OpUpdateOne, withSignalExecution(se))
	return &SignalExecutionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SignalExecutionClient) UpdateOneID(id string) *SignalExecutionUpdateOne {
	mutation := newSignalExecutionMutation(c.config, OpUpdateOne, withSignalExecutionID(id))
	return &SignalExecutionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SignalExecution.
func (c *SignalExecutionClient) Delete() *SignalExecutionDelete {
	mutation := newSignalExecutionMutation(c.config, OpDelete)
	return &SignalExecutionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SignalExecutionClient) DeleteOne(se *SignalExecution) *SignalExecutionDeleteOne {
	return c.DeleteOneID(se.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SignalExecutionClient) DeleteOneID(id string) *SignalExecutionDeleteOne {
	builder := c.Delete().Where(signalexecution.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SignalExecutionDeleteOne{builder}
}

// Query returns a query builder for SignalExecution.
func (c *SignalExecutionClient) Query() *SignalExecutionQuery {
	return &SignalExecutionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSignalExecution},
		inters: c.Interceptors(),
	}
}

// Get returns a SignalExecution entity by its id.
func (c *SignalExecutionClient) Get(ctx context.Context, id string) (*SignalExecution, error) {
	return c.Query().Where(signalexecution.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SignalExecutionClient) GetX(ctx context.Context, id string) *SignalExecution {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySignal queries the signal edge of a SignalExecution.
func (c *SignalExecutionClient) QuerySignal(se *SignalExecution) *SignalQuery {
	query := (&SignalClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := se.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(signalexecution.Table, signalexecution.FieldID, id),
			sqlgraph.To(signal.Table, signal.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, signalexecution.SignalTable, signalexecution.SignalColumn),
		)
		fromV = sqlgraph.Neighbors(se.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SignalExecutionClient) Hooks() []Hook {
	return c.hooks.SignalExecution
}

// Interceptors returns the client interceptors.
func (c *SignalExecutionClient) Interceptors() []Interceptor {
	return c.inters.SignalExecution
}

func (c *SignalExecutionClient) mutate(ctx context.Context, m *SignalExecutionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SignalExecutionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SignalExecutionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SignalExecutionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SignalExecutionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SignalExecution mutation op: %q", m.Op())
	}
}

// WorkflowClient is a client for the Workflow schema.
type WorkflowClient struct {
	config
}

// NewWorkflowClient returns a client for the Workflow from the given config.
func NewWorkflowClient(c config) *WorkflowClient {
	return &WorkflowClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `workflow.Hooks(f(g(h())))`.
func (c *WorkflowClient) Use(hooks ...Hook) {
	c.hooks.Workflow = append(c.hooks.Workflow, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `workflow.Intercept(f(g(h())))`.
func (c *WorkflowClient) Intercept(interceptors ...Interceptor) {
	c.inters.Workflow = append(c.inters.Workflow, interceptors...)
}

// Create returns a builder for creating a Workflow entity.
func (c *WorkflowClient) Create() *WorkflowCreate {
	mutation := newWorkflowMutation(c.config, OpCreate)
	return &WorkflowCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Workflow entities.
func (c *WorkflowClient) CreateBulk(builders ...*WorkflowCreate) *WorkflowCreateBulk {
	return &WorkflowCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *WorkflowClient) MapCreateBulk(slice any, setFunc func(*WorkflowCreate, int)) *WorkflowCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &WorkflowCreateBulk{err: fmt.Errorf("calling to WorkflowClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*WorkflowCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &WorkflowCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Workflow.
func (c *WorkflowClient) Update() *WorkflowUpdate {
	mutation := newWorkflowMutation(c.config, OpUpdate)
	return &WorkflowUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WorkflowClient) UpdateOne(w *Workflow) *WorkflowUpdateOne {
	mutation := newWorkflowMutation(c.config, OpUpdateOne, withWorkflow(w))
	return &WorkflowUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WorkflowClient) UpdateOneID(id string) *WorkflowUpdateOne {
	mutation := newWorkflowMutation(c.config, OpUpdateOne, withWorkflowID(id))
	return &WorkflowUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Workflow.
func (c *WorkflowClient) Delete() *WorkflowDelete {
	mutation := newWorkflowMutation(c.config, OpDelete)
	return &WorkflowDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *WorkflowClient) DeleteOne(w *Workflow) *WorkflowDeleteOne {
	return c.DeleteOneID(w.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *WorkflowClient) DeleteOneID(id string) *WorkflowDeleteOne {
	builder := c.Delete().Where(workflow.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WorkflowDeleteOne{builder}
}

// Query returns a query builder for Workflow.
func (c *WorkflowClient) Query() *WorkflowQuery {
	return &WorkflowQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeWorkflow},
		inters: c.Interceptors(),
	}
}

// Get returns a Workflow entity by its id.
func (c *WorkflowClient) Get(ctx context.Context, id string) (*Workflow, error) {
	return c.Query().Where(workflow.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WorkflowClient) GetX(ctx context.Context, id string) *Workflow {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryExecutions queries the executions edge of a Workflow.
func (c *WorkflowClient) QueryExecutions(w *Workflow) *WorkflowExecutionQuery {
	query := (&WorkflowExecutionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workflow.Table, workflow.FieldID, id),
			sqlgraph.To(workflowexecution.Table, workflowexecution.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workflow.ExecutionsTable, workflow.ExecutionsColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryContinuedFrom queries the continued_from edge of a Workflow.
func (c *WorkflowClient) QueryContinuedFrom(w *Workflow) *WorkflowQuery {
	query := (&WorkflowClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workflow.Table, workflow.FieldID, id),
			sqlgraph.To(workflow.Table, workflow.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, workflow.ContinuedFromTable, workflow.ContinuedFromColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryContinuedTo queries the continued_to edge of a Workflow.
func (c *WorkflowClient) QueryContinuedTo(w *Workflow) *WorkflowQuery {
	query := (&WorkflowClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workflow.Table, workflow.FieldID, id),
			sqlgraph.To(workflow.Table, workflow.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, workflow.ContinuedToTable, workflow.ContinuedToColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRetriedFrom queries the retried_from edge of a Workflow.
func (c *WorkflowClient) QueryRetriedFrom(w *Workflow) *WorkflowQuery {
	query := (&WorkflowClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workflow.Table, workflow.FieldID, id),
			sqlgraph.To(workflow.Table, workflow.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workflow.RetriedFromTable, workflow.RetriedFromColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRetriedTo queries the retried_to edge of a Workflow.
func (c *WorkflowClient) QueryRetriedTo(w *Workflow) *WorkflowQuery {
	query := (&WorkflowClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workflow.Table, workflow.FieldID, id),
			sqlgraph.To(workflow.Table, workflow.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workflow.RetriedToTable, workflow.RetriedToColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WorkflowClient) Hooks() []Hook {
	return c.hooks.Workflow
}

// Interceptors returns the client interceptors.
func (c *WorkflowClient) Interceptors() []Interceptor {
	return c.inters.Workflow
}

func (c *WorkflowClient) mutate(ctx context.Context, m *WorkflowMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&WorkflowCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&WorkflowUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&WorkflowUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&WorkflowDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Workflow mutation op: %q", m.Op())
	}
}

// WorkflowExecutionClient is a client for the WorkflowExecution schema.
type WorkflowExecutionClient struct {
	config
}

// NewWorkflowExecutionClient returns a client for the WorkflowExecution from the given config.
func NewWorkflowExecutionClient(c config) *WorkflowExecutionClient {
	return &WorkflowExecutionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `workflowexecution.Hooks(f(g(h())))`.
func (c *WorkflowExecutionClient) Use(hooks ...Hook) {
	c.hooks.WorkflowExecution = append(c.hooks.WorkflowExecution, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `workflowexecution.Intercept(f(g(h())))`.
func (c *WorkflowExecutionClient) Intercept(interceptors ...Interceptor) {
	c.inters.WorkflowExecution = append(c.inters.WorkflowExecution, interceptors...)
}

// Create returns a builder for creating a WorkflowExecution entity.
func (c *WorkflowExecutionClient) Create() *WorkflowExecutionCreate {
	mutation := newWorkflowExecutionMutation(c.config, OpCreate)
	return &WorkflowExecutionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WorkflowExecution entities.
func (c *WorkflowExecutionClient) CreateBulk(builders ...*WorkflowExecutionCreate) *WorkflowExecutionCreateBulk {
	return &WorkflowExecutionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *WorkflowExecutionClient) MapCreateBulk(slice any, setFunc func(*WorkflowExecutionCreate, int)) *WorkflowExecutionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &WorkflowExecutionCreateBulk{err: fmt.Errorf("calling to WorkflowExecutionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*WorkflowExecutionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &WorkflowExecutionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WorkflowExecution.
func (c *WorkflowExecutionClient) Update() *WorkflowExecutionUpdate {
	mutation := newWorkflowExecutionMutation(c.config, OpUpdate)
	return &WorkflowExecutionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WorkflowExecutionClient) UpdateOne(we *WorkflowExecution) *WorkflowExecutionUpdateOne {
	mutation := newWorkflowExecutionMutation(c.config, OpUpdateOne, withWorkflowExecution(we))
	return &WorkflowExecutionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WorkflowExecutionClient) UpdateOneID(id string) *WorkflowExecutionUpdateOne {
	mutation := newWorkflowExecutionMutation(c.config, OpUpdateOne, withWorkflowExecutionID(id))
	return &WorkflowExecutionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WorkflowExecution.
func (c *WorkflowExecutionClient) Delete() *WorkflowExecutionDelete {
	mutation := newWorkflowExecutionMutation(c.config, OpDelete)
	return &WorkflowExecutionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *WorkflowExecutionClient) DeleteOne(we *WorkflowExecution) *WorkflowExecutionDeleteOne {
	return c.DeleteOneID(we.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *WorkflowExecutionClient) DeleteOneID(id string) *WorkflowExecutionDeleteOne {
	builder := c.Delete().Where(workflowexecution.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WorkflowExecutionDeleteOne{builder}
}

// Query returns a query builder for WorkflowExecution.
func (c *WorkflowExecutionClient) Query() *WorkflowExecutionQuery {
	return &WorkflowExecutionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeWorkflowExecution},
		inters: c.Interceptors(),
	}
}

// Get returns a WorkflowExecution entity by its id.
func (c *WorkflowExecutionClient) Get(ctx context.Context, id string) (*WorkflowExecution, error) {
	return c.Query().Where(workflowexecution.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WorkflowExecutionClient) GetX(ctx context.Context, id string) *WorkflowExecution {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWorkflow queries the workflow edge of a WorkflowExecution.
func (c *WorkflowExecutionClient) QueryWorkflow(we *WorkflowExecution) *WorkflowQuery {
	query := (&WorkflowClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := we.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workflowexecution.Table, workflowexecution.FieldID, id),
			sqlgraph.To(workflow.Table, workflow.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workflowexecution.WorkflowTable, workflowexecution.WorkflowColumn),
		)
		fromV = sqlgraph.Neighbors(we.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WorkflowExecutionClient) Hooks() []Hook {
	return c.hooks.WorkflowExecution
}

// Interceptors returns the client interceptors.
func (c *WorkflowExecutionClient) Interceptors() []Interceptor {
	return c.inters.WorkflowExecution
}

func (c *WorkflowExecutionClient) mutate(ctx context.Context, m *WorkflowExecutionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&WorkflowExecutionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&WorkflowExecutionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&WorkflowExecutionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&WorkflowExecutionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown WorkflowExecution mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Activity, ActivityExecution, ExecutionRelationship, FeatureFlagVersion, Run,
		Saga, SagaExecution, SideEffect, SideEffectExecution, Signal, SignalExecution,
		Workflow, WorkflowExecution []ent.Hook
	}
	inters struct {
		Activity, ActivityExecution, ExecutionRelationship, FeatureFlagVersion, Run,
		Saga, SagaExecution, SideEffect, SideEffectExecution, Signal, SignalExecution,
		Workflow, WorkflowExecution []ent.Interceptor
	}
)
