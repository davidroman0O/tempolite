// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/tempolite/ent/predicate"
	"github.com/davidroman0O/tempolite/ent/workflow"
	"github.com/davidroman0O/tempolite/ent/workflowexecution"
)

// WorkflowExecutionUpdate is the builder for updating WorkflowExecution entities.
type WorkflowExecutionUpdate struct {
	config
	hooks    []Hook
	mutation *WorkflowExecutionMutation
}

// Where appends a list predicates to the WorkflowExecutionUpdate builder.
func (weu *WorkflowExecutionUpdate) Where(ps ...predicate.WorkflowExecution) *WorkflowExecutionUpdate {
	weu.mutation.Where(ps...)
	return weu
}

// SetRunID sets the "run_id" field.
func (weu *WorkflowExecutionUpdate) SetRunID(s string) *WorkflowExecutionUpdate {
	weu.mutation.SetRunID(s)
	return weu
}

// SetNillableRunID sets the "run_id" field if the given value is not nil.
func (weu *WorkflowExecutionUpdate) SetNillableRunID(s *string) *WorkflowExecutionUpdate {
	if s != nil {
		weu.SetRunID(*s)
	}
	return weu
}

// SetStatus sets the "status" field.
func (weu *WorkflowExecutionUpdate) SetStatus(w workflowexecution.Status) *WorkflowExecutionUpdate {
	weu.mutation.SetStatus(w)
	return weu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (weu *WorkflowExecutionUpdate) SetNillableStatus(w *workflowexecution.Status) *WorkflowExecutionUpdate {
	if w != nil {
		weu.SetStatus(*w)
	}
	return weu
}

// SetQueueName sets the "queue_name" field.
func (weu *WorkflowExecutionUpdate) SetQueueName(s string) *WorkflowExecutionUpdate {
	weu.mutation.SetQueueName(s)
	return weu
}

// SetNillableQueueName sets the "queue_name" field if the given value is not nil.
func (weu *WorkflowExecutionUpdate) SetNillableQueueName(s *string) *WorkflowExecutionUpdate {
	if s != nil {
		weu.SetQueueName(*s)
	}
	return weu
}

// SetOutput sets the "output" field.
func (weu *WorkflowExecutionUpdate) SetOutput(u [][]uint8) *WorkflowExecutionUpdate {
	weu.mutation.SetOutput(u)
	return weu
}

// AppendOutput appends u to the "output" field.
func (weu *WorkflowExecutionUpdate) AppendOutput(u [][]uint8) *WorkflowExecutionUpdate {
	weu.mutation.AppendOutput(u)
	return weu
}

// ClearOutput clears the value of the "output" field.
func (weu *WorkflowExecutionUpdate) ClearOutput() *WorkflowExecutionUpdate {
	weu.mutation.ClearOutput()
	return weu
}

// SetError sets the "error" field.
func (weu *WorkflowExecutionUpdate) SetError(s string) *WorkflowExecutionUpdate {
	weu.mutation.SetError(s)
	return weu
}

// SetNillableError sets the "error" field if the given value is not nil.
func (weu *WorkflowExecutionUpdate) SetNillableError(s *string) *WorkflowExecutionUpdate {
	if s != nil {
		weu.SetError(*s)
	}
	return weu
}

// ClearError clears the value of the "error" field.
func (weu *WorkflowExecutionUpdate) ClearError() *WorkflowExecutionUpdate {
	weu.mutation.ClearError()
	return weu
}

// SetIsReplay sets the "is_replay" field.
func (weu *WorkflowExecutionUpdate) SetIsReplay(b bool) *WorkflowExecutionUpdate {
	weu.mutation.SetIsReplay(b)
	return weu
}

// SetNillableIsReplay sets the "is_replay" field if the given value is not nil.
func (weu *WorkflowExecutionUpdate) SetNillableIsReplay(b *bool) *WorkflowExecutionUpdate {
	if b != nil {
		weu.SetIsReplay(*b)
	}
	return weu
}

// SetStartedAt sets the "started_at" field.
func (weu *WorkflowExecutionUpdate) SetStartedAt(t time.Time) *WorkflowExecutionUpdate {
	weu.mutation.SetStartedAt(t)
	return weu
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (weu *WorkflowExecutionUpdate) SetNillableStartedAt(t *time.Time) *WorkflowExecutionUpdate {
	if t != nil {
		weu.SetStartedAt(*t)
	}
	return weu
}

// SetUpdatedAt sets the "updated_at" field.
func (weu *WorkflowExecutionUpdate) SetUpdatedAt(t time.Time) *WorkflowExecutionUpdate {
	weu.mutation.SetUpdatedAt(t)
	return weu
}

// SetWorkflowID sets the "workflow" edge to the Workflow entity by ID.
func (weu *WorkflowExecutionUpdate) SetWorkflowID(id string) *WorkflowExecutionUpdate {
	weu.mutation.SetWorkflowID(id)
	return weu
}

// SetWorkflow sets the "workflow" edge to the Workflow entity.
func (weu *WorkflowExecutionUpdate) SetWorkflow(w *Workflow) *WorkflowExecutionUpdate {
	return weu.SetWorkflowID(w.ID)
}

// Mutation returns the WorkflowExecutionMutation object of the builder.
func (weu *WorkflowExecutionUpdate) Mutation() *WorkflowExecutionMutation {
	return weu.mutation
}

// ClearWorkflow clears the "workflow" edge to the Workflow entity.
func (weu *WorkflowExecutionUpdate) ClearWorkflow() *WorkflowExecutionUpdate {
	weu.mutation.ClearWorkflow()
	return weu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (weu *WorkflowExecutionUpdate) Save(ctx context.Context) (int, error) {
	weu.defaults()
	return withHooks(ctx, weu.sqlSave, weu.mutation, weu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (weu *WorkflowExecutionUpdate) SaveX(ctx context.Context) int {
	affected, err := weu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (weu *WorkflowExecutionUpdate) Exec(ctx context.Context) error {
	_, err := weu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (weu *WorkflowExecutionUpdate) ExecX(ctx context.Context) {
	if err := weu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (weu *WorkflowExecutionUpdate) defaults() {
	if _, ok := weu.mutation.UpdatedAt(); !ok {
		v := workflowexecution.UpdateDefaultUpdatedAt()
		weu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (weu *WorkflowExecutionUpdate) check() error {
	if v, ok := weu.mutation.Status(); ok {
		if err := workflowexecution.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "WorkflowExecution.status": %w`, err)}
		}
	}
	if v, ok := weu.mutation.QueueName(); ok {
		if err := workflowexecution.QueueNameValidator(v); err != nil {
			return &ValidationError{Name: "queue_name", err: fmt.Errorf(`ent: validator failed for field "WorkflowExecution.queue_name": %w`, err)}
		}
	}
	if weu.mutation.WorkflowCleared() && len(weu.mutation.WorkflowIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkflowExecution.workflow"`)
	}
	return nil
}

func (weu *WorkflowExecutionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := weu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(workflowexecution.Table, workflowexecution.Columns, sqlgraph.NewFieldSpec(workflowexecution.FieldID, field.TypeString))
	if ps := weu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := weu.mutation.RunID(); ok {
		_spec.SetField(workflowexecution.FieldRunID, field.TypeString, value)
	}
	if value, ok := weu.mutation.Status(); ok {
		_spec.SetField(workflowexecution.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := weu.mutation.QueueName(); ok {
		_spec.SetField(workflowexecution.FieldQueueName, field.TypeString, value)
	}
	if value, ok := weu.mutation.Output(); ok {
		_spec.SetField(workflowexecution.FieldOutput, field.TypeJSON, value)
	}
	if value, ok := weu.mutation.AppendedOutput(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, workflowexecution.FieldOutput, value)
		})
	}
	if weu.mutation.OutputCleared() {
		_spec.ClearField(workflowexecution.FieldOutput, field.TypeJSON)
	}
	if value, ok := weu.mutation.Error(); ok {
		_spec.SetField(workflowexecution.FieldError, field.TypeString, value)
	}
	if weu.mutation.ErrorCleared() {
		_spec.ClearField(workflowexecution.FieldError, field.TypeString)
	}
	if value, ok := weu.mutation.IsReplay(); ok {
		_spec.SetField(workflowexecution.FieldIsReplay, field.TypeBool, value)
	}
	if value, ok := weu.mutation.StartedAt(); ok {
		_spec.SetField(workflowexecution.FieldStartedAt, field.TypeTime, value)
	}
	if value, ok := weu.mutation.UpdatedAt(); ok {
		_spec.SetField(workflowexecution.FieldUpdatedAt, field.TypeTime, value)
	}
	if weu.mutation.WorkflowCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowexecution.WorkflowTable,
			Columns: []string{workflowexecution.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflow.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weu.mutation.WorkflowIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowexecution.WorkflowTable,
			Columns: []string{workflowexecution.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflow.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, weu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workflowexecution.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	weu.mutation.done = true
	return n, nil
}

// WorkflowExecutionUpdateOne is the builder for updating a single WorkflowExecution entity.
type WorkflowExecutionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WorkflowExecutionMutation
}

// SetRunID sets the "run_id" field.
func (weuo *WorkflowExecutionUpdateOne) SetRunID(s string) *WorkflowExecutionUpdateOne {
	weuo.mutation.SetRunID(s)
	return weuo
}

// SetNillableRunID sets the "run_id" field if the given value is not nil.
func (weuo *WorkflowExecutionUpdateOne) SetNillableRunID(s *string) *WorkflowExecutionUpdateOne {
	if s != nil {
		weuo.SetRunID(*s)
	}
	return weuo
}

// SetStatus sets the "status" field.
func (weuo *WorkflowExecutionUpdateOne) SetStatus(w workflowexecution.Status) *WorkflowExecutionUpdateOne {
	weuo.mutation.SetStatus(w)
	return weuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (weuo *WorkflowExecutionUpdateOne) SetNillableStatus(w *workflowexecution.Status) *WorkflowExecutionUpdateOne {
	if w != nil {
		weuo.SetStatus(*w)
	}
	return weuo
}

// SetQueueName sets the "queue_name" field.
func (weuo *WorkflowExecutionUpdateOne) SetQueueName(s string) *WorkflowExecutionUpdateOne {
	weuo.mutation.SetQueueName(s)
	return weuo
}

// SetNillableQueueName sets the "queue_name" field if the given value is not nil.
func (weuo *WorkflowExecutionUpdateOne) SetNillableQueueName(s *string) *WorkflowExecutionUpdateOne {
	if s != nil {
		weuo.SetQueueName(*s)
	}
	return weuo
}

// SetOutput sets the "output" field.
func (weuo *WorkflowExecutionUpdateOne) SetOutput(u [][]uint8) *WorkflowExecutionUpdateOne {
	weuo.mutation.SetOutput(u)
	return weuo
}

// AppendOutput appends u to the "output" field.
func (weuo *WorkflowExecutionUpdateOne) AppendOutput(u [][]uint8) *WorkflowExecutionUpdateOne {
	weuo.mutation.AppendOutput(u)
	return weuo
}

// ClearOutput clears the value of the "output" field.
func (weuo *WorkflowExecutionUpdateOne) ClearOutput() *WorkflowExecutionUpdateOne {
	weuo.mutation.ClearOutput()
	return weuo
}

// SetError sets the "error" field.
func (weuo *WorkflowExecutionUpdateOne) SetError(s string) *WorkflowExecutionUpdateOne {
	weuo.mutation.SetError(s)
	return weuo
}

// SetNillableError sets the "error" field if the given value is not nil.
func (weuo *WorkflowExecutionUpdateOne) SetNillableError(s *string) *WorkflowExecutionUpdateOne {
	if s != nil {
		weuo.SetError(*s)
	}
	return weuo
}

// ClearError clears the value of the "error" field.
func (weuo *WorkflowExecutionUpdateOne) ClearError() *WorkflowExecutionUpdateOne {
	weuo.mutation.ClearError()
	return weuo
}

// SetIsReplay sets the "is_replay" field.
func (weuo *WorkflowExecutionUpdateOne) SetIsReplay(b bool) *WorkflowExecutionUpdateOne {
	weuo.mutation.SetIsReplay(b)
	return weuo
}

// SetNillableIsReplay sets the "is_replay" field if the given value is not nil.
func (weuo *WorkflowExecutionUpdateOne) SetNillableIsReplay(b *bool) *WorkflowExecutionUpdateOne {
	if b != nil {
		weuo.SetIsReplay(*b)
	}
	return weuo
}

// SetStartedAt sets the "started_at" field.
func (weuo *WorkflowExecutionUpdateOne) SetStartedAt(t time.Time) *WorkflowExecutionUpdateOne {
	weuo.mutation.SetStartedAt(t)
	return weuo
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (weuo *WorkflowExecutionUpdateOne) SetNillableStartedAt(t *time.Time) *WorkflowExecutionUpdateOne {
	if t != nil {
		weuo.SetStartedAt(*t)
	}
	return weuo
}

// SetUpdatedAt sets the "updated_at" field.
func (weuo *WorkflowExecutionUpdateOne) SetUpdatedAt(t time.Time) *WorkflowExecutionUpdateOne {
	weuo.mutation.SetUpdatedAt(t)
	return weuo
}

// SetWorkflowID sets the "workflow" edge to the Workflow entity by ID.
func (weuo *WorkflowExecutionUpdateOne) SetWorkflowID(id string) *WorkflowExecutionUpdateOne {
	weuo.mutation.SetWorkflowID(id)
	return weuo
}

// SetWorkflow sets the "workflow" edge to the Workflow entity.
func (weuo *WorkflowExecutionUpdateOne) SetWorkflow(w *Workflow) *WorkflowExecutionUpdateOne {
	return weuo.SetWorkflowID(w.ID)
}

// Mutation returns the WorkflowExecutionMutation object of the builder.
func (weuo *WorkflowExecutionUpdateOne) Mutation() *WorkflowExecutionMutation {
	return weuo.mutation
}

// ClearWorkflow clears the "workflow" edge to the Workflow entity.
func (weuo *WorkflowExecutionUpdateOne) ClearWorkflow() *WorkflowExecutionUpdateOne {
	weuo.mutation.ClearWorkflow()
	return weuo
}

// Where appends a list predicates to the WorkflowExecutionUpdate builder.
func (weuo *WorkflowExecutionUpdateOne) Where(ps ...predicate.WorkflowExecution) *WorkflowExecutionUpdateOne {
	weuo.mutation.Where(ps...)
	return weuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (weuo *WorkflowExecutionUpdateOne) Select(field string, fields ...string) *WorkflowExecutionUpdateOne {
	weuo.fields = append([]string{field}, fields...)
	return weuo
}

// Save executes the query and returns the updated WorkflowExecution entity.
func (weuo *WorkflowExecutionUpdateOne) Save(ctx context.Context) (*WorkflowExecution, error) {
	weuo.defaults()
	return withHooks(ctx, weuo.sqlSave, weuo.mutation, weuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (weuo *WorkflowExecutionUpdateOne) SaveX(ctx context.Context) *WorkflowExecution {
	node, err := weuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (weuo *WorkflowExecutionUpdateOne) Exec(ctx context.Context) error {
	_, err := weuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (weuo *WorkflowExecutionUpdateOne) ExecX(ctx context.Context) {
	if err := weuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (weuo *WorkflowExecutionUpdateOne) defaults() {
	if _, ok := weuo.mutation.UpdatedAt(); !ok {
		v := workflowexecution.UpdateDefaultUpdatedAt()
		weuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (weuo *WorkflowExecutionUpdateOne) check() error {
	if v, ok := weuo.mutation.Status(); ok {
		if err := workflowexecution.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "WorkflowExecution.status": %w`, err)}
		}
	}
	if v, ok := weuo.mutation.QueueName(); ok {
		if err := workflowexecution.QueueNameValidator(v); err != nil {
			return &ValidationError{Name: "queue_name", err: fmt.Errorf(`ent: validator failed for field "WorkflowExecution.queue_name": %w`, err)}
		}
	}
	if weuo.mutation.WorkflowCleared() && len(weuo.mutation.WorkflowIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkflowExecution.workflow"`)
	}
	return nil
}

func (weuo *WorkflowExecutionUpdateOne) sqlSave(ctx context.Context) (_node *WorkflowExecution, err error) {
	if err := weuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(workflowexecution.Table, workflowexecution.Columns, sqlgraph.NewFieldSpec(workflowexecution.FieldID, field.TypeString))
	id, ok := weuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WorkflowExecution.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := weuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workflowexecution.FieldID)
		for _, f := range fields {
			if !workflowexecution.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != workflowexecution.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := weuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := weuo.mutation.RunID(); ok {
		_spec.SetField(workflowexecution.FieldRunID, field.TypeString, value)
	}
	if value, ok := weuo.mutation.Status(); ok {
		_spec.SetField(workflowexecution.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := weuo.mutation.QueueName(); ok {
		_spec.SetField(workflowexecution.FieldQueueName, field.TypeString, value)
	}
	if value, ok := weuo.mutation.Output(); ok {
		_spec.SetField(workflowexecution.FieldOutput, field.TypeJSON, value)
	}
	if value, ok := weuo.mutation.AppendedOutput(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, workflowexecution.FieldOutput, value)
		})
	}
	if weuo.mutation.OutputCleared() {
		_spec.ClearField(workflowexecution.FieldOutput, field.TypeJSON)
	}
	if value, ok := weuo.mutation.Error(); ok {
		_spec.SetField(workflowexecution.FieldError, field.TypeString, value)
	}
	if weuo.mutation.ErrorCleared() {
		_spec.ClearField(workflowexecution.FieldError, field.TypeString)
	}
	if value, ok := weuo.mutation.IsReplay(); ok {
		_spec.SetField(workflowexecution.FieldIsReplay, field.TypeBool, value)
	}
	if value, ok := weuo.mutation.StartedAt(); ok {
		_spec.SetField(workflowexecution.FieldStartedAt, field.TypeTime, value)
	}
	if value, ok := weuo.mutation.UpdatedAt(); ok {
		_spec.SetField(workflowexecution.FieldUpdatedAt, field.TypeTime, value)
	}
	if weuo.mutation.WorkflowCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowexecution.WorkflowTable,
			Columns: []string{workflowexecution.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflow.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weuo.mutation.WorkflowIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowexecution.WorkflowTable,
			Columns: []string{workflowexecution.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflow.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &WorkflowExecution{config: weuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, weuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workflowexecution.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	weuo.mutation.done = true
	return _node, nil
}
