// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/davidroman0O/tempolite/ent/executionrelationship"
)

// ExecutionRelationship is the model entity for the ExecutionRelationship schema.
type ExecutionRelationship struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// RunID holds the value of the "run_id" field.
	RunID string `json:"run_id,omitempty"`
	// ParentEntityID holds the value of the "parent_entity_id" field.
	ParentEntityID string `json:"parent_entity_id,omitempty"`
	// ChildEntityID holds the value of the "child_entity_id" field.
	ChildEntityID string `json:"child_entity_id,omitempty"`
	// ParentID holds the value of the "parent_id" field.
	ParentID string `json:"parent_id,omitempty"`
	// ChildID holds the value of the "child_id" field.
	ChildID string `json:"child_id,omitempty"`
	// ParentType holds the value of the "parent_type" field.
	ParentType executionrelationship.ParentType `json:"parent_type,omitempty"`
	// ChildType holds the value of the "child_type" field.
	ChildType executionrelationship.ChildType `json:"child_type,omitempty"`
	// ParentStepID holds the value of the "parent_step_id" field.
	ParentStepID string `json:"parent_step_id,omitempty"`
	// ChildStepID holds the value of the "child_step_id" field.
	ChildStepID  string `json:"child_step_id,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ExecutionRelationship) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case executionrelationship.FieldID:
			values[i] = new(sql.NullInt64)
		case executionrelationship.FieldRunID, executionrelationship.FieldParentEntityID, executionrelationship.FieldChildEntityID, executionrelationship.FieldParentID, executionrelationship.FieldChildID, executionrelationship.FieldParentType, executionrelationship.FieldChildType, executionrelationship.FieldParentStepID, executionrelationship.FieldChildStepID:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ExecutionRelationship fields.
func (er *ExecutionRelationship) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case executionrelationship.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			er.ID = int(value.Int64)
		case executionrelationship.FieldRunID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field run_id", values[i])
			} else if value.Valid {
				er.RunID = value.String
			}
		case executionrelationship.FieldParentEntityID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field parent_entity_id", values[i])
			} else if value.Valid {
				er.ParentEntityID = value.String
			}
		case executionrelationship.FieldChildEntityID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field child_entity_id", values[i])
			} else if value.Valid {
				er.ChildEntityID = value.String
			}
		case executionrelationship.FieldParentID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field parent_id", values[i])
			} else if value.Valid {
				er.ParentID = value.String
			}
		case executionrelationship.FieldChildID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field child_id", values[i])
			} else if value.Valid {
				er.ChildID = value.String
			}
		case executionrelationship.FieldParentType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field parent_type", values[i])
			} else if value.Valid {
				er.ParentType = executionrelationship.ParentType(value.String)
			}
		case executionrelationship.FieldChildType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field child_type", values[i])
			} else if value.Valid {
				er.ChildType = executionrelationship.ChildType(value.String)
			}
		case executionrelationship.FieldParentStepID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field parent_step_id", values[i])
			} else if value.Valid {
				er.ParentStepID = value.String
			}
		case executionrelationship.FieldChildStepID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field child_step_id", values[i])
			} else if value.Valid {
				er.ChildStepID = value.String
			}
		default:
			er.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ExecutionRelationship.
// This includes values selected through modifiers, order, etc.
func (er *ExecutionRelationship) Value(name string) (ent.Value, error) {
	return er.selectValues.Get(name)
}

// Update returns a builder for updating this ExecutionRelationship.
// Note that you need to call ExecutionRelationship.Unwrap() before calling this method if this ExecutionRelationship
// was returned from a transaction, and the transaction was committed or rolled back.
func (er *ExecutionRelationship) Update() *ExecutionRelationshipUpdateOne {
	return NewExecutionRelationshipClient(er.config).UpdateOne(er)
}

// Unwrap unwraps the ExecutionRelationship entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (er *ExecutionRelationship) Unwrap() *ExecutionRelationship {
	_tx, ok := er.config.driver.(*txDriver)
	if !ok {
		panic("ent: ExecutionRelationship is not a transactional entity")
	}
	er.config.driver = _tx.drv
	return er
}

// String implements the fmt.Stringer.
func (er *ExecutionRelationship) String() string {
	var builder strings.Builder
	builder.WriteString("ExecutionRelationship(")
	builder.WriteString(fmt.Sprintf("id=%v, ", er.ID))
	builder.WriteString("run_id=")
	builder.WriteString(er.RunID)
	builder.WriteString(", ")
	builder.WriteString("parent_entity_id=")
	builder.WriteString(er.ParentEntityID)
	builder.WriteString(", ")
	builder.WriteString("child_entity_id=")
	builder.WriteString(er.ChildEntityID)
	builder.WriteString(", ")
	builder.WriteString("parent_id=")
	builder.WriteString(er.ParentID)
	builder.WriteString(", ")
	builder.WriteString("child_id=")
	builder.WriteString(er.ChildID)
	builder.WriteString(", ")
	builder.WriteString("parent_type=")
	builder.WriteString(fmt.Sprintf("%v", er.ParentType))
	builder.WriteString(", ")
	builder.WriteString("child_type=")
	builder.WriteString(fmt.Sprintf("%v", er.ChildType))
	builder.WriteString(", ")
	builder.WriteString("parent_step_id=")
	builder.WriteString(er.ParentStepID)
	builder.WriteString(", ")
	builder.WriteString("child_step_id=")
	builder.WriteString(er.ChildStepID)
	builder.WriteByte(')')
	return builder.String()
}

// ExecutionRelationships is a parsable slice of ExecutionRelationship.
type ExecutionRelationships []*ExecutionRelationship
