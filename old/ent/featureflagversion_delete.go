// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/tempolite/ent/featureflagversion"
	"github.com/davidroman0O/tempolite/ent/predicate"
)

// FeatureFlagVersionDelete is the builder for deleting a FeatureFlagVersion entity.
type FeatureFlagVersionDelete struct {
	config
	hooks    []Hook
	mutation *FeatureFlagVersionMutation
}

// Where appends a list predicates to the FeatureFlagVersionDelete builder.
func (ffvd *FeatureFlagVersionDelete) Where(ps ...predicate.FeatureFlagVersion) *FeatureFlagVersionDelete {
	ffvd.mutation.Where(ps...)
	return ffvd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ffvd *FeatureFlagVersionDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ffvd.sqlExec, ffvd.mutation, ffvd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ffvd *FeatureFlagVersionDelete) ExecX(ctx context.Context) int {
	n, err := ffvd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ffvd *FeatureFlagVersionDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(featureflagversion.Table, sqlgraph.NewFieldSpec(featureflagversion.FieldID, field.TypeInt))
	if ps := ffvd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ffvd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ffvd.mutation.done = true
	return affected, err
}

// FeatureFlagVersionDeleteOne is the builder for deleting a single FeatureFlagVersion entity.
type FeatureFlagVersionDeleteOne struct {
	ffvd *FeatureFlagVersionDelete
}

// Where appends a list predicates to the FeatureFlagVersionDelete builder.
func (ffvdo *FeatureFlagVersionDeleteOne) Where(ps ...predicate.FeatureFlagVersion) *FeatureFlagVersionDeleteOne {
	ffvdo.ffvd.mutation.Where(ps...)
	return ffvdo
}

// Exec executes the deletion query.
func (ffvdo *FeatureFlagVersionDeleteOne) Exec(ctx context.Context) error {
	n, err := ffvdo.ffvd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{featureflagversion.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ffvdo *FeatureFlagVersionDeleteOne) ExecX(ctx context.Context) {
	if err := ffvdo.Exec(ctx); err != nil {
		panic(err)
	}
}
