// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/tempolite/ent/executionrelationship"
)

// ExecutionRelationshipCreate is the builder for creating a ExecutionRelationship entity.
type ExecutionRelationshipCreate struct {
	config
	mutation *ExecutionRelationshipMutation
	hooks    []Hook
}

// SetRunID sets the "run_id" field.
func (erc *ExecutionRelationshipCreate) SetRunID(s string) *ExecutionRelationshipCreate {
	erc.mutation.SetRunID(s)
	return erc
}

// SetParentEntityID sets the "parent_entity_id" field.
func (erc *ExecutionRelationshipCreate) SetParentEntityID(s string) *ExecutionRelationshipCreate {
	erc.mutation.SetParentEntityID(s)
	return erc
}

// SetChildEntityID sets the "child_entity_id" field.
func (erc *ExecutionRelationshipCreate) SetChildEntityID(s string) *ExecutionRelationshipCreate {
	erc.mutation.SetChildEntityID(s)
	return erc
}

// SetParentID sets the "parent_id" field.
func (erc *ExecutionRelationshipCreate) SetParentID(s string) *ExecutionRelationshipCreate {
	erc.mutation.SetParentID(s)
	return erc
}

// SetChildID sets the "child_id" field.
func (erc *ExecutionRelationshipCreate) SetChildID(s string) *ExecutionRelationshipCreate {
	erc.mutation.SetChildID(s)
	return erc
}

// SetParentType sets the "parent_type" field.
func (erc *ExecutionRelationshipCreate) SetParentType(et executionrelationship.ParentType) *ExecutionRelationshipCreate {
	erc.mutation.SetParentType(et)
	return erc
}

// SetChildType sets the "child_type" field.
func (erc *ExecutionRelationshipCreate) SetChildType(et executionrelationship.ChildType) *ExecutionRelationshipCreate {
	erc.mutation.SetChildType(et)
	return erc
}

// SetParentStepID sets the "parent_step_id" field.
func (erc *ExecutionRelationshipCreate) SetParentStepID(s string) *ExecutionRelationshipCreate {
	erc.mutation.SetParentStepID(s)
	return erc
}

// SetChildStepID sets the "child_step_id" field.
func (erc *ExecutionRelationshipCreate) SetChildStepID(s string) *ExecutionRelationshipCreate {
	erc.mutation.SetChildStepID(s)
	return erc
}

// Mutation returns the ExecutionRelationshipMutation object of the builder.
func (erc *ExecutionRelationshipCreate) Mutation() *ExecutionRelationshipMutation {
	return erc.mutation
}

// Save creates the ExecutionRelationship in the database.
func (erc *ExecutionRelationshipCreate) Save(ctx context.Context) (*ExecutionRelationship, error) {
	return withHooks(ctx, erc.sqlSave, erc.mutation, erc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (erc *ExecutionRelationshipCreate) SaveX(ctx context.Context) *ExecutionRelationship {
	v, err := erc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (erc *ExecutionRelationshipCreate) Exec(ctx context.Context) error {
	_, err := erc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (erc *ExecutionRelationshipCreate) ExecX(ctx context.Context) {
	if err := erc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (erc *ExecutionRelationshipCreate) check() error {
	if _, ok := erc.mutation.RunID(); !ok {
		return &ValidationError{Name: "run_id", err: errors.New(`ent: missing required field "ExecutionRelationship.run_id"`)}
	}
	if v, ok := erc.mutation.RunID(); ok {
		if err := executionrelationship.RunIDValidator(v); err != nil {
			return &ValidationError{Name: "run_id", err: fmt.Errorf(`ent: validator failed for field "ExecutionRelationship.run_id": %w`, err)}
		}
	}
	if _, ok := erc.mutation.ParentEntityID(); !ok {
		return &ValidationError{Name: "parent_entity_id", err: errors.New(`ent: missing required field "ExecutionRelationship.parent_entity_id"`)}
	}
	if v, ok := erc.mutation.ParentEntityID(); ok {
		if err := executionrelationship.ParentEntityIDValidator(v); err != nil {
			return &ValidationError{Name: "parent_entity_id", err: fmt.Errorf(`ent: validator failed for field "ExecutionRelationship.parent_entity_id": %w`, err)}
		}
	}
	if _, ok := erc.mutation.ChildEntityID(); !ok {
		return &ValidationError{Name: "child_entity_id", err: errors.New(`ent: missing required field "ExecutionRelationship.child_entity_id"`)}
	}
	if v, ok := erc.mutation.ChildEntityID(); ok {
		if err := executionrelationship.ChildEntityIDValidator(v); err != nil {
			return &ValidationError{Name: "child_entity_id", err: fmt.Errorf(`ent: validator failed for field "ExecutionRelationship.child_entity_id": %w`, err)}
		}
	}
	if _, ok := erc.mutation.ParentID(); !ok {
		return &ValidationError{Name: "parent_id", err: errors.New(`ent: missing required field "ExecutionRelationship.parent_id"`)}
	}
	if _, ok := erc.mutation.ChildID(); !ok {
		return &ValidationError{Name: "child_id", err: errors.New(`ent: missing required field "ExecutionRelationship.child_id"`)}
	}
	if _, ok := erc.mutation.ParentType(); !ok {
		return &ValidationError{Name: "parent_type", err: errors.New(`ent: missing required field "ExecutionRelationship.parent_type"`)}
	}
	if v, ok := erc.mutation.ParentType(); ok {
		if err := executionrelationship.ParentTypeValidator(v); err != nil {
			return &ValidationError{Name: "parent_type", err: fmt.Errorf(`ent: validator failed for field "ExecutionRelationship.parent_type": %w`, err)}
		}
	}
	if _, ok := erc.mutation.ChildType(); !ok {
		return &ValidationError{Name: "child_type", err: errors.New(`ent: missing required field "ExecutionRelationship.child_type"`)}
	}
	if v, ok := erc.mutation.ChildType(); ok {
		if err := executionrelationship.ChildTypeValidator(v); err != nil {
			return &ValidationError{Name: "child_type", err: fmt.Errorf(`ent: validator failed for field "ExecutionRelationship.child_type": %w`, err)}
		}
	}
	if _, ok := erc.mutation.ParentStepID(); !ok {
		return &ValidationError{Name: "parent_step_id", err: errors.New(`ent: missing required field "ExecutionRelationship.parent_step_id"`)}
	}
	if v, ok := erc.mutation.ParentStepID(); ok {
		if err := executionrelationship.ParentStepIDValidator(v); err != nil {
			return &ValidationError{Name: "parent_step_id", err: fmt.Errorf(`ent: validator failed for field "ExecutionRelationship.parent_step_id": %w`, err)}
		}
	}
	if _, ok := erc.mutation.ChildStepID(); !ok {
		return &ValidationError{Name: "child_step_id", err: errors.New(`ent: missing required field "ExecutionRelationship.child_step_id"`)}
	}
	if v, ok := erc.mutation.ChildStepID(); ok {
		if err := executionrelationship.ChildStepIDValidator(v); err != nil {
			return &ValidationError{Name: "child_step_id", err: fmt.Errorf(`ent: validator failed for field "ExecutionRelationship.child_step_id": %w`, err)}
		}
	}
	return nil
}

func (erc *ExecutionRelationshipCreate) sqlSave(ctx context.Context) (*ExecutionRelationship, error) {
	if err := erc.check(); err != nil {
		return nil, err
	}
	_node, _spec := erc.createSpec()
	if err := sqlgraph.CreateNode(ctx, erc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	erc.mutation.id = &_node.ID
	erc.mutation.done = true
	return _node, nil
}

func (erc *ExecutionRelationshipCreate) createSpec() (*ExecutionRelationship, *sqlgraph.CreateSpec) {
	var (
		_node = &ExecutionRelationship{config: erc.config}
		_spec = sqlgraph.NewCreateSpec(executionrelationship.Table, sqlgraph.NewFieldSpec(executionrelationship.FieldID, field.TypeInt))
	)
	if value, ok := erc.mutation.RunID(); ok {
		_spec.SetField(executionrelationship.FieldRunID, field.TypeString, value)
		_node.RunID = value
	}
	if value, ok := erc.mutation.ParentEntityID(); ok {
		_spec.SetField(executionrelationship.FieldParentEntityID, field.TypeString, value)
		_node.ParentEntityID = value
	}
	if value, ok := erc.mutation.ChildEntityID(); ok {
		_spec.SetField(executionrelationship.FieldChildEntityID, field.TypeString, value)
		_node.ChildEntityID = value
	}
	if value, ok := erc.mutation.ParentID(); ok {
		_spec.SetField(executionrelationship.FieldParentID, field.TypeString, value)
		_node.ParentID = value
	}
	if value, ok := erc.mutation.ChildID(); ok {
		_spec.SetField(executionrelationship.FieldChildID, field.TypeString, value)
		_node.ChildID = value
	}
	if value, ok := erc.mutation.ParentType(); ok {
		_spec.SetField(executionrelationship.FieldParentType, field.TypeEnum, value)
		_node.ParentType = value
	}
	if value, ok := erc.mutation.ChildType(); ok {
		_spec.SetField(executionrelationship.FieldChildType, field.TypeEnum, value)
		_node.ChildType = value
	}
	if value, ok := erc.mutation.ParentStepID(); ok {
		_spec.SetField(executionrelationship.FieldParentStepID, field.TypeString, value)
		_node.ParentStepID = value
	}
	if value, ok := erc.mutation.ChildStepID(); ok {
		_spec.SetField(executionrelationship.FieldChildStepID, field.TypeString, value)
		_node.ChildStepID = value
	}
	return _node, _spec
}

// ExecutionRelationshipCreateBulk is the builder for creating many ExecutionRelationship entities in bulk.
type ExecutionRelationshipCreateBulk struct {
	config
	err      error
	builders []*ExecutionRelationshipCreate
}

// Save creates the ExecutionRelationship entities in the database.
func (ercb *ExecutionRelationshipCreateBulk) Save(ctx context.Context) ([]*ExecutionRelationship, error) {
	if ercb.err != nil {
		return nil, ercb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ercb.builders))
	nodes := make([]*ExecutionRelationship, len(ercb.builders))
	mutators := make([]Mutator, len(ercb.builders))
	for i := range ercb.builders {
		func(i int, root context.Context) {
			builder := ercb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ExecutionRelationshipMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ercb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ercb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ercb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ercb *ExecutionRelationshipCreateBulk) SaveX(ctx context.Context) []*ExecutionRelationship {
	v, err := ercb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ercb *ExecutionRelationshipCreateBulk) Exec(ctx context.Context) error {
	_, err := ercb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ercb *ExecutionRelationshipCreateBulk) ExecX(ctx context.Context) {
	if err := ercb.Exec(ctx); err != nil {
		panic(err)
	}
}
