// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/tempolite/ent/executionrelationship"
	"github.com/davidroman0O/tempolite/ent/predicate"
)

// ExecutionRelationshipUpdate is the builder for updating ExecutionRelationship entities.
type ExecutionRelationshipUpdate struct {
	config
	hooks    []Hook
	mutation *ExecutionRelationshipMutation
}

// Where appends a list predicates to the ExecutionRelationshipUpdate builder.
func (eru *ExecutionRelationshipUpdate) Where(ps ...predicate.ExecutionRelationship) *ExecutionRelationshipUpdate {
	eru.mutation.Where(ps...)
	return eru
}

// SetRunID sets the "run_id" field.
func (eru *ExecutionRelationshipUpdate) SetRunID(s string) *ExecutionRelationshipUpdate {
	eru.mutation.SetRunID(s)
	return eru
}

// SetNillableRunID sets the "run_id" field if the given value is not nil.
func (eru *ExecutionRelationshipUpdate) SetNillableRunID(s *string) *ExecutionRelationshipUpdate {
	if s != nil {
		eru.SetRunID(*s)
	}
	return eru
}

// SetParentEntityID sets the "parent_entity_id" field.
func (eru *ExecutionRelationshipUpdate) SetParentEntityID(s string) *ExecutionRelationshipUpdate {
	eru.mutation.SetParentEntityID(s)
	return eru
}

// SetNillableParentEntityID sets the "parent_entity_id" field if the given value is not nil.
func (eru *ExecutionRelationshipUpdate) SetNillableParentEntityID(s *string) *ExecutionRelationshipUpdate {
	if s != nil {
		eru.SetParentEntityID(*s)
	}
	return eru
}

// SetChildEntityID sets the "child_entity_id" field.
func (eru *ExecutionRelationshipUpdate) SetChildEntityID(s string) *ExecutionRelationshipUpdate {
	eru.mutation.SetChildEntityID(s)
	return eru
}

// SetNillableChildEntityID sets the "child_entity_id" field if the given value is not nil.
func (eru *ExecutionRelationshipUpdate) SetNillableChildEntityID(s *string) *ExecutionRelationshipUpdate {
	if s != nil {
		eru.SetChildEntityID(*s)
	}
	return eru
}

// SetParentID sets the "parent_id" field.
func (eru *ExecutionRelationshipUpdate) SetParentID(s string) *ExecutionRelationshipUpdate {
	eru.mutation.SetParentID(s)
	return eru
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (eru *ExecutionRelationshipUpdate) SetNillableParentID(s *string) *ExecutionRelationshipUpdate {
	if s != nil {
		eru.SetParentID(*s)
	}
	return eru
}

// SetChildID sets the "child_id" field.
func (eru *ExecutionRelationshipUpdate) SetChildID(s string) *ExecutionRelationshipUpdate {
	eru.mutation.SetChildID(s)
	return eru
}

// SetNillableChildID sets the "child_id" field if the given value is not nil.
func (eru *ExecutionRelationshipUpdate) SetNillableChildID(s *string) *ExecutionRelationshipUpdate {
	if s != nil {
		eru.SetChildID(*s)
	}
	return eru
}

// SetParentType sets the "parent_type" field.
func (eru *ExecutionRelationshipUpdate) SetParentType(et executionrelationship.ParentType) *ExecutionRelationshipUpdate {
	eru.mutation.SetParentType(et)
	return eru
}

// SetNillableParentType sets the "parent_type" field if the given value is not nil.
func (eru *ExecutionRelationshipUpdate) SetNillableParentType(et *executionrelationship.ParentType) *ExecutionRelationshipUpdate {
	if et != nil {
		eru.SetParentType(*et)
	}
	return eru
}

// SetChildType sets the "child_type" field.
func (eru *ExecutionRelationshipUpdate) SetChildType(et executionrelationship.ChildType) *ExecutionRelationshipUpdate {
	eru.mutation.SetChildType(et)
	return eru
}

// SetNillableChildType sets the "child_type" field if the given value is not nil.
func (eru *ExecutionRelationshipUpdate) SetNillableChildType(et *executionrelationship.ChildType) *ExecutionRelationshipUpdate {
	if et != nil {
		eru.SetChildType(*et)
	}
	return eru
}

// SetParentStepID sets the "parent_step_id" field.
func (eru *ExecutionRelationshipUpdate) SetParentStepID(s string) *ExecutionRelationshipUpdate {
	eru.mutation.SetParentStepID(s)
	return eru
}

// SetNillableParentStepID sets the "parent_step_id" field if the given value is not nil.
func (eru *ExecutionRelationshipUpdate) SetNillableParentStepID(s *string) *ExecutionRelationshipUpdate {
	if s != nil {
		eru.SetParentStepID(*s)
	}
	return eru
}

// SetChildStepID sets the "child_step_id" field.
func (eru *ExecutionRelationshipUpdate) SetChildStepID(s string) *ExecutionRelationshipUpdate {
	eru.mutation.SetChildStepID(s)
	return eru
}

// SetNillableChildStepID sets the "child_step_id" field if the given value is not nil.
func (eru *ExecutionRelationshipUpdate) SetNillableChildStepID(s *string) *ExecutionRelationshipUpdate {
	if s != nil {
		eru.SetChildStepID(*s)
	}
	return eru
}

// Mutation returns the ExecutionRelationshipMutation object of the builder.
func (eru *ExecutionRelationshipUpdate) Mutation() *ExecutionRelationshipMutation {
	return eru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eru *ExecutionRelationshipUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eru.sqlSave, eru.mutation, eru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eru *ExecutionRelationshipUpdate) SaveX(ctx context.Context) int {
	affected, err := eru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eru *ExecutionRelationshipUpdate) Exec(ctx context.Context) error {
	_, err := eru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eru *ExecutionRelationshipUpdate) ExecX(ctx context.Context) {
	if err := eru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eru *ExecutionRelationshipUpdate) check() error {
	if v, ok := eru.mutation.RunID(); ok {
		if err := executionrelationship.RunIDValidator(v); err != nil {
			return &ValidationError{Name: "run_id", err: fmt.Errorf(`ent: validator failed for field "ExecutionRelationship.run_id": %w`, err)}
		}
	}
	if v, ok := eru.mutation.ParentEntityID(); ok {
		if err := executionrelationship.ParentEntityIDValidator(v); err != nil {
			return &ValidationError{Name: "parent_entity_id", err: fmt.Errorf(`ent: validator failed for field "ExecutionRelationship.parent_entity_id": %w`, err)}
		}
	}
	if v, ok := eru.mutation.ChildEntityID(); ok {
		if err := executionrelationship.ChildEntityIDValidator(v); err != nil {
			return &ValidationError{Name: "child_entity_id", err: fmt.Errorf(`ent: validator failed for field "ExecutionRelationship.child_entity_id": %w`, err)}
		}
	}
	if v, ok := eru.mutation.ParentType(); ok {
		if err := executionrelationship.ParentTypeValidator(v); err != nil {
			return &ValidationError{Name: "parent_type", err: fmt.Errorf(`ent: validator failed for field "ExecutionRelationship.parent_type": %w`, err)}
		}
	}
	if v, ok := eru.mutation.ChildType(); ok {
		if err := executionrelationship.ChildTypeValidator(v); err != nil {
			return &ValidationError{Name: "child_type", err: fmt.Errorf(`ent: validator failed for field "ExecutionRelationship.child_type": %w`, err)}
		}
	}
	if v, ok := eru.mutation.ParentStepID(); ok {
		if err := executionrelationship.ParentStepIDValidator(v); err != nil {
			return &ValidationError{Name: "parent_step_id", err: fmt.Errorf(`ent: validator failed for field "ExecutionRelationship.parent_step_id": %w`, err)}
		}
	}
	if v, ok := eru.mutation.ChildStepID(); ok {
		if err := executionrelationship.ChildStepIDValidator(v); err != nil {
			return &ValidationError{Name: "child_step_id", err: fmt.Errorf(`ent: validator failed for field "ExecutionRelationship.child_step_id": %w`, err)}
		}
	}
	return nil
}

func (eru *ExecutionRelationshipUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := eru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(executionrelationship.Table, executionrelationship.Columns, sqlgraph.NewFieldSpec(executionrelationship.FieldID, field.TypeInt))
	if ps := eru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eru.mutation.RunID(); ok {
		_spec.SetField(executionrelationship.FieldRunID, field.TypeString, value)
	}
	if value, ok := eru.mutation.ParentEntityID(); ok {
		_spec.SetField(executionrelationship.FieldParentEntityID, field.TypeString, value)
	}
	if value, ok := eru.mutation.ChildEntityID(); ok {
		_spec.SetField(executionrelationship.FieldChildEntityID, field.TypeString, value)
	}
	if value, ok := eru.mutation.ParentID(); ok {
		_spec.SetField(executionrelationship.FieldParentID, field.TypeString, value)
	}
	if value, ok := eru.mutation.ChildID(); ok {
		_spec.SetField(executionrelationship.FieldChildID, field.TypeString, value)
	}
	if value, ok := eru.mutation.ParentType(); ok {
		_spec.SetField(executionrelationship.FieldParentType, field.TypeEnum, value)
	}
	if value, ok := eru.mutation.ChildType(); ok {
		_spec.SetField(executionrelationship.FieldChildType, field.TypeEnum, value)
	}
	if value, ok := eru.mutation.ParentStepID(); ok {
		_spec.SetField(executionrelationship.FieldParentStepID, field.TypeString, value)
	}
	if value, ok := eru.mutation.ChildStepID(); ok {
		_spec.SetField(executionrelationship.FieldChildStepID, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{executionrelationship.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eru.mutation.done = true
	return n, nil
}

// ExecutionRelationshipUpdateOne is the builder for updating a single ExecutionRelationship entity.
type ExecutionRelationshipUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExecutionRelationshipMutation
}

// SetRunID sets the "run_id" field.
func (eruo *ExecutionRelationshipUpdateOne) SetRunID(s string) *ExecutionRelationshipUpdateOne {
	eruo.mutation.SetRunID(s)
	return eruo
}

// SetNillableRunID sets the "run_id" field if the given value is not nil.
func (eruo *ExecutionRelationshipUpdateOne) SetNillableRunID(s *string) *ExecutionRelationshipUpdateOne {
	if s != nil {
		eruo.SetRunID(*s)
	}
	return eruo
}

// SetParentEntityID sets the "parent_entity_id" field.
func (eruo *ExecutionRelationshipUpdateOne) SetParentEntityID(s string) *ExecutionRelationshipUpdateOne {
	eruo.mutation.SetParentEntityID(s)
	return eruo
}

// SetNillableParentEntityID sets the "parent_entity_id" field if the given value is not nil.
func (eruo *ExecutionRelationshipUpdateOne) SetNillableParentEntityID(s *string) *ExecutionRelationshipUpdateOne {
	if s != nil {
		eruo.SetParentEntityID(*s)
	}
	return eruo
}

// SetChildEntityID sets the "child_entity_id" field.
func (eruo *ExecutionRelationshipUpdateOne) SetChildEntityID(s string) *ExecutionRelationshipUpdateOne {
	eruo.mutation.SetChildEntityID(s)
	return eruo
}

// SetNillableChildEntityID sets the "child_entity_id" field if the given value is not nil.
func (eruo *ExecutionRelationshipUpdateOne) SetNillableChildEntityID(s *string) *ExecutionRelationshipUpdateOne {
	if s != nil {
		eruo.SetChildEntityID(*s)
	}
	return eruo
}

// SetParentID sets the "parent_id" field.
func (eruo *ExecutionRelationshipUpdateOne) SetParentID(s string) *ExecutionRelationshipUpdateOne {
	eruo.mutation.SetParentID(s)
	return eruo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (eruo *ExecutionRelationshipUpdateOne) SetNillableParentID(s *string) *ExecutionRelationshipUpdateOne {
	if s != nil {
		eruo.SetParentID(*s)
	}
	return eruo
}

// SetChildID sets the "child_id" field.
func (eruo *ExecutionRelationshipUpdateOne) SetChildID(s string) *ExecutionRelationshipUpdateOne {
	eruo.mutation.SetChildID(s)
	return eruo
}

// SetNillableChildID sets the "child_id" field if the given value is not nil.
func (eruo *ExecutionRelationshipUpdateOne) SetNillableChildID(s *string) *ExecutionRelationshipUpdateOne {
	if s != nil {
		eruo.SetChildID(*s)
	}
	return eruo
}

// SetParentType sets the "parent_type" field.
func (eruo *ExecutionRelationshipUpdateOne) SetParentType(et executionrelationship.ParentType) *ExecutionRelationshipUpdateOne {
	eruo.mutation.SetParentType(et)
	return eruo
}

// SetNillableParentType sets the "parent_type" field if the given value is not nil.
func (eruo *ExecutionRelationshipUpdateOne) SetNillableParentType(et *executionrelationship.ParentType) *ExecutionRelationshipUpdateOne {
	if et != nil {
		eruo.SetParentType(*et)
	}
	return eruo
}

// SetChildType sets the "child_type" field.
func (eruo *ExecutionRelationshipUpdateOne) SetChildType(et executionrelationship.ChildType) *ExecutionRelationshipUpdateOne {
	eruo.mutation.SetChildType(et)
	return eruo
}

// SetNillableChildType sets the "child_type" field if the given value is not nil.
func (eruo *ExecutionRelationshipUpdateOne) SetNillableChildType(et *executionrelationship.ChildType) *ExecutionRelationshipUpdateOne {
	if et != nil {
		eruo.SetChildType(*et)
	}
	return eruo
}

// SetParentStepID sets the "parent_step_id" field.
func (eruo *ExecutionRelationshipUpdateOne) SetParentStepID(s string) *ExecutionRelationshipUpdateOne {
	eruo.mutation.SetParentStepID(s)
	return eruo
}

// SetNillableParentStepID sets the "parent_step_id" field if the given value is not nil.
func (eruo *ExecutionRelationshipUpdateOne) SetNillableParentStepID(s *string) *ExecutionRelationshipUpdateOne {
	if s != nil {
		eruo.SetParentStepID(*s)
	}
	return eruo
}

// SetChildStepID sets the "child_step_id" field.
func (eruo *ExecutionRelationshipUpdateOne) SetChildStepID(s string) *ExecutionRelationshipUpdateOne {
	eruo.mutation.SetChildStepID(s)
	return eruo
}

// SetNillableChildStepID sets the "child_step_id" field if the given value is not nil.
func (eruo *ExecutionRelationshipUpdateOne) SetNillableChildStepID(s *string) *ExecutionRelationshipUpdateOne {
	if s != nil {
		eruo.SetChildStepID(*s)
	}
	return eruo
}

// Mutation returns the ExecutionRelationshipMutation object of the builder.
func (eruo *ExecutionRelationshipUpdateOne) Mutation() *ExecutionRelationshipMutation {
	return eruo.mutation
}

// Where appends a list predicates to the ExecutionRelationshipUpdate builder.
func (eruo *ExecutionRelationshipUpdateOne) Where(ps ...predicate.ExecutionRelationship) *ExecutionRelationshipUpdateOne {
	eruo.mutation.Where(ps...)
	return eruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (eruo *ExecutionRelationshipUpdateOne) Select(field string, fields ...string) *ExecutionRelationshipUpdateOne {
	eruo.fields = append([]string{field}, fields...)
	return eruo
}

// Save executes the query and returns the updated ExecutionRelationship entity.
func (eruo *ExecutionRelationshipUpdateOne) Save(ctx context.Context) (*ExecutionRelationship, error) {
	return withHooks(ctx, eruo.sqlSave, eruo.mutation, eruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eruo *ExecutionRelationshipUpdateOne) SaveX(ctx context.Context) *ExecutionRelationship {
	node, err := eruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (eruo *ExecutionRelationshipUpdateOne) Exec(ctx context.Context) error {
	_, err := eruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eruo *ExecutionRelationshipUpdateOne) ExecX(ctx context.Context) {
	if err := eruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eruo *ExecutionRelationshipUpdateOne) check() error {
	if v, ok := eruo.mutation.RunID(); ok {
		if err := executionrelationship.RunIDValidator(v); err != nil {
			return &ValidationError{Name: "run_id", err: fmt.Errorf(`ent: validator failed for field "ExecutionRelationship.run_id": %w`, err)}
		}
	}
	if v, ok := eruo.mutation.ParentEntityID(); ok {
		if err := executionrelationship.ParentEntityIDValidator(v); err != nil {
			return &ValidationError{Name: "parent_entity_id", err: fmt.Errorf(`ent: validator failed for field "ExecutionRelationship.parent_entity_id": %w`, err)}
		}
	}
	if v, ok := eruo.mutation.ChildEntityID(); ok {
		if err := executionrelationship.ChildEntityIDValidator(v); err != nil {
			return &ValidationError{Name: "child_entity_id", err: fmt.Errorf(`ent: validator failed for field "ExecutionRelationship.child_entity_id": %w`, err)}
		}
	}
	if v, ok := eruo.mutation.ParentType(); ok {
		if err := executionrelationship.ParentTypeValidator(v); err != nil {
			return &ValidationError{Name: "parent_type", err: fmt.Errorf(`ent: validator failed for field "ExecutionRelationship.parent_type": %w`, err)}
		}
	}
	if v, ok := eruo.mutation.ChildType(); ok {
		if err := executionrelationship.ChildTypeValidator(v); err != nil {
			return &ValidationError{Name: "child_type", err: fmt.Errorf(`ent: validator failed for field "ExecutionRelationship.child_type": %w`, err)}
		}
	}
	if v, ok := eruo.mutation.ParentStepID(); ok {
		if err := executionrelationship.ParentStepIDValidator(v); err != nil {
			return &ValidationError{Name: "parent_step_id", err: fmt.Errorf(`ent: validator failed for field "ExecutionRelationship.parent_step_id": %w`, err)}
		}
	}
	if v, ok := eruo.mutation.ChildStepID(); ok {
		if err := executionrelationship.ChildStepIDValidator(v); err != nil {
			return &ValidationError{Name: "child_step_id", err: fmt.Errorf(`ent: validator failed for field "ExecutionRelationship.child_step_id": %w`, err)}
		}
	}
	return nil
}

func (eruo *ExecutionRelationshipUpdateOne) sqlSave(ctx context.Context) (_node *ExecutionRelationship, err error) {
	if err := eruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(executionrelationship.Table, executionrelationship.Columns, sqlgraph.NewFieldSpec(executionrelationship.FieldID, field.TypeInt))
	id, ok := eruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ExecutionRelationship.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := eruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, executionrelationship.FieldID)
		for _, f := range fields {
			if !executionrelationship.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != executionrelationship.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := eruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eruo.mutation.RunID(); ok {
		_spec.SetField(executionrelationship.FieldRunID, field.TypeString, value)
	}
	if value, ok := eruo.mutation.ParentEntityID(); ok {
		_spec.SetField(executionrelationship.FieldParentEntityID, field.TypeString, value)
	}
	if value, ok := eruo.mutation.ChildEntityID(); ok {
		_spec.SetField(executionrelationship.FieldChildEntityID, field.TypeString, value)
	}
	if value, ok := eruo.mutation.ParentID(); ok {
		_spec.SetField(executionrelationship.FieldParentID, field.TypeString, value)
	}
	if value, ok := eruo.mutation.ChildID(); ok {
		_spec.SetField(executionrelationship.FieldChildID, field.TypeString, value)
	}
	if value, ok := eruo.mutation.ParentType(); ok {
		_spec.SetField(executionrelationship.FieldParentType, field.TypeEnum, value)
	}
	if value, ok := eruo.mutation.ChildType(); ok {
		_spec.SetField(executionrelationship.FieldChildType, field.TypeEnum, value)
	}
	if value, ok := eruo.mutation.ParentStepID(); ok {
		_spec.SetField(executionrelationship.FieldParentStepID, field.TypeString, value)
	}
	if value, ok := eruo.mutation.ChildStepID(); ok {
		_spec.SetField(executionrelationship.FieldChildStepID, field.TypeString, value)
	}
	_node = &ExecutionRelationship{config: eruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, eruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{executionrelationship.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	eruo.mutation.done = true
	return _node, nil
}
