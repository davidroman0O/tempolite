// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/tempolite/ent/featureflagversion"
	"github.com/davidroman0O/tempolite/ent/predicate"
)

// FeatureFlagVersionUpdate is the builder for updating FeatureFlagVersion entities.
type FeatureFlagVersionUpdate struct {
	config
	hooks    []Hook
	mutation *FeatureFlagVersionMutation
}

// Where appends a list predicates to the FeatureFlagVersionUpdate builder.
func (ffvu *FeatureFlagVersionUpdate) Where(ps ...predicate.FeatureFlagVersion) *FeatureFlagVersionUpdate {
	ffvu.mutation.Where(ps...)
	return ffvu
}

// SetWorkflowType sets the "workflow_type" field.
func (ffvu *FeatureFlagVersionUpdate) SetWorkflowType(s string) *FeatureFlagVersionUpdate {
	ffvu.mutation.SetWorkflowType(s)
	return ffvu
}

// SetNillableWorkflowType sets the "workflow_type" field if the given value is not nil.
func (ffvu *FeatureFlagVersionUpdate) SetNillableWorkflowType(s *string) *FeatureFlagVersionUpdate {
	if s != nil {
		ffvu.SetWorkflowType(*s)
	}
	return ffvu
}

// SetWorkflowID sets the "workflow_id" field.
func (ffvu *FeatureFlagVersionUpdate) SetWorkflowID(s string) *FeatureFlagVersionUpdate {
	ffvu.mutation.SetWorkflowID(s)
	return ffvu
}

// SetNillableWorkflowID sets the "workflow_id" field if the given value is not nil.
func (ffvu *FeatureFlagVersionUpdate) SetNillableWorkflowID(s *string) *FeatureFlagVersionUpdate {
	if s != nil {
		ffvu.SetWorkflowID(*s)
	}
	return ffvu
}

// SetChangeID sets the "change_id" field.
func (ffvu *FeatureFlagVersionUpdate) SetChangeID(s string) *FeatureFlagVersionUpdate {
	ffvu.mutation.SetChangeID(s)
	return ffvu
}

// SetNillableChangeID sets the "change_id" field if the given value is not nil.
func (ffvu *FeatureFlagVersionUpdate) SetNillableChangeID(s *string) *FeatureFlagVersionUpdate {
	if s != nil {
		ffvu.SetChangeID(*s)
	}
	return ffvu
}

// SetVersion sets the "version" field.
func (ffvu *FeatureFlagVersionUpdate) SetVersion(i int) *FeatureFlagVersionUpdate {
	ffvu.mutation.ResetVersion()
	ffvu.mutation.SetVersion(i)
	return ffvu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (ffvu *FeatureFlagVersionUpdate) SetNillableVersion(i *int) *FeatureFlagVersionUpdate {
	if i != nil {
		ffvu.SetVersion(*i)
	}
	return ffvu
}

// AddVersion adds i to the "version" field.
func (ffvu *FeatureFlagVersionUpdate) AddVersion(i int) *FeatureFlagVersionUpdate {
	ffvu.mutation.AddVersion(i)
	return ffvu
}

// Mutation returns the FeatureFlagVersionMutation object of the builder.
func (ffvu *FeatureFlagVersionUpdate) Mutation() *FeatureFlagVersionMutation {
	return ffvu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ffvu *FeatureFlagVersionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ffvu.sqlSave, ffvu.mutation, ffvu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ffvu *FeatureFlagVersionUpdate) SaveX(ctx context.Context) int {
	affected, err := ffvu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ffvu *FeatureFlagVersionUpdate) Exec(ctx context.Context) error {
	_, err := ffvu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ffvu *FeatureFlagVersionUpdate) ExecX(ctx context.Context) {
	if err := ffvu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ffvu *FeatureFlagVersionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(featureflagversion.Table, featureflagversion.Columns, sqlgraph.NewFieldSpec(featureflagversion.FieldID, field.TypeInt))
	if ps := ffvu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ffvu.mutation.WorkflowType(); ok {
		_spec.SetField(featureflagversion.FieldWorkflowType, field.TypeString, value)
	}
	if value, ok := ffvu.mutation.WorkflowID(); ok {
		_spec.SetField(featureflagversion.FieldWorkflowID, field.TypeString, value)
	}
	if value, ok := ffvu.mutation.ChangeID(); ok {
		_spec.SetField(featureflagversion.FieldChangeID, field.TypeString, value)
	}
	if value, ok := ffvu.mutation.Version(); ok {
		_spec.SetField(featureflagversion.FieldVersion, field.TypeInt, value)
	}
	if value, ok := ffvu.mutation.AddedVersion(); ok {
		_spec.AddField(featureflagversion.FieldVersion, field.TypeInt, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ffvu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{featureflagversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ffvu.mutation.done = true
	return n, nil
}

// FeatureFlagVersionUpdateOne is the builder for updating a single FeatureFlagVersion entity.
type FeatureFlagVersionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FeatureFlagVersionMutation
}

// SetWorkflowType sets the "workflow_type" field.
func (ffvuo *FeatureFlagVersionUpdateOne) SetWorkflowType(s string) *FeatureFlagVersionUpdateOne {
	ffvuo.mutation.SetWorkflowType(s)
	return ffvuo
}

// SetNillableWorkflowType sets the "workflow_type" field if the given value is not nil.
func (ffvuo *FeatureFlagVersionUpdateOne) SetNillableWorkflowType(s *string) *FeatureFlagVersionUpdateOne {
	if s != nil {
		ffvuo.SetWorkflowType(*s)
	}
	return ffvuo
}

// SetWorkflowID sets the "workflow_id" field.
func (ffvuo *FeatureFlagVersionUpdateOne) SetWorkflowID(s string) *FeatureFlagVersionUpdateOne {
	ffvuo.mutation.SetWorkflowID(s)
	return ffvuo
}

// SetNillableWorkflowID sets the "workflow_id" field if the given value is not nil.
func (ffvuo *FeatureFlagVersionUpdateOne) SetNillableWorkflowID(s *string) *FeatureFlagVersionUpdateOne {
	if s != nil {
		ffvuo.SetWorkflowID(*s)
	}
	return ffvuo
}

// SetChangeID sets the "change_id" field.
func (ffvuo *FeatureFlagVersionUpdateOne) SetChangeID(s string) *FeatureFlagVersionUpdateOne {
	ffvuo.mutation.SetChangeID(s)
	return ffvuo
}

// SetNillableChangeID sets the "change_id" field if the given value is not nil.
func (ffvuo *FeatureFlagVersionUpdateOne) SetNillableChangeID(s *string) *FeatureFlagVersionUpdateOne {
	if s != nil {
		ffvuo.SetChangeID(*s)
	}
	return ffvuo
}

// SetVersion sets the "version" field.
func (ffvuo *FeatureFlagVersionUpdateOne) SetVersion(i int) *FeatureFlagVersionUpdateOne {
	ffvuo.mutation.ResetVersion()
	ffvuo.mutation.SetVersion(i)
	return ffvuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (ffvuo *FeatureFlagVersionUpdateOne) SetNillableVersion(i *int) *FeatureFlagVersionUpdateOne {
	if i != nil {
		ffvuo.SetVersion(*i)
	}
	return ffvuo
}

// AddVersion adds i to the "version" field.
func (ffvuo *FeatureFlagVersionUpdateOne) AddVersion(i int) *FeatureFlagVersionUpdateOne {
	ffvuo.mutation.AddVersion(i)
	return ffvuo
}

// Mutation returns the FeatureFlagVersionMutation object of the builder.
func (ffvuo *FeatureFlagVersionUpdateOne) Mutation() *FeatureFlagVersionMutation {
	return ffvuo.mutation
}

// Where appends a list predicates to the FeatureFlagVersionUpdate builder.
func (ffvuo *FeatureFlagVersionUpdateOne) Where(ps ...predicate.FeatureFlagVersion) *FeatureFlagVersionUpdateOne {
	ffvuo.mutation.Where(ps...)
	return ffvuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ffvuo *FeatureFlagVersionUpdateOne) Select(field string, fields ...string) *FeatureFlagVersionUpdateOne {
	ffvuo.fields = append([]string{field}, fields...)
	return ffvuo
}

// Save executes the query and returns the updated FeatureFlagVersion entity.
func (ffvuo *FeatureFlagVersionUpdateOne) Save(ctx context.Context) (*FeatureFlagVersion, error) {
	return withHooks(ctx, ffvuo.sqlSave, ffvuo.mutation, ffvuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ffvuo *FeatureFlagVersionUpdateOne) SaveX(ctx context.Context) *FeatureFlagVersion {
	node, err := ffvuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ffvuo *FeatureFlagVersionUpdateOne) Exec(ctx context.Context) error {
	_, err := ffvuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ffvuo *FeatureFlagVersionUpdateOne) ExecX(ctx context.Context) {
	if err := ffvuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ffvuo *FeatureFlagVersionUpdateOne) sqlSave(ctx context.Context) (_node *FeatureFlagVersion, err error) {
	_spec := sqlgraph.NewUpdateSpec(featureflagversion.Table, featureflagversion.Columns, sqlgraph.NewFieldSpec(featureflagversion.FieldID, field.TypeInt))
	id, ok := ffvuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FeatureFlagVersion.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ffvuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, featureflagversion.FieldID)
		for _, f := range fields {
			if !featureflagversion.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != featureflagversion.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ffvuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ffvuo.mutation.WorkflowType(); ok {
		_spec.SetField(featureflagversion.FieldWorkflowType, field.TypeString, value)
	}
	if value, ok := ffvuo.mutation.WorkflowID(); ok {
		_spec.SetField(featureflagversion.FieldWorkflowID, field.TypeString, value)
	}
	if value, ok := ffvuo.mutation.ChangeID(); ok {
		_spec.SetField(featureflagversion.FieldChangeID, field.TypeString, value)
	}
	if value, ok := ffvuo.mutation.Version(); ok {
		_spec.SetField(featureflagversion.FieldVersion, field.TypeInt, value)
	}
	if value, ok := ffvuo.mutation.AddedVersion(); ok {
		_spec.AddField(featureflagversion.FieldVersion, field.TypeInt, value)
	}
	_node = &FeatureFlagVersion{config: ffvuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ffvuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{featureflagversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ffvuo.mutation.done = true
	return _node, nil
}
