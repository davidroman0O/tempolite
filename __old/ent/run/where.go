// Code generated by ent, DO NOT EDIT.

package run

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/davidroman0O/tempolite/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Run {
	return predicate.Run(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Run {
	return predicate.Run(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Run {
	return predicate.Run(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Run {
	return predicate.Run(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Run {
	return predicate.Run(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Run {
	return predicate.Run(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Run {
	return predicate.Run(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Run {
	return predicate.Run(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Run {
	return predicate.Run(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Run {
	return predicate.Run(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Run {
	return predicate.Run(sql.FieldContainsFold(FieldID, id))
}

// RunID applies equality check predicate on the "run_id" field. It's identical to RunIDEQ.
func RunID(v string) predicate.Run {
	return predicate.Run(sql.FieldEQ(FieldRunID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Run {
	return predicate.Run(sql.FieldEQ(FieldCreatedAt, v))
}

// RunIDEQ applies the EQ predicate on the "run_id" field.
func RunIDEQ(v string) predicate.Run {
	return predicate.Run(sql.FieldEQ(FieldRunID, v))
}

// RunIDNEQ applies the NEQ predicate on the "run_id" field.
func RunIDNEQ(v string) predicate.Run {
	return predicate.Run(sql.FieldNEQ(FieldRunID, v))
}

// RunIDIn applies the In predicate on the "run_id" field.
func RunIDIn(vs ...string) predicate.Run {
	return predicate.Run(sql.FieldIn(FieldRunID, vs...))
}

// RunIDNotIn applies the NotIn predicate on the "run_id" field.
func RunIDNotIn(vs ...string) predicate.Run {
	return predicate.Run(sql.FieldNotIn(FieldRunID, vs...))
}

// RunIDGT applies the GT predicate on the "run_id" field.
func RunIDGT(v string) predicate.Run {
	return predicate.Run(sql.FieldGT(FieldRunID, v))
}

// RunIDGTE applies the GTE predicate on the "run_id" field.
func RunIDGTE(v string) predicate.Run {
	return predicate.Run(sql.FieldGTE(FieldRunID, v))
}

// RunIDLT applies the LT predicate on the "run_id" field.
func RunIDLT(v string) predicate.Run {
	return predicate.Run(sql.FieldLT(FieldRunID, v))
}

// RunIDLTE applies the LTE predicate on the "run_id" field.
func RunIDLTE(v string) predicate.Run {
	return predicate.Run(sql.FieldLTE(FieldRunID, v))
}

// RunIDContains applies the Contains predicate on the "run_id" field.
func RunIDContains(v string) predicate.Run {
	return predicate.Run(sql.FieldContains(FieldRunID, v))
}

// RunIDHasPrefix applies the HasPrefix predicate on the "run_id" field.
func RunIDHasPrefix(v string) predicate.Run {
	return predicate.Run(sql.FieldHasPrefix(FieldRunID, v))
}

// RunIDHasSuffix applies the HasSuffix predicate on the "run_id" field.
func RunIDHasSuffix(v string) predicate.Run {
	return predicate.Run(sql.FieldHasSuffix(FieldRunID, v))
}

// RunIDEqualFold applies the EqualFold predicate on the "run_id" field.
func RunIDEqualFold(v string) predicate.Run {
	return predicate.Run(sql.FieldEqualFold(FieldRunID, v))
}

// RunIDContainsFold applies the ContainsFold predicate on the "run_id" field.
func RunIDContainsFold(v string) predicate.Run {
	return predicate.Run(sql.FieldContainsFold(FieldRunID, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.Run {
	return predicate.Run(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.Run {
	return predicate.Run(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.Run {
	return predicate.Run(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.Run {
	return predicate.Run(sql.FieldNotIn(FieldType, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Run {
	return predicate.Run(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Run {
	return predicate.Run(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Run {
	return predicate.Run(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Run {
	return predicate.Run(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Run {
	return predicate.Run(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Run {
	return predicate.Run(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Run {
	return predicate.Run(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Run {
	return predicate.Run(sql.FieldLTE(FieldCreatedAt, v))
}

// HasWorkflow applies the HasEdge predicate on the "workflow" edge.
func HasWorkflow() predicate.Run {
	return predicate.Run(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, WorkflowTable, WorkflowColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWorkflowWith applies the HasEdge predicate on the "workflow" edge with a given conditions (other predicates).
func HasWorkflowWith(preds ...predicate.Workflow) predicate.Run {
	return predicate.Run(func(s *sql.Selector) {
		step := newWorkflowStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasActivity applies the HasEdge predicate on the "activity" edge.
func HasActivity() predicate.Run {
	return predicate.Run(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ActivityTable, ActivityColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasActivityWith applies the HasEdge predicate on the "activity" edge with a given conditions (other predicates).
func HasActivityWith(preds ...predicate.Activity) predicate.Run {
	return predicate.Run(func(s *sql.Selector) {
		step := newActivityStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Run) predicate.Run {
	return predicate.Run(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Run) predicate.Run {
	return predicate.Run(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Run) predicate.Run {
	return predicate.Run(sql.NotPredicates(p))
}
