// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/tempolite/ent/featureflagversion"
)

// FeatureFlagVersionCreate is the builder for creating a FeatureFlagVersion entity.
type FeatureFlagVersionCreate struct {
	config
	mutation *FeatureFlagVersionMutation
	hooks    []Hook
}

// SetWorkflowType sets the "workflow_type" field.
func (ffvc *FeatureFlagVersionCreate) SetWorkflowType(s string) *FeatureFlagVersionCreate {
	ffvc.mutation.SetWorkflowType(s)
	return ffvc
}

// SetWorkflowID sets the "workflow_id" field.
func (ffvc *FeatureFlagVersionCreate) SetWorkflowID(s string) *FeatureFlagVersionCreate {
	ffvc.mutation.SetWorkflowID(s)
	return ffvc
}

// SetChangeID sets the "change_id" field.
func (ffvc *FeatureFlagVersionCreate) SetChangeID(s string) *FeatureFlagVersionCreate {
	ffvc.mutation.SetChangeID(s)
	return ffvc
}

// SetVersion sets the "version" field.
func (ffvc *FeatureFlagVersionCreate) SetVersion(i int) *FeatureFlagVersionCreate {
	ffvc.mutation.SetVersion(i)
	return ffvc
}

// Mutation returns the FeatureFlagVersionMutation object of the builder.
func (ffvc *FeatureFlagVersionCreate) Mutation() *FeatureFlagVersionMutation {
	return ffvc.mutation
}

// Save creates the FeatureFlagVersion in the database.
func (ffvc *FeatureFlagVersionCreate) Save(ctx context.Context) (*FeatureFlagVersion, error) {
	return withHooks(ctx, ffvc.sqlSave, ffvc.mutation, ffvc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ffvc *FeatureFlagVersionCreate) SaveX(ctx context.Context) *FeatureFlagVersion {
	v, err := ffvc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ffvc *FeatureFlagVersionCreate) Exec(ctx context.Context) error {
	_, err := ffvc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ffvc *FeatureFlagVersionCreate) ExecX(ctx context.Context) {
	if err := ffvc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ffvc *FeatureFlagVersionCreate) check() error {
	if _, ok := ffvc.mutation.WorkflowType(); !ok {
		return &ValidationError{Name: "workflow_type", err: errors.New(`ent: missing required field "FeatureFlagVersion.workflow_type"`)}
	}
	if _, ok := ffvc.mutation.WorkflowID(); !ok {
		return &ValidationError{Name: "workflow_id", err: errors.New(`ent: missing required field "FeatureFlagVersion.workflow_id"`)}
	}
	if _, ok := ffvc.mutation.ChangeID(); !ok {
		return &ValidationError{Name: "change_id", err: errors.New(`ent: missing required field "FeatureFlagVersion.change_id"`)}
	}
	if _, ok := ffvc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "FeatureFlagVersion.version"`)}
	}
	return nil
}

func (ffvc *FeatureFlagVersionCreate) sqlSave(ctx context.Context) (*FeatureFlagVersion, error) {
	if err := ffvc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ffvc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ffvc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ffvc.mutation.id = &_node.ID
	ffvc.mutation.done = true
	return _node, nil
}

func (ffvc *FeatureFlagVersionCreate) createSpec() (*FeatureFlagVersion, *sqlgraph.CreateSpec) {
	var (
		_node = &FeatureFlagVersion{config: ffvc.config}
		_spec = sqlgraph.NewCreateSpec(featureflagversion.Table, sqlgraph.NewFieldSpec(featureflagversion.FieldID, field.TypeInt))
	)
	if value, ok := ffvc.mutation.WorkflowType(); ok {
		_spec.SetField(featureflagversion.FieldWorkflowType, field.TypeString, value)
		_node.WorkflowType = value
	}
	if value, ok := ffvc.mutation.WorkflowID(); ok {
		_spec.SetField(featureflagversion.FieldWorkflowID, field.TypeString, value)
		_node.WorkflowID = value
	}
	if value, ok := ffvc.mutation.ChangeID(); ok {
		_spec.SetField(featureflagversion.FieldChangeID, field.TypeString, value)
		_node.ChangeID = value
	}
	if value, ok := ffvc.mutation.Version(); ok {
		_spec.SetField(featureflagversion.FieldVersion, field.TypeInt, value)
		_node.Version = value
	}
	return _node, _spec
}

// FeatureFlagVersionCreateBulk is the builder for creating many FeatureFlagVersion entities in bulk.
type FeatureFlagVersionCreateBulk struct {
	config
	err      error
	builders []*FeatureFlagVersionCreate
}

// Save creates the FeatureFlagVersion entities in the database.
func (ffvcb *FeatureFlagVersionCreateBulk) Save(ctx context.Context) ([]*FeatureFlagVersion, error) {
	if ffvcb.err != nil {
		return nil, ffvcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ffvcb.builders))
	nodes := make([]*FeatureFlagVersion, len(ffvcb.builders))
	mutators := make([]Mutator, len(ffvcb.builders))
	for i := range ffvcb.builders {
		func(i int, root context.Context) {
			builder := ffvcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FeatureFlagVersionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ffvcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ffvcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ffvcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ffvcb *FeatureFlagVersionCreateBulk) SaveX(ctx context.Context) []*FeatureFlagVersion {
	v, err := ffvcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ffvcb *FeatureFlagVersionCreateBulk) Exec(ctx context.Context) error {
	_, err := ffvcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ffvcb *FeatureFlagVersionCreateBulk) ExecX(ctx context.Context) {
	if err := ffvcb.Exec(ctx); err != nil {
		panic(err)
	}
}
