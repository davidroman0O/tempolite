// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/davidroman0O/tempolite/ent/featureflagversion"
)

// FeatureFlagVersion is the model entity for the FeatureFlagVersion schema.
type FeatureFlagVersion struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// WorkflowType holds the value of the "workflow_type" field.
	WorkflowType string `json:"workflow_type,omitempty"`
	// WorkflowID holds the value of the "workflow_id" field.
	WorkflowID string `json:"workflow_id,omitempty"`
	// ChangeID holds the value of the "change_id" field.
	ChangeID string `json:"change_id,omitempty"`
	// Version holds the value of the "version" field.
	Version      int `json:"version,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FeatureFlagVersion) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case featureflagversion.FieldID, featureflagversion.FieldVersion:
			values[i] = new(sql.NullInt64)
		case featureflagversion.FieldWorkflowType, featureflagversion.FieldWorkflowID, featureflagversion.FieldChangeID:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FeatureFlagVersion fields.
func (ffv *FeatureFlagVersion) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case featureflagversion.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ffv.ID = int(value.Int64)
		case featureflagversion.FieldWorkflowType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field workflow_type", values[i])
			} else if value.Valid {
				ffv.WorkflowType = value.String
			}
		case featureflagversion.FieldWorkflowID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field workflow_id", values[i])
			} else if value.Valid {
				ffv.WorkflowID = value.String
			}
		case featureflagversion.FieldChangeID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field change_id", values[i])
			} else if value.Valid {
				ffv.ChangeID = value.String
			}
		case featureflagversion.FieldVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				ffv.Version = int(value.Int64)
			}
		default:
			ffv.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FeatureFlagVersion.
// This includes values selected through modifiers, order, etc.
func (ffv *FeatureFlagVersion) Value(name string) (ent.Value, error) {
	return ffv.selectValues.Get(name)
}

// Update returns a builder for updating this FeatureFlagVersion.
// Note that you need to call FeatureFlagVersion.Unwrap() before calling this method if this FeatureFlagVersion
// was returned from a transaction, and the transaction was committed or rolled back.
func (ffv *FeatureFlagVersion) Update() *FeatureFlagVersionUpdateOne {
	return NewFeatureFlagVersionClient(ffv.config).UpdateOne(ffv)
}

// Unwrap unwraps the FeatureFlagVersion entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ffv *FeatureFlagVersion) Unwrap() *FeatureFlagVersion {
	_tx, ok := ffv.config.driver.(*txDriver)
	if !ok {
		panic("ent: FeatureFlagVersion is not a transactional entity")
	}
	ffv.config.driver = _tx.drv
	return ffv
}

// String implements the fmt.Stringer.
func (ffv *FeatureFlagVersion) String() string {
	var builder strings.Builder
	builder.WriteString("FeatureFlagVersion(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ffv.ID))
	builder.WriteString("workflow_type=")
	builder.WriteString(ffv.WorkflowType)
	builder.WriteString(", ")
	builder.WriteString("workflow_id=")
	builder.WriteString(ffv.WorkflowID)
	builder.WriteString(", ")
	builder.WriteString("change_id=")
	builder.WriteString(ffv.ChangeID)
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(fmt.Sprintf("%v", ffv.Version))
	builder.WriteByte(')')
	return builder.String()
}

// FeatureFlagVersions is a parsable slice of FeatureFlagVersion.
type FeatureFlagVersions []*FeatureFlagVersion
