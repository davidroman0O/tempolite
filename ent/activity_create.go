// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/tempolite/ent/activity"
	"github.com/davidroman0O/tempolite/ent/activityexecution"
	"github.com/davidroman0O/tempolite/ent/schema"
)

// ActivityCreate is the builder for creating a Activity entity.
type ActivityCreate struct {
	config
	mutation *ActivityMutation
	hooks    []Hook
}

// SetIdentity sets the "identity" field.
func (ac *ActivityCreate) SetIdentity(s string) *ActivityCreate {
	ac.mutation.SetIdentity(s)
	return ac
}

// SetStepID sets the "step_id" field.
func (ac *ActivityCreate) SetStepID(s string) *ActivityCreate {
	ac.mutation.SetStepID(s)
	return ac
}

// SetStatus sets the "status" field.
func (ac *ActivityCreate) SetStatus(a activity.Status) *ActivityCreate {
	ac.mutation.SetStatus(a)
	return ac
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableStatus(a *activity.Status) *ActivityCreate {
	if a != nil {
		ac.SetStatus(*a)
	}
	return ac
}

// SetQueueName sets the "queue_name" field.
func (ac *ActivityCreate) SetQueueName(s string) *ActivityCreate {
	ac.mutation.SetQueueName(s)
	return ac
}

// SetNillableQueueName sets the "queue_name" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableQueueName(s *string) *ActivityCreate {
	if s != nil {
		ac.SetQueueName(*s)
	}
	return ac
}

// SetHandlerName sets the "handler_name" field.
func (ac *ActivityCreate) SetHandlerName(s string) *ActivityCreate {
	ac.mutation.SetHandlerName(s)
	return ac
}

// SetInput sets the "input" field.
func (ac *ActivityCreate) SetInput(u [][]uint8) *ActivityCreate {
	ac.mutation.SetInput(u)
	return ac
}

// SetRetryPolicy sets the "retry_policy" field.
func (ac *ActivityCreate) SetRetryPolicy(sp schema.RetryPolicy) *ActivityCreate {
	ac.mutation.SetRetryPolicy(sp)
	return ac
}

// SetNillableRetryPolicy sets the "retry_policy" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableRetryPolicy(sp *schema.RetryPolicy) *ActivityCreate {
	if sp != nil {
		ac.SetRetryPolicy(*sp)
	}
	return ac
}

// SetTimeout sets the "timeout" field.
func (ac *ActivityCreate) SetTimeout(t time.Time) *ActivityCreate {
	ac.mutation.SetTimeout(t)
	return ac
}

// SetNillableTimeout sets the "timeout" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableTimeout(t *time.Time) *ActivityCreate {
	if t != nil {
		ac.SetTimeout(*t)
	}
	return ac
}

// SetCreatedAt sets the "created_at" field.
func (ac *ActivityCreate) SetCreatedAt(t time.Time) *ActivityCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableCreatedAt(t *time.Time) *ActivityCreate {
	if t != nil {
		ac.SetCreatedAt(*t)
	}
	return ac
}

// SetID sets the "id" field.
func (ac *ActivityCreate) SetID(s string) *ActivityCreate {
	ac.mutation.SetID(s)
	return ac
}

// AddExecutionIDs adds the "executions" edge to the ActivityExecution entity by IDs.
func (ac *ActivityCreate) AddExecutionIDs(ids ...string) *ActivityCreate {
	ac.mutation.AddExecutionIDs(ids...)
	return ac
}

// AddExecutions adds the "executions" edges to the ActivityExecution entity.
func (ac *ActivityCreate) AddExecutions(a ...*ActivityExecution) *ActivityCreate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ac.AddExecutionIDs(ids...)
}

// Mutation returns the ActivityMutation object of the builder.
func (ac *ActivityCreate) Mutation() *ActivityMutation {
	return ac.mutation
}

// Save creates the Activity in the database.
func (ac *ActivityCreate) Save(ctx context.Context) (*Activity, error) {
	ac.defaults()
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *ActivityCreate) SaveX(ctx context.Context) *Activity {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *ActivityCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *ActivityCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *ActivityCreate) defaults() {
	if _, ok := ac.mutation.Status(); !ok {
		v := activity.DefaultStatus
		ac.mutation.SetStatus(v)
	}
	if _, ok := ac.mutation.QueueName(); !ok {
		v := activity.DefaultQueueName
		ac.mutation.SetQueueName(v)
	}
	if _, ok := ac.mutation.CreatedAt(); !ok {
		v := activity.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *ActivityCreate) check() error {
	if _, ok := ac.mutation.Identity(); !ok {
		return &ValidationError{Name: "identity", err: errors.New(`ent: missing required field "Activity.identity"`)}
	}
	if v, ok := ac.mutation.Identity(); ok {
		if err := activity.IdentityValidator(v); err != nil {
			return &ValidationError{Name: "identity", err: fmt.Errorf(`ent: validator failed for field "Activity.identity": %w`, err)}
		}
	}
	if _, ok := ac.mutation.StepID(); !ok {
		return &ValidationError{Name: "step_id", err: errors.New(`ent: missing required field "Activity.step_id"`)}
	}
	if v, ok := ac.mutation.StepID(); ok {
		if err := activity.StepIDValidator(v); err != nil {
			return &ValidationError{Name: "step_id", err: fmt.Errorf(`ent: validator failed for field "Activity.step_id": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Activity.status"`)}
	}
	if v, ok := ac.mutation.Status(); ok {
		if err := activity.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Activity.status": %w`, err)}
		}
	}
	if _, ok := ac.mutation.QueueName(); !ok {
		return &ValidationError{Name: "queue_name", err: errors.New(`ent: missing required field "Activity.queue_name"`)}
	}
	if v, ok := ac.mutation.QueueName(); ok {
		if err := activity.QueueNameValidator(v); err != nil {
			return &ValidationError{Name: "queue_name", err: fmt.Errorf(`ent: validator failed for field "Activity.queue_name": %w`, err)}
		}
	}
	if _, ok := ac.mutation.HandlerName(); !ok {
		return &ValidationError{Name: "handler_name", err: errors.New(`ent: missing required field "Activity.handler_name"`)}
	}
	if v, ok := ac.mutation.HandlerName(); ok {
		if err := activity.HandlerNameValidator(v); err != nil {
			return &ValidationError{Name: "handler_name", err: fmt.Errorf(`ent: validator failed for field "Activity.handler_name": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Input(); !ok {
		return &ValidationError{Name: "input", err: errors.New(`ent: missing required field "Activity.input"`)}
	}
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Activity.created_at"`)}
	}
	return nil
}

func (ac *ActivityCreate) sqlSave(ctx context.Context) (*Activity, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Activity.ID type: %T", _spec.ID.Value)
		}
	}
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *ActivityCreate) createSpec() (*Activity, *sqlgraph.CreateSpec) {
	var (
		_node = &Activity{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(activity.Table, sqlgraph.NewFieldSpec(activity.FieldID, field.TypeString))
	)
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.Identity(); ok {
		_spec.SetField(activity.FieldIdentity, field.TypeString, value)
		_node.Identity = value
	}
	if value, ok := ac.mutation.StepID(); ok {
		_spec.SetField(activity.FieldStepID, field.TypeString, value)
		_node.StepID = value
	}
	if value, ok := ac.mutation.Status(); ok {
		_spec.SetField(activity.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := ac.mutation.QueueName(); ok {
		_spec.SetField(activity.FieldQueueName, field.TypeString, value)
		_node.QueueName = value
	}
	if value, ok := ac.mutation.HandlerName(); ok {
		_spec.SetField(activity.FieldHandlerName, field.TypeString, value)
		_node.HandlerName = value
	}
	if value, ok := ac.mutation.Input(); ok {
		_spec.SetField(activity.FieldInput, field.TypeJSON, value)
		_node.Input = value
	}
	if value, ok := ac.mutation.RetryPolicy(); ok {
		_spec.SetField(activity.FieldRetryPolicy, field.TypeJSON, value)
		_node.RetryPolicy = value
	}
	if value, ok := ac.mutation.Timeout(); ok {
		_spec.SetField(activity.FieldTimeout, field.TypeTime, value)
		_node.Timeout = value
	}
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.SetField(activity.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := ac.mutation.ExecutionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activity.ExecutionsTable,
			Columns: []string{activity.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activityexecution.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ActivityCreateBulk is the builder for creating many Activity entities in bulk.
type ActivityCreateBulk struct {
	config
	err      error
	builders []*ActivityCreate
}

// Save creates the Activity entities in the database.
func (acb *ActivityCreateBulk) Save(ctx context.Context) ([]*Activity, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Activity, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ActivityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *ActivityCreateBulk) SaveX(ctx context.Context) []*Activity {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *ActivityCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *ActivityCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
