// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/tempolite/ent/hierarchy"
	"github.com/davidroman0O/tempolite/ent/predicate"
	"github.com/davidroman0O/tempolite/ent/run"
	"github.com/davidroman0O/tempolite/ent/schema"
)

// HierarchyUpdate is the builder for updating Hierarchy entities.
type HierarchyUpdate struct {
	config
	hooks    []Hook
	mutation *HierarchyMutation
}

// Where appends a list predicates to the HierarchyUpdate builder.
func (hu *HierarchyUpdate) Where(ps ...predicate.Hierarchy) *HierarchyUpdate {
	hu.mutation.Where(ps...)
	return hu
}

// SetRunID sets the "run_id" field.
func (hu *HierarchyUpdate) SetRunID(si schema.RunID) *HierarchyUpdate {
	hu.mutation.SetRunID(si)
	return hu
}

// SetNillableRunID sets the "run_id" field if the given value is not nil.
func (hu *HierarchyUpdate) SetNillableRunID(si *schema.RunID) *HierarchyUpdate {
	if si != nil {
		hu.SetRunID(*si)
	}
	return hu
}

// SetParentEntityID sets the "parent_entity_id" field.
func (hu *HierarchyUpdate) SetParentEntityID(i int) *HierarchyUpdate {
	hu.mutation.ResetParentEntityID()
	hu.mutation.SetParentEntityID(i)
	return hu
}

// SetNillableParentEntityID sets the "parent_entity_id" field if the given value is not nil.
func (hu *HierarchyUpdate) SetNillableParentEntityID(i *int) *HierarchyUpdate {
	if i != nil {
		hu.SetParentEntityID(*i)
	}
	return hu
}

// AddParentEntityID adds i to the "parent_entity_id" field.
func (hu *HierarchyUpdate) AddParentEntityID(i int) *HierarchyUpdate {
	hu.mutation.AddParentEntityID(i)
	return hu
}

// SetChildEntityID sets the "child_entity_id" field.
func (hu *HierarchyUpdate) SetChildEntityID(i int) *HierarchyUpdate {
	hu.mutation.ResetChildEntityID()
	hu.mutation.SetChildEntityID(i)
	return hu
}

// SetNillableChildEntityID sets the "child_entity_id" field if the given value is not nil.
func (hu *HierarchyUpdate) SetNillableChildEntityID(i *int) *HierarchyUpdate {
	if i != nil {
		hu.SetChildEntityID(*i)
	}
	return hu
}

// AddChildEntityID adds i to the "child_entity_id" field.
func (hu *HierarchyUpdate) AddChildEntityID(i int) *HierarchyUpdate {
	hu.mutation.AddChildEntityID(i)
	return hu
}

// SetParentExecutionID sets the "parent_execution_id" field.
func (hu *HierarchyUpdate) SetParentExecutionID(i int) *HierarchyUpdate {
	hu.mutation.ResetParentExecutionID()
	hu.mutation.SetParentExecutionID(i)
	return hu
}

// SetNillableParentExecutionID sets the "parent_execution_id" field if the given value is not nil.
func (hu *HierarchyUpdate) SetNillableParentExecutionID(i *int) *HierarchyUpdate {
	if i != nil {
		hu.SetParentExecutionID(*i)
	}
	return hu
}

// AddParentExecutionID adds i to the "parent_execution_id" field.
func (hu *HierarchyUpdate) AddParentExecutionID(i int) *HierarchyUpdate {
	hu.mutation.AddParentExecutionID(i)
	return hu
}

// SetChildExecutionID sets the "child_execution_id" field.
func (hu *HierarchyUpdate) SetChildExecutionID(i int) *HierarchyUpdate {
	hu.mutation.ResetChildExecutionID()
	hu.mutation.SetChildExecutionID(i)
	return hu
}

// SetNillableChildExecutionID sets the "child_execution_id" field if the given value is not nil.
func (hu *HierarchyUpdate) SetNillableChildExecutionID(i *int) *HierarchyUpdate {
	if i != nil {
		hu.SetChildExecutionID(*i)
	}
	return hu
}

// AddChildExecutionID adds i to the "child_execution_id" field.
func (hu *HierarchyUpdate) AddChildExecutionID(i int) *HierarchyUpdate {
	hu.mutation.AddChildExecutionID(i)
	return hu
}

// SetParentStepID sets the "parent_step_id" field.
func (hu *HierarchyUpdate) SetParentStepID(s string) *HierarchyUpdate {
	hu.mutation.SetParentStepID(s)
	return hu
}

// SetNillableParentStepID sets the "parent_step_id" field if the given value is not nil.
func (hu *HierarchyUpdate) SetNillableParentStepID(s *string) *HierarchyUpdate {
	if s != nil {
		hu.SetParentStepID(*s)
	}
	return hu
}

// SetChildStepID sets the "child_step_id" field.
func (hu *HierarchyUpdate) SetChildStepID(s string) *HierarchyUpdate {
	hu.mutation.SetChildStepID(s)
	return hu
}

// SetNillableChildStepID sets the "child_step_id" field if the given value is not nil.
func (hu *HierarchyUpdate) SetNillableChildStepID(s *string) *HierarchyUpdate {
	if s != nil {
		hu.SetChildStepID(*s)
	}
	return hu
}

// SetParentType sets the "parent_type" field.
func (hu *HierarchyUpdate) SetParentType(st schema.EntityType) *HierarchyUpdate {
	hu.mutation.SetParentType(st)
	return hu
}

// SetNillableParentType sets the "parent_type" field if the given value is not nil.
func (hu *HierarchyUpdate) SetNillableParentType(st *schema.EntityType) *HierarchyUpdate {
	if st != nil {
		hu.SetParentType(*st)
	}
	return hu
}

// SetChildType sets the "child_type" field.
func (hu *HierarchyUpdate) SetChildType(st schema.EntityType) *HierarchyUpdate {
	hu.mutation.SetChildType(st)
	return hu
}

// SetNillableChildType sets the "child_type" field if the given value is not nil.
func (hu *HierarchyUpdate) SetNillableChildType(st *schema.EntityType) *HierarchyUpdate {
	if st != nil {
		hu.SetChildType(*st)
	}
	return hu
}

// SetCreatedAt sets the "created_at" field.
func (hu *HierarchyUpdate) SetCreatedAt(t time.Time) *HierarchyUpdate {
	hu.mutation.SetCreatedAt(t)
	return hu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (hu *HierarchyUpdate) SetNillableCreatedAt(t *time.Time) *HierarchyUpdate {
	if t != nil {
		hu.SetCreatedAt(*t)
	}
	return hu
}

// SetUpdatedAt sets the "updated_at" field.
func (hu *HierarchyUpdate) SetUpdatedAt(t time.Time) *HierarchyUpdate {
	hu.mutation.SetUpdatedAt(t)
	return hu
}

// SetRun sets the "run" edge to the Run entity.
func (hu *HierarchyUpdate) SetRun(r *Run) *HierarchyUpdate {
	return hu.SetRunID(r.ID)
}

// Mutation returns the HierarchyMutation object of the builder.
func (hu *HierarchyUpdate) Mutation() *HierarchyMutation {
	return hu.mutation
}

// ClearRun clears the "run" edge to the Run entity.
func (hu *HierarchyUpdate) ClearRun() *HierarchyUpdate {
	hu.mutation.ClearRun()
	return hu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hu *HierarchyUpdate) Save(ctx context.Context) (int, error) {
	hu.defaults()
	return withHooks(ctx, hu.sqlSave, hu.mutation, hu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hu *HierarchyUpdate) SaveX(ctx context.Context) int {
	affected, err := hu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hu *HierarchyUpdate) Exec(ctx context.Context) error {
	_, err := hu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hu *HierarchyUpdate) ExecX(ctx context.Context) {
	if err := hu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hu *HierarchyUpdate) defaults() {
	if _, ok := hu.mutation.UpdatedAt(); !ok {
		v := hierarchy.UpdateDefaultUpdatedAt()
		hu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hu *HierarchyUpdate) check() error {
	if hu.mutation.RunCleared() && len(hu.mutation.RunIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Hierarchy.run"`)
	}
	return nil
}

func (hu *HierarchyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := hu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(hierarchy.Table, hierarchy.Columns, sqlgraph.NewFieldSpec(hierarchy.FieldID, field.TypeInt))
	if ps := hu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hu.mutation.ParentEntityID(); ok {
		_spec.SetField(hierarchy.FieldParentEntityID, field.TypeInt, value)
	}
	if value, ok := hu.mutation.AddedParentEntityID(); ok {
		_spec.AddField(hierarchy.FieldParentEntityID, field.TypeInt, value)
	}
	if value, ok := hu.mutation.ChildEntityID(); ok {
		_spec.SetField(hierarchy.FieldChildEntityID, field.TypeInt, value)
	}
	if value, ok := hu.mutation.AddedChildEntityID(); ok {
		_spec.AddField(hierarchy.FieldChildEntityID, field.TypeInt, value)
	}
	if value, ok := hu.mutation.ParentExecutionID(); ok {
		_spec.SetField(hierarchy.FieldParentExecutionID, field.TypeInt, value)
	}
	if value, ok := hu.mutation.AddedParentExecutionID(); ok {
		_spec.AddField(hierarchy.FieldParentExecutionID, field.TypeInt, value)
	}
	if value, ok := hu.mutation.ChildExecutionID(); ok {
		_spec.SetField(hierarchy.FieldChildExecutionID, field.TypeInt, value)
	}
	if value, ok := hu.mutation.AddedChildExecutionID(); ok {
		_spec.AddField(hierarchy.FieldChildExecutionID, field.TypeInt, value)
	}
	if value, ok := hu.mutation.ParentStepID(); ok {
		_spec.SetField(hierarchy.FieldParentStepID, field.TypeString, value)
	}
	if value, ok := hu.mutation.ChildStepID(); ok {
		_spec.SetField(hierarchy.FieldChildStepID, field.TypeString, value)
	}
	if value, ok := hu.mutation.ParentType(); ok {
		_spec.SetField(hierarchy.FieldParentType, field.TypeString, value)
	}
	if value, ok := hu.mutation.ChildType(); ok {
		_spec.SetField(hierarchy.FieldChildType, field.TypeString, value)
	}
	if value, ok := hu.mutation.CreatedAt(); ok {
		_spec.SetField(hierarchy.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := hu.mutation.UpdatedAt(); ok {
		_spec.SetField(hierarchy.FieldUpdatedAt, field.TypeTime, value)
	}
	if hu.mutation.RunCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hierarchy.RunTable,
			Columns: []string{hierarchy.RunColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(run.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.RunIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hierarchy.RunTable,
			Columns: []string{hierarchy.RunColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(run.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hierarchy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	hu.mutation.done = true
	return n, nil
}

// HierarchyUpdateOne is the builder for updating a single Hierarchy entity.
type HierarchyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HierarchyMutation
}

// SetRunID sets the "run_id" field.
func (huo *HierarchyUpdateOne) SetRunID(si schema.RunID) *HierarchyUpdateOne {
	huo.mutation.SetRunID(si)
	return huo
}

// SetNillableRunID sets the "run_id" field if the given value is not nil.
func (huo *HierarchyUpdateOne) SetNillableRunID(si *schema.RunID) *HierarchyUpdateOne {
	if si != nil {
		huo.SetRunID(*si)
	}
	return huo
}

// SetParentEntityID sets the "parent_entity_id" field.
func (huo *HierarchyUpdateOne) SetParentEntityID(i int) *HierarchyUpdateOne {
	huo.mutation.ResetParentEntityID()
	huo.mutation.SetParentEntityID(i)
	return huo
}

// SetNillableParentEntityID sets the "parent_entity_id" field if the given value is not nil.
func (huo *HierarchyUpdateOne) SetNillableParentEntityID(i *int) *HierarchyUpdateOne {
	if i != nil {
		huo.SetParentEntityID(*i)
	}
	return huo
}

// AddParentEntityID adds i to the "parent_entity_id" field.
func (huo *HierarchyUpdateOne) AddParentEntityID(i int) *HierarchyUpdateOne {
	huo.mutation.AddParentEntityID(i)
	return huo
}

// SetChildEntityID sets the "child_entity_id" field.
func (huo *HierarchyUpdateOne) SetChildEntityID(i int) *HierarchyUpdateOne {
	huo.mutation.ResetChildEntityID()
	huo.mutation.SetChildEntityID(i)
	return huo
}

// SetNillableChildEntityID sets the "child_entity_id" field if the given value is not nil.
func (huo *HierarchyUpdateOne) SetNillableChildEntityID(i *int) *HierarchyUpdateOne {
	if i != nil {
		huo.SetChildEntityID(*i)
	}
	return huo
}

// AddChildEntityID adds i to the "child_entity_id" field.
func (huo *HierarchyUpdateOne) AddChildEntityID(i int) *HierarchyUpdateOne {
	huo.mutation.AddChildEntityID(i)
	return huo
}

// SetParentExecutionID sets the "parent_execution_id" field.
func (huo *HierarchyUpdateOne) SetParentExecutionID(i int) *HierarchyUpdateOne {
	huo.mutation.ResetParentExecutionID()
	huo.mutation.SetParentExecutionID(i)
	return huo
}

// SetNillableParentExecutionID sets the "parent_execution_id" field if the given value is not nil.
func (huo *HierarchyUpdateOne) SetNillableParentExecutionID(i *int) *HierarchyUpdateOne {
	if i != nil {
		huo.SetParentExecutionID(*i)
	}
	return huo
}

// AddParentExecutionID adds i to the "parent_execution_id" field.
func (huo *HierarchyUpdateOne) AddParentExecutionID(i int) *HierarchyUpdateOne {
	huo.mutation.AddParentExecutionID(i)
	return huo
}

// SetChildExecutionID sets the "child_execution_id" field.
func (huo *HierarchyUpdateOne) SetChildExecutionID(i int) *HierarchyUpdateOne {
	huo.mutation.ResetChildExecutionID()
	huo.mutation.SetChildExecutionID(i)
	return huo
}

// SetNillableChildExecutionID sets the "child_execution_id" field if the given value is not nil.
func (huo *HierarchyUpdateOne) SetNillableChildExecutionID(i *int) *HierarchyUpdateOne {
	if i != nil {
		huo.SetChildExecutionID(*i)
	}
	return huo
}

// AddChildExecutionID adds i to the "child_execution_id" field.
func (huo *HierarchyUpdateOne) AddChildExecutionID(i int) *HierarchyUpdateOne {
	huo.mutation.AddChildExecutionID(i)
	return huo
}

// SetParentStepID sets the "parent_step_id" field.
func (huo *HierarchyUpdateOne) SetParentStepID(s string) *HierarchyUpdateOne {
	huo.mutation.SetParentStepID(s)
	return huo
}

// SetNillableParentStepID sets the "parent_step_id" field if the given value is not nil.
func (huo *HierarchyUpdateOne) SetNillableParentStepID(s *string) *HierarchyUpdateOne {
	if s != nil {
		huo.SetParentStepID(*s)
	}
	return huo
}

// SetChildStepID sets the "child_step_id" field.
func (huo *HierarchyUpdateOne) SetChildStepID(s string) *HierarchyUpdateOne {
	huo.mutation.SetChildStepID(s)
	return huo
}

// SetNillableChildStepID sets the "child_step_id" field if the given value is not nil.
func (huo *HierarchyUpdateOne) SetNillableChildStepID(s *string) *HierarchyUpdateOne {
	if s != nil {
		huo.SetChildStepID(*s)
	}
	return huo
}

// SetParentType sets the "parent_type" field.
func (huo *HierarchyUpdateOne) SetParentType(st schema.EntityType) *HierarchyUpdateOne {
	huo.mutation.SetParentType(st)
	return huo
}

// SetNillableParentType sets the "parent_type" field if the given value is not nil.
func (huo *HierarchyUpdateOne) SetNillableParentType(st *schema.EntityType) *HierarchyUpdateOne {
	if st != nil {
		huo.SetParentType(*st)
	}
	return huo
}

// SetChildType sets the "child_type" field.
func (huo *HierarchyUpdateOne) SetChildType(st schema.EntityType) *HierarchyUpdateOne {
	huo.mutation.SetChildType(st)
	return huo
}

// SetNillableChildType sets the "child_type" field if the given value is not nil.
func (huo *HierarchyUpdateOne) SetNillableChildType(st *schema.EntityType) *HierarchyUpdateOne {
	if st != nil {
		huo.SetChildType(*st)
	}
	return huo
}

// SetCreatedAt sets the "created_at" field.
func (huo *HierarchyUpdateOne) SetCreatedAt(t time.Time) *HierarchyUpdateOne {
	huo.mutation.SetCreatedAt(t)
	return huo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (huo *HierarchyUpdateOne) SetNillableCreatedAt(t *time.Time) *HierarchyUpdateOne {
	if t != nil {
		huo.SetCreatedAt(*t)
	}
	return huo
}

// SetUpdatedAt sets the "updated_at" field.
func (huo *HierarchyUpdateOne) SetUpdatedAt(t time.Time) *HierarchyUpdateOne {
	huo.mutation.SetUpdatedAt(t)
	return huo
}

// SetRun sets the "run" edge to the Run entity.
func (huo *HierarchyUpdateOne) SetRun(r *Run) *HierarchyUpdateOne {
	return huo.SetRunID(r.ID)
}

// Mutation returns the HierarchyMutation object of the builder.
func (huo *HierarchyUpdateOne) Mutation() *HierarchyMutation {
	return huo.mutation
}

// ClearRun clears the "run" edge to the Run entity.
func (huo *HierarchyUpdateOne) ClearRun() *HierarchyUpdateOne {
	huo.mutation.ClearRun()
	return huo
}

// Where appends a list predicates to the HierarchyUpdate builder.
func (huo *HierarchyUpdateOne) Where(ps ...predicate.Hierarchy) *HierarchyUpdateOne {
	huo.mutation.Where(ps...)
	return huo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (huo *HierarchyUpdateOne) Select(field string, fields ...string) *HierarchyUpdateOne {
	huo.fields = append([]string{field}, fields...)
	return huo
}

// Save executes the query and returns the updated Hierarchy entity.
func (huo *HierarchyUpdateOne) Save(ctx context.Context) (*Hierarchy, error) {
	huo.defaults()
	return withHooks(ctx, huo.sqlSave, huo.mutation, huo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (huo *HierarchyUpdateOne) SaveX(ctx context.Context) *Hierarchy {
	node, err := huo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (huo *HierarchyUpdateOne) Exec(ctx context.Context) error {
	_, err := huo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (huo *HierarchyUpdateOne) ExecX(ctx context.Context) {
	if err := huo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (huo *HierarchyUpdateOne) defaults() {
	if _, ok := huo.mutation.UpdatedAt(); !ok {
		v := hierarchy.UpdateDefaultUpdatedAt()
		huo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (huo *HierarchyUpdateOne) check() error {
	if huo.mutation.RunCleared() && len(huo.mutation.RunIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Hierarchy.run"`)
	}
	return nil
}

func (huo *HierarchyUpdateOne) sqlSave(ctx context.Context) (_node *Hierarchy, err error) {
	if err := huo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(hierarchy.Table, hierarchy.Columns, sqlgraph.NewFieldSpec(hierarchy.FieldID, field.TypeInt))
	id, ok := huo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Hierarchy.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := huo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hierarchy.FieldID)
		for _, f := range fields {
			if !hierarchy.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != hierarchy.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := huo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := huo.mutation.ParentEntityID(); ok {
		_spec.SetField(hierarchy.FieldParentEntityID, field.TypeInt, value)
	}
	if value, ok := huo.mutation.AddedParentEntityID(); ok {
		_spec.AddField(hierarchy.FieldParentEntityID, field.TypeInt, value)
	}
	if value, ok := huo.mutation.ChildEntityID(); ok {
		_spec.SetField(hierarchy.FieldChildEntityID, field.TypeInt, value)
	}
	if value, ok := huo.mutation.AddedChildEntityID(); ok {
		_spec.AddField(hierarchy.FieldChildEntityID, field.TypeInt, value)
	}
	if value, ok := huo.mutation.ParentExecutionID(); ok {
		_spec.SetField(hierarchy.FieldParentExecutionID, field.TypeInt, value)
	}
	if value, ok := huo.mutation.AddedParentExecutionID(); ok {
		_spec.AddField(hierarchy.FieldParentExecutionID, field.TypeInt, value)
	}
	if value, ok := huo.mutation.ChildExecutionID(); ok {
		_spec.SetField(hierarchy.FieldChildExecutionID, field.TypeInt, value)
	}
	if value, ok := huo.mutation.AddedChildExecutionID(); ok {
		_spec.AddField(hierarchy.FieldChildExecutionID, field.TypeInt, value)
	}
	if value, ok := huo.mutation.ParentStepID(); ok {
		_spec.SetField(hierarchy.FieldParentStepID, field.TypeString, value)
	}
	if value, ok := huo.mutation.ChildStepID(); ok {
		_spec.SetField(hierarchy.FieldChildStepID, field.TypeString, value)
	}
	if value, ok := huo.mutation.ParentType(); ok {
		_spec.SetField(hierarchy.FieldParentType, field.TypeString, value)
	}
	if value, ok := huo.mutation.ChildType(); ok {
		_spec.SetField(hierarchy.FieldChildType, field.TypeString, value)
	}
	if value, ok := huo.mutation.CreatedAt(); ok {
		_spec.SetField(hierarchy.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := huo.mutation.UpdatedAt(); ok {
		_spec.SetField(hierarchy.FieldUpdatedAt, field.TypeTime, value)
	}
	if huo.mutation.RunCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hierarchy.RunTable,
			Columns: []string{hierarchy.RunColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(run.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.RunIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hierarchy.RunTable,
			Columns: []string{hierarchy.RunColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(run.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Hierarchy{config: huo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, huo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hierarchy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	huo.mutation.done = true
	return _node, nil
}
