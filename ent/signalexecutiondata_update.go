// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/tempolite/ent/predicate"
	"github.com/davidroman0O/tempolite/ent/schema"
	"github.com/davidroman0O/tempolite/ent/signalexecution"
	"github.com/davidroman0O/tempolite/ent/signalexecutiondata"
)

// SignalExecutionDataUpdate is the builder for updating SignalExecutionData entities.
type SignalExecutionDataUpdate struct {
	config
	hooks    []Hook
	mutation *SignalExecutionDataMutation
}

// Where appends a list predicates to the SignalExecutionDataUpdate builder.
func (sedu *SignalExecutionDataUpdate) Where(ps ...predicate.SignalExecutionData) *SignalExecutionDataUpdate {
	sedu.mutation.Where(ps...)
	return sedu
}

// SetExecutionID sets the "execution_id" field.
func (sedu *SignalExecutionDataUpdate) SetExecutionID(sei schema.SignalExecutionID) *SignalExecutionDataUpdate {
	sedu.mutation.SetExecutionID(sei)
	return sedu
}

// SetNillableExecutionID sets the "execution_id" field if the given value is not nil.
func (sedu *SignalExecutionDataUpdate) SetNillableExecutionID(sei *schema.SignalExecutionID) *SignalExecutionDataUpdate {
	if sei != nil {
		sedu.SetExecutionID(*sei)
	}
	return sedu
}

// SetValue sets the "value" field.
func (sedu *SignalExecutionDataUpdate) SetValue(b []byte) *SignalExecutionDataUpdate {
	sedu.mutation.SetValue(b)
	return sedu
}

// ClearValue clears the value of the "value" field.
func (sedu *SignalExecutionDataUpdate) ClearValue() *SignalExecutionDataUpdate {
	sedu.mutation.ClearValue()
	return sedu
}

// SetKind sets the "kind" field.
func (sedu *SignalExecutionDataUpdate) SetKind(u uint) *SignalExecutionDataUpdate {
	sedu.mutation.ResetKind()
	sedu.mutation.SetKind(u)
	return sedu
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (sedu *SignalExecutionDataUpdate) SetNillableKind(u *uint) *SignalExecutionDataUpdate {
	if u != nil {
		sedu.SetKind(*u)
	}
	return sedu
}

// AddKind adds u to the "kind" field.
func (sedu *SignalExecutionDataUpdate) AddKind(u int) *SignalExecutionDataUpdate {
	sedu.mutation.AddKind(u)
	return sedu
}

// SetCreatedAt sets the "created_at" field.
func (sedu *SignalExecutionDataUpdate) SetCreatedAt(t time.Time) *SignalExecutionDataUpdate {
	sedu.mutation.SetCreatedAt(t)
	return sedu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sedu *SignalExecutionDataUpdate) SetNillableCreatedAt(t *time.Time) *SignalExecutionDataUpdate {
	if t != nil {
		sedu.SetCreatedAt(*t)
	}
	return sedu
}

// SetUpdatedAt sets the "updated_at" field.
func (sedu *SignalExecutionDataUpdate) SetUpdatedAt(t time.Time) *SignalExecutionDataUpdate {
	sedu.mutation.SetUpdatedAt(t)
	return sedu
}

// SetExecution sets the "execution" edge to the SignalExecution entity.
func (sedu *SignalExecutionDataUpdate) SetExecution(s *SignalExecution) *SignalExecutionDataUpdate {
	return sedu.SetExecutionID(s.ID)
}

// Mutation returns the SignalExecutionDataMutation object of the builder.
func (sedu *SignalExecutionDataUpdate) Mutation() *SignalExecutionDataMutation {
	return sedu.mutation
}

// ClearExecution clears the "execution" edge to the SignalExecution entity.
func (sedu *SignalExecutionDataUpdate) ClearExecution() *SignalExecutionDataUpdate {
	sedu.mutation.ClearExecution()
	return sedu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sedu *SignalExecutionDataUpdate) Save(ctx context.Context) (int, error) {
	sedu.defaults()
	return withHooks(ctx, sedu.sqlSave, sedu.mutation, sedu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sedu *SignalExecutionDataUpdate) SaveX(ctx context.Context) int {
	affected, err := sedu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sedu *SignalExecutionDataUpdate) Exec(ctx context.Context) error {
	_, err := sedu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sedu *SignalExecutionDataUpdate) ExecX(ctx context.Context) {
	if err := sedu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sedu *SignalExecutionDataUpdate) defaults() {
	if _, ok := sedu.mutation.UpdatedAt(); !ok {
		v := signalexecutiondata.UpdateDefaultUpdatedAt()
		sedu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sedu *SignalExecutionDataUpdate) check() error {
	if sedu.mutation.ExecutionCleared() && len(sedu.mutation.ExecutionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SignalExecutionData.execution"`)
	}
	return nil
}

func (sedu *SignalExecutionDataUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sedu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(signalexecutiondata.Table, signalexecutiondata.Columns, sqlgraph.NewFieldSpec(signalexecutiondata.FieldID, field.TypeInt))
	if ps := sedu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sedu.mutation.Value(); ok {
		_spec.SetField(signalexecutiondata.FieldValue, field.TypeBytes, value)
	}
	if sedu.mutation.ValueCleared() {
		_spec.ClearField(signalexecutiondata.FieldValue, field.TypeBytes)
	}
	if value, ok := sedu.mutation.Kind(); ok {
		_spec.SetField(signalexecutiondata.FieldKind, field.TypeUint, value)
	}
	if value, ok := sedu.mutation.AddedKind(); ok {
		_spec.AddField(signalexecutiondata.FieldKind, field.TypeUint, value)
	}
	if value, ok := sedu.mutation.CreatedAt(); ok {
		_spec.SetField(signalexecutiondata.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := sedu.mutation.UpdatedAt(); ok {
		_spec.SetField(signalexecutiondata.FieldUpdatedAt, field.TypeTime, value)
	}
	if sedu.mutation.ExecutionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   signalexecutiondata.ExecutionTable,
			Columns: []string{signalexecutiondata.ExecutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signalexecution.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sedu.mutation.ExecutionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   signalexecutiondata.ExecutionTable,
			Columns: []string{signalexecutiondata.ExecutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signalexecution.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sedu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{signalexecutiondata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sedu.mutation.done = true
	return n, nil
}

// SignalExecutionDataUpdateOne is the builder for updating a single SignalExecutionData entity.
type SignalExecutionDataUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SignalExecutionDataMutation
}

// SetExecutionID sets the "execution_id" field.
func (seduo *SignalExecutionDataUpdateOne) SetExecutionID(sei schema.SignalExecutionID) *SignalExecutionDataUpdateOne {
	seduo.mutation.SetExecutionID(sei)
	return seduo
}

// SetNillableExecutionID sets the "execution_id" field if the given value is not nil.
func (seduo *SignalExecutionDataUpdateOne) SetNillableExecutionID(sei *schema.SignalExecutionID) *SignalExecutionDataUpdateOne {
	if sei != nil {
		seduo.SetExecutionID(*sei)
	}
	return seduo
}

// SetValue sets the "value" field.
func (seduo *SignalExecutionDataUpdateOne) SetValue(b []byte) *SignalExecutionDataUpdateOne {
	seduo.mutation.SetValue(b)
	return seduo
}

// ClearValue clears the value of the "value" field.
func (seduo *SignalExecutionDataUpdateOne) ClearValue() *SignalExecutionDataUpdateOne {
	seduo.mutation.ClearValue()
	return seduo
}

// SetKind sets the "kind" field.
func (seduo *SignalExecutionDataUpdateOne) SetKind(u uint) *SignalExecutionDataUpdateOne {
	seduo.mutation.ResetKind()
	seduo.mutation.SetKind(u)
	return seduo
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (seduo *SignalExecutionDataUpdateOne) SetNillableKind(u *uint) *SignalExecutionDataUpdateOne {
	if u != nil {
		seduo.SetKind(*u)
	}
	return seduo
}

// AddKind adds u to the "kind" field.
func (seduo *SignalExecutionDataUpdateOne) AddKind(u int) *SignalExecutionDataUpdateOne {
	seduo.mutation.AddKind(u)
	return seduo
}

// SetCreatedAt sets the "created_at" field.
func (seduo *SignalExecutionDataUpdateOne) SetCreatedAt(t time.Time) *SignalExecutionDataUpdateOne {
	seduo.mutation.SetCreatedAt(t)
	return seduo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (seduo *SignalExecutionDataUpdateOne) SetNillableCreatedAt(t *time.Time) *SignalExecutionDataUpdateOne {
	if t != nil {
		seduo.SetCreatedAt(*t)
	}
	return seduo
}

// SetUpdatedAt sets the "updated_at" field.
func (seduo *SignalExecutionDataUpdateOne) SetUpdatedAt(t time.Time) *SignalExecutionDataUpdateOne {
	seduo.mutation.SetUpdatedAt(t)
	return seduo
}

// SetExecution sets the "execution" edge to the SignalExecution entity.
func (seduo *SignalExecutionDataUpdateOne) SetExecution(s *SignalExecution) *SignalExecutionDataUpdateOne {
	return seduo.SetExecutionID(s.ID)
}

// Mutation returns the SignalExecutionDataMutation object of the builder.
func (seduo *SignalExecutionDataUpdateOne) Mutation() *SignalExecutionDataMutation {
	return seduo.mutation
}

// ClearExecution clears the "execution" edge to the SignalExecution entity.
func (seduo *SignalExecutionDataUpdateOne) ClearExecution() *SignalExecutionDataUpdateOne {
	seduo.mutation.ClearExecution()
	return seduo
}

// Where appends a list predicates to the SignalExecutionDataUpdate builder.
func (seduo *SignalExecutionDataUpdateOne) Where(ps ...predicate.SignalExecutionData) *SignalExecutionDataUpdateOne {
	seduo.mutation.Where(ps...)
	return seduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (seduo *SignalExecutionDataUpdateOne) Select(field string, fields ...string) *SignalExecutionDataUpdateOne {
	seduo.fields = append([]string{field}, fields...)
	return seduo
}

// Save executes the query and returns the updated SignalExecutionData entity.
func (seduo *SignalExecutionDataUpdateOne) Save(ctx context.Context) (*SignalExecutionData, error) {
	seduo.defaults()
	return withHooks(ctx, seduo.sqlSave, seduo.mutation, seduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (seduo *SignalExecutionDataUpdateOne) SaveX(ctx context.Context) *SignalExecutionData {
	node, err := seduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (seduo *SignalExecutionDataUpdateOne) Exec(ctx context.Context) error {
	_, err := seduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (seduo *SignalExecutionDataUpdateOne) ExecX(ctx context.Context) {
	if err := seduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (seduo *SignalExecutionDataUpdateOne) defaults() {
	if _, ok := seduo.mutation.UpdatedAt(); !ok {
		v := signalexecutiondata.UpdateDefaultUpdatedAt()
		seduo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (seduo *SignalExecutionDataUpdateOne) check() error {
	if seduo.mutation.ExecutionCleared() && len(seduo.mutation.ExecutionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SignalExecutionData.execution"`)
	}
	return nil
}

func (seduo *SignalExecutionDataUpdateOne) sqlSave(ctx context.Context) (_node *SignalExecutionData, err error) {
	if err := seduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(signalexecutiondata.Table, signalexecutiondata.Columns, sqlgraph.NewFieldSpec(signalexecutiondata.FieldID, field.TypeInt))
	id, ok := seduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SignalExecutionData.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := seduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, signalexecutiondata.FieldID)
		for _, f := range fields {
			if !signalexecutiondata.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != signalexecutiondata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := seduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := seduo.mutation.Value(); ok {
		_spec.SetField(signalexecutiondata.FieldValue, field.TypeBytes, value)
	}
	if seduo.mutation.ValueCleared() {
		_spec.ClearField(signalexecutiondata.FieldValue, field.TypeBytes)
	}
	if value, ok := seduo.mutation.Kind(); ok {
		_spec.SetField(signalexecutiondata.FieldKind, field.TypeUint, value)
	}
	if value, ok := seduo.mutation.AddedKind(); ok {
		_spec.AddField(signalexecutiondata.FieldKind, field.TypeUint, value)
	}
	if value, ok := seduo.mutation.CreatedAt(); ok {
		_spec.SetField(signalexecutiondata.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := seduo.mutation.UpdatedAt(); ok {
		_spec.SetField(signalexecutiondata.FieldUpdatedAt, field.TypeTime, value)
	}
	if seduo.mutation.ExecutionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   signalexecutiondata.ExecutionTable,
			Columns: []string{signalexecutiondata.ExecutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signalexecution.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := seduo.mutation.ExecutionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   signalexecutiondata.ExecutionTable,
			Columns: []string{signalexecutiondata.ExecutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signalexecution.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SignalExecutionData{config: seduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, seduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{signalexecutiondata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	seduo.mutation.done = true
	return _node, nil
}
