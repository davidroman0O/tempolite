// Code generated by ent, DO NOT EDIT.

package signal

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/davidroman0O/tempolite/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Signal {
	return predicate.Signal(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Signal {
	return predicate.Signal(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Signal {
	return predicate.Signal(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Signal {
	return predicate.Signal(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Signal {
	return predicate.Signal(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Signal {
	return predicate.Signal(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Signal {
	return predicate.Signal(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Signal {
	return predicate.Signal(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Signal {
	return predicate.Signal(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Signal {
	return predicate.Signal(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Signal {
	return predicate.Signal(sql.FieldContainsFold(FieldID, id))
}

// StepID applies equality check predicate on the "step_id" field. It's identical to StepIDEQ.
func StepID(v string) predicate.Signal {
	return predicate.Signal(sql.FieldEQ(FieldStepID, v))
}

// QueueName applies equality check predicate on the "queue_name" field. It's identical to QueueNameEQ.
func QueueName(v string) predicate.Signal {
	return predicate.Signal(sql.FieldEQ(FieldQueueName, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Signal {
	return predicate.Signal(sql.FieldEQ(FieldCreatedAt, v))
}

// Consumed applies equality check predicate on the "consumed" field. It's identical to ConsumedEQ.
func Consumed(v bool) predicate.Signal {
	return predicate.Signal(sql.FieldEQ(FieldConsumed, v))
}

// StepIDEQ applies the EQ predicate on the "step_id" field.
func StepIDEQ(v string) predicate.Signal {
	return predicate.Signal(sql.FieldEQ(FieldStepID, v))
}

// StepIDNEQ applies the NEQ predicate on the "step_id" field.
func StepIDNEQ(v string) predicate.Signal {
	return predicate.Signal(sql.FieldNEQ(FieldStepID, v))
}

// StepIDIn applies the In predicate on the "step_id" field.
func StepIDIn(vs ...string) predicate.Signal {
	return predicate.Signal(sql.FieldIn(FieldStepID, vs...))
}

// StepIDNotIn applies the NotIn predicate on the "step_id" field.
func StepIDNotIn(vs ...string) predicate.Signal {
	return predicate.Signal(sql.FieldNotIn(FieldStepID, vs...))
}

// StepIDGT applies the GT predicate on the "step_id" field.
func StepIDGT(v string) predicate.Signal {
	return predicate.Signal(sql.FieldGT(FieldStepID, v))
}

// StepIDGTE applies the GTE predicate on the "step_id" field.
func StepIDGTE(v string) predicate.Signal {
	return predicate.Signal(sql.FieldGTE(FieldStepID, v))
}

// StepIDLT applies the LT predicate on the "step_id" field.
func StepIDLT(v string) predicate.Signal {
	return predicate.Signal(sql.FieldLT(FieldStepID, v))
}

// StepIDLTE applies the LTE predicate on the "step_id" field.
func StepIDLTE(v string) predicate.Signal {
	return predicate.Signal(sql.FieldLTE(FieldStepID, v))
}

// StepIDContains applies the Contains predicate on the "step_id" field.
func StepIDContains(v string) predicate.Signal {
	return predicate.Signal(sql.FieldContains(FieldStepID, v))
}

// StepIDHasPrefix applies the HasPrefix predicate on the "step_id" field.
func StepIDHasPrefix(v string) predicate.Signal {
	return predicate.Signal(sql.FieldHasPrefix(FieldStepID, v))
}

// StepIDHasSuffix applies the HasSuffix predicate on the "step_id" field.
func StepIDHasSuffix(v string) predicate.Signal {
	return predicate.Signal(sql.FieldHasSuffix(FieldStepID, v))
}

// StepIDEqualFold applies the EqualFold predicate on the "step_id" field.
func StepIDEqualFold(v string) predicate.Signal {
	return predicate.Signal(sql.FieldEqualFold(FieldStepID, v))
}

// StepIDContainsFold applies the ContainsFold predicate on the "step_id" field.
func StepIDContainsFold(v string) predicate.Signal {
	return predicate.Signal(sql.FieldContainsFold(FieldStepID, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Signal {
	return predicate.Signal(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Signal {
	return predicate.Signal(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Signal {
	return predicate.Signal(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Signal {
	return predicate.Signal(sql.FieldNotIn(FieldStatus, vs...))
}

// QueueNameEQ applies the EQ predicate on the "queue_name" field.
func QueueNameEQ(v string) predicate.Signal {
	return predicate.Signal(sql.FieldEQ(FieldQueueName, v))
}

// QueueNameNEQ applies the NEQ predicate on the "queue_name" field.
func QueueNameNEQ(v string) predicate.Signal {
	return predicate.Signal(sql.FieldNEQ(FieldQueueName, v))
}

// QueueNameIn applies the In predicate on the "queue_name" field.
func QueueNameIn(vs ...string) predicate.Signal {
	return predicate.Signal(sql.FieldIn(FieldQueueName, vs...))
}

// QueueNameNotIn applies the NotIn predicate on the "queue_name" field.
func QueueNameNotIn(vs ...string) predicate.Signal {
	return predicate.Signal(sql.FieldNotIn(FieldQueueName, vs...))
}

// QueueNameGT applies the GT predicate on the "queue_name" field.
func QueueNameGT(v string) predicate.Signal {
	return predicate.Signal(sql.FieldGT(FieldQueueName, v))
}

// QueueNameGTE applies the GTE predicate on the "queue_name" field.
func QueueNameGTE(v string) predicate.Signal {
	return predicate.Signal(sql.FieldGTE(FieldQueueName, v))
}

// QueueNameLT applies the LT predicate on the "queue_name" field.
func QueueNameLT(v string) predicate.Signal {
	return predicate.Signal(sql.FieldLT(FieldQueueName, v))
}

// QueueNameLTE applies the LTE predicate on the "queue_name" field.
func QueueNameLTE(v string) predicate.Signal {
	return predicate.Signal(sql.FieldLTE(FieldQueueName, v))
}

// QueueNameContains applies the Contains predicate on the "queue_name" field.
func QueueNameContains(v string) predicate.Signal {
	return predicate.Signal(sql.FieldContains(FieldQueueName, v))
}

// QueueNameHasPrefix applies the HasPrefix predicate on the "queue_name" field.
func QueueNameHasPrefix(v string) predicate.Signal {
	return predicate.Signal(sql.FieldHasPrefix(FieldQueueName, v))
}

// QueueNameHasSuffix applies the HasSuffix predicate on the "queue_name" field.
func QueueNameHasSuffix(v string) predicate.Signal {
	return predicate.Signal(sql.FieldHasSuffix(FieldQueueName, v))
}

// QueueNameEqualFold applies the EqualFold predicate on the "queue_name" field.
func QueueNameEqualFold(v string) predicate.Signal {
	return predicate.Signal(sql.FieldEqualFold(FieldQueueName, v))
}

// QueueNameContainsFold applies the ContainsFold predicate on the "queue_name" field.
func QueueNameContainsFold(v string) predicate.Signal {
	return predicate.Signal(sql.FieldContainsFold(FieldQueueName, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Signal {
	return predicate.Signal(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Signal {
	return predicate.Signal(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Signal {
	return predicate.Signal(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Signal {
	return predicate.Signal(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Signal {
	return predicate.Signal(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Signal {
	return predicate.Signal(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Signal {
	return predicate.Signal(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Signal {
	return predicate.Signal(sql.FieldLTE(FieldCreatedAt, v))
}

// ConsumedEQ applies the EQ predicate on the "consumed" field.
func ConsumedEQ(v bool) predicate.Signal {
	return predicate.Signal(sql.FieldEQ(FieldConsumed, v))
}

// ConsumedNEQ applies the NEQ predicate on the "consumed" field.
func ConsumedNEQ(v bool) predicate.Signal {
	return predicate.Signal(sql.FieldNEQ(FieldConsumed, v))
}

// HasExecutions applies the HasEdge predicate on the "executions" edge.
func HasExecutions() predicate.Signal {
	return predicate.Signal(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ExecutionsTable, ExecutionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExecutionsWith applies the HasEdge predicate on the "executions" edge with a given conditions (other predicates).
func HasExecutionsWith(preds ...predicate.SignalExecution) predicate.Signal {
	return predicate.Signal(func(s *sql.Selector) {
		step := newExecutionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Signal) predicate.Signal {
	return predicate.Signal(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Signal) predicate.Signal {
	return predicate.Signal(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Signal) predicate.Signal {
	return predicate.Signal(sql.NotPredicates(p))
}
