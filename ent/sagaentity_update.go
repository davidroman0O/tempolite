// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/tempolite/ent/predicate"
	"github.com/davidroman0O/tempolite/ent/sagadata"
	"github.com/davidroman0O/tempolite/ent/sagaentity"
	"github.com/davidroman0O/tempolite/ent/sagaexecution"
	"github.com/davidroman0O/tempolite/ent/sagavalue"
	"github.com/davidroman0O/tempolite/ent/schema"
	"github.com/davidroman0O/tempolite/ent/workflowentity"
)

// SagaEntityUpdate is the builder for updating SagaEntity entities.
type SagaEntityUpdate struct {
	config
	hooks    []Hook
	mutation *SagaEntityMutation
}

// Where appends a list predicates to the SagaEntityUpdate builder.
func (seu *SagaEntityUpdate) Where(ps ...predicate.SagaEntity) *SagaEntityUpdate {
	seu.mutation.Where(ps...)
	return seu
}

// SetHandlerName sets the "handler_name" field.
func (seu *SagaEntityUpdate) SetHandlerName(s string) *SagaEntityUpdate {
	seu.mutation.SetHandlerName(s)
	return seu
}

// SetNillableHandlerName sets the "handler_name" field if the given value is not nil.
func (seu *SagaEntityUpdate) SetNillableHandlerName(s *string) *SagaEntityUpdate {
	if s != nil {
		seu.SetHandlerName(*s)
	}
	return seu
}

// SetType sets the "type" field.
func (seu *SagaEntityUpdate) SetType(st schema.EntityType) *SagaEntityUpdate {
	seu.mutation.SetType(st)
	return seu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (seu *SagaEntityUpdate) SetNillableType(st *schema.EntityType) *SagaEntityUpdate {
	if st != nil {
		seu.SetType(*st)
	}
	return seu
}

// SetStatus sets the "status" field.
func (seu *SagaEntityUpdate) SetStatus(ss schema.EntityStatus) *SagaEntityUpdate {
	seu.mutation.SetStatus(ss)
	return seu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (seu *SagaEntityUpdate) SetNillableStatus(ss *schema.EntityStatus) *SagaEntityUpdate {
	if ss != nil {
		seu.SetStatus(*ss)
	}
	return seu
}

// SetStepID sets the "step_id" field.
func (seu *SagaEntityUpdate) SetStepID(s string) *SagaEntityUpdate {
	seu.mutation.SetStepID(s)
	return seu
}

// SetNillableStepID sets the "step_id" field if the given value is not nil.
func (seu *SagaEntityUpdate) SetNillableStepID(s *string) *SagaEntityUpdate {
	if s != nil {
		seu.SetStepID(*s)
	}
	return seu
}

// SetRunID sets the "run_id" field.
func (seu *SagaEntityUpdate) SetRunID(si schema.RunID) *SagaEntityUpdate {
	seu.mutation.ResetRunID()
	seu.mutation.SetRunID(si)
	return seu
}

// SetNillableRunID sets the "run_id" field if the given value is not nil.
func (seu *SagaEntityUpdate) SetNillableRunID(si *schema.RunID) *SagaEntityUpdate {
	if si != nil {
		seu.SetRunID(*si)
	}
	return seu
}

// AddRunID adds si to the "run_id" field.
func (seu *SagaEntityUpdate) AddRunID(si schema.RunID) *SagaEntityUpdate {
	seu.mutation.AddRunID(si)
	return seu
}

// SetRetryPolicy sets the "retry_policy" field.
func (seu *SagaEntityUpdate) SetRetryPolicy(sp schema.RetryPolicy) *SagaEntityUpdate {
	seu.mutation.SetRetryPolicy(sp)
	return seu
}

// SetNillableRetryPolicy sets the "retry_policy" field if the given value is not nil.
func (seu *SagaEntityUpdate) SetNillableRetryPolicy(sp *schema.RetryPolicy) *SagaEntityUpdate {
	if sp != nil {
		seu.SetRetryPolicy(*sp)
	}
	return seu
}

// SetRetryState sets the "retry_state" field.
func (seu *SagaEntityUpdate) SetRetryState(ss schema.RetryState) *SagaEntityUpdate {
	seu.mutation.SetRetryState(ss)
	return seu
}

// SetNillableRetryState sets the "retry_state" field if the given value is not nil.
func (seu *SagaEntityUpdate) SetNillableRetryState(ss *schema.RetryState) *SagaEntityUpdate {
	if ss != nil {
		seu.SetRetryState(*ss)
	}
	return seu
}

// SetCreatedAt sets the "created_at" field.
func (seu *SagaEntityUpdate) SetCreatedAt(t time.Time) *SagaEntityUpdate {
	seu.mutation.SetCreatedAt(t)
	return seu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (seu *SagaEntityUpdate) SetNillableCreatedAt(t *time.Time) *SagaEntityUpdate {
	if t != nil {
		seu.SetCreatedAt(*t)
	}
	return seu
}

// SetUpdatedAt sets the "updated_at" field.
func (seu *SagaEntityUpdate) SetUpdatedAt(t time.Time) *SagaEntityUpdate {
	seu.mutation.SetUpdatedAt(t)
	return seu
}

// SetWorkflowID sets the "workflow" edge to the WorkflowEntity entity by ID.
func (seu *SagaEntityUpdate) SetWorkflowID(id schema.WorkflowEntityID) *SagaEntityUpdate {
	seu.mutation.SetWorkflowID(id)
	return seu
}

// SetWorkflow sets the "workflow" edge to the WorkflowEntity entity.
func (seu *SagaEntityUpdate) SetWorkflow(w *WorkflowEntity) *SagaEntityUpdate {
	return seu.SetWorkflowID(w.ID)
}

// SetSagaDataID sets the "saga_data" edge to the SagaData entity by ID.
func (seu *SagaEntityUpdate) SetSagaDataID(id schema.SagaDataID) *SagaEntityUpdate {
	seu.mutation.SetSagaDataID(id)
	return seu
}

// SetNillableSagaDataID sets the "saga_data" edge to the SagaData entity by ID if the given value is not nil.
func (seu *SagaEntityUpdate) SetNillableSagaDataID(id *schema.SagaDataID) *SagaEntityUpdate {
	if id != nil {
		seu = seu.SetSagaDataID(*id)
	}
	return seu
}

// SetSagaData sets the "saga_data" edge to the SagaData entity.
func (seu *SagaEntityUpdate) SetSagaData(s *SagaData) *SagaEntityUpdate {
	return seu.SetSagaDataID(s.ID)
}

// AddExecutionIDs adds the "executions" edge to the SagaExecution entity by IDs.
func (seu *SagaEntityUpdate) AddExecutionIDs(ids ...schema.SagaExecutionID) *SagaEntityUpdate {
	seu.mutation.AddExecutionIDs(ids...)
	return seu
}

// AddExecutions adds the "executions" edges to the SagaExecution entity.
func (seu *SagaEntityUpdate) AddExecutions(s ...*SagaExecution) *SagaEntityUpdate {
	ids := make([]schema.SagaExecutionID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return seu.AddExecutionIDs(ids...)
}

// AddValueIDs adds the "values" edge to the SagaValue entity by IDs.
func (seu *SagaEntityUpdate) AddValueIDs(ids ...schema.SagaValueID) *SagaEntityUpdate {
	seu.mutation.AddValueIDs(ids...)
	return seu
}

// AddValues adds the "values" edges to the SagaValue entity.
func (seu *SagaEntityUpdate) AddValues(s ...*SagaValue) *SagaEntityUpdate {
	ids := make([]schema.SagaValueID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return seu.AddValueIDs(ids...)
}

// Mutation returns the SagaEntityMutation object of the builder.
func (seu *SagaEntityUpdate) Mutation() *SagaEntityMutation {
	return seu.mutation
}

// ClearWorkflow clears the "workflow" edge to the WorkflowEntity entity.
func (seu *SagaEntityUpdate) ClearWorkflow() *SagaEntityUpdate {
	seu.mutation.ClearWorkflow()
	return seu
}

// ClearSagaData clears the "saga_data" edge to the SagaData entity.
func (seu *SagaEntityUpdate) ClearSagaData() *SagaEntityUpdate {
	seu.mutation.ClearSagaData()
	return seu
}

// ClearExecutions clears all "executions" edges to the SagaExecution entity.
func (seu *SagaEntityUpdate) ClearExecutions() *SagaEntityUpdate {
	seu.mutation.ClearExecutions()
	return seu
}

// RemoveExecutionIDs removes the "executions" edge to SagaExecution entities by IDs.
func (seu *SagaEntityUpdate) RemoveExecutionIDs(ids ...schema.SagaExecutionID) *SagaEntityUpdate {
	seu.mutation.RemoveExecutionIDs(ids...)
	return seu
}

// RemoveExecutions removes "executions" edges to SagaExecution entities.
func (seu *SagaEntityUpdate) RemoveExecutions(s ...*SagaExecution) *SagaEntityUpdate {
	ids := make([]schema.SagaExecutionID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return seu.RemoveExecutionIDs(ids...)
}

// ClearValues clears all "values" edges to the SagaValue entity.
func (seu *SagaEntityUpdate) ClearValues() *SagaEntityUpdate {
	seu.mutation.ClearValues()
	return seu
}

// RemoveValueIDs removes the "values" edge to SagaValue entities by IDs.
func (seu *SagaEntityUpdate) RemoveValueIDs(ids ...schema.SagaValueID) *SagaEntityUpdate {
	seu.mutation.RemoveValueIDs(ids...)
	return seu
}

// RemoveValues removes "values" edges to SagaValue entities.
func (seu *SagaEntityUpdate) RemoveValues(s ...*SagaValue) *SagaEntityUpdate {
	ids := make([]schema.SagaValueID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return seu.RemoveValueIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (seu *SagaEntityUpdate) Save(ctx context.Context) (int, error) {
	seu.defaults()
	return withHooks(ctx, seu.sqlSave, seu.mutation, seu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (seu *SagaEntityUpdate) SaveX(ctx context.Context) int {
	affected, err := seu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (seu *SagaEntityUpdate) Exec(ctx context.Context) error {
	_, err := seu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (seu *SagaEntityUpdate) ExecX(ctx context.Context) {
	if err := seu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (seu *SagaEntityUpdate) defaults() {
	if _, ok := seu.mutation.UpdatedAt(); !ok {
		v := sagaentity.UpdateDefaultUpdatedAt()
		seu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (seu *SagaEntityUpdate) check() error {
	if seu.mutation.WorkflowCleared() && len(seu.mutation.WorkflowIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SagaEntity.workflow"`)
	}
	return nil
}

func (seu *SagaEntityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := seu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(sagaentity.Table, sagaentity.Columns, sqlgraph.NewFieldSpec(sagaentity.FieldID, field.TypeInt))
	if ps := seu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := seu.mutation.HandlerName(); ok {
		_spec.SetField(sagaentity.FieldHandlerName, field.TypeString, value)
	}
	if value, ok := seu.mutation.GetType(); ok {
		_spec.SetField(sagaentity.FieldType, field.TypeString, value)
	}
	if value, ok := seu.mutation.Status(); ok {
		_spec.SetField(sagaentity.FieldStatus, field.TypeString, value)
	}
	if value, ok := seu.mutation.StepID(); ok {
		_spec.SetField(sagaentity.FieldStepID, field.TypeString, value)
	}
	if value, ok := seu.mutation.RunID(); ok {
		_spec.SetField(sagaentity.FieldRunID, field.TypeInt, value)
	}
	if value, ok := seu.mutation.AddedRunID(); ok {
		_spec.AddField(sagaentity.FieldRunID, field.TypeInt, value)
	}
	if value, ok := seu.mutation.RetryPolicy(); ok {
		_spec.SetField(sagaentity.FieldRetryPolicy, field.TypeJSON, value)
	}
	if value, ok := seu.mutation.RetryState(); ok {
		_spec.SetField(sagaentity.FieldRetryState, field.TypeJSON, value)
	}
	if value, ok := seu.mutation.CreatedAt(); ok {
		_spec.SetField(sagaentity.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := seu.mutation.UpdatedAt(); ok {
		_spec.SetField(sagaentity.FieldUpdatedAt, field.TypeTime, value)
	}
	if seu.mutation.WorkflowCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sagaentity.WorkflowTable,
			Columns: []string{sagaentity.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowentity.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := seu.mutation.WorkflowIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sagaentity.WorkflowTable,
			Columns: []string{sagaentity.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowentity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if seu.mutation.SagaDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   sagaentity.SagaDataTable,
			Columns: []string{sagaentity.SagaDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagadata.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := seu.mutation.SagaDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   sagaentity.SagaDataTable,
			Columns: []string{sagaentity.SagaDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagadata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if seu.mutation.ExecutionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sagaentity.ExecutionsTable,
			Columns: []string{sagaentity.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagaexecution.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := seu.mutation.RemovedExecutionsIDs(); len(nodes) > 0 && !seu.mutation.ExecutionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sagaentity.ExecutionsTable,
			Columns: []string{sagaentity.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagaexecution.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := seu.mutation.ExecutionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sagaentity.ExecutionsTable,
			Columns: []string{sagaentity.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagaexecution.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if seu.mutation.ValuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sagaentity.ValuesTable,
			Columns: []string{sagaentity.ValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagavalue.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := seu.mutation.RemovedValuesIDs(); len(nodes) > 0 && !seu.mutation.ValuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sagaentity.ValuesTable,
			Columns: []string{sagaentity.ValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagavalue.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := seu.mutation.ValuesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sagaentity.ValuesTable,
			Columns: []string{sagaentity.ValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagavalue.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, seu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sagaentity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	seu.mutation.done = true
	return n, nil
}

// SagaEntityUpdateOne is the builder for updating a single SagaEntity entity.
type SagaEntityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SagaEntityMutation
}

// SetHandlerName sets the "handler_name" field.
func (seuo *SagaEntityUpdateOne) SetHandlerName(s string) *SagaEntityUpdateOne {
	seuo.mutation.SetHandlerName(s)
	return seuo
}

// SetNillableHandlerName sets the "handler_name" field if the given value is not nil.
func (seuo *SagaEntityUpdateOne) SetNillableHandlerName(s *string) *SagaEntityUpdateOne {
	if s != nil {
		seuo.SetHandlerName(*s)
	}
	return seuo
}

// SetType sets the "type" field.
func (seuo *SagaEntityUpdateOne) SetType(st schema.EntityType) *SagaEntityUpdateOne {
	seuo.mutation.SetType(st)
	return seuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (seuo *SagaEntityUpdateOne) SetNillableType(st *schema.EntityType) *SagaEntityUpdateOne {
	if st != nil {
		seuo.SetType(*st)
	}
	return seuo
}

// SetStatus sets the "status" field.
func (seuo *SagaEntityUpdateOne) SetStatus(ss schema.EntityStatus) *SagaEntityUpdateOne {
	seuo.mutation.SetStatus(ss)
	return seuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (seuo *SagaEntityUpdateOne) SetNillableStatus(ss *schema.EntityStatus) *SagaEntityUpdateOne {
	if ss != nil {
		seuo.SetStatus(*ss)
	}
	return seuo
}

// SetStepID sets the "step_id" field.
func (seuo *SagaEntityUpdateOne) SetStepID(s string) *SagaEntityUpdateOne {
	seuo.mutation.SetStepID(s)
	return seuo
}

// SetNillableStepID sets the "step_id" field if the given value is not nil.
func (seuo *SagaEntityUpdateOne) SetNillableStepID(s *string) *SagaEntityUpdateOne {
	if s != nil {
		seuo.SetStepID(*s)
	}
	return seuo
}

// SetRunID sets the "run_id" field.
func (seuo *SagaEntityUpdateOne) SetRunID(si schema.RunID) *SagaEntityUpdateOne {
	seuo.mutation.ResetRunID()
	seuo.mutation.SetRunID(si)
	return seuo
}

// SetNillableRunID sets the "run_id" field if the given value is not nil.
func (seuo *SagaEntityUpdateOne) SetNillableRunID(si *schema.RunID) *SagaEntityUpdateOne {
	if si != nil {
		seuo.SetRunID(*si)
	}
	return seuo
}

// AddRunID adds si to the "run_id" field.
func (seuo *SagaEntityUpdateOne) AddRunID(si schema.RunID) *SagaEntityUpdateOne {
	seuo.mutation.AddRunID(si)
	return seuo
}

// SetRetryPolicy sets the "retry_policy" field.
func (seuo *SagaEntityUpdateOne) SetRetryPolicy(sp schema.RetryPolicy) *SagaEntityUpdateOne {
	seuo.mutation.SetRetryPolicy(sp)
	return seuo
}

// SetNillableRetryPolicy sets the "retry_policy" field if the given value is not nil.
func (seuo *SagaEntityUpdateOne) SetNillableRetryPolicy(sp *schema.RetryPolicy) *SagaEntityUpdateOne {
	if sp != nil {
		seuo.SetRetryPolicy(*sp)
	}
	return seuo
}

// SetRetryState sets the "retry_state" field.
func (seuo *SagaEntityUpdateOne) SetRetryState(ss schema.RetryState) *SagaEntityUpdateOne {
	seuo.mutation.SetRetryState(ss)
	return seuo
}

// SetNillableRetryState sets the "retry_state" field if the given value is not nil.
func (seuo *SagaEntityUpdateOne) SetNillableRetryState(ss *schema.RetryState) *SagaEntityUpdateOne {
	if ss != nil {
		seuo.SetRetryState(*ss)
	}
	return seuo
}

// SetCreatedAt sets the "created_at" field.
func (seuo *SagaEntityUpdateOne) SetCreatedAt(t time.Time) *SagaEntityUpdateOne {
	seuo.mutation.SetCreatedAt(t)
	return seuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (seuo *SagaEntityUpdateOne) SetNillableCreatedAt(t *time.Time) *SagaEntityUpdateOne {
	if t != nil {
		seuo.SetCreatedAt(*t)
	}
	return seuo
}

// SetUpdatedAt sets the "updated_at" field.
func (seuo *SagaEntityUpdateOne) SetUpdatedAt(t time.Time) *SagaEntityUpdateOne {
	seuo.mutation.SetUpdatedAt(t)
	return seuo
}

// SetWorkflowID sets the "workflow" edge to the WorkflowEntity entity by ID.
func (seuo *SagaEntityUpdateOne) SetWorkflowID(id schema.WorkflowEntityID) *SagaEntityUpdateOne {
	seuo.mutation.SetWorkflowID(id)
	return seuo
}

// SetWorkflow sets the "workflow" edge to the WorkflowEntity entity.
func (seuo *SagaEntityUpdateOne) SetWorkflow(w *WorkflowEntity) *SagaEntityUpdateOne {
	return seuo.SetWorkflowID(w.ID)
}

// SetSagaDataID sets the "saga_data" edge to the SagaData entity by ID.
func (seuo *SagaEntityUpdateOne) SetSagaDataID(id schema.SagaDataID) *SagaEntityUpdateOne {
	seuo.mutation.SetSagaDataID(id)
	return seuo
}

// SetNillableSagaDataID sets the "saga_data" edge to the SagaData entity by ID if the given value is not nil.
func (seuo *SagaEntityUpdateOne) SetNillableSagaDataID(id *schema.SagaDataID) *SagaEntityUpdateOne {
	if id != nil {
		seuo = seuo.SetSagaDataID(*id)
	}
	return seuo
}

// SetSagaData sets the "saga_data" edge to the SagaData entity.
func (seuo *SagaEntityUpdateOne) SetSagaData(s *SagaData) *SagaEntityUpdateOne {
	return seuo.SetSagaDataID(s.ID)
}

// AddExecutionIDs adds the "executions" edge to the SagaExecution entity by IDs.
func (seuo *SagaEntityUpdateOne) AddExecutionIDs(ids ...schema.SagaExecutionID) *SagaEntityUpdateOne {
	seuo.mutation.AddExecutionIDs(ids...)
	return seuo
}

// AddExecutions adds the "executions" edges to the SagaExecution entity.
func (seuo *SagaEntityUpdateOne) AddExecutions(s ...*SagaExecution) *SagaEntityUpdateOne {
	ids := make([]schema.SagaExecutionID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return seuo.AddExecutionIDs(ids...)
}

// AddValueIDs adds the "values" edge to the SagaValue entity by IDs.
func (seuo *SagaEntityUpdateOne) AddValueIDs(ids ...schema.SagaValueID) *SagaEntityUpdateOne {
	seuo.mutation.AddValueIDs(ids...)
	return seuo
}

// AddValues adds the "values" edges to the SagaValue entity.
func (seuo *SagaEntityUpdateOne) AddValues(s ...*SagaValue) *SagaEntityUpdateOne {
	ids := make([]schema.SagaValueID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return seuo.AddValueIDs(ids...)
}

// Mutation returns the SagaEntityMutation object of the builder.
func (seuo *SagaEntityUpdateOne) Mutation() *SagaEntityMutation {
	return seuo.mutation
}

// ClearWorkflow clears the "workflow" edge to the WorkflowEntity entity.
func (seuo *SagaEntityUpdateOne) ClearWorkflow() *SagaEntityUpdateOne {
	seuo.mutation.ClearWorkflow()
	return seuo
}

// ClearSagaData clears the "saga_data" edge to the SagaData entity.
func (seuo *SagaEntityUpdateOne) ClearSagaData() *SagaEntityUpdateOne {
	seuo.mutation.ClearSagaData()
	return seuo
}

// ClearExecutions clears all "executions" edges to the SagaExecution entity.
func (seuo *SagaEntityUpdateOne) ClearExecutions() *SagaEntityUpdateOne {
	seuo.mutation.ClearExecutions()
	return seuo
}

// RemoveExecutionIDs removes the "executions" edge to SagaExecution entities by IDs.
func (seuo *SagaEntityUpdateOne) RemoveExecutionIDs(ids ...schema.SagaExecutionID) *SagaEntityUpdateOne {
	seuo.mutation.RemoveExecutionIDs(ids...)
	return seuo
}

// RemoveExecutions removes "executions" edges to SagaExecution entities.
func (seuo *SagaEntityUpdateOne) RemoveExecutions(s ...*SagaExecution) *SagaEntityUpdateOne {
	ids := make([]schema.SagaExecutionID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return seuo.RemoveExecutionIDs(ids...)
}

// ClearValues clears all "values" edges to the SagaValue entity.
func (seuo *SagaEntityUpdateOne) ClearValues() *SagaEntityUpdateOne {
	seuo.mutation.ClearValues()
	return seuo
}

// RemoveValueIDs removes the "values" edge to SagaValue entities by IDs.
func (seuo *SagaEntityUpdateOne) RemoveValueIDs(ids ...schema.SagaValueID) *SagaEntityUpdateOne {
	seuo.mutation.RemoveValueIDs(ids...)
	return seuo
}

// RemoveValues removes "values" edges to SagaValue entities.
func (seuo *SagaEntityUpdateOne) RemoveValues(s ...*SagaValue) *SagaEntityUpdateOne {
	ids := make([]schema.SagaValueID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return seuo.RemoveValueIDs(ids...)
}

// Where appends a list predicates to the SagaEntityUpdate builder.
func (seuo *SagaEntityUpdateOne) Where(ps ...predicate.SagaEntity) *SagaEntityUpdateOne {
	seuo.mutation.Where(ps...)
	return seuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (seuo *SagaEntityUpdateOne) Select(field string, fields ...string) *SagaEntityUpdateOne {
	seuo.fields = append([]string{field}, fields...)
	return seuo
}

// Save executes the query and returns the updated SagaEntity entity.
func (seuo *SagaEntityUpdateOne) Save(ctx context.Context) (*SagaEntity, error) {
	seuo.defaults()
	return withHooks(ctx, seuo.sqlSave, seuo.mutation, seuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (seuo *SagaEntityUpdateOne) SaveX(ctx context.Context) *SagaEntity {
	node, err := seuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (seuo *SagaEntityUpdateOne) Exec(ctx context.Context) error {
	_, err := seuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (seuo *SagaEntityUpdateOne) ExecX(ctx context.Context) {
	if err := seuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (seuo *SagaEntityUpdateOne) defaults() {
	if _, ok := seuo.mutation.UpdatedAt(); !ok {
		v := sagaentity.UpdateDefaultUpdatedAt()
		seuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (seuo *SagaEntityUpdateOne) check() error {
	if seuo.mutation.WorkflowCleared() && len(seuo.mutation.WorkflowIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SagaEntity.workflow"`)
	}
	return nil
}

func (seuo *SagaEntityUpdateOne) sqlSave(ctx context.Context) (_node *SagaEntity, err error) {
	if err := seuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(sagaentity.Table, sagaentity.Columns, sqlgraph.NewFieldSpec(sagaentity.FieldID, field.TypeInt))
	id, ok := seuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SagaEntity.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := seuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sagaentity.FieldID)
		for _, f := range fields {
			if !sagaentity.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sagaentity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := seuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := seuo.mutation.HandlerName(); ok {
		_spec.SetField(sagaentity.FieldHandlerName, field.TypeString, value)
	}
	if value, ok := seuo.mutation.GetType(); ok {
		_spec.SetField(sagaentity.FieldType, field.TypeString, value)
	}
	if value, ok := seuo.mutation.Status(); ok {
		_spec.SetField(sagaentity.FieldStatus, field.TypeString, value)
	}
	if value, ok := seuo.mutation.StepID(); ok {
		_spec.SetField(sagaentity.FieldStepID, field.TypeString, value)
	}
	if value, ok := seuo.mutation.RunID(); ok {
		_spec.SetField(sagaentity.FieldRunID, field.TypeInt, value)
	}
	if value, ok := seuo.mutation.AddedRunID(); ok {
		_spec.AddField(sagaentity.FieldRunID, field.TypeInt, value)
	}
	if value, ok := seuo.mutation.RetryPolicy(); ok {
		_spec.SetField(sagaentity.FieldRetryPolicy, field.TypeJSON, value)
	}
	if value, ok := seuo.mutation.RetryState(); ok {
		_spec.SetField(sagaentity.FieldRetryState, field.TypeJSON, value)
	}
	if value, ok := seuo.mutation.CreatedAt(); ok {
		_spec.SetField(sagaentity.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := seuo.mutation.UpdatedAt(); ok {
		_spec.SetField(sagaentity.FieldUpdatedAt, field.TypeTime, value)
	}
	if seuo.mutation.WorkflowCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sagaentity.WorkflowTable,
			Columns: []string{sagaentity.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowentity.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := seuo.mutation.WorkflowIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sagaentity.WorkflowTable,
			Columns: []string{sagaentity.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowentity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if seuo.mutation.SagaDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   sagaentity.SagaDataTable,
			Columns: []string{sagaentity.SagaDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagadata.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := seuo.mutation.SagaDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   sagaentity.SagaDataTable,
			Columns: []string{sagaentity.SagaDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagadata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if seuo.mutation.ExecutionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sagaentity.ExecutionsTable,
			Columns: []string{sagaentity.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagaexecution.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := seuo.mutation.RemovedExecutionsIDs(); len(nodes) > 0 && !seuo.mutation.ExecutionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sagaentity.ExecutionsTable,
			Columns: []string{sagaentity.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagaexecution.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := seuo.mutation.ExecutionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sagaentity.ExecutionsTable,
			Columns: []string{sagaentity.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagaexecution.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if seuo.mutation.ValuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sagaentity.ValuesTable,
			Columns: []string{sagaentity.ValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagavalue.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := seuo.mutation.RemovedValuesIDs(); len(nodes) > 0 && !seuo.mutation.ValuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sagaentity.ValuesTable,
			Columns: []string{sagaentity.ValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagavalue.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := seuo.mutation.ValuesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sagaentity.ValuesTable,
			Columns: []string{sagaentity.ValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagavalue.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SagaEntity{config: seuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, seuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sagaentity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	seuo.mutation.done = true
	return _node, nil
}
