// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/tempolite/ent/activityexecution"
	"github.com/davidroman0O/tempolite/ent/activityexecutiondata"
	"github.com/davidroman0O/tempolite/ent/predicate"
	"github.com/davidroman0O/tempolite/ent/schema"
)

// ActivityExecutionDataQuery is the builder for querying ActivityExecutionData entities.
type ActivityExecutionDataQuery struct {
	config
	ctx           *QueryContext
	order         []activityexecutiondata.OrderOption
	inters        []Interceptor
	predicates    []predicate.ActivityExecutionData
	withExecution *ActivityExecutionQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ActivityExecutionDataQuery builder.
func (aedq *ActivityExecutionDataQuery) Where(ps ...predicate.ActivityExecutionData) *ActivityExecutionDataQuery {
	aedq.predicates = append(aedq.predicates, ps...)
	return aedq
}

// Limit the number of records to be returned by this query.
func (aedq *ActivityExecutionDataQuery) Limit(limit int) *ActivityExecutionDataQuery {
	aedq.ctx.Limit = &limit
	return aedq
}

// Offset to start from.
func (aedq *ActivityExecutionDataQuery) Offset(offset int) *ActivityExecutionDataQuery {
	aedq.ctx.Offset = &offset
	return aedq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (aedq *ActivityExecutionDataQuery) Unique(unique bool) *ActivityExecutionDataQuery {
	aedq.ctx.Unique = &unique
	return aedq
}

// Order specifies how the records should be ordered.
func (aedq *ActivityExecutionDataQuery) Order(o ...activityexecutiondata.OrderOption) *ActivityExecutionDataQuery {
	aedq.order = append(aedq.order, o...)
	return aedq
}

// QueryExecution chains the current query on the "execution" edge.
func (aedq *ActivityExecutionDataQuery) QueryExecution() *ActivityExecutionQuery {
	query := (&ActivityExecutionClient{config: aedq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aedq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aedq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(activityexecutiondata.Table, activityexecutiondata.FieldID, selector),
			sqlgraph.To(activityexecution.Table, activityexecution.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, activityexecutiondata.ExecutionTable, activityexecutiondata.ExecutionColumn),
		)
		fromU = sqlgraph.SetNeighbors(aedq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ActivityExecutionData entity from the query.
// Returns a *NotFoundError when no ActivityExecutionData was found.
func (aedq *ActivityExecutionDataQuery) First(ctx context.Context) (*ActivityExecutionData, error) {
	nodes, err := aedq.Limit(1).All(setContextOp(ctx, aedq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{activityexecutiondata.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (aedq *ActivityExecutionDataQuery) FirstX(ctx context.Context) *ActivityExecutionData {
	node, err := aedq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ActivityExecutionData ID from the query.
// Returns a *NotFoundError when no ActivityExecutionData ID was found.
func (aedq *ActivityExecutionDataQuery) FirstID(ctx context.Context) (id schema.ActivityExecutionDataID, err error) {
	var ids []schema.ActivityExecutionDataID
	if ids, err = aedq.Limit(1).IDs(setContextOp(ctx, aedq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{activityexecutiondata.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (aedq *ActivityExecutionDataQuery) FirstIDX(ctx context.Context) schema.ActivityExecutionDataID {
	id, err := aedq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ActivityExecutionData entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ActivityExecutionData entity is found.
// Returns a *NotFoundError when no ActivityExecutionData entities are found.
func (aedq *ActivityExecutionDataQuery) Only(ctx context.Context) (*ActivityExecutionData, error) {
	nodes, err := aedq.Limit(2).All(setContextOp(ctx, aedq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{activityexecutiondata.Label}
	default:
		return nil, &NotSingularError{activityexecutiondata.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (aedq *ActivityExecutionDataQuery) OnlyX(ctx context.Context) *ActivityExecutionData {
	node, err := aedq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ActivityExecutionData ID in the query.
// Returns a *NotSingularError when more than one ActivityExecutionData ID is found.
// Returns a *NotFoundError when no entities are found.
func (aedq *ActivityExecutionDataQuery) OnlyID(ctx context.Context) (id schema.ActivityExecutionDataID, err error) {
	var ids []schema.ActivityExecutionDataID
	if ids, err = aedq.Limit(2).IDs(setContextOp(ctx, aedq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{activityexecutiondata.Label}
	default:
		err = &NotSingularError{activityexecutiondata.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (aedq *ActivityExecutionDataQuery) OnlyIDX(ctx context.Context) schema.ActivityExecutionDataID {
	id, err := aedq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ActivityExecutionDataSlice.
func (aedq *ActivityExecutionDataQuery) All(ctx context.Context) ([]*ActivityExecutionData, error) {
	ctx = setContextOp(ctx, aedq.ctx, ent.OpQueryAll)
	if err := aedq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ActivityExecutionData, *ActivityExecutionDataQuery]()
	return withInterceptors[[]*ActivityExecutionData](ctx, aedq, qr, aedq.inters)
}

// AllX is like All, but panics if an error occurs.
func (aedq *ActivityExecutionDataQuery) AllX(ctx context.Context) []*ActivityExecutionData {
	nodes, err := aedq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ActivityExecutionData IDs.
func (aedq *ActivityExecutionDataQuery) IDs(ctx context.Context) (ids []schema.ActivityExecutionDataID, err error) {
	if aedq.ctx.Unique == nil && aedq.path != nil {
		aedq.Unique(true)
	}
	ctx = setContextOp(ctx, aedq.ctx, ent.OpQueryIDs)
	if err = aedq.Select(activityexecutiondata.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (aedq *ActivityExecutionDataQuery) IDsX(ctx context.Context) []schema.ActivityExecutionDataID {
	ids, err := aedq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (aedq *ActivityExecutionDataQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, aedq.ctx, ent.OpQueryCount)
	if err := aedq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, aedq, querierCount[*ActivityExecutionDataQuery](), aedq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (aedq *ActivityExecutionDataQuery) CountX(ctx context.Context) int {
	count, err := aedq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (aedq *ActivityExecutionDataQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, aedq.ctx, ent.OpQueryExist)
	switch _, err := aedq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (aedq *ActivityExecutionDataQuery) ExistX(ctx context.Context) bool {
	exist, err := aedq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ActivityExecutionDataQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (aedq *ActivityExecutionDataQuery) Clone() *ActivityExecutionDataQuery {
	if aedq == nil {
		return nil
	}
	return &ActivityExecutionDataQuery{
		config:        aedq.config,
		ctx:           aedq.ctx.Clone(),
		order:         append([]activityexecutiondata.OrderOption{}, aedq.order...),
		inters:        append([]Interceptor{}, aedq.inters...),
		predicates:    append([]predicate.ActivityExecutionData{}, aedq.predicates...),
		withExecution: aedq.withExecution.Clone(),
		// clone intermediate query.
		sql:  aedq.sql.Clone(),
		path: aedq.path,
	}
}

// WithExecution tells the query-builder to eager-load the nodes that are connected to
// the "execution" edge. The optional arguments are used to configure the query builder of the edge.
func (aedq *ActivityExecutionDataQuery) WithExecution(opts ...func(*ActivityExecutionQuery)) *ActivityExecutionDataQuery {
	query := (&ActivityExecutionClient{config: aedq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aedq.withExecution = query
	return aedq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ExecutionID schema.ActivityExecutionID `json:"execution_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ActivityExecutionData.Query().
//		GroupBy(activityexecutiondata.FieldExecutionID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (aedq *ActivityExecutionDataQuery) GroupBy(field string, fields ...string) *ActivityExecutionDataGroupBy {
	aedq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ActivityExecutionDataGroupBy{build: aedq}
	grbuild.flds = &aedq.ctx.Fields
	grbuild.label = activityexecutiondata.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ExecutionID schema.ActivityExecutionID `json:"execution_id,omitempty"`
//	}
//
//	client.ActivityExecutionData.Query().
//		Select(activityexecutiondata.FieldExecutionID).
//		Scan(ctx, &v)
func (aedq *ActivityExecutionDataQuery) Select(fields ...string) *ActivityExecutionDataSelect {
	aedq.ctx.Fields = append(aedq.ctx.Fields, fields...)
	sbuild := &ActivityExecutionDataSelect{ActivityExecutionDataQuery: aedq}
	sbuild.label = activityexecutiondata.Label
	sbuild.flds, sbuild.scan = &aedq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ActivityExecutionDataSelect configured with the given aggregations.
func (aedq *ActivityExecutionDataQuery) Aggregate(fns ...AggregateFunc) *ActivityExecutionDataSelect {
	return aedq.Select().Aggregate(fns...)
}

func (aedq *ActivityExecutionDataQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range aedq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, aedq); err != nil {
				return err
			}
		}
	}
	for _, f := range aedq.ctx.Fields {
		if !activityexecutiondata.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if aedq.path != nil {
		prev, err := aedq.path(ctx)
		if err != nil {
			return err
		}
		aedq.sql = prev
	}
	return nil
}

func (aedq *ActivityExecutionDataQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ActivityExecutionData, error) {
	var (
		nodes       = []*ActivityExecutionData{}
		_spec       = aedq.querySpec()
		loadedTypes = [1]bool{
			aedq.withExecution != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ActivityExecutionData).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ActivityExecutionData{config: aedq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, aedq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := aedq.withExecution; query != nil {
		if err := aedq.loadExecution(ctx, query, nodes, nil,
			func(n *ActivityExecutionData, e *ActivityExecution) { n.Edges.Execution = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (aedq *ActivityExecutionDataQuery) loadExecution(ctx context.Context, query *ActivityExecutionQuery, nodes []*ActivityExecutionData, init func(*ActivityExecutionData), assign func(*ActivityExecutionData, *ActivityExecution)) error {
	ids := make([]schema.ActivityExecutionID, 0, len(nodes))
	nodeids := make(map[schema.ActivityExecutionID][]*ActivityExecutionData)
	for i := range nodes {
		fk := nodes[i].ExecutionID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(activityexecution.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "execution_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (aedq *ActivityExecutionDataQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := aedq.querySpec()
	_spec.Node.Columns = aedq.ctx.Fields
	if len(aedq.ctx.Fields) > 0 {
		_spec.Unique = aedq.ctx.Unique != nil && *aedq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, aedq.driver, _spec)
}

func (aedq *ActivityExecutionDataQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(activityexecutiondata.Table, activityexecutiondata.Columns, sqlgraph.NewFieldSpec(activityexecutiondata.FieldID, field.TypeInt))
	_spec.From = aedq.sql
	if unique := aedq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if aedq.path != nil {
		_spec.Unique = true
	}
	if fields := aedq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, activityexecutiondata.FieldID)
		for i := range fields {
			if fields[i] != activityexecutiondata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if aedq.withExecution != nil {
			_spec.Node.AddColumnOnce(activityexecutiondata.FieldExecutionID)
		}
	}
	if ps := aedq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := aedq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := aedq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := aedq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (aedq *ActivityExecutionDataQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(aedq.driver.Dialect())
	t1 := builder.Table(activityexecutiondata.Table)
	columns := aedq.ctx.Fields
	if len(columns) == 0 {
		columns = activityexecutiondata.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if aedq.sql != nil {
		selector = aedq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if aedq.ctx.Unique != nil && *aedq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range aedq.predicates {
		p(selector)
	}
	for _, p := range aedq.order {
		p(selector)
	}
	if offset := aedq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := aedq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ActivityExecutionDataGroupBy is the group-by builder for ActivityExecutionData entities.
type ActivityExecutionDataGroupBy struct {
	selector
	build *ActivityExecutionDataQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (aedgb *ActivityExecutionDataGroupBy) Aggregate(fns ...AggregateFunc) *ActivityExecutionDataGroupBy {
	aedgb.fns = append(aedgb.fns, fns...)
	return aedgb
}

// Scan applies the selector query and scans the result into the given value.
func (aedgb *ActivityExecutionDataGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, aedgb.build.ctx, ent.OpQueryGroupBy)
	if err := aedgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ActivityExecutionDataQuery, *ActivityExecutionDataGroupBy](ctx, aedgb.build, aedgb, aedgb.build.inters, v)
}

func (aedgb *ActivityExecutionDataGroupBy) sqlScan(ctx context.Context, root *ActivityExecutionDataQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(aedgb.fns))
	for _, fn := range aedgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*aedgb.flds)+len(aedgb.fns))
		for _, f := range *aedgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*aedgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := aedgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ActivityExecutionDataSelect is the builder for selecting fields of ActivityExecutionData entities.
type ActivityExecutionDataSelect struct {
	*ActivityExecutionDataQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (aeds *ActivityExecutionDataSelect) Aggregate(fns ...AggregateFunc) *ActivityExecutionDataSelect {
	aeds.fns = append(aeds.fns, fns...)
	return aeds
}

// Scan applies the selector query and scans the result into the given value.
func (aeds *ActivityExecutionDataSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, aeds.ctx, ent.OpQuerySelect)
	if err := aeds.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ActivityExecutionDataQuery, *ActivityExecutionDataSelect](ctx, aeds.ActivityExecutionDataQuery, aeds, aeds.inters, v)
}

func (aeds *ActivityExecutionDataSelect) sqlScan(ctx context.Context, root *ActivityExecutionDataQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(aeds.fns))
	for _, fn := range aeds.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*aeds.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := aeds.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
