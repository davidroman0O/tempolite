// Code generated by ent, DO NOT EDIT.

package eventlog

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/davidroman0O/tempolite/ent/predicate"
	"github.com/davidroman0O/tempolite/ent/schema"
)

// ID filters vertices based on their ID field.
func ID(id schema.EventLogID) predicate.EventLog {
	return predicate.EventLog(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id schema.EventLogID) predicate.EventLog {
	return predicate.EventLog(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id schema.EventLogID) predicate.EventLog {
	return predicate.EventLog(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...schema.EventLogID) predicate.EventLog {
	return predicate.EventLog(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...schema.EventLogID) predicate.EventLog {
	return predicate.EventLog(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id schema.EventLogID) predicate.EventLog {
	return predicate.EventLog(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id schema.EventLogID) predicate.EventLog {
	return predicate.EventLog(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id schema.EventLogID) predicate.EventLog {
	return predicate.EventLog(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id schema.EventLogID) predicate.EventLog {
	return predicate.EventLog(sql.FieldLTE(FieldID, id))
}

// Timestamp applies equality check predicate on the "timestamp" field. It's identical to TimestampEQ.
func Timestamp(v time.Time) predicate.EventLog {
	return predicate.EventLog(sql.FieldEQ(FieldTimestamp, v))
}

// EventType applies equality check predicate on the "event_type" field. It's identical to EventTypeEQ.
func EventType(v schema.EventType) predicate.EventLog {
	vc := string(v)
	return predicate.EventLog(sql.FieldEQ(FieldEventType, vc))
}

// RunID applies equality check predicate on the "run_id" field. It's identical to RunIDEQ.
func RunID(v schema.RunID) predicate.EventLog {
	vc := int(v)
	return predicate.EventLog(sql.FieldEQ(FieldRunID, vc))
}

// WorkflowID applies equality check predicate on the "workflow_id" field. It's identical to WorkflowIDEQ.
func WorkflowID(v schema.WorkflowEntityID) predicate.EventLog {
	vc := int(v)
	return predicate.EventLog(sql.FieldEQ(FieldWorkflowID, vc))
}

// WorkflowExecutionID applies equality check predicate on the "workflow_execution_id" field. It's identical to WorkflowExecutionIDEQ.
func WorkflowExecutionID(v schema.WorkflowExecutionID) predicate.EventLog {
	vc := int(v)
	return predicate.EventLog(sql.FieldEQ(FieldWorkflowExecutionID, vc))
}

// EntityID applies equality check predicate on the "entity_id" field. It's identical to EntityIDEQ.
func EntityID(v int) predicate.EventLog {
	return predicate.EventLog(sql.FieldEQ(FieldEntityID, v))
}

// ExecutionID applies equality check predicate on the "execution_id" field. It's identical to ExecutionIDEQ.
func ExecutionID(v int) predicate.EventLog {
	return predicate.EventLog(sql.FieldEQ(FieldExecutionID, v))
}

// EntityType applies equality check predicate on the "entity_type" field. It's identical to EntityTypeEQ.
func EntityType(v schema.EntityType) predicate.EventLog {
	vc := string(v)
	return predicate.EventLog(sql.FieldEQ(FieldEntityType, vc))
}

// StepID applies equality check predicate on the "step_id" field. It's identical to StepIDEQ.
func StepID(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldEQ(FieldStepID, v))
}

// HandlerName applies equality check predicate on the "handler_name" field. It's identical to HandlerNameEQ.
func HandlerName(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldEQ(FieldHandlerName, v))
}

// QueueName applies equality check predicate on the "queue_name" field. It's identical to QueueNameEQ.
func QueueName(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldEQ(FieldQueueName, v))
}

// Error applies equality check predicate on the "error" field. It's identical to ErrorEQ.
func Error(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldEQ(FieldError, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.EventLog {
	return predicate.EventLog(sql.FieldEQ(FieldCreatedAt, v))
}

// TimestampEQ applies the EQ predicate on the "timestamp" field.
func TimestampEQ(v time.Time) predicate.EventLog {
	return predicate.EventLog(sql.FieldEQ(FieldTimestamp, v))
}

// TimestampNEQ applies the NEQ predicate on the "timestamp" field.
func TimestampNEQ(v time.Time) predicate.EventLog {
	return predicate.EventLog(sql.FieldNEQ(FieldTimestamp, v))
}

// TimestampIn applies the In predicate on the "timestamp" field.
func TimestampIn(vs ...time.Time) predicate.EventLog {
	return predicate.EventLog(sql.FieldIn(FieldTimestamp, vs...))
}

// TimestampNotIn applies the NotIn predicate on the "timestamp" field.
func TimestampNotIn(vs ...time.Time) predicate.EventLog {
	return predicate.EventLog(sql.FieldNotIn(FieldTimestamp, vs...))
}

// TimestampGT applies the GT predicate on the "timestamp" field.
func TimestampGT(v time.Time) predicate.EventLog {
	return predicate.EventLog(sql.FieldGT(FieldTimestamp, v))
}

// TimestampGTE applies the GTE predicate on the "timestamp" field.
func TimestampGTE(v time.Time) predicate.EventLog {
	return predicate.EventLog(sql.FieldGTE(FieldTimestamp, v))
}

// TimestampLT applies the LT predicate on the "timestamp" field.
func TimestampLT(v time.Time) predicate.EventLog {
	return predicate.EventLog(sql.FieldLT(FieldTimestamp, v))
}

// TimestampLTE applies the LTE predicate on the "timestamp" field.
func TimestampLTE(v time.Time) predicate.EventLog {
	return predicate.EventLog(sql.FieldLTE(FieldTimestamp, v))
}

// EventTypeEQ applies the EQ predicate on the "event_type" field.
func EventTypeEQ(v schema.EventType) predicate.EventLog {
	vc := string(v)
	return predicate.EventLog(sql.FieldEQ(FieldEventType, vc))
}

// EventTypeNEQ applies the NEQ predicate on the "event_type" field.
func EventTypeNEQ(v schema.EventType) predicate.EventLog {
	vc := string(v)
	return predicate.EventLog(sql.FieldNEQ(FieldEventType, vc))
}

// EventTypeIn applies the In predicate on the "event_type" field.
func EventTypeIn(vs ...schema.EventType) predicate.EventLog {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.EventLog(sql.FieldIn(FieldEventType, v...))
}

// EventTypeNotIn applies the NotIn predicate on the "event_type" field.
func EventTypeNotIn(vs ...schema.EventType) predicate.EventLog {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.EventLog(sql.FieldNotIn(FieldEventType, v...))
}

// EventTypeGT applies the GT predicate on the "event_type" field.
func EventTypeGT(v schema.EventType) predicate.EventLog {
	vc := string(v)
	return predicate.EventLog(sql.FieldGT(FieldEventType, vc))
}

// EventTypeGTE applies the GTE predicate on the "event_type" field.
func EventTypeGTE(v schema.EventType) predicate.EventLog {
	vc := string(v)
	return predicate.EventLog(sql.FieldGTE(FieldEventType, vc))
}

// EventTypeLT applies the LT predicate on the "event_type" field.
func EventTypeLT(v schema.EventType) predicate.EventLog {
	vc := string(v)
	return predicate.EventLog(sql.FieldLT(FieldEventType, vc))
}

// EventTypeLTE applies the LTE predicate on the "event_type" field.
func EventTypeLTE(v schema.EventType) predicate.EventLog {
	vc := string(v)
	return predicate.EventLog(sql.FieldLTE(FieldEventType, vc))
}

// EventTypeContains applies the Contains predicate on the "event_type" field.
func EventTypeContains(v schema.EventType) predicate.EventLog {
	vc := string(v)
	return predicate.EventLog(sql.FieldContains(FieldEventType, vc))
}

// EventTypeHasPrefix applies the HasPrefix predicate on the "event_type" field.
func EventTypeHasPrefix(v schema.EventType) predicate.EventLog {
	vc := string(v)
	return predicate.EventLog(sql.FieldHasPrefix(FieldEventType, vc))
}

// EventTypeHasSuffix applies the HasSuffix predicate on the "event_type" field.
func EventTypeHasSuffix(v schema.EventType) predicate.EventLog {
	vc := string(v)
	return predicate.EventLog(sql.FieldHasSuffix(FieldEventType, vc))
}

// EventTypeEqualFold applies the EqualFold predicate on the "event_type" field.
func EventTypeEqualFold(v schema.EventType) predicate.EventLog {
	vc := string(v)
	return predicate.EventLog(sql.FieldEqualFold(FieldEventType, vc))
}

// EventTypeContainsFold applies the ContainsFold predicate on the "event_type" field.
func EventTypeContainsFold(v schema.EventType) predicate.EventLog {
	vc := string(v)
	return predicate.EventLog(sql.FieldContainsFold(FieldEventType, vc))
}

// RunIDEQ applies the EQ predicate on the "run_id" field.
func RunIDEQ(v schema.RunID) predicate.EventLog {
	vc := int(v)
	return predicate.EventLog(sql.FieldEQ(FieldRunID, vc))
}

// RunIDNEQ applies the NEQ predicate on the "run_id" field.
func RunIDNEQ(v schema.RunID) predicate.EventLog {
	vc := int(v)
	return predicate.EventLog(sql.FieldNEQ(FieldRunID, vc))
}

// RunIDIn applies the In predicate on the "run_id" field.
func RunIDIn(vs ...schema.RunID) predicate.EventLog {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int(vs[i])
	}
	return predicate.EventLog(sql.FieldIn(FieldRunID, v...))
}

// RunIDNotIn applies the NotIn predicate on the "run_id" field.
func RunIDNotIn(vs ...schema.RunID) predicate.EventLog {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int(vs[i])
	}
	return predicate.EventLog(sql.FieldNotIn(FieldRunID, v...))
}

// RunIDIsNil applies the IsNil predicate on the "run_id" field.
func RunIDIsNil() predicate.EventLog {
	return predicate.EventLog(sql.FieldIsNull(FieldRunID))
}

// RunIDNotNil applies the NotNil predicate on the "run_id" field.
func RunIDNotNil() predicate.EventLog {
	return predicate.EventLog(sql.FieldNotNull(FieldRunID))
}

// WorkflowIDEQ applies the EQ predicate on the "workflow_id" field.
func WorkflowIDEQ(v schema.WorkflowEntityID) predicate.EventLog {
	vc := int(v)
	return predicate.EventLog(sql.FieldEQ(FieldWorkflowID, vc))
}

// WorkflowIDNEQ applies the NEQ predicate on the "workflow_id" field.
func WorkflowIDNEQ(v schema.WorkflowEntityID) predicate.EventLog {
	vc := int(v)
	return predicate.EventLog(sql.FieldNEQ(FieldWorkflowID, vc))
}

// WorkflowIDIn applies the In predicate on the "workflow_id" field.
func WorkflowIDIn(vs ...schema.WorkflowEntityID) predicate.EventLog {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int(vs[i])
	}
	return predicate.EventLog(sql.FieldIn(FieldWorkflowID, v...))
}

// WorkflowIDNotIn applies the NotIn predicate on the "workflow_id" field.
func WorkflowIDNotIn(vs ...schema.WorkflowEntityID) predicate.EventLog {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int(vs[i])
	}
	return predicate.EventLog(sql.FieldNotIn(FieldWorkflowID, v...))
}

// WorkflowIDIsNil applies the IsNil predicate on the "workflow_id" field.
func WorkflowIDIsNil() predicate.EventLog {
	return predicate.EventLog(sql.FieldIsNull(FieldWorkflowID))
}

// WorkflowIDNotNil applies the NotNil predicate on the "workflow_id" field.
func WorkflowIDNotNil() predicate.EventLog {
	return predicate.EventLog(sql.FieldNotNull(FieldWorkflowID))
}

// WorkflowExecutionIDEQ applies the EQ predicate on the "workflow_execution_id" field.
func WorkflowExecutionIDEQ(v schema.WorkflowExecutionID) predicate.EventLog {
	vc := int(v)
	return predicate.EventLog(sql.FieldEQ(FieldWorkflowExecutionID, vc))
}

// WorkflowExecutionIDNEQ applies the NEQ predicate on the "workflow_execution_id" field.
func WorkflowExecutionIDNEQ(v schema.WorkflowExecutionID) predicate.EventLog {
	vc := int(v)
	return predicate.EventLog(sql.FieldNEQ(FieldWorkflowExecutionID, vc))
}

// WorkflowExecutionIDIn applies the In predicate on the "workflow_execution_id" field.
func WorkflowExecutionIDIn(vs ...schema.WorkflowExecutionID) predicate.EventLog {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int(vs[i])
	}
	return predicate.EventLog(sql.FieldIn(FieldWorkflowExecutionID, v...))
}

// WorkflowExecutionIDNotIn applies the NotIn predicate on the "workflow_execution_id" field.
func WorkflowExecutionIDNotIn(vs ...schema.WorkflowExecutionID) predicate.EventLog {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int(vs[i])
	}
	return predicate.EventLog(sql.FieldNotIn(FieldWorkflowExecutionID, v...))
}

// WorkflowExecutionIDIsNil applies the IsNil predicate on the "workflow_execution_id" field.
func WorkflowExecutionIDIsNil() predicate.EventLog {
	return predicate.EventLog(sql.FieldIsNull(FieldWorkflowExecutionID))
}

// WorkflowExecutionIDNotNil applies the NotNil predicate on the "workflow_execution_id" field.
func WorkflowExecutionIDNotNil() predicate.EventLog {
	return predicate.EventLog(sql.FieldNotNull(FieldWorkflowExecutionID))
}

// EntityIDEQ applies the EQ predicate on the "entity_id" field.
func EntityIDEQ(v int) predicate.EventLog {
	return predicate.EventLog(sql.FieldEQ(FieldEntityID, v))
}

// EntityIDNEQ applies the NEQ predicate on the "entity_id" field.
func EntityIDNEQ(v int) predicate.EventLog {
	return predicate.EventLog(sql.FieldNEQ(FieldEntityID, v))
}

// EntityIDIn applies the In predicate on the "entity_id" field.
func EntityIDIn(vs ...int) predicate.EventLog {
	return predicate.EventLog(sql.FieldIn(FieldEntityID, vs...))
}

// EntityIDNotIn applies the NotIn predicate on the "entity_id" field.
func EntityIDNotIn(vs ...int) predicate.EventLog {
	return predicate.EventLog(sql.FieldNotIn(FieldEntityID, vs...))
}

// EntityIDGT applies the GT predicate on the "entity_id" field.
func EntityIDGT(v int) predicate.EventLog {
	return predicate.EventLog(sql.FieldGT(FieldEntityID, v))
}

// EntityIDGTE applies the GTE predicate on the "entity_id" field.
func EntityIDGTE(v int) predicate.EventLog {
	return predicate.EventLog(sql.FieldGTE(FieldEntityID, v))
}

// EntityIDLT applies the LT predicate on the "entity_id" field.
func EntityIDLT(v int) predicate.EventLog {
	return predicate.EventLog(sql.FieldLT(FieldEntityID, v))
}

// EntityIDLTE applies the LTE predicate on the "entity_id" field.
func EntityIDLTE(v int) predicate.EventLog {
	return predicate.EventLog(sql.FieldLTE(FieldEntityID, v))
}

// EntityIDIsNil applies the IsNil predicate on the "entity_id" field.
func EntityIDIsNil() predicate.EventLog {
	return predicate.EventLog(sql.FieldIsNull(FieldEntityID))
}

// EntityIDNotNil applies the NotNil predicate on the "entity_id" field.
func EntityIDNotNil() predicate.EventLog {
	return predicate.EventLog(sql.FieldNotNull(FieldEntityID))
}

// ExecutionIDEQ applies the EQ predicate on the "execution_id" field.
func ExecutionIDEQ(v int) predicate.EventLog {
	return predicate.EventLog(sql.FieldEQ(FieldExecutionID, v))
}

// ExecutionIDNEQ applies the NEQ predicate on the "execution_id" field.
func ExecutionIDNEQ(v int) predicate.EventLog {
	return predicate.EventLog(sql.FieldNEQ(FieldExecutionID, v))
}

// ExecutionIDIn applies the In predicate on the "execution_id" field.
func ExecutionIDIn(vs ...int) predicate.EventLog {
	return predicate.EventLog(sql.FieldIn(FieldExecutionID, vs...))
}

// ExecutionIDNotIn applies the NotIn predicate on the "execution_id" field.
func ExecutionIDNotIn(vs ...int) predicate.EventLog {
	return predicate.EventLog(sql.FieldNotIn(FieldExecutionID, vs...))
}

// ExecutionIDGT applies the GT predicate on the "execution_id" field.
func ExecutionIDGT(v int) predicate.EventLog {
	return predicate.EventLog(sql.FieldGT(FieldExecutionID, v))
}

// ExecutionIDGTE applies the GTE predicate on the "execution_id" field.
func ExecutionIDGTE(v int) predicate.EventLog {
	return predicate.EventLog(sql.FieldGTE(FieldExecutionID, v))
}

// ExecutionIDLT applies the LT predicate on the "execution_id" field.
func ExecutionIDLT(v int) predicate.EventLog {
	return predicate.EventLog(sql.FieldLT(FieldExecutionID, v))
}

// ExecutionIDLTE applies the LTE predicate on the "execution_id" field.
func ExecutionIDLTE(v int) predicate.EventLog {
	return predicate.EventLog(sql.FieldLTE(FieldExecutionID, v))
}

// ExecutionIDIsNil applies the IsNil predicate on the "execution_id" field.
func ExecutionIDIsNil() predicate.EventLog {
	return predicate.EventLog(sql.FieldIsNull(FieldExecutionID))
}

// ExecutionIDNotNil applies the NotNil predicate on the "execution_id" field.
func ExecutionIDNotNil() predicate.EventLog {
	return predicate.EventLog(sql.FieldNotNull(FieldExecutionID))
}

// EntityTypeEQ applies the EQ predicate on the "entity_type" field.
func EntityTypeEQ(v schema.EntityType) predicate.EventLog {
	vc := string(v)
	return predicate.EventLog(sql.FieldEQ(FieldEntityType, vc))
}

// EntityTypeNEQ applies the NEQ predicate on the "entity_type" field.
func EntityTypeNEQ(v schema.EntityType) predicate.EventLog {
	vc := string(v)
	return predicate.EventLog(sql.FieldNEQ(FieldEntityType, vc))
}

// EntityTypeIn applies the In predicate on the "entity_type" field.
func EntityTypeIn(vs ...schema.EntityType) predicate.EventLog {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.EventLog(sql.FieldIn(FieldEntityType, v...))
}

// EntityTypeNotIn applies the NotIn predicate on the "entity_type" field.
func EntityTypeNotIn(vs ...schema.EntityType) predicate.EventLog {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.EventLog(sql.FieldNotIn(FieldEntityType, v...))
}

// EntityTypeGT applies the GT predicate on the "entity_type" field.
func EntityTypeGT(v schema.EntityType) predicate.EventLog {
	vc := string(v)
	return predicate.EventLog(sql.FieldGT(FieldEntityType, vc))
}

// EntityTypeGTE applies the GTE predicate on the "entity_type" field.
func EntityTypeGTE(v schema.EntityType) predicate.EventLog {
	vc := string(v)
	return predicate.EventLog(sql.FieldGTE(FieldEntityType, vc))
}

// EntityTypeLT applies the LT predicate on the "entity_type" field.
func EntityTypeLT(v schema.EntityType) predicate.EventLog {
	vc := string(v)
	return predicate.EventLog(sql.FieldLT(FieldEntityType, vc))
}

// EntityTypeLTE applies the LTE predicate on the "entity_type" field.
func EntityTypeLTE(v schema.EntityType) predicate.EventLog {
	vc := string(v)
	return predicate.EventLog(sql.FieldLTE(FieldEntityType, vc))
}

// EntityTypeContains applies the Contains predicate on the "entity_type" field.
func EntityTypeContains(v schema.EntityType) predicate.EventLog {
	vc := string(v)
	return predicate.EventLog(sql.FieldContains(FieldEntityType, vc))
}

// EntityTypeHasPrefix applies the HasPrefix predicate on the "entity_type" field.
func EntityTypeHasPrefix(v schema.EntityType) predicate.EventLog {
	vc := string(v)
	return predicate.EventLog(sql.FieldHasPrefix(FieldEntityType, vc))
}

// EntityTypeHasSuffix applies the HasSuffix predicate on the "entity_type" field.
func EntityTypeHasSuffix(v schema.EntityType) predicate.EventLog {
	vc := string(v)
	return predicate.EventLog(sql.FieldHasSuffix(FieldEntityType, vc))
}

// EntityTypeIsNil applies the IsNil predicate on the "entity_type" field.
func EntityTypeIsNil() predicate.EventLog {
	return predicate.EventLog(sql.FieldIsNull(FieldEntityType))
}

// EntityTypeNotNil applies the NotNil predicate on the "entity_type" field.
func EntityTypeNotNil() predicate.EventLog {
	return predicate.EventLog(sql.FieldNotNull(FieldEntityType))
}

// EntityTypeEqualFold applies the EqualFold predicate on the "entity_type" field.
func EntityTypeEqualFold(v schema.EntityType) predicate.EventLog {
	vc := string(v)
	return predicate.EventLog(sql.FieldEqualFold(FieldEntityType, vc))
}

// EntityTypeContainsFold applies the ContainsFold predicate on the "entity_type" field.
func EntityTypeContainsFold(v schema.EntityType) predicate.EventLog {
	vc := string(v)
	return predicate.EventLog(sql.FieldContainsFold(FieldEntityType, vc))
}

// StepIDEQ applies the EQ predicate on the "step_id" field.
func StepIDEQ(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldEQ(FieldStepID, v))
}

// StepIDNEQ applies the NEQ predicate on the "step_id" field.
func StepIDNEQ(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldNEQ(FieldStepID, v))
}

// StepIDIn applies the In predicate on the "step_id" field.
func StepIDIn(vs ...string) predicate.EventLog {
	return predicate.EventLog(sql.FieldIn(FieldStepID, vs...))
}

// StepIDNotIn applies the NotIn predicate on the "step_id" field.
func StepIDNotIn(vs ...string) predicate.EventLog {
	return predicate.EventLog(sql.FieldNotIn(FieldStepID, vs...))
}

// StepIDGT applies the GT predicate on the "step_id" field.
func StepIDGT(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldGT(FieldStepID, v))
}

// StepIDGTE applies the GTE predicate on the "step_id" field.
func StepIDGTE(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldGTE(FieldStepID, v))
}

// StepIDLT applies the LT predicate on the "step_id" field.
func StepIDLT(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldLT(FieldStepID, v))
}

// StepIDLTE applies the LTE predicate on the "step_id" field.
func StepIDLTE(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldLTE(FieldStepID, v))
}

// StepIDContains applies the Contains predicate on the "step_id" field.
func StepIDContains(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldContains(FieldStepID, v))
}

// StepIDHasPrefix applies the HasPrefix predicate on the "step_id" field.
func StepIDHasPrefix(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldHasPrefix(FieldStepID, v))
}

// StepIDHasSuffix applies the HasSuffix predicate on the "step_id" field.
func StepIDHasSuffix(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldHasSuffix(FieldStepID, v))
}

// StepIDIsNil applies the IsNil predicate on the "step_id" field.
func StepIDIsNil() predicate.EventLog {
	return predicate.EventLog(sql.FieldIsNull(FieldStepID))
}

// StepIDNotNil applies the NotNil predicate on the "step_id" field.
func StepIDNotNil() predicate.EventLog {
	return predicate.EventLog(sql.FieldNotNull(FieldStepID))
}

// StepIDEqualFold applies the EqualFold predicate on the "step_id" field.
func StepIDEqualFold(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldEqualFold(FieldStepID, v))
}

// StepIDContainsFold applies the ContainsFold predicate on the "step_id" field.
func StepIDContainsFold(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldContainsFold(FieldStepID, v))
}

// HandlerNameEQ applies the EQ predicate on the "handler_name" field.
func HandlerNameEQ(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldEQ(FieldHandlerName, v))
}

// HandlerNameNEQ applies the NEQ predicate on the "handler_name" field.
func HandlerNameNEQ(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldNEQ(FieldHandlerName, v))
}

// HandlerNameIn applies the In predicate on the "handler_name" field.
func HandlerNameIn(vs ...string) predicate.EventLog {
	return predicate.EventLog(sql.FieldIn(FieldHandlerName, vs...))
}

// HandlerNameNotIn applies the NotIn predicate on the "handler_name" field.
func HandlerNameNotIn(vs ...string) predicate.EventLog {
	return predicate.EventLog(sql.FieldNotIn(FieldHandlerName, vs...))
}

// HandlerNameGT applies the GT predicate on the "handler_name" field.
func HandlerNameGT(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldGT(FieldHandlerName, v))
}

// HandlerNameGTE applies the GTE predicate on the "handler_name" field.
func HandlerNameGTE(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldGTE(FieldHandlerName, v))
}

// HandlerNameLT applies the LT predicate on the "handler_name" field.
func HandlerNameLT(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldLT(FieldHandlerName, v))
}

// HandlerNameLTE applies the LTE predicate on the "handler_name" field.
func HandlerNameLTE(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldLTE(FieldHandlerName, v))
}

// HandlerNameContains applies the Contains predicate on the "handler_name" field.
func HandlerNameContains(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldContains(FieldHandlerName, v))
}

// HandlerNameHasPrefix applies the HasPrefix predicate on the "handler_name" field.
func HandlerNameHasPrefix(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldHasPrefix(FieldHandlerName, v))
}

// HandlerNameHasSuffix applies the HasSuffix predicate on the "handler_name" field.
func HandlerNameHasSuffix(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldHasSuffix(FieldHandlerName, v))
}

// HandlerNameIsNil applies the IsNil predicate on the "handler_name" field.
func HandlerNameIsNil() predicate.EventLog {
	return predicate.EventLog(sql.FieldIsNull(FieldHandlerName))
}

// HandlerNameNotNil applies the NotNil predicate on the "handler_name" field.
func HandlerNameNotNil() predicate.EventLog {
	return predicate.EventLog(sql.FieldNotNull(FieldHandlerName))
}

// HandlerNameEqualFold applies the EqualFold predicate on the "handler_name" field.
func HandlerNameEqualFold(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldEqualFold(FieldHandlerName, v))
}

// HandlerNameContainsFold applies the ContainsFold predicate on the "handler_name" field.
func HandlerNameContainsFold(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldContainsFold(FieldHandlerName, v))
}

// QueueNameEQ applies the EQ predicate on the "queue_name" field.
func QueueNameEQ(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldEQ(FieldQueueName, v))
}

// QueueNameNEQ applies the NEQ predicate on the "queue_name" field.
func QueueNameNEQ(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldNEQ(FieldQueueName, v))
}

// QueueNameIn applies the In predicate on the "queue_name" field.
func QueueNameIn(vs ...string) predicate.EventLog {
	return predicate.EventLog(sql.FieldIn(FieldQueueName, vs...))
}

// QueueNameNotIn applies the NotIn predicate on the "queue_name" field.
func QueueNameNotIn(vs ...string) predicate.EventLog {
	return predicate.EventLog(sql.FieldNotIn(FieldQueueName, vs...))
}

// QueueNameGT applies the GT predicate on the "queue_name" field.
func QueueNameGT(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldGT(FieldQueueName, v))
}

// QueueNameGTE applies the GTE predicate on the "queue_name" field.
func QueueNameGTE(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldGTE(FieldQueueName, v))
}

// QueueNameLT applies the LT predicate on the "queue_name" field.
func QueueNameLT(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldLT(FieldQueueName, v))
}

// QueueNameLTE applies the LTE predicate on the "queue_name" field.
func QueueNameLTE(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldLTE(FieldQueueName, v))
}

// QueueNameContains applies the Contains predicate on the "queue_name" field.
func QueueNameContains(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldContains(FieldQueueName, v))
}

// QueueNameHasPrefix applies the HasPrefix predicate on the "queue_name" field.
func QueueNameHasPrefix(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldHasPrefix(FieldQueueName, v))
}

// QueueNameHasSuffix applies the HasSuffix predicate on the "queue_name" field.
func QueueNameHasSuffix(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldHasSuffix(FieldQueueName, v))
}

// QueueNameIsNil applies the IsNil predicate on the "queue_name" field.
func QueueNameIsNil() predicate.EventLog {
	return predicate.EventLog(sql.FieldIsNull(FieldQueueName))
}

// QueueNameNotNil applies the NotNil predicate on the "queue_name" field.
func QueueNameNotNil() predicate.EventLog {
	return predicate.EventLog(sql.FieldNotNull(FieldQueueName))
}

// QueueNameEqualFold applies the EqualFold predicate on the "queue_name" field.
func QueueNameEqualFold(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldEqualFold(FieldQueueName, v))
}

// QueueNameContainsFold applies the ContainsFold predicate on the "queue_name" field.
func QueueNameContainsFold(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldContainsFold(FieldQueueName, v))
}

// PreviousStateIsNil applies the IsNil predicate on the "previous_state" field.
func PreviousStateIsNil() predicate.EventLog {
	return predicate.EventLog(sql.FieldIsNull(FieldPreviousState))
}

// PreviousStateNotNil applies the NotNil predicate on the "previous_state" field.
func PreviousStateNotNil() predicate.EventLog {
	return predicate.EventLog(sql.FieldNotNull(FieldPreviousState))
}

// NewStateIsNil applies the IsNil predicate on the "new_state" field.
func NewStateIsNil() predicate.EventLog {
	return predicate.EventLog(sql.FieldIsNull(FieldNewState))
}

// NewStateNotNil applies the NotNil predicate on the "new_state" field.
func NewStateNotNil() predicate.EventLog {
	return predicate.EventLog(sql.FieldNotNull(FieldNewState))
}

// ErrorEQ applies the EQ predicate on the "error" field.
func ErrorEQ(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldEQ(FieldError, v))
}

// ErrorNEQ applies the NEQ predicate on the "error" field.
func ErrorNEQ(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldNEQ(FieldError, v))
}

// ErrorIn applies the In predicate on the "error" field.
func ErrorIn(vs ...string) predicate.EventLog {
	return predicate.EventLog(sql.FieldIn(FieldError, vs...))
}

// ErrorNotIn applies the NotIn predicate on the "error" field.
func ErrorNotIn(vs ...string) predicate.EventLog {
	return predicate.EventLog(sql.FieldNotIn(FieldError, vs...))
}

// ErrorGT applies the GT predicate on the "error" field.
func ErrorGT(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldGT(FieldError, v))
}

// ErrorGTE applies the GTE predicate on the "error" field.
func ErrorGTE(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldGTE(FieldError, v))
}

// ErrorLT applies the LT predicate on the "error" field.
func ErrorLT(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldLT(FieldError, v))
}

// ErrorLTE applies the LTE predicate on the "error" field.
func ErrorLTE(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldLTE(FieldError, v))
}

// ErrorContains applies the Contains predicate on the "error" field.
func ErrorContains(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldContains(FieldError, v))
}

// ErrorHasPrefix applies the HasPrefix predicate on the "error" field.
func ErrorHasPrefix(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldHasPrefix(FieldError, v))
}

// ErrorHasSuffix applies the HasSuffix predicate on the "error" field.
func ErrorHasSuffix(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldHasSuffix(FieldError, v))
}

// ErrorIsNil applies the IsNil predicate on the "error" field.
func ErrorIsNil() predicate.EventLog {
	return predicate.EventLog(sql.FieldIsNull(FieldError))
}

// ErrorNotNil applies the NotNil predicate on the "error" field.
func ErrorNotNil() predicate.EventLog {
	return predicate.EventLog(sql.FieldNotNull(FieldError))
}

// ErrorEqualFold applies the EqualFold predicate on the "error" field.
func ErrorEqualFold(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldEqualFold(FieldError, v))
}

// ErrorContainsFold applies the ContainsFold predicate on the "error" field.
func ErrorContainsFold(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldContainsFold(FieldError, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.EventLog {
	return predicate.EventLog(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.EventLog {
	return predicate.EventLog(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.EventLog {
	return predicate.EventLog(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.EventLog {
	return predicate.EventLog(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.EventLog {
	return predicate.EventLog(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.EventLog {
	return predicate.EventLog(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.EventLog {
	return predicate.EventLog(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.EventLog {
	return predicate.EventLog(sql.FieldLTE(FieldCreatedAt, v))
}

// HasRun applies the HasEdge predicate on the "run" edge.
func HasRun() predicate.EventLog {
	return predicate.EventLog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RunTable, RunColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRunWith applies the HasEdge predicate on the "run" edge with a given conditions (other predicates).
func HasRunWith(preds ...predicate.Run) predicate.EventLog {
	return predicate.EventLog(func(s *sql.Selector) {
		step := newRunStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasWorkflow applies the HasEdge predicate on the "workflow" edge.
func HasWorkflow() predicate.EventLog {
	return predicate.EventLog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, WorkflowTable, WorkflowColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWorkflowWith applies the HasEdge predicate on the "workflow" edge with a given conditions (other predicates).
func HasWorkflowWith(preds ...predicate.WorkflowEntity) predicate.EventLog {
	return predicate.EventLog(func(s *sql.Selector) {
		step := newWorkflowStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasWorkflowExecution applies the HasEdge predicate on the "workflow_execution" edge.
func HasWorkflowExecution() predicate.EventLog {
	return predicate.EventLog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, WorkflowExecutionTable, WorkflowExecutionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWorkflowExecutionWith applies the HasEdge predicate on the "workflow_execution" edge with a given conditions (other predicates).
func HasWorkflowExecutionWith(preds ...predicate.WorkflowExecution) predicate.EventLog {
	return predicate.EventLog(func(s *sql.Selector) {
		step := newWorkflowExecutionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.EventLog) predicate.EventLog {
	return predicate.EventLog(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.EventLog) predicate.EventLog {
	return predicate.EventLog(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.EventLog) predicate.EventLog {
	return predicate.EventLog(sql.NotPredicates(p))
}
