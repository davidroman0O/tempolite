// Code generated by ent, DO NOT EDIT.

package eventlog

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the eventlog type in the database.
	Label = "event_log"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTimestamp holds the string denoting the timestamp field in the database.
	FieldTimestamp = "timestamp"
	// FieldEventType holds the string denoting the event_type field in the database.
	FieldEventType = "event_type"
	// FieldRunID holds the string denoting the run_id field in the database.
	FieldRunID = "run_id"
	// FieldWorkflowID holds the string denoting the workflow_id field in the database.
	FieldWorkflowID = "workflow_id"
	// FieldWorkflowExecutionID holds the string denoting the workflow_execution_id field in the database.
	FieldWorkflowExecutionID = "workflow_execution_id"
	// FieldEntityID holds the string denoting the entity_id field in the database.
	FieldEntityID = "entity_id"
	// FieldExecutionID holds the string denoting the execution_id field in the database.
	FieldExecutionID = "execution_id"
	// FieldEntityType holds the string denoting the entity_type field in the database.
	FieldEntityType = "entity_type"
	// FieldStepID holds the string denoting the step_id field in the database.
	FieldStepID = "step_id"
	// FieldHandlerName holds the string denoting the handler_name field in the database.
	FieldHandlerName = "handler_name"
	// FieldQueueName holds the string denoting the queue_name field in the database.
	FieldQueueName = "queue_name"
	// FieldPreviousState holds the string denoting the previous_state field in the database.
	FieldPreviousState = "previous_state"
	// FieldNewState holds the string denoting the new_state field in the database.
	FieldNewState = "new_state"
	// FieldError holds the string denoting the error field in the database.
	FieldError = "error"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeRun holds the string denoting the run edge name in mutations.
	EdgeRun = "run"
	// EdgeWorkflow holds the string denoting the workflow edge name in mutations.
	EdgeWorkflow = "workflow"
	// EdgeWorkflowExecution holds the string denoting the workflow_execution edge name in mutations.
	EdgeWorkflowExecution = "workflow_execution"
	// Table holds the table name of the eventlog in the database.
	Table = "event_logs"
	// RunTable is the table that holds the run relation/edge.
	RunTable = "event_logs"
	// RunInverseTable is the table name for the Run entity.
	// It exists in this package in order to avoid circular dependency with the "run" package.
	RunInverseTable = "runs"
	// RunColumn is the table column denoting the run relation/edge.
	RunColumn = "run_id"
	// WorkflowTable is the table that holds the workflow relation/edge.
	WorkflowTable = "event_logs"
	// WorkflowInverseTable is the table name for the WorkflowEntity entity.
	// It exists in this package in order to avoid circular dependency with the "workflowentity" package.
	WorkflowInverseTable = "workflow_entities"
	// WorkflowColumn is the table column denoting the workflow relation/edge.
	WorkflowColumn = "workflow_id"
	// WorkflowExecutionTable is the table that holds the workflow_execution relation/edge.
	WorkflowExecutionTable = "event_logs"
	// WorkflowExecutionInverseTable is the table name for the WorkflowExecution entity.
	// It exists in this package in order to avoid circular dependency with the "workflowexecution" package.
	WorkflowExecutionInverseTable = "workflow_executions"
	// WorkflowExecutionColumn is the table column denoting the workflow_execution relation/edge.
	WorkflowExecutionColumn = "workflow_execution_id"
)

// Columns holds all SQL columns for eventlog fields.
var Columns = []string{
	FieldID,
	FieldTimestamp,
	FieldEventType,
	FieldRunID,
	FieldWorkflowID,
	FieldWorkflowExecutionID,
	FieldEntityID,
	FieldExecutionID,
	FieldEntityType,
	FieldStepID,
	FieldHandlerName,
	FieldQueueName,
	FieldPreviousState,
	FieldNewState,
	FieldError,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultTimestamp holds the default value on creation for the "timestamp" field.
	DefaultTimestamp func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the EventLog queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTimestamp orders the results by the timestamp field.
func ByTimestamp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimestamp, opts...).ToFunc()
}

// ByEventType orders the results by the event_type field.
func ByEventType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEventType, opts...).ToFunc()
}

// ByRunID orders the results by the run_id field.
func ByRunID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRunID, opts...).ToFunc()
}

// ByWorkflowID orders the results by the workflow_id field.
func ByWorkflowID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWorkflowID, opts...).ToFunc()
}

// ByWorkflowExecutionID orders the results by the workflow_execution_id field.
func ByWorkflowExecutionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWorkflowExecutionID, opts...).ToFunc()
}

// ByEntityID orders the results by the entity_id field.
func ByEntityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntityID, opts...).ToFunc()
}

// ByExecutionID orders the results by the execution_id field.
func ByExecutionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExecutionID, opts...).ToFunc()
}

// ByEntityType orders the results by the entity_type field.
func ByEntityType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntityType, opts...).ToFunc()
}

// ByStepID orders the results by the step_id field.
func ByStepID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStepID, opts...).ToFunc()
}

// ByHandlerName orders the results by the handler_name field.
func ByHandlerName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHandlerName, opts...).ToFunc()
}

// ByQueueName orders the results by the queue_name field.
func ByQueueName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQueueName, opts...).ToFunc()
}

// ByError orders the results by the error field.
func ByError(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldError, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByRunField orders the results by run field.
func ByRunField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRunStep(), sql.OrderByField(field, opts...))
	}
}

// ByWorkflowField orders the results by workflow field.
func ByWorkflowField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWorkflowStep(), sql.OrderByField(field, opts...))
	}
}

// ByWorkflowExecutionField orders the results by workflow_execution field.
func ByWorkflowExecutionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWorkflowExecutionStep(), sql.OrderByField(field, opts...))
	}
}
func newRunStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RunInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, RunTable, RunColumn),
	)
}
func newWorkflowStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WorkflowInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, WorkflowTable, WorkflowColumn),
	)
}
func newWorkflowExecutionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WorkflowExecutionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, WorkflowExecutionTable, WorkflowExecutionColumn),
	)
}
