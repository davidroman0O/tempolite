// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/davidroman0O/tempolite/ent/schema"
	"github.com/davidroman0O/tempolite/ent/sideeffectdata"
	"github.com/davidroman0O/tempolite/ent/sideeffectentity"
)

// SideEffectData is the model entity for the SideEffectData schema.
type SideEffectData struct {
	config `json:"-"`
	// ID of the ent.
	ID schema.SideEffectDataID `json:"id,omitempty"`
	// EntityID holds the value of the "entity_id" field.
	EntityID schema.SideEffectEntityID `json:"entity_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SideEffectDataQuery when eager-loading is set.
	Edges        SideEffectDataEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SideEffectDataEdges holds the relations/edges for other nodes in the graph.
type SideEffectDataEdges struct {
	// SideEffect holds the value of the side_effect edge.
	SideEffect *SideEffectEntity `json:"side_effect,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SideEffectOrErr returns the SideEffect value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SideEffectDataEdges) SideEffectOrErr() (*SideEffectEntity, error) {
	if e.SideEffect != nil {
		return e.SideEffect, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: sideeffectentity.Label}
	}
	return nil, &NotLoadedError{edge: "side_effect"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SideEffectData) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sideeffectdata.FieldID, sideeffectdata.FieldEntityID:
			values[i] = new(sql.NullInt64)
		case sideeffectdata.FieldCreatedAt, sideeffectdata.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SideEffectData fields.
func (sed *SideEffectData) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sideeffectdata.FieldID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				sed.ID = schema.SideEffectDataID(value.Int64)
			}
		case sideeffectdata.FieldEntityID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field entity_id", values[i])
			} else if value.Valid {
				sed.EntityID = schema.SideEffectEntityID(value.Int64)
			}
		case sideeffectdata.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sed.CreatedAt = value.Time
			}
		case sideeffectdata.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sed.UpdatedAt = value.Time
			}
		default:
			sed.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SideEffectData.
// This includes values selected through modifiers, order, etc.
func (sed *SideEffectData) Value(name string) (ent.Value, error) {
	return sed.selectValues.Get(name)
}

// QuerySideEffect queries the "side_effect" edge of the SideEffectData entity.
func (sed *SideEffectData) QuerySideEffect() *SideEffectEntityQuery {
	return NewSideEffectDataClient(sed.config).QuerySideEffect(sed)
}

// Update returns a builder for updating this SideEffectData.
// Note that you need to call SideEffectData.Unwrap() before calling this method if this SideEffectData
// was returned from a transaction, and the transaction was committed or rolled back.
func (sed *SideEffectData) Update() *SideEffectDataUpdateOne {
	return NewSideEffectDataClient(sed.config).UpdateOne(sed)
}

// Unwrap unwraps the SideEffectData entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sed *SideEffectData) Unwrap() *SideEffectData {
	_tx, ok := sed.config.driver.(*txDriver)
	if !ok {
		panic("ent: SideEffectData is not a transactional entity")
	}
	sed.config.driver = _tx.drv
	return sed
}

// String implements the fmt.Stringer.
func (sed *SideEffectData) String() string {
	var builder strings.Builder
	builder.WriteString("SideEffectData(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sed.ID))
	builder.WriteString("entity_id=")
	builder.WriteString(fmt.Sprintf("%v", sed.EntityID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(sed.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sed.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SideEffectDataSlice is a parsable slice of SideEffectData.
type SideEffectDataSlice []*SideEffectData
