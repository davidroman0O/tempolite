// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/tempolite/ent/sagadata"
	"github.com/davidroman0O/tempolite/ent/sagaexecution"
	"github.com/davidroman0O/tempolite/ent/sagaexecutiondata"
	"github.com/davidroman0O/tempolite/ent/sagavalue"
	"github.com/davidroman0O/tempolite/ent/schema"
)

// SagaValueCreate is the builder for creating a SagaValue entity.
type SagaValueCreate struct {
	config
	mutation *SagaValueMutation
	hooks    []Hook
}

// SetKey sets the "key" field.
func (svc *SagaValueCreate) SetKey(s string) *SagaValueCreate {
	svc.mutation.SetKey(s)
	return svc
}

// SetValue sets the "value" field.
func (svc *SagaValueCreate) SetValue(b []byte) *SagaValueCreate {
	svc.mutation.SetValue(b)
	return svc
}

// SetSagaEntityID sets the "saga_entity_id" field.
func (svc *SagaValueCreate) SetSagaEntityID(sei schema.SagaEntityID) *SagaValueCreate {
	svc.mutation.SetSagaEntityID(sei)
	return svc
}

// SetSagaExecutionID sets the "saga_execution_id" field.
func (svc *SagaValueCreate) SetSagaExecutionID(sei schema.SagaExecutionID) *SagaValueCreate {
	svc.mutation.SetSagaExecutionID(sei)
	return svc
}

// SetCreatedAt sets the "created_at" field.
func (svc *SagaValueCreate) SetCreatedAt(t time.Time) *SagaValueCreate {
	svc.mutation.SetCreatedAt(t)
	return svc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (svc *SagaValueCreate) SetNillableCreatedAt(t *time.Time) *SagaValueCreate {
	if t != nil {
		svc.SetCreatedAt(*t)
	}
	return svc
}

// SetUpdatedAt sets the "updated_at" field.
func (svc *SagaValueCreate) SetUpdatedAt(t time.Time) *SagaValueCreate {
	svc.mutation.SetUpdatedAt(t)
	return svc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (svc *SagaValueCreate) SetNillableUpdatedAt(t *time.Time) *SagaValueCreate {
	if t != nil {
		svc.SetUpdatedAt(*t)
	}
	return svc
}

// SetID sets the "id" field.
func (svc *SagaValueCreate) SetID(svi schema.SagaValueID) *SagaValueCreate {
	svc.mutation.SetID(svi)
	return svc
}

// SetExecutionID sets the "execution" edge to the SagaExecution entity by ID.
func (svc *SagaValueCreate) SetExecutionID(id schema.SagaExecutionID) *SagaValueCreate {
	svc.mutation.SetExecutionID(id)
	return svc
}

// SetExecution sets the "execution" edge to the SagaExecution entity.
func (svc *SagaValueCreate) SetExecution(s *SagaExecution) *SagaValueCreate {
	return svc.SetExecutionID(s.ID)
}

// SetSagaDataID sets the "saga_data" edge to the SagaData entity by ID.
func (svc *SagaValueCreate) SetSagaDataID(id schema.SagaDataID) *SagaValueCreate {
	svc.mutation.SetSagaDataID(id)
	return svc
}

// SetNillableSagaDataID sets the "saga_data" edge to the SagaData entity by ID if the given value is not nil.
func (svc *SagaValueCreate) SetNillableSagaDataID(id *schema.SagaDataID) *SagaValueCreate {
	if id != nil {
		svc = svc.SetSagaDataID(*id)
	}
	return svc
}

// SetSagaData sets the "saga_data" edge to the SagaData entity.
func (svc *SagaValueCreate) SetSagaData(s *SagaData) *SagaValueCreate {
	return svc.SetSagaDataID(s.ID)
}

// SetExecutionDataID sets the "execution_data" edge to the SagaExecutionData entity by ID.
func (svc *SagaValueCreate) SetExecutionDataID(id schema.SagaExecutionDataID) *SagaValueCreate {
	svc.mutation.SetExecutionDataID(id)
	return svc
}

// SetNillableExecutionDataID sets the "execution_data" edge to the SagaExecutionData entity by ID if the given value is not nil.
func (svc *SagaValueCreate) SetNillableExecutionDataID(id *schema.SagaExecutionDataID) *SagaValueCreate {
	if id != nil {
		svc = svc.SetExecutionDataID(*id)
	}
	return svc
}

// SetExecutionData sets the "execution_data" edge to the SagaExecutionData entity.
func (svc *SagaValueCreate) SetExecutionData(s *SagaExecutionData) *SagaValueCreate {
	return svc.SetExecutionDataID(s.ID)
}

// Mutation returns the SagaValueMutation object of the builder.
func (svc *SagaValueCreate) Mutation() *SagaValueMutation {
	return svc.mutation
}

// Save creates the SagaValue in the database.
func (svc *SagaValueCreate) Save(ctx context.Context) (*SagaValue, error) {
	svc.defaults()
	return withHooks(ctx, svc.sqlSave, svc.mutation, svc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (svc *SagaValueCreate) SaveX(ctx context.Context) *SagaValue {
	v, err := svc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (svc *SagaValueCreate) Exec(ctx context.Context) error {
	_, err := svc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (svc *SagaValueCreate) ExecX(ctx context.Context) {
	if err := svc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (svc *SagaValueCreate) defaults() {
	if _, ok := svc.mutation.CreatedAt(); !ok {
		v := sagavalue.DefaultCreatedAt()
		svc.mutation.SetCreatedAt(v)
	}
	if _, ok := svc.mutation.UpdatedAt(); !ok {
		v := sagavalue.DefaultUpdatedAt()
		svc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (svc *SagaValueCreate) check() error {
	if _, ok := svc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "SagaValue.key"`)}
	}
	if _, ok := svc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "SagaValue.value"`)}
	}
	if _, ok := svc.mutation.SagaEntityID(); !ok {
		return &ValidationError{Name: "saga_entity_id", err: errors.New(`ent: missing required field "SagaValue.saga_entity_id"`)}
	}
	if _, ok := svc.mutation.SagaExecutionID(); !ok {
		return &ValidationError{Name: "saga_execution_id", err: errors.New(`ent: missing required field "SagaValue.saga_execution_id"`)}
	}
	if _, ok := svc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SagaValue.created_at"`)}
	}
	if _, ok := svc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SagaValue.updated_at"`)}
	}
	if len(svc.mutation.ExecutionIDs()) == 0 {
		return &ValidationError{Name: "execution", err: errors.New(`ent: missing required edge "SagaValue.execution"`)}
	}
	return nil
}

func (svc *SagaValueCreate) sqlSave(ctx context.Context) (*SagaValue, error) {
	if err := svc.check(); err != nil {
		return nil, err
	}
	_node, _spec := svc.createSpec()
	if err := sqlgraph.CreateNode(ctx, svc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = schema.SagaValueID(id)
	}
	svc.mutation.id = &_node.ID
	svc.mutation.done = true
	return _node, nil
}

func (svc *SagaValueCreate) createSpec() (*SagaValue, *sqlgraph.CreateSpec) {
	var (
		_node = &SagaValue{config: svc.config}
		_spec = sqlgraph.NewCreateSpec(sagavalue.Table, sqlgraph.NewFieldSpec(sagavalue.FieldID, field.TypeInt))
	)
	if id, ok := svc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := svc.mutation.Key(); ok {
		_spec.SetField(sagavalue.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := svc.mutation.Value(); ok {
		_spec.SetField(sagavalue.FieldValue, field.TypeBytes, value)
		_node.Value = value
	}
	if value, ok := svc.mutation.SagaEntityID(); ok {
		_spec.SetField(sagavalue.FieldSagaEntityID, field.TypeInt, value)
		_node.SagaEntityID = value
	}
	if value, ok := svc.mutation.CreatedAt(); ok {
		_spec.SetField(sagavalue.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := svc.mutation.UpdatedAt(); ok {
		_spec.SetField(sagavalue.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := svc.mutation.ExecutionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sagavalue.ExecutionTable,
			Columns: []string{sagavalue.ExecutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagaexecution.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SagaExecutionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := svc.mutation.SagaDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sagavalue.SagaDataTable,
			Columns: []string{sagavalue.SagaDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagadata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.saga_data_values = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := svc.mutation.ExecutionDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sagavalue.ExecutionDataTable,
			Columns: []string{sagavalue.ExecutionDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagaexecutiondata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.saga_execution_data_values = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SagaValueCreateBulk is the builder for creating many SagaValue entities in bulk.
type SagaValueCreateBulk struct {
	config
	err      error
	builders []*SagaValueCreate
}

// Save creates the SagaValue entities in the database.
func (svcb *SagaValueCreateBulk) Save(ctx context.Context) ([]*SagaValue, error) {
	if svcb.err != nil {
		return nil, svcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(svcb.builders))
	nodes := make([]*SagaValue, len(svcb.builders))
	mutators := make([]Mutator, len(svcb.builders))
	for i := range svcb.builders {
		func(i int, root context.Context) {
			builder := svcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SagaValueMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, svcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, svcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = schema.SagaValueID(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, svcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (svcb *SagaValueCreateBulk) SaveX(ctx context.Context) []*SagaValue {
	v, err := svcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (svcb *SagaValueCreateBulk) Exec(ctx context.Context) error {
	_, err := svcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (svcb *SagaValueCreateBulk) ExecX(ctx context.Context) {
	if err := svcb.Exec(ctx); err != nil {
		panic(err)
	}
}
