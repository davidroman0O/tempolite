// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/davidroman0O/tempolite/ent/schema"
	"github.com/davidroman0O/tempolite/ent/sideeffectdata"
	"github.com/davidroman0O/tempolite/ent/sideeffectentity"
	"github.com/davidroman0O/tempolite/ent/workflowentity"
)

// SideEffectEntity is the model entity for the SideEffectEntity schema.
type SideEffectEntity struct {
	config `json:"-"`
	// ID of the ent.
	ID schema.SideEffectEntityID `json:"id,omitempty"`
	// HandlerName holds the value of the "handler_name" field.
	HandlerName string `json:"handler_name,omitempty"`
	// Type holds the value of the "type" field.
	Type schema.EntityType `json:"type,omitempty"`
	// Status holds the value of the "status" field.
	Status schema.EntityStatus `json:"status,omitempty"`
	// StepID holds the value of the "step_id" field.
	StepID string `json:"step_id,omitempty"`
	// RunID holds the value of the "run_id" field.
	RunID schema.RunID `json:"run_id,omitempty"`
	// RetryPolicy holds the value of the "retry_policy" field.
	RetryPolicy schema.RetryPolicy `json:"retry_policy,omitempty"`
	// RetryState holds the value of the "retry_state" field.
	RetryState schema.RetryState `json:"retry_state,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SideEffectEntityQuery when eager-loading is set.
	Edges                                SideEffectEntityEdges `json:"edges"`
	workflow_entity_side_effect_children *schema.WorkflowEntityID
	selectValues                         sql.SelectValues
}

// SideEffectEntityEdges holds the relations/edges for other nodes in the graph.
type SideEffectEntityEdges struct {
	// Workflow holds the value of the workflow edge.
	Workflow *WorkflowEntity `json:"workflow,omitempty"`
	// SideEffectData holds the value of the side_effect_data edge.
	SideEffectData *SideEffectData `json:"side_effect_data,omitempty"`
	// Executions holds the value of the executions edge.
	Executions []*SideEffectExecution `json:"executions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// WorkflowOrErr returns the Workflow value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SideEffectEntityEdges) WorkflowOrErr() (*WorkflowEntity, error) {
	if e.Workflow != nil {
		return e.Workflow, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: workflowentity.Label}
	}
	return nil, &NotLoadedError{edge: "workflow"}
}

// SideEffectDataOrErr returns the SideEffectData value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SideEffectEntityEdges) SideEffectDataOrErr() (*SideEffectData, error) {
	if e.SideEffectData != nil {
		return e.SideEffectData, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: sideeffectdata.Label}
	}
	return nil, &NotLoadedError{edge: "side_effect_data"}
}

// ExecutionsOrErr returns the Executions value or an error if the edge
// was not loaded in eager-loading.
func (e SideEffectEntityEdges) ExecutionsOrErr() ([]*SideEffectExecution, error) {
	if e.loadedTypes[2] {
		return e.Executions, nil
	}
	return nil, &NotLoadedError{edge: "executions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SideEffectEntity) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sideeffectentity.FieldRetryPolicy, sideeffectentity.FieldRetryState:
			values[i] = new([]byte)
		case sideeffectentity.FieldID, sideeffectentity.FieldRunID:
			values[i] = new(sql.NullInt64)
		case sideeffectentity.FieldHandlerName, sideeffectentity.FieldType, sideeffectentity.FieldStatus, sideeffectentity.FieldStepID:
			values[i] = new(sql.NullString)
		case sideeffectentity.FieldCreatedAt, sideeffectentity.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case sideeffectentity.ForeignKeys[0]: // workflow_entity_side_effect_children
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SideEffectEntity fields.
func (see *SideEffectEntity) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sideeffectentity.FieldID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				see.ID = schema.SideEffectEntityID(value.Int64)
			}
		case sideeffectentity.FieldHandlerName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field handler_name", values[i])
			} else if value.Valid {
				see.HandlerName = value.String
			}
		case sideeffectentity.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				see.Type = schema.EntityType(value.String)
			}
		case sideeffectentity.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				see.Status = schema.EntityStatus(value.String)
			}
		case sideeffectentity.FieldStepID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field step_id", values[i])
			} else if value.Valid {
				see.StepID = value.String
			}
		case sideeffectentity.FieldRunID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field run_id", values[i])
			} else if value.Valid {
				see.RunID = schema.RunID(value.Int64)
			}
		case sideeffectentity.FieldRetryPolicy:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field retry_policy", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &see.RetryPolicy); err != nil {
					return fmt.Errorf("unmarshal field retry_policy: %w", err)
				}
			}
		case sideeffectentity.FieldRetryState:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field retry_state", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &see.RetryState); err != nil {
					return fmt.Errorf("unmarshal field retry_state: %w", err)
				}
			}
		case sideeffectentity.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				see.CreatedAt = value.Time
			}
		case sideeffectentity.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				see.UpdatedAt = value.Time
			}
		case sideeffectentity.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field workflow_entity_side_effect_children", values[i])
			} else if value.Valid {
				see.workflow_entity_side_effect_children = new(schema.WorkflowEntityID)
				*see.workflow_entity_side_effect_children = schema.WorkflowEntityID(value.Int64)
			}
		default:
			see.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SideEffectEntity.
// This includes values selected through modifiers, order, etc.
func (see *SideEffectEntity) Value(name string) (ent.Value, error) {
	return see.selectValues.Get(name)
}

// QueryWorkflow queries the "workflow" edge of the SideEffectEntity entity.
func (see *SideEffectEntity) QueryWorkflow() *WorkflowEntityQuery {
	return NewSideEffectEntityClient(see.config).QueryWorkflow(see)
}

// QuerySideEffectData queries the "side_effect_data" edge of the SideEffectEntity entity.
func (see *SideEffectEntity) QuerySideEffectData() *SideEffectDataQuery {
	return NewSideEffectEntityClient(see.config).QuerySideEffectData(see)
}

// QueryExecutions queries the "executions" edge of the SideEffectEntity entity.
func (see *SideEffectEntity) QueryExecutions() *SideEffectExecutionQuery {
	return NewSideEffectEntityClient(see.config).QueryExecutions(see)
}

// Update returns a builder for updating this SideEffectEntity.
// Note that you need to call SideEffectEntity.Unwrap() before calling this method if this SideEffectEntity
// was returned from a transaction, and the transaction was committed or rolled back.
func (see *SideEffectEntity) Update() *SideEffectEntityUpdateOne {
	return NewSideEffectEntityClient(see.config).UpdateOne(see)
}

// Unwrap unwraps the SideEffectEntity entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (see *SideEffectEntity) Unwrap() *SideEffectEntity {
	_tx, ok := see.config.driver.(*txDriver)
	if !ok {
		panic("ent: SideEffectEntity is not a transactional entity")
	}
	see.config.driver = _tx.drv
	return see
}

// String implements the fmt.Stringer.
func (see *SideEffectEntity) String() string {
	var builder strings.Builder
	builder.WriteString("SideEffectEntity(")
	builder.WriteString(fmt.Sprintf("id=%v, ", see.ID))
	builder.WriteString("handler_name=")
	builder.WriteString(see.HandlerName)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", see.Type))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", see.Status))
	builder.WriteString(", ")
	builder.WriteString("step_id=")
	builder.WriteString(see.StepID)
	builder.WriteString(", ")
	builder.WriteString("run_id=")
	builder.WriteString(fmt.Sprintf("%v", see.RunID))
	builder.WriteString(", ")
	builder.WriteString("retry_policy=")
	builder.WriteString(fmt.Sprintf("%v", see.RetryPolicy))
	builder.WriteString(", ")
	builder.WriteString("retry_state=")
	builder.WriteString(fmt.Sprintf("%v", see.RetryState))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(see.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(see.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SideEffectEntities is a parsable slice of SideEffectEntity.
type SideEffectEntities []*SideEffectEntity
