// Code generated by ent, DO NOT EDIT.

package workflowentity

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/davidroman0O/tempolite/ent/schema"
)

const (
	// Label holds the string label denoting the workflowentity type in the database.
	Label = "workflow_entity"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldHandlerName holds the string denoting the handler_name field in the database.
	FieldHandlerName = "handler_name"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldStepID holds the string denoting the step_id field in the database.
	FieldStepID = "step_id"
	// FieldRunID holds the string denoting the run_id field in the database.
	FieldRunID = "run_id"
	// FieldRetryPolicy holds the string denoting the retry_policy field in the database.
	FieldRetryPolicy = "retry_policy"
	// FieldRetryState holds the string denoting the retry_state field in the database.
	FieldRetryState = "retry_state"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeQueue holds the string denoting the queue edge name in mutations.
	EdgeQueue = "queue"
	// EdgeRun holds the string denoting the run edge name in mutations.
	EdgeRun = "run"
	// EdgeVersions holds the string denoting the versions edge name in mutations.
	EdgeVersions = "versions"
	// EdgeWorkflowData holds the string denoting the workflow_data edge name in mutations.
	EdgeWorkflowData = "workflow_data"
	// EdgeActivityChildren holds the string denoting the activity_children edge name in mutations.
	EdgeActivityChildren = "activity_children"
	// EdgeSagaChildren holds the string denoting the saga_children edge name in mutations.
	EdgeSagaChildren = "saga_children"
	// EdgeSideEffectChildren holds the string denoting the side_effect_children edge name in mutations.
	EdgeSideEffectChildren = "side_effect_children"
	// EdgeExecutions holds the string denoting the executions edge name in mutations.
	EdgeExecutions = "executions"
	// Table holds the table name of the workflowentity in the database.
	Table = "workflow_entities"
	// QueueTable is the table that holds the queue relation/edge.
	QueueTable = "workflow_entities"
	// QueueInverseTable is the table name for the Queue entity.
	// It exists in this package in order to avoid circular dependency with the "queue" package.
	QueueInverseTable = "queues"
	// QueueColumn is the table column denoting the queue relation/edge.
	QueueColumn = "queue_entities"
	// RunTable is the table that holds the run relation/edge.
	RunTable = "workflow_entities"
	// RunInverseTable is the table name for the Run entity.
	// It exists in this package in order to avoid circular dependency with the "run" package.
	RunInverseTable = "runs"
	// RunColumn is the table column denoting the run relation/edge.
	RunColumn = "run_id"
	// VersionsTable is the table that holds the versions relation/edge.
	VersionsTable = "versions"
	// VersionsInverseTable is the table name for the Version entity.
	// It exists in this package in order to avoid circular dependency with the "version" package.
	VersionsInverseTable = "versions"
	// VersionsColumn is the table column denoting the versions relation/edge.
	VersionsColumn = "entity_id"
	// WorkflowDataTable is the table that holds the workflow_data relation/edge.
	WorkflowDataTable = "workflow_data"
	// WorkflowDataInverseTable is the table name for the WorkflowData entity.
	// It exists in this package in order to avoid circular dependency with the "workflowdata" package.
	WorkflowDataInverseTable = "workflow_data"
	// WorkflowDataColumn is the table column denoting the workflow_data relation/edge.
	WorkflowDataColumn = "entity_id"
	// ActivityChildrenTable is the table that holds the activity_children relation/edge.
	ActivityChildrenTable = "activity_entities"
	// ActivityChildrenInverseTable is the table name for the ActivityEntity entity.
	// It exists in this package in order to avoid circular dependency with the "activityentity" package.
	ActivityChildrenInverseTable = "activity_entities"
	// ActivityChildrenColumn is the table column denoting the activity_children relation/edge.
	ActivityChildrenColumn = "workflow_entity_activity_children"
	// SagaChildrenTable is the table that holds the saga_children relation/edge.
	SagaChildrenTable = "saga_entities"
	// SagaChildrenInverseTable is the table name for the SagaEntity entity.
	// It exists in this package in order to avoid circular dependency with the "sagaentity" package.
	SagaChildrenInverseTable = "saga_entities"
	// SagaChildrenColumn is the table column denoting the saga_children relation/edge.
	SagaChildrenColumn = "workflow_entity_saga_children"
	// SideEffectChildrenTable is the table that holds the side_effect_children relation/edge.
	SideEffectChildrenTable = "side_effect_entities"
	// SideEffectChildrenInverseTable is the table name for the SideEffectEntity entity.
	// It exists in this package in order to avoid circular dependency with the "sideeffectentity" package.
	SideEffectChildrenInverseTable = "side_effect_entities"
	// SideEffectChildrenColumn is the table column denoting the side_effect_children relation/edge.
	SideEffectChildrenColumn = "workflow_entity_side_effect_children"
	// ExecutionsTable is the table that holds the executions relation/edge.
	ExecutionsTable = "workflow_executions"
	// ExecutionsInverseTable is the table name for the WorkflowExecution entity.
	// It exists in this package in order to avoid circular dependency with the "workflowexecution" package.
	ExecutionsInverseTable = "workflow_executions"
	// ExecutionsColumn is the table column denoting the executions relation/edge.
	ExecutionsColumn = "workflow_entity_id"
)

// Columns holds all SQL columns for workflowentity fields.
var Columns = []string{
	FieldID,
	FieldHandlerName,
	FieldType,
	FieldStatus,
	FieldStepID,
	FieldRunID,
	FieldRetryPolicy,
	FieldRetryState,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "workflow_entities"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"queue_entities",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultType holds the default value on creation for the "type" field.
	DefaultType schema.EntityType
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus schema.EntityStatus
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the WorkflowEntity queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByHandlerName orders the results by the handler_name field.
func ByHandlerName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHandlerName, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByStepID orders the results by the step_id field.
func ByStepID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStepID, opts...).ToFunc()
}

// ByRunID orders the results by the run_id field.
func ByRunID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRunID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByQueueField orders the results by queue field.
func ByQueueField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newQueueStep(), sql.OrderByField(field, opts...))
	}
}

// ByRunField orders the results by run field.
func ByRunField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRunStep(), sql.OrderByField(field, opts...))
	}
}

// ByVersionsCount orders the results by versions count.
func ByVersionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newVersionsStep(), opts...)
	}
}

// ByVersions orders the results by versions terms.
func ByVersions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVersionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByWorkflowDataField orders the results by workflow_data field.
func ByWorkflowDataField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWorkflowDataStep(), sql.OrderByField(field, opts...))
	}
}

// ByActivityChildrenCount orders the results by activity_children count.
func ByActivityChildrenCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newActivityChildrenStep(), opts...)
	}
}

// ByActivityChildren orders the results by activity_children terms.
func ByActivityChildren(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newActivityChildrenStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySagaChildrenCount orders the results by saga_children count.
func BySagaChildrenCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSagaChildrenStep(), opts...)
	}
}

// BySagaChildren orders the results by saga_children terms.
func BySagaChildren(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSagaChildrenStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySideEffectChildrenCount orders the results by side_effect_children count.
func BySideEffectChildrenCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSideEffectChildrenStep(), opts...)
	}
}

// BySideEffectChildren orders the results by side_effect_children terms.
func BySideEffectChildren(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSideEffectChildrenStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByExecutionsCount orders the results by executions count.
func ByExecutionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newExecutionsStep(), opts...)
	}
}

// ByExecutions orders the results by executions terms.
func ByExecutions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExecutionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newQueueStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(QueueInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, QueueTable, QueueColumn),
	)
}
func newRunStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RunInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, RunTable, RunColumn),
	)
}
func newVersionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VersionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, VersionsTable, VersionsColumn),
	)
}
func newWorkflowDataStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WorkflowDataInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, WorkflowDataTable, WorkflowDataColumn),
	)
}
func newActivityChildrenStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ActivityChildrenInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ActivityChildrenTable, ActivityChildrenColumn),
	)
}
func newSagaChildrenStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SagaChildrenInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SagaChildrenTable, SagaChildrenColumn),
	)
}
func newSideEffectChildrenStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SideEffectChildrenInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SideEffectChildrenTable, SideEffectChildrenColumn),
	)
}
func newExecutionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExecutionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ExecutionsTable, ExecutionsColumn),
	)
}
