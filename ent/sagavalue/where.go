// Code generated by ent, DO NOT EDIT.

package sagavalue

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/davidroman0O/tempolite/ent/predicate"
	"github.com/davidroman0O/tempolite/ent/schema"
)

// ID filters vertices based on their ID field.
func ID(id schema.SagaValueID) predicate.SagaValue {
	return predicate.SagaValue(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id schema.SagaValueID) predicate.SagaValue {
	return predicate.SagaValue(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id schema.SagaValueID) predicate.SagaValue {
	return predicate.SagaValue(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...schema.SagaValueID) predicate.SagaValue {
	return predicate.SagaValue(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...schema.SagaValueID) predicate.SagaValue {
	return predicate.SagaValue(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id schema.SagaValueID) predicate.SagaValue {
	return predicate.SagaValue(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id schema.SagaValueID) predicate.SagaValue {
	return predicate.SagaValue(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id schema.SagaValueID) predicate.SagaValue {
	return predicate.SagaValue(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id schema.SagaValueID) predicate.SagaValue {
	return predicate.SagaValue(sql.FieldLTE(FieldID, id))
}

// Key applies equality check predicate on the "key" field. It's identical to KeyEQ.
func Key(v string) predicate.SagaValue {
	return predicate.SagaValue(sql.FieldEQ(FieldKey, v))
}

// Value applies equality check predicate on the "value" field. It's identical to ValueEQ.
func Value(v []byte) predicate.SagaValue {
	return predicate.SagaValue(sql.FieldEQ(FieldValue, v))
}

// SagaEntityID applies equality check predicate on the "saga_entity_id" field. It's identical to SagaEntityIDEQ.
func SagaEntityID(v schema.SagaEntityID) predicate.SagaValue {
	vc := int(v)
	return predicate.SagaValue(sql.FieldEQ(FieldSagaEntityID, vc))
}

// SagaExecutionID applies equality check predicate on the "saga_execution_id" field. It's identical to SagaExecutionIDEQ.
func SagaExecutionID(v schema.SagaExecutionID) predicate.SagaValue {
	vc := int(v)
	return predicate.SagaValue(sql.FieldEQ(FieldSagaExecutionID, vc))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.SagaValue {
	return predicate.SagaValue(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.SagaValue {
	return predicate.SagaValue(sql.FieldEQ(FieldUpdatedAt, v))
}

// KeyEQ applies the EQ predicate on the "key" field.
func KeyEQ(v string) predicate.SagaValue {
	return predicate.SagaValue(sql.FieldEQ(FieldKey, v))
}

// KeyNEQ applies the NEQ predicate on the "key" field.
func KeyNEQ(v string) predicate.SagaValue {
	return predicate.SagaValue(sql.FieldNEQ(FieldKey, v))
}

// KeyIn applies the In predicate on the "key" field.
func KeyIn(vs ...string) predicate.SagaValue {
	return predicate.SagaValue(sql.FieldIn(FieldKey, vs...))
}

// KeyNotIn applies the NotIn predicate on the "key" field.
func KeyNotIn(vs ...string) predicate.SagaValue {
	return predicate.SagaValue(sql.FieldNotIn(FieldKey, vs...))
}

// KeyGT applies the GT predicate on the "key" field.
func KeyGT(v string) predicate.SagaValue {
	return predicate.SagaValue(sql.FieldGT(FieldKey, v))
}

// KeyGTE applies the GTE predicate on the "key" field.
func KeyGTE(v string) predicate.SagaValue {
	return predicate.SagaValue(sql.FieldGTE(FieldKey, v))
}

// KeyLT applies the LT predicate on the "key" field.
func KeyLT(v string) predicate.SagaValue {
	return predicate.SagaValue(sql.FieldLT(FieldKey, v))
}

// KeyLTE applies the LTE predicate on the "key" field.
func KeyLTE(v string) predicate.SagaValue {
	return predicate.SagaValue(sql.FieldLTE(FieldKey, v))
}

// KeyContains applies the Contains predicate on the "key" field.
func KeyContains(v string) predicate.SagaValue {
	return predicate.SagaValue(sql.FieldContains(FieldKey, v))
}

// KeyHasPrefix applies the HasPrefix predicate on the "key" field.
func KeyHasPrefix(v string) predicate.SagaValue {
	return predicate.SagaValue(sql.FieldHasPrefix(FieldKey, v))
}

// KeyHasSuffix applies the HasSuffix predicate on the "key" field.
func KeyHasSuffix(v string) predicate.SagaValue {
	return predicate.SagaValue(sql.FieldHasSuffix(FieldKey, v))
}

// KeyEqualFold applies the EqualFold predicate on the "key" field.
func KeyEqualFold(v string) predicate.SagaValue {
	return predicate.SagaValue(sql.FieldEqualFold(FieldKey, v))
}

// KeyContainsFold applies the ContainsFold predicate on the "key" field.
func KeyContainsFold(v string) predicate.SagaValue {
	return predicate.SagaValue(sql.FieldContainsFold(FieldKey, v))
}

// ValueEQ applies the EQ predicate on the "value" field.
func ValueEQ(v []byte) predicate.SagaValue {
	return predicate.SagaValue(sql.FieldEQ(FieldValue, v))
}

// ValueNEQ applies the NEQ predicate on the "value" field.
func ValueNEQ(v []byte) predicate.SagaValue {
	return predicate.SagaValue(sql.FieldNEQ(FieldValue, v))
}

// ValueIn applies the In predicate on the "value" field.
func ValueIn(vs ...[]byte) predicate.SagaValue {
	return predicate.SagaValue(sql.FieldIn(FieldValue, vs...))
}

// ValueNotIn applies the NotIn predicate on the "value" field.
func ValueNotIn(vs ...[]byte) predicate.SagaValue {
	return predicate.SagaValue(sql.FieldNotIn(FieldValue, vs...))
}

// ValueGT applies the GT predicate on the "value" field.
func ValueGT(v []byte) predicate.SagaValue {
	return predicate.SagaValue(sql.FieldGT(FieldValue, v))
}

// ValueGTE applies the GTE predicate on the "value" field.
func ValueGTE(v []byte) predicate.SagaValue {
	return predicate.SagaValue(sql.FieldGTE(FieldValue, v))
}

// ValueLT applies the LT predicate on the "value" field.
func ValueLT(v []byte) predicate.SagaValue {
	return predicate.SagaValue(sql.FieldLT(FieldValue, v))
}

// ValueLTE applies the LTE predicate on the "value" field.
func ValueLTE(v []byte) predicate.SagaValue {
	return predicate.SagaValue(sql.FieldLTE(FieldValue, v))
}

// SagaEntityIDEQ applies the EQ predicate on the "saga_entity_id" field.
func SagaEntityIDEQ(v schema.SagaEntityID) predicate.SagaValue {
	vc := int(v)
	return predicate.SagaValue(sql.FieldEQ(FieldSagaEntityID, vc))
}

// SagaEntityIDNEQ applies the NEQ predicate on the "saga_entity_id" field.
func SagaEntityIDNEQ(v schema.SagaEntityID) predicate.SagaValue {
	vc := int(v)
	return predicate.SagaValue(sql.FieldNEQ(FieldSagaEntityID, vc))
}

// SagaEntityIDIn applies the In predicate on the "saga_entity_id" field.
func SagaEntityIDIn(vs ...schema.SagaEntityID) predicate.SagaValue {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int(vs[i])
	}
	return predicate.SagaValue(sql.FieldIn(FieldSagaEntityID, v...))
}

// SagaEntityIDNotIn applies the NotIn predicate on the "saga_entity_id" field.
func SagaEntityIDNotIn(vs ...schema.SagaEntityID) predicate.SagaValue {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int(vs[i])
	}
	return predicate.SagaValue(sql.FieldNotIn(FieldSagaEntityID, v...))
}

// SagaEntityIDGT applies the GT predicate on the "saga_entity_id" field.
func SagaEntityIDGT(v schema.SagaEntityID) predicate.SagaValue {
	vc := int(v)
	return predicate.SagaValue(sql.FieldGT(FieldSagaEntityID, vc))
}

// SagaEntityIDGTE applies the GTE predicate on the "saga_entity_id" field.
func SagaEntityIDGTE(v schema.SagaEntityID) predicate.SagaValue {
	vc := int(v)
	return predicate.SagaValue(sql.FieldGTE(FieldSagaEntityID, vc))
}

// SagaEntityIDLT applies the LT predicate on the "saga_entity_id" field.
func SagaEntityIDLT(v schema.SagaEntityID) predicate.SagaValue {
	vc := int(v)
	return predicate.SagaValue(sql.FieldLT(FieldSagaEntityID, vc))
}

// SagaEntityIDLTE applies the LTE predicate on the "saga_entity_id" field.
func SagaEntityIDLTE(v schema.SagaEntityID) predicate.SagaValue {
	vc := int(v)
	return predicate.SagaValue(sql.FieldLTE(FieldSagaEntityID, vc))
}

// SagaExecutionIDEQ applies the EQ predicate on the "saga_execution_id" field.
func SagaExecutionIDEQ(v schema.SagaExecutionID) predicate.SagaValue {
	vc := int(v)
	return predicate.SagaValue(sql.FieldEQ(FieldSagaExecutionID, vc))
}

// SagaExecutionIDNEQ applies the NEQ predicate on the "saga_execution_id" field.
func SagaExecutionIDNEQ(v schema.SagaExecutionID) predicate.SagaValue {
	vc := int(v)
	return predicate.SagaValue(sql.FieldNEQ(FieldSagaExecutionID, vc))
}

// SagaExecutionIDIn applies the In predicate on the "saga_execution_id" field.
func SagaExecutionIDIn(vs ...schema.SagaExecutionID) predicate.SagaValue {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int(vs[i])
	}
	return predicate.SagaValue(sql.FieldIn(FieldSagaExecutionID, v...))
}

// SagaExecutionIDNotIn applies the NotIn predicate on the "saga_execution_id" field.
func SagaExecutionIDNotIn(vs ...schema.SagaExecutionID) predicate.SagaValue {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int(vs[i])
	}
	return predicate.SagaValue(sql.FieldNotIn(FieldSagaExecutionID, v...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.SagaValue {
	return predicate.SagaValue(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.SagaValue {
	return predicate.SagaValue(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.SagaValue {
	return predicate.SagaValue(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.SagaValue {
	return predicate.SagaValue(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.SagaValue {
	return predicate.SagaValue(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.SagaValue {
	return predicate.SagaValue(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.SagaValue {
	return predicate.SagaValue(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.SagaValue {
	return predicate.SagaValue(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.SagaValue {
	return predicate.SagaValue(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.SagaValue {
	return predicate.SagaValue(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.SagaValue {
	return predicate.SagaValue(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.SagaValue {
	return predicate.SagaValue(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.SagaValue {
	return predicate.SagaValue(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.SagaValue {
	return predicate.SagaValue(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.SagaValue {
	return predicate.SagaValue(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.SagaValue {
	return predicate.SagaValue(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasExecution applies the HasEdge predicate on the "execution" edge.
func HasExecution() predicate.SagaValue {
	return predicate.SagaValue(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ExecutionTable, ExecutionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExecutionWith applies the HasEdge predicate on the "execution" edge with a given conditions (other predicates).
func HasExecutionWith(preds ...predicate.SagaExecution) predicate.SagaValue {
	return predicate.SagaValue(func(s *sql.Selector) {
		step := newExecutionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSagaData applies the HasEdge predicate on the "saga_data" edge.
func HasSagaData() predicate.SagaValue {
	return predicate.SagaValue(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SagaDataTable, SagaDataColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSagaDataWith applies the HasEdge predicate on the "saga_data" edge with a given conditions (other predicates).
func HasSagaDataWith(preds ...predicate.SagaData) predicate.SagaValue {
	return predicate.SagaValue(func(s *sql.Selector) {
		step := newSagaDataStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExecutionData applies the HasEdge predicate on the "execution_data" edge.
func HasExecutionData() predicate.SagaValue {
	return predicate.SagaValue(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ExecutionDataTable, ExecutionDataColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExecutionDataWith applies the HasEdge predicate on the "execution_data" edge with a given conditions (other predicates).
func HasExecutionDataWith(preds ...predicate.SagaExecutionData) predicate.SagaValue {
	return predicate.SagaValue(func(s *sql.Selector) {
		step := newExecutionDataStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SagaValue) predicate.SagaValue {
	return predicate.SagaValue(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SagaValue) predicate.SagaValue {
	return predicate.SagaValue(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SagaValue) predicate.SagaValue {
	return predicate.SagaValue(sql.NotPredicates(p))
}
