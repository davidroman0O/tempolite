// Code generated by ent, DO NOT EDIT.

package sagavalue

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the sagavalue type in the database.
	Label = "saga_value"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldKey holds the string denoting the key field in the database.
	FieldKey = "key"
	// FieldValue holds the string denoting the value field in the database.
	FieldValue = "value"
	// FieldSagaEntityID holds the string denoting the saga_entity_id field in the database.
	FieldSagaEntityID = "saga_entity_id"
	// FieldSagaExecutionID holds the string denoting the saga_execution_id field in the database.
	FieldSagaExecutionID = "saga_execution_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeExecution holds the string denoting the execution edge name in mutations.
	EdgeExecution = "execution"
	// EdgeSagaData holds the string denoting the saga_data edge name in mutations.
	EdgeSagaData = "saga_data"
	// EdgeExecutionData holds the string denoting the execution_data edge name in mutations.
	EdgeExecutionData = "execution_data"
	// Table holds the table name of the sagavalue in the database.
	Table = "saga_values"
	// ExecutionTable is the table that holds the execution relation/edge.
	ExecutionTable = "saga_values"
	// ExecutionInverseTable is the table name for the SagaExecution entity.
	// It exists in this package in order to avoid circular dependency with the "sagaexecution" package.
	ExecutionInverseTable = "saga_executions"
	// ExecutionColumn is the table column denoting the execution relation/edge.
	ExecutionColumn = "saga_execution_id"
	// SagaDataTable is the table that holds the saga_data relation/edge.
	SagaDataTable = "saga_values"
	// SagaDataInverseTable is the table name for the SagaData entity.
	// It exists in this package in order to avoid circular dependency with the "sagadata" package.
	SagaDataInverseTable = "saga_data"
	// SagaDataColumn is the table column denoting the saga_data relation/edge.
	SagaDataColumn = "saga_data_values"
	// ExecutionDataTable is the table that holds the execution_data relation/edge.
	ExecutionDataTable = "saga_values"
	// ExecutionDataInverseTable is the table name for the SagaExecutionData entity.
	// It exists in this package in order to avoid circular dependency with the "sagaexecutiondata" package.
	ExecutionDataInverseTable = "saga_execution_data"
	// ExecutionDataColumn is the table column denoting the execution_data relation/edge.
	ExecutionDataColumn = "saga_execution_data_values"
)

// Columns holds all SQL columns for sagavalue fields.
var Columns = []string{
	FieldID,
	FieldKey,
	FieldValue,
	FieldSagaEntityID,
	FieldSagaExecutionID,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "saga_values"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"saga_data_values",
	"saga_entity_values",
	"saga_execution_data_values",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the SagaValue queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByKey orders the results by the key field.
func ByKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKey, opts...).ToFunc()
}

// BySagaEntityID orders the results by the saga_entity_id field.
func BySagaEntityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSagaEntityID, opts...).ToFunc()
}

// BySagaExecutionID orders the results by the saga_execution_id field.
func BySagaExecutionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSagaExecutionID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByExecutionField orders the results by execution field.
func ByExecutionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExecutionStep(), sql.OrderByField(field, opts...))
	}
}

// BySagaDataField orders the results by saga_data field.
func BySagaDataField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSagaDataStep(), sql.OrderByField(field, opts...))
	}
}

// ByExecutionDataField orders the results by execution_data field.
func ByExecutionDataField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExecutionDataStep(), sql.OrderByField(field, opts...))
	}
}
func newExecutionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExecutionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ExecutionTable, ExecutionColumn),
	)
}
func newSagaDataStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SagaDataInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SagaDataTable, SagaDataColumn),
	)
}
func newExecutionDataStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExecutionDataInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ExecutionDataTable, ExecutionDataColumn),
	)
}
