// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/tempolite/ent/activity"
	"github.com/davidroman0O/tempolite/ent/activityexecution"
	"github.com/davidroman0O/tempolite/ent/predicate"
	"github.com/davidroman0O/tempolite/ent/schema"
)

// ActivityUpdate is the builder for updating Activity entities.
type ActivityUpdate struct {
	config
	hooks    []Hook
	mutation *ActivityMutation
}

// Where appends a list predicates to the ActivityUpdate builder.
func (au *ActivityUpdate) Where(ps ...predicate.Activity) *ActivityUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetIdentity sets the "identity" field.
func (au *ActivityUpdate) SetIdentity(s string) *ActivityUpdate {
	au.mutation.SetIdentity(s)
	return au
}

// SetNillableIdentity sets the "identity" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableIdentity(s *string) *ActivityUpdate {
	if s != nil {
		au.SetIdentity(*s)
	}
	return au
}

// SetStepID sets the "step_id" field.
func (au *ActivityUpdate) SetStepID(s string) *ActivityUpdate {
	au.mutation.SetStepID(s)
	return au
}

// SetNillableStepID sets the "step_id" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableStepID(s *string) *ActivityUpdate {
	if s != nil {
		au.SetStepID(*s)
	}
	return au
}

// SetStatus sets the "status" field.
func (au *ActivityUpdate) SetStatus(a activity.Status) *ActivityUpdate {
	au.mutation.SetStatus(a)
	return au
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableStatus(a *activity.Status) *ActivityUpdate {
	if a != nil {
		au.SetStatus(*a)
	}
	return au
}

// SetQueueName sets the "queue_name" field.
func (au *ActivityUpdate) SetQueueName(s string) *ActivityUpdate {
	au.mutation.SetQueueName(s)
	return au
}

// SetNillableQueueName sets the "queue_name" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableQueueName(s *string) *ActivityUpdate {
	if s != nil {
		au.SetQueueName(*s)
	}
	return au
}

// SetHandlerName sets the "handler_name" field.
func (au *ActivityUpdate) SetHandlerName(s string) *ActivityUpdate {
	au.mutation.SetHandlerName(s)
	return au
}

// SetNillableHandlerName sets the "handler_name" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableHandlerName(s *string) *ActivityUpdate {
	if s != nil {
		au.SetHandlerName(*s)
	}
	return au
}

// SetInput sets the "input" field.
func (au *ActivityUpdate) SetInput(u [][]uint8) *ActivityUpdate {
	au.mutation.SetInput(u)
	return au
}

// AppendInput appends u to the "input" field.
func (au *ActivityUpdate) AppendInput(u [][]uint8) *ActivityUpdate {
	au.mutation.AppendInput(u)
	return au
}

// SetRetryPolicy sets the "retry_policy" field.
func (au *ActivityUpdate) SetRetryPolicy(sp schema.RetryPolicy) *ActivityUpdate {
	au.mutation.SetRetryPolicy(sp)
	return au
}

// SetNillableRetryPolicy sets the "retry_policy" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableRetryPolicy(sp *schema.RetryPolicy) *ActivityUpdate {
	if sp != nil {
		au.SetRetryPolicy(*sp)
	}
	return au
}

// ClearRetryPolicy clears the value of the "retry_policy" field.
func (au *ActivityUpdate) ClearRetryPolicy() *ActivityUpdate {
	au.mutation.ClearRetryPolicy()
	return au
}

// SetTimeout sets the "timeout" field.
func (au *ActivityUpdate) SetTimeout(t time.Time) *ActivityUpdate {
	au.mutation.SetTimeout(t)
	return au
}

// SetNillableTimeout sets the "timeout" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableTimeout(t *time.Time) *ActivityUpdate {
	if t != nil {
		au.SetTimeout(*t)
	}
	return au
}

// ClearTimeout clears the value of the "timeout" field.
func (au *ActivityUpdate) ClearTimeout() *ActivityUpdate {
	au.mutation.ClearTimeout()
	return au
}

// SetCreatedAt sets the "created_at" field.
func (au *ActivityUpdate) SetCreatedAt(t time.Time) *ActivityUpdate {
	au.mutation.SetCreatedAt(t)
	return au
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableCreatedAt(t *time.Time) *ActivityUpdate {
	if t != nil {
		au.SetCreatedAt(*t)
	}
	return au
}

// AddExecutionIDs adds the "executions" edge to the ActivityExecution entity by IDs.
func (au *ActivityUpdate) AddExecutionIDs(ids ...string) *ActivityUpdate {
	au.mutation.AddExecutionIDs(ids...)
	return au
}

// AddExecutions adds the "executions" edges to the ActivityExecution entity.
func (au *ActivityUpdate) AddExecutions(a ...*ActivityExecution) *ActivityUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddExecutionIDs(ids...)
}

// Mutation returns the ActivityMutation object of the builder.
func (au *ActivityUpdate) Mutation() *ActivityMutation {
	return au.mutation
}

// ClearExecutions clears all "executions" edges to the ActivityExecution entity.
func (au *ActivityUpdate) ClearExecutions() *ActivityUpdate {
	au.mutation.ClearExecutions()
	return au
}

// RemoveExecutionIDs removes the "executions" edge to ActivityExecution entities by IDs.
func (au *ActivityUpdate) RemoveExecutionIDs(ids ...string) *ActivityUpdate {
	au.mutation.RemoveExecutionIDs(ids...)
	return au
}

// RemoveExecutions removes "executions" edges to ActivityExecution entities.
func (au *ActivityUpdate) RemoveExecutions(a ...*ActivityExecution) *ActivityUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveExecutionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *ActivityUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *ActivityUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *ActivityUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *ActivityUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *ActivityUpdate) check() error {
	if v, ok := au.mutation.Identity(); ok {
		if err := activity.IdentityValidator(v); err != nil {
			return &ValidationError{Name: "identity", err: fmt.Errorf(`ent: validator failed for field "Activity.identity": %w`, err)}
		}
	}
	if v, ok := au.mutation.StepID(); ok {
		if err := activity.StepIDValidator(v); err != nil {
			return &ValidationError{Name: "step_id", err: fmt.Errorf(`ent: validator failed for field "Activity.step_id": %w`, err)}
		}
	}
	if v, ok := au.mutation.Status(); ok {
		if err := activity.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Activity.status": %w`, err)}
		}
	}
	if v, ok := au.mutation.QueueName(); ok {
		if err := activity.QueueNameValidator(v); err != nil {
			return &ValidationError{Name: "queue_name", err: fmt.Errorf(`ent: validator failed for field "Activity.queue_name": %w`, err)}
		}
	}
	if v, ok := au.mutation.HandlerName(); ok {
		if err := activity.HandlerNameValidator(v); err != nil {
			return &ValidationError{Name: "handler_name", err: fmt.Errorf(`ent: validator failed for field "Activity.handler_name": %w`, err)}
		}
	}
	return nil
}

func (au *ActivityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(activity.Table, activity.Columns, sqlgraph.NewFieldSpec(activity.FieldID, field.TypeString))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Identity(); ok {
		_spec.SetField(activity.FieldIdentity, field.TypeString, value)
	}
	if value, ok := au.mutation.StepID(); ok {
		_spec.SetField(activity.FieldStepID, field.TypeString, value)
	}
	if value, ok := au.mutation.Status(); ok {
		_spec.SetField(activity.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := au.mutation.QueueName(); ok {
		_spec.SetField(activity.FieldQueueName, field.TypeString, value)
	}
	if value, ok := au.mutation.HandlerName(); ok {
		_spec.SetField(activity.FieldHandlerName, field.TypeString, value)
	}
	if value, ok := au.mutation.Input(); ok {
		_spec.SetField(activity.FieldInput, field.TypeJSON, value)
	}
	if value, ok := au.mutation.AppendedInput(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, activity.FieldInput, value)
		})
	}
	if value, ok := au.mutation.RetryPolicy(); ok {
		_spec.SetField(activity.FieldRetryPolicy, field.TypeJSON, value)
	}
	if au.mutation.RetryPolicyCleared() {
		_spec.ClearField(activity.FieldRetryPolicy, field.TypeJSON)
	}
	if value, ok := au.mutation.Timeout(); ok {
		_spec.SetField(activity.FieldTimeout, field.TypeTime, value)
	}
	if au.mutation.TimeoutCleared() {
		_spec.ClearField(activity.FieldTimeout, field.TypeTime)
	}
	if value, ok := au.mutation.CreatedAt(); ok {
		_spec.SetField(activity.FieldCreatedAt, field.TypeTime, value)
	}
	if au.mutation.ExecutionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activity.ExecutionsTable,
			Columns: []string{activity.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activityexecution.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedExecutionsIDs(); len(nodes) > 0 && !au.mutation.ExecutionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activity.ExecutionsTable,
			Columns: []string{activity.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activityexecution.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ExecutionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activity.ExecutionsTable,
			Columns: []string{activity.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activityexecution.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{activity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// ActivityUpdateOne is the builder for updating a single Activity entity.
type ActivityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ActivityMutation
}

// SetIdentity sets the "identity" field.
func (auo *ActivityUpdateOne) SetIdentity(s string) *ActivityUpdateOne {
	auo.mutation.SetIdentity(s)
	return auo
}

// SetNillableIdentity sets the "identity" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableIdentity(s *string) *ActivityUpdateOne {
	if s != nil {
		auo.SetIdentity(*s)
	}
	return auo
}

// SetStepID sets the "step_id" field.
func (auo *ActivityUpdateOne) SetStepID(s string) *ActivityUpdateOne {
	auo.mutation.SetStepID(s)
	return auo
}

// SetNillableStepID sets the "step_id" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableStepID(s *string) *ActivityUpdateOne {
	if s != nil {
		auo.SetStepID(*s)
	}
	return auo
}

// SetStatus sets the "status" field.
func (auo *ActivityUpdateOne) SetStatus(a activity.Status) *ActivityUpdateOne {
	auo.mutation.SetStatus(a)
	return auo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableStatus(a *activity.Status) *ActivityUpdateOne {
	if a != nil {
		auo.SetStatus(*a)
	}
	return auo
}

// SetQueueName sets the "queue_name" field.
func (auo *ActivityUpdateOne) SetQueueName(s string) *ActivityUpdateOne {
	auo.mutation.SetQueueName(s)
	return auo
}

// SetNillableQueueName sets the "queue_name" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableQueueName(s *string) *ActivityUpdateOne {
	if s != nil {
		auo.SetQueueName(*s)
	}
	return auo
}

// SetHandlerName sets the "handler_name" field.
func (auo *ActivityUpdateOne) SetHandlerName(s string) *ActivityUpdateOne {
	auo.mutation.SetHandlerName(s)
	return auo
}

// SetNillableHandlerName sets the "handler_name" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableHandlerName(s *string) *ActivityUpdateOne {
	if s != nil {
		auo.SetHandlerName(*s)
	}
	return auo
}

// SetInput sets the "input" field.
func (auo *ActivityUpdateOne) SetInput(u [][]uint8) *ActivityUpdateOne {
	auo.mutation.SetInput(u)
	return auo
}

// AppendInput appends u to the "input" field.
func (auo *ActivityUpdateOne) AppendInput(u [][]uint8) *ActivityUpdateOne {
	auo.mutation.AppendInput(u)
	return auo
}

// SetRetryPolicy sets the "retry_policy" field.
func (auo *ActivityUpdateOne) SetRetryPolicy(sp schema.RetryPolicy) *ActivityUpdateOne {
	auo.mutation.SetRetryPolicy(sp)
	return auo
}

// SetNillableRetryPolicy sets the "retry_policy" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableRetryPolicy(sp *schema.RetryPolicy) *ActivityUpdateOne {
	if sp != nil {
		auo.SetRetryPolicy(*sp)
	}
	return auo
}

// ClearRetryPolicy clears the value of the "retry_policy" field.
func (auo *ActivityUpdateOne) ClearRetryPolicy() *ActivityUpdateOne {
	auo.mutation.ClearRetryPolicy()
	return auo
}

// SetTimeout sets the "timeout" field.
func (auo *ActivityUpdateOne) SetTimeout(t time.Time) *ActivityUpdateOne {
	auo.mutation.SetTimeout(t)
	return auo
}

// SetNillableTimeout sets the "timeout" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableTimeout(t *time.Time) *ActivityUpdateOne {
	if t != nil {
		auo.SetTimeout(*t)
	}
	return auo
}

// ClearTimeout clears the value of the "timeout" field.
func (auo *ActivityUpdateOne) ClearTimeout() *ActivityUpdateOne {
	auo.mutation.ClearTimeout()
	return auo
}

// SetCreatedAt sets the "created_at" field.
func (auo *ActivityUpdateOne) SetCreatedAt(t time.Time) *ActivityUpdateOne {
	auo.mutation.SetCreatedAt(t)
	return auo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableCreatedAt(t *time.Time) *ActivityUpdateOne {
	if t != nil {
		auo.SetCreatedAt(*t)
	}
	return auo
}

// AddExecutionIDs adds the "executions" edge to the ActivityExecution entity by IDs.
func (auo *ActivityUpdateOne) AddExecutionIDs(ids ...string) *ActivityUpdateOne {
	auo.mutation.AddExecutionIDs(ids...)
	return auo
}

// AddExecutions adds the "executions" edges to the ActivityExecution entity.
func (auo *ActivityUpdateOne) AddExecutions(a ...*ActivityExecution) *ActivityUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddExecutionIDs(ids...)
}

// Mutation returns the ActivityMutation object of the builder.
func (auo *ActivityUpdateOne) Mutation() *ActivityMutation {
	return auo.mutation
}

// ClearExecutions clears all "executions" edges to the ActivityExecution entity.
func (auo *ActivityUpdateOne) ClearExecutions() *ActivityUpdateOne {
	auo.mutation.ClearExecutions()
	return auo
}

// RemoveExecutionIDs removes the "executions" edge to ActivityExecution entities by IDs.
func (auo *ActivityUpdateOne) RemoveExecutionIDs(ids ...string) *ActivityUpdateOne {
	auo.mutation.RemoveExecutionIDs(ids...)
	return auo
}

// RemoveExecutions removes "executions" edges to ActivityExecution entities.
func (auo *ActivityUpdateOne) RemoveExecutions(a ...*ActivityExecution) *ActivityUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveExecutionIDs(ids...)
}

// Where appends a list predicates to the ActivityUpdate builder.
func (auo *ActivityUpdateOne) Where(ps ...predicate.Activity) *ActivityUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *ActivityUpdateOne) Select(field string, fields ...string) *ActivityUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Activity entity.
func (auo *ActivityUpdateOne) Save(ctx context.Context) (*Activity, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *ActivityUpdateOne) SaveX(ctx context.Context) *Activity {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *ActivityUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *ActivityUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *ActivityUpdateOne) check() error {
	if v, ok := auo.mutation.Identity(); ok {
		if err := activity.IdentityValidator(v); err != nil {
			return &ValidationError{Name: "identity", err: fmt.Errorf(`ent: validator failed for field "Activity.identity": %w`, err)}
		}
	}
	if v, ok := auo.mutation.StepID(); ok {
		if err := activity.StepIDValidator(v); err != nil {
			return &ValidationError{Name: "step_id", err: fmt.Errorf(`ent: validator failed for field "Activity.step_id": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Status(); ok {
		if err := activity.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Activity.status": %w`, err)}
		}
	}
	if v, ok := auo.mutation.QueueName(); ok {
		if err := activity.QueueNameValidator(v); err != nil {
			return &ValidationError{Name: "queue_name", err: fmt.Errorf(`ent: validator failed for field "Activity.queue_name": %w`, err)}
		}
	}
	if v, ok := auo.mutation.HandlerName(); ok {
		if err := activity.HandlerNameValidator(v); err != nil {
			return &ValidationError{Name: "handler_name", err: fmt.Errorf(`ent: validator failed for field "Activity.handler_name": %w`, err)}
		}
	}
	return nil
}

func (auo *ActivityUpdateOne) sqlSave(ctx context.Context) (_node *Activity, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(activity.Table, activity.Columns, sqlgraph.NewFieldSpec(activity.FieldID, field.TypeString))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Activity.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, activity.FieldID)
		for _, f := range fields {
			if !activity.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != activity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Identity(); ok {
		_spec.SetField(activity.FieldIdentity, field.TypeString, value)
	}
	if value, ok := auo.mutation.StepID(); ok {
		_spec.SetField(activity.FieldStepID, field.TypeString, value)
	}
	if value, ok := auo.mutation.Status(); ok {
		_spec.SetField(activity.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := auo.mutation.QueueName(); ok {
		_spec.SetField(activity.FieldQueueName, field.TypeString, value)
	}
	if value, ok := auo.mutation.HandlerName(); ok {
		_spec.SetField(activity.FieldHandlerName, field.TypeString, value)
	}
	if value, ok := auo.mutation.Input(); ok {
		_spec.SetField(activity.FieldInput, field.TypeJSON, value)
	}
	if value, ok := auo.mutation.AppendedInput(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, activity.FieldInput, value)
		})
	}
	if value, ok := auo.mutation.RetryPolicy(); ok {
		_spec.SetField(activity.FieldRetryPolicy, field.TypeJSON, value)
	}
	if auo.mutation.RetryPolicyCleared() {
		_spec.ClearField(activity.FieldRetryPolicy, field.TypeJSON)
	}
	if value, ok := auo.mutation.Timeout(); ok {
		_spec.SetField(activity.FieldTimeout, field.TypeTime, value)
	}
	if auo.mutation.TimeoutCleared() {
		_spec.ClearField(activity.FieldTimeout, field.TypeTime)
	}
	if value, ok := auo.mutation.CreatedAt(); ok {
		_spec.SetField(activity.FieldCreatedAt, field.TypeTime, value)
	}
	if auo.mutation.ExecutionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activity.ExecutionsTable,
			Columns: []string{activity.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activityexecution.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedExecutionsIDs(); len(nodes) > 0 && !auo.mutation.ExecutionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activity.ExecutionsTable,
			Columns: []string{activity.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activityexecution.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ExecutionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activity.ExecutionsTable,
			Columns: []string{activity.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activityexecution.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Activity{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{activity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
