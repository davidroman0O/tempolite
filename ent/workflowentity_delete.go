// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/tempolite/ent/predicate"
	"github.com/davidroman0O/tempolite/ent/workflowentity"
)

// WorkflowEntityDelete is the builder for deleting a WorkflowEntity entity.
type WorkflowEntityDelete struct {
	config
	hooks    []Hook
	mutation *WorkflowEntityMutation
}

// Where appends a list predicates to the WorkflowEntityDelete builder.
func (wed *WorkflowEntityDelete) Where(ps ...predicate.WorkflowEntity) *WorkflowEntityDelete {
	wed.mutation.Where(ps...)
	return wed
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (wed *WorkflowEntityDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, wed.sqlExec, wed.mutation, wed.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (wed *WorkflowEntityDelete) ExecX(ctx context.Context) int {
	n, err := wed.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (wed *WorkflowEntityDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(workflowentity.Table, sqlgraph.NewFieldSpec(workflowentity.FieldID, field.TypeInt))
	if ps := wed.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, wed.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	wed.mutation.done = true
	return affected, err
}

// WorkflowEntityDeleteOne is the builder for deleting a single WorkflowEntity entity.
type WorkflowEntityDeleteOne struct {
	wed *WorkflowEntityDelete
}

// Where appends a list predicates to the WorkflowEntityDelete builder.
func (wedo *WorkflowEntityDeleteOne) Where(ps ...predicate.WorkflowEntity) *WorkflowEntityDeleteOne {
	wedo.wed.mutation.Where(ps...)
	return wedo
}

// Exec executes the deletion query.
func (wedo *WorkflowEntityDeleteOne) Exec(ctx context.Context) error {
	n, err := wedo.wed.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{workflowentity.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (wedo *WorkflowEntityDeleteOne) ExecX(ctx context.Context) {
	if err := wedo.Exec(ctx); err != nil {
		panic(err)
	}
}
