// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/davidroman0O/tempolite/ent/queue"
	"github.com/davidroman0O/tempolite/ent/run"
	"github.com/davidroman0O/tempolite/ent/schema"
	"github.com/davidroman0O/tempolite/ent/workflowdata"
	"github.com/davidroman0O/tempolite/ent/workflowentity"
)

// WorkflowEntity is the model entity for the WorkflowEntity schema.
type WorkflowEntity struct {
	config `json:"-"`
	// ID of the ent.
	ID schema.WorkflowEntityID `json:"id,omitempty"`
	// HandlerName holds the value of the "handler_name" field.
	HandlerName string `json:"handler_name,omitempty"`
	// Type holds the value of the "type" field.
	Type schema.EntityType `json:"type,omitempty"`
	// Status holds the value of the "status" field.
	Status schema.EntityStatus `json:"status,omitempty"`
	// StepID holds the value of the "step_id" field.
	StepID string `json:"step_id,omitempty"`
	// RunID holds the value of the "run_id" field.
	RunID schema.RunID `json:"run_id,omitempty"`
	// RetryPolicy holds the value of the "retry_policy" field.
	RetryPolicy schema.RetryPolicy `json:"retry_policy,omitempty"`
	// RetryState holds the value of the "retry_state" field.
	RetryState schema.RetryState `json:"retry_state,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WorkflowEntityQuery when eager-loading is set.
	Edges          WorkflowEntityEdges `json:"edges"`
	queue_entities *schema.QueueID
	selectValues   sql.SelectValues
}

// WorkflowEntityEdges holds the relations/edges for other nodes in the graph.
type WorkflowEntityEdges struct {
	// Queue holds the value of the queue edge.
	Queue *Queue `json:"queue,omitempty"`
	// Run holds the value of the run edge.
	Run *Run `json:"run,omitempty"`
	// Versions holds the value of the versions edge.
	Versions []*Version `json:"versions,omitempty"`
	// WorkflowData holds the value of the workflow_data edge.
	WorkflowData *WorkflowData `json:"workflow_data,omitempty"`
	// ActivityChildren holds the value of the activity_children edge.
	ActivityChildren []*ActivityEntity `json:"activity_children,omitempty"`
	// SagaChildren holds the value of the saga_children edge.
	SagaChildren []*SagaEntity `json:"saga_children,omitempty"`
	// SideEffectChildren holds the value of the side_effect_children edge.
	SideEffectChildren []*SideEffectEntity `json:"side_effect_children,omitempty"`
	// Executions holds the value of the executions edge.
	Executions []*WorkflowExecution `json:"executions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [8]bool
}

// QueueOrErr returns the Queue value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkflowEntityEdges) QueueOrErr() (*Queue, error) {
	if e.Queue != nil {
		return e.Queue, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: queue.Label}
	}
	return nil, &NotLoadedError{edge: "queue"}
}

// RunOrErr returns the Run value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkflowEntityEdges) RunOrErr() (*Run, error) {
	if e.Run != nil {
		return e.Run, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: run.Label}
	}
	return nil, &NotLoadedError{edge: "run"}
}

// VersionsOrErr returns the Versions value or an error if the edge
// was not loaded in eager-loading.
func (e WorkflowEntityEdges) VersionsOrErr() ([]*Version, error) {
	if e.loadedTypes[2] {
		return e.Versions, nil
	}
	return nil, &NotLoadedError{edge: "versions"}
}

// WorkflowDataOrErr returns the WorkflowData value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkflowEntityEdges) WorkflowDataOrErr() (*WorkflowData, error) {
	if e.WorkflowData != nil {
		return e.WorkflowData, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: workflowdata.Label}
	}
	return nil, &NotLoadedError{edge: "workflow_data"}
}

// ActivityChildrenOrErr returns the ActivityChildren value or an error if the edge
// was not loaded in eager-loading.
func (e WorkflowEntityEdges) ActivityChildrenOrErr() ([]*ActivityEntity, error) {
	if e.loadedTypes[4] {
		return e.ActivityChildren, nil
	}
	return nil, &NotLoadedError{edge: "activity_children"}
}

// SagaChildrenOrErr returns the SagaChildren value or an error if the edge
// was not loaded in eager-loading.
func (e WorkflowEntityEdges) SagaChildrenOrErr() ([]*SagaEntity, error) {
	if e.loadedTypes[5] {
		return e.SagaChildren, nil
	}
	return nil, &NotLoadedError{edge: "saga_children"}
}

// SideEffectChildrenOrErr returns the SideEffectChildren value or an error if the edge
// was not loaded in eager-loading.
func (e WorkflowEntityEdges) SideEffectChildrenOrErr() ([]*SideEffectEntity, error) {
	if e.loadedTypes[6] {
		return e.SideEffectChildren, nil
	}
	return nil, &NotLoadedError{edge: "side_effect_children"}
}

// ExecutionsOrErr returns the Executions value or an error if the edge
// was not loaded in eager-loading.
func (e WorkflowEntityEdges) ExecutionsOrErr() ([]*WorkflowExecution, error) {
	if e.loadedTypes[7] {
		return e.Executions, nil
	}
	return nil, &NotLoadedError{edge: "executions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WorkflowEntity) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case workflowentity.FieldRetryPolicy, workflowentity.FieldRetryState:
			values[i] = new([]byte)
		case workflowentity.FieldID, workflowentity.FieldRunID:
			values[i] = new(sql.NullInt64)
		case workflowentity.FieldHandlerName, workflowentity.FieldType, workflowentity.FieldStatus, workflowentity.FieldStepID:
			values[i] = new(sql.NullString)
		case workflowentity.FieldCreatedAt, workflowentity.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case workflowentity.ForeignKeys[0]: // queue_entities
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WorkflowEntity fields.
func (we *WorkflowEntity) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case workflowentity.FieldID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				we.ID = schema.WorkflowEntityID(value.Int64)
			}
		case workflowentity.FieldHandlerName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field handler_name", values[i])
			} else if value.Valid {
				we.HandlerName = value.String
			}
		case workflowentity.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				we.Type = schema.EntityType(value.String)
			}
		case workflowentity.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				we.Status = schema.EntityStatus(value.String)
			}
		case workflowentity.FieldStepID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field step_id", values[i])
			} else if value.Valid {
				we.StepID = value.String
			}
		case workflowentity.FieldRunID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field run_id", values[i])
			} else if value.Valid {
				we.RunID = schema.RunID(value.Int64)
			}
		case workflowentity.FieldRetryPolicy:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field retry_policy", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &we.RetryPolicy); err != nil {
					return fmt.Errorf("unmarshal field retry_policy: %w", err)
				}
			}
		case workflowentity.FieldRetryState:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field retry_state", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &we.RetryState); err != nil {
					return fmt.Errorf("unmarshal field retry_state: %w", err)
				}
			}
		case workflowentity.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				we.CreatedAt = value.Time
			}
		case workflowentity.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				we.UpdatedAt = value.Time
			}
		case workflowentity.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field queue_entities", values[i])
			} else if value.Valid {
				we.queue_entities = new(schema.QueueID)
				*we.queue_entities = schema.QueueID(value.Int64)
			}
		default:
			we.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WorkflowEntity.
// This includes values selected through modifiers, order, etc.
func (we *WorkflowEntity) Value(name string) (ent.Value, error) {
	return we.selectValues.Get(name)
}

// QueryQueue queries the "queue" edge of the WorkflowEntity entity.
func (we *WorkflowEntity) QueryQueue() *QueueQuery {
	return NewWorkflowEntityClient(we.config).QueryQueue(we)
}

// QueryRun queries the "run" edge of the WorkflowEntity entity.
func (we *WorkflowEntity) QueryRun() *RunQuery {
	return NewWorkflowEntityClient(we.config).QueryRun(we)
}

// QueryVersions queries the "versions" edge of the WorkflowEntity entity.
func (we *WorkflowEntity) QueryVersions() *VersionQuery {
	return NewWorkflowEntityClient(we.config).QueryVersions(we)
}

// QueryWorkflowData queries the "workflow_data" edge of the WorkflowEntity entity.
func (we *WorkflowEntity) QueryWorkflowData() *WorkflowDataQuery {
	return NewWorkflowEntityClient(we.config).QueryWorkflowData(we)
}

// QueryActivityChildren queries the "activity_children" edge of the WorkflowEntity entity.
func (we *WorkflowEntity) QueryActivityChildren() *ActivityEntityQuery {
	return NewWorkflowEntityClient(we.config).QueryActivityChildren(we)
}

// QuerySagaChildren queries the "saga_children" edge of the WorkflowEntity entity.
func (we *WorkflowEntity) QuerySagaChildren() *SagaEntityQuery {
	return NewWorkflowEntityClient(we.config).QuerySagaChildren(we)
}

// QuerySideEffectChildren queries the "side_effect_children" edge of the WorkflowEntity entity.
func (we *WorkflowEntity) QuerySideEffectChildren() *SideEffectEntityQuery {
	return NewWorkflowEntityClient(we.config).QuerySideEffectChildren(we)
}

// QueryExecutions queries the "executions" edge of the WorkflowEntity entity.
func (we *WorkflowEntity) QueryExecutions() *WorkflowExecutionQuery {
	return NewWorkflowEntityClient(we.config).QueryExecutions(we)
}

// Update returns a builder for updating this WorkflowEntity.
// Note that you need to call WorkflowEntity.Unwrap() before calling this method if this WorkflowEntity
// was returned from a transaction, and the transaction was committed or rolled back.
func (we *WorkflowEntity) Update() *WorkflowEntityUpdateOne {
	return NewWorkflowEntityClient(we.config).UpdateOne(we)
}

// Unwrap unwraps the WorkflowEntity entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (we *WorkflowEntity) Unwrap() *WorkflowEntity {
	_tx, ok := we.config.driver.(*txDriver)
	if !ok {
		panic("ent: WorkflowEntity is not a transactional entity")
	}
	we.config.driver = _tx.drv
	return we
}

// String implements the fmt.Stringer.
func (we *WorkflowEntity) String() string {
	var builder strings.Builder
	builder.WriteString("WorkflowEntity(")
	builder.WriteString(fmt.Sprintf("id=%v, ", we.ID))
	builder.WriteString("handler_name=")
	builder.WriteString(we.HandlerName)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", we.Type))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", we.Status))
	builder.WriteString(", ")
	builder.WriteString("step_id=")
	builder.WriteString(we.StepID)
	builder.WriteString(", ")
	builder.WriteString("run_id=")
	builder.WriteString(fmt.Sprintf("%v", we.RunID))
	builder.WriteString(", ")
	builder.WriteString("retry_policy=")
	builder.WriteString(fmt.Sprintf("%v", we.RetryPolicy))
	builder.WriteString(", ")
	builder.WriteString("retry_state=")
	builder.WriteString(fmt.Sprintf("%v", we.RetryState))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(we.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(we.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// WorkflowEntities is a parsable slice of WorkflowEntity.
type WorkflowEntities []*WorkflowEntity
