// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/tempolite/ent/predicate"
	"github.com/davidroman0O/tempolite/ent/sagaexecutiondata"
)

// SagaExecutionDataDelete is the builder for deleting a SagaExecutionData entity.
type SagaExecutionDataDelete struct {
	config
	hooks    []Hook
	mutation *SagaExecutionDataMutation
}

// Where appends a list predicates to the SagaExecutionDataDelete builder.
func (sedd *SagaExecutionDataDelete) Where(ps ...predicate.SagaExecutionData) *SagaExecutionDataDelete {
	sedd.mutation.Where(ps...)
	return sedd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (sedd *SagaExecutionDataDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, sedd.sqlExec, sedd.mutation, sedd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (sedd *SagaExecutionDataDelete) ExecX(ctx context.Context) int {
	n, err := sedd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (sedd *SagaExecutionDataDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(sagaexecutiondata.Table, sqlgraph.NewFieldSpec(sagaexecutiondata.FieldID, field.TypeInt))
	if ps := sedd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, sedd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	sedd.mutation.done = true
	return affected, err
}

// SagaExecutionDataDeleteOne is the builder for deleting a single SagaExecutionData entity.
type SagaExecutionDataDeleteOne struct {
	sedd *SagaExecutionDataDelete
}

// Where appends a list predicates to the SagaExecutionDataDelete builder.
func (seddo *SagaExecutionDataDeleteOne) Where(ps ...predicate.SagaExecutionData) *SagaExecutionDataDeleteOne {
	seddo.sedd.mutation.Where(ps...)
	return seddo
}

// Exec executes the deletion query.
func (seddo *SagaExecutionDataDeleteOne) Exec(ctx context.Context) error {
	n, err := seddo.sedd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{sagaexecutiondata.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (seddo *SagaExecutionDataDeleteOne) ExecX(ctx context.Context) {
	if err := seddo.Exec(ctx); err != nil {
		panic(err)
	}
}
