// Code generated by ent, DO NOT EDIT.

package version

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/davidroman0O/tempolite/ent/predicate"
	"github.com/davidroman0O/tempolite/ent/schema"
)

// ID filters vertices based on their ID field.
func ID(id schema.VersionID) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id schema.VersionID) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id schema.VersionID) predicate.Version {
	return predicate.Version(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...schema.VersionID) predicate.Version {
	return predicate.Version(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...schema.VersionID) predicate.Version {
	return predicate.Version(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id schema.VersionID) predicate.Version {
	return predicate.Version(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id schema.VersionID) predicate.Version {
	return predicate.Version(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id schema.VersionID) predicate.Version {
	return predicate.Version(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id schema.VersionID) predicate.Version {
	return predicate.Version(sql.FieldLTE(FieldID, id))
}

// EntityID applies equality check predicate on the "entity_id" field. It's identical to EntityIDEQ.
func EntityID(v schema.WorkflowEntityID) predicate.Version {
	vc := int(v)
	return predicate.Version(sql.FieldEQ(FieldEntityID, vc))
}

// ChangeID applies equality check predicate on the "change_id" field. It's identical to ChangeIDEQ.
func ChangeID(v string) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldChangeID, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v int) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldVersion, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldUpdatedAt, v))
}

// EntityIDEQ applies the EQ predicate on the "entity_id" field.
func EntityIDEQ(v schema.WorkflowEntityID) predicate.Version {
	vc := int(v)
	return predicate.Version(sql.FieldEQ(FieldEntityID, vc))
}

// EntityIDNEQ applies the NEQ predicate on the "entity_id" field.
func EntityIDNEQ(v schema.WorkflowEntityID) predicate.Version {
	vc := int(v)
	return predicate.Version(sql.FieldNEQ(FieldEntityID, vc))
}

// EntityIDIn applies the In predicate on the "entity_id" field.
func EntityIDIn(vs ...schema.WorkflowEntityID) predicate.Version {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int(vs[i])
	}
	return predicate.Version(sql.FieldIn(FieldEntityID, v...))
}

// EntityIDNotIn applies the NotIn predicate on the "entity_id" field.
func EntityIDNotIn(vs ...schema.WorkflowEntityID) predicate.Version {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int(vs[i])
	}
	return predicate.Version(sql.FieldNotIn(FieldEntityID, v...))
}

// ChangeIDEQ applies the EQ predicate on the "change_id" field.
func ChangeIDEQ(v string) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldChangeID, v))
}

// ChangeIDNEQ applies the NEQ predicate on the "change_id" field.
func ChangeIDNEQ(v string) predicate.Version {
	return predicate.Version(sql.FieldNEQ(FieldChangeID, v))
}

// ChangeIDIn applies the In predicate on the "change_id" field.
func ChangeIDIn(vs ...string) predicate.Version {
	return predicate.Version(sql.FieldIn(FieldChangeID, vs...))
}

// ChangeIDNotIn applies the NotIn predicate on the "change_id" field.
func ChangeIDNotIn(vs ...string) predicate.Version {
	return predicate.Version(sql.FieldNotIn(FieldChangeID, vs...))
}

// ChangeIDGT applies the GT predicate on the "change_id" field.
func ChangeIDGT(v string) predicate.Version {
	return predicate.Version(sql.FieldGT(FieldChangeID, v))
}

// ChangeIDGTE applies the GTE predicate on the "change_id" field.
func ChangeIDGTE(v string) predicate.Version {
	return predicate.Version(sql.FieldGTE(FieldChangeID, v))
}

// ChangeIDLT applies the LT predicate on the "change_id" field.
func ChangeIDLT(v string) predicate.Version {
	return predicate.Version(sql.FieldLT(FieldChangeID, v))
}

// ChangeIDLTE applies the LTE predicate on the "change_id" field.
func ChangeIDLTE(v string) predicate.Version {
	return predicate.Version(sql.FieldLTE(FieldChangeID, v))
}

// ChangeIDContains applies the Contains predicate on the "change_id" field.
func ChangeIDContains(v string) predicate.Version {
	return predicate.Version(sql.FieldContains(FieldChangeID, v))
}

// ChangeIDHasPrefix applies the HasPrefix predicate on the "change_id" field.
func ChangeIDHasPrefix(v string) predicate.Version {
	return predicate.Version(sql.FieldHasPrefix(FieldChangeID, v))
}

// ChangeIDHasSuffix applies the HasSuffix predicate on the "change_id" field.
func ChangeIDHasSuffix(v string) predicate.Version {
	return predicate.Version(sql.FieldHasSuffix(FieldChangeID, v))
}

// ChangeIDEqualFold applies the EqualFold predicate on the "change_id" field.
func ChangeIDEqualFold(v string) predicate.Version {
	return predicate.Version(sql.FieldEqualFold(FieldChangeID, v))
}

// ChangeIDContainsFold applies the ContainsFold predicate on the "change_id" field.
func ChangeIDContainsFold(v string) predicate.Version {
	return predicate.Version(sql.FieldContainsFold(FieldChangeID, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v int) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v int) predicate.Version {
	return predicate.Version(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...int) predicate.Version {
	return predicate.Version(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...int) predicate.Version {
	return predicate.Version(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v int) predicate.Version {
	return predicate.Version(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v int) predicate.Version {
	return predicate.Version(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v int) predicate.Version {
	return predicate.Version(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v int) predicate.Version {
	return predicate.Version(sql.FieldLTE(FieldVersion, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Version {
	return predicate.Version(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Version {
	return predicate.Version(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Version {
	return predicate.Version(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Version {
	return predicate.Version(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Version {
	return predicate.Version(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Version {
	return predicate.Version(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Version {
	return predicate.Version(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Version {
	return predicate.Version(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Version {
	return predicate.Version(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Version {
	return predicate.Version(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Version {
	return predicate.Version(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Version {
	return predicate.Version(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Version {
	return predicate.Version(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Version {
	return predicate.Version(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasWorkflow applies the HasEdge predicate on the "workflow" edge.
func HasWorkflow() predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, WorkflowTable, WorkflowColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWorkflowWith applies the HasEdge predicate on the "workflow" edge with a given conditions (other predicates).
func HasWorkflowWith(preds ...predicate.WorkflowEntity) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		step := newWorkflowStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Version) predicate.Version {
	return predicate.Version(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Version) predicate.Version {
	return predicate.Version(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Version) predicate.Version {
	return predicate.Version(sql.NotPredicates(p))
}
