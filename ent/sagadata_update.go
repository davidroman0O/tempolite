// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/tempolite/ent/predicate"
	"github.com/davidroman0O/tempolite/ent/sagadata"
	"github.com/davidroman0O/tempolite/ent/sagaentity"
	"github.com/davidroman0O/tempolite/ent/sagavalue"
	"github.com/davidroman0O/tempolite/ent/schema"
)

// SagaDataUpdate is the builder for updating SagaData entities.
type SagaDataUpdate struct {
	config
	hooks    []Hook
	mutation *SagaDataMutation
}

// Where appends a list predicates to the SagaDataUpdate builder.
func (sdu *SagaDataUpdate) Where(ps ...predicate.SagaData) *SagaDataUpdate {
	sdu.mutation.Where(ps...)
	return sdu
}

// SetEntityID sets the "entity_id" field.
func (sdu *SagaDataUpdate) SetEntityID(sei schema.SagaEntityID) *SagaDataUpdate {
	sdu.mutation.SetEntityID(sei)
	return sdu
}

// SetNillableEntityID sets the "entity_id" field if the given value is not nil.
func (sdu *SagaDataUpdate) SetNillableEntityID(sei *schema.SagaEntityID) *SagaDataUpdate {
	if sei != nil {
		sdu.SetEntityID(*sei)
	}
	return sdu
}

// SetCreatedAt sets the "created_at" field.
func (sdu *SagaDataUpdate) SetCreatedAt(t time.Time) *SagaDataUpdate {
	sdu.mutation.SetCreatedAt(t)
	return sdu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sdu *SagaDataUpdate) SetNillableCreatedAt(t *time.Time) *SagaDataUpdate {
	if t != nil {
		sdu.SetCreatedAt(*t)
	}
	return sdu
}

// SetUpdatedAt sets the "updated_at" field.
func (sdu *SagaDataUpdate) SetUpdatedAt(t time.Time) *SagaDataUpdate {
	sdu.mutation.SetUpdatedAt(t)
	return sdu
}

// SetSagaID sets the "saga" edge to the SagaEntity entity by ID.
func (sdu *SagaDataUpdate) SetSagaID(id schema.SagaEntityID) *SagaDataUpdate {
	sdu.mutation.SetSagaID(id)
	return sdu
}

// SetSaga sets the "saga" edge to the SagaEntity entity.
func (sdu *SagaDataUpdate) SetSaga(s *SagaEntity) *SagaDataUpdate {
	return sdu.SetSagaID(s.ID)
}

// AddValueIDs adds the "values" edge to the SagaValue entity by IDs.
func (sdu *SagaDataUpdate) AddValueIDs(ids ...schema.SagaValueID) *SagaDataUpdate {
	sdu.mutation.AddValueIDs(ids...)
	return sdu
}

// AddValues adds the "values" edges to the SagaValue entity.
func (sdu *SagaDataUpdate) AddValues(s ...*SagaValue) *SagaDataUpdate {
	ids := make([]schema.SagaValueID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sdu.AddValueIDs(ids...)
}

// Mutation returns the SagaDataMutation object of the builder.
func (sdu *SagaDataUpdate) Mutation() *SagaDataMutation {
	return sdu.mutation
}

// ClearSaga clears the "saga" edge to the SagaEntity entity.
func (sdu *SagaDataUpdate) ClearSaga() *SagaDataUpdate {
	sdu.mutation.ClearSaga()
	return sdu
}

// ClearValues clears all "values" edges to the SagaValue entity.
func (sdu *SagaDataUpdate) ClearValues() *SagaDataUpdate {
	sdu.mutation.ClearValues()
	return sdu
}

// RemoveValueIDs removes the "values" edge to SagaValue entities by IDs.
func (sdu *SagaDataUpdate) RemoveValueIDs(ids ...schema.SagaValueID) *SagaDataUpdate {
	sdu.mutation.RemoveValueIDs(ids...)
	return sdu
}

// RemoveValues removes "values" edges to SagaValue entities.
func (sdu *SagaDataUpdate) RemoveValues(s ...*SagaValue) *SagaDataUpdate {
	ids := make([]schema.SagaValueID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sdu.RemoveValueIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sdu *SagaDataUpdate) Save(ctx context.Context) (int, error) {
	sdu.defaults()
	return withHooks(ctx, sdu.sqlSave, sdu.mutation, sdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sdu *SagaDataUpdate) SaveX(ctx context.Context) int {
	affected, err := sdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sdu *SagaDataUpdate) Exec(ctx context.Context) error {
	_, err := sdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sdu *SagaDataUpdate) ExecX(ctx context.Context) {
	if err := sdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sdu *SagaDataUpdate) defaults() {
	if _, ok := sdu.mutation.UpdatedAt(); !ok {
		v := sagadata.UpdateDefaultUpdatedAt()
		sdu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sdu *SagaDataUpdate) check() error {
	if sdu.mutation.SagaCleared() && len(sdu.mutation.SagaIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SagaData.saga"`)
	}
	return nil
}

func (sdu *SagaDataUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sdu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(sagadata.Table, sagadata.Columns, sqlgraph.NewFieldSpec(sagadata.FieldID, field.TypeInt))
	if ps := sdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sdu.mutation.CreatedAt(); ok {
		_spec.SetField(sagadata.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := sdu.mutation.UpdatedAt(); ok {
		_spec.SetField(sagadata.FieldUpdatedAt, field.TypeTime, value)
	}
	if sdu.mutation.SagaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   sagadata.SagaTable,
			Columns: []string{sagadata.SagaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagaentity.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sdu.mutation.SagaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   sagadata.SagaTable,
			Columns: []string{sagadata.SagaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagaentity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sdu.mutation.ValuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sagadata.ValuesTable,
			Columns: []string{sagadata.ValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagavalue.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sdu.mutation.RemovedValuesIDs(); len(nodes) > 0 && !sdu.mutation.ValuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sagadata.ValuesTable,
			Columns: []string{sagadata.ValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagavalue.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sdu.mutation.ValuesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sagadata.ValuesTable,
			Columns: []string{sagadata.ValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagavalue.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sagadata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sdu.mutation.done = true
	return n, nil
}

// SagaDataUpdateOne is the builder for updating a single SagaData entity.
type SagaDataUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SagaDataMutation
}

// SetEntityID sets the "entity_id" field.
func (sduo *SagaDataUpdateOne) SetEntityID(sei schema.SagaEntityID) *SagaDataUpdateOne {
	sduo.mutation.SetEntityID(sei)
	return sduo
}

// SetNillableEntityID sets the "entity_id" field if the given value is not nil.
func (sduo *SagaDataUpdateOne) SetNillableEntityID(sei *schema.SagaEntityID) *SagaDataUpdateOne {
	if sei != nil {
		sduo.SetEntityID(*sei)
	}
	return sduo
}

// SetCreatedAt sets the "created_at" field.
func (sduo *SagaDataUpdateOne) SetCreatedAt(t time.Time) *SagaDataUpdateOne {
	sduo.mutation.SetCreatedAt(t)
	return sduo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sduo *SagaDataUpdateOne) SetNillableCreatedAt(t *time.Time) *SagaDataUpdateOne {
	if t != nil {
		sduo.SetCreatedAt(*t)
	}
	return sduo
}

// SetUpdatedAt sets the "updated_at" field.
func (sduo *SagaDataUpdateOne) SetUpdatedAt(t time.Time) *SagaDataUpdateOne {
	sduo.mutation.SetUpdatedAt(t)
	return sduo
}

// SetSagaID sets the "saga" edge to the SagaEntity entity by ID.
func (sduo *SagaDataUpdateOne) SetSagaID(id schema.SagaEntityID) *SagaDataUpdateOne {
	sduo.mutation.SetSagaID(id)
	return sduo
}

// SetSaga sets the "saga" edge to the SagaEntity entity.
func (sduo *SagaDataUpdateOne) SetSaga(s *SagaEntity) *SagaDataUpdateOne {
	return sduo.SetSagaID(s.ID)
}

// AddValueIDs adds the "values" edge to the SagaValue entity by IDs.
func (sduo *SagaDataUpdateOne) AddValueIDs(ids ...schema.SagaValueID) *SagaDataUpdateOne {
	sduo.mutation.AddValueIDs(ids...)
	return sduo
}

// AddValues adds the "values" edges to the SagaValue entity.
func (sduo *SagaDataUpdateOne) AddValues(s ...*SagaValue) *SagaDataUpdateOne {
	ids := make([]schema.SagaValueID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sduo.AddValueIDs(ids...)
}

// Mutation returns the SagaDataMutation object of the builder.
func (sduo *SagaDataUpdateOne) Mutation() *SagaDataMutation {
	return sduo.mutation
}

// ClearSaga clears the "saga" edge to the SagaEntity entity.
func (sduo *SagaDataUpdateOne) ClearSaga() *SagaDataUpdateOne {
	sduo.mutation.ClearSaga()
	return sduo
}

// ClearValues clears all "values" edges to the SagaValue entity.
func (sduo *SagaDataUpdateOne) ClearValues() *SagaDataUpdateOne {
	sduo.mutation.ClearValues()
	return sduo
}

// RemoveValueIDs removes the "values" edge to SagaValue entities by IDs.
func (sduo *SagaDataUpdateOne) RemoveValueIDs(ids ...schema.SagaValueID) *SagaDataUpdateOne {
	sduo.mutation.RemoveValueIDs(ids...)
	return sduo
}

// RemoveValues removes "values" edges to SagaValue entities.
func (sduo *SagaDataUpdateOne) RemoveValues(s ...*SagaValue) *SagaDataUpdateOne {
	ids := make([]schema.SagaValueID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sduo.RemoveValueIDs(ids...)
}

// Where appends a list predicates to the SagaDataUpdate builder.
func (sduo *SagaDataUpdateOne) Where(ps ...predicate.SagaData) *SagaDataUpdateOne {
	sduo.mutation.Where(ps...)
	return sduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sduo *SagaDataUpdateOne) Select(field string, fields ...string) *SagaDataUpdateOne {
	sduo.fields = append([]string{field}, fields...)
	return sduo
}

// Save executes the query and returns the updated SagaData entity.
func (sduo *SagaDataUpdateOne) Save(ctx context.Context) (*SagaData, error) {
	sduo.defaults()
	return withHooks(ctx, sduo.sqlSave, sduo.mutation, sduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sduo *SagaDataUpdateOne) SaveX(ctx context.Context) *SagaData {
	node, err := sduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sduo *SagaDataUpdateOne) Exec(ctx context.Context) error {
	_, err := sduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sduo *SagaDataUpdateOne) ExecX(ctx context.Context) {
	if err := sduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sduo *SagaDataUpdateOne) defaults() {
	if _, ok := sduo.mutation.UpdatedAt(); !ok {
		v := sagadata.UpdateDefaultUpdatedAt()
		sduo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sduo *SagaDataUpdateOne) check() error {
	if sduo.mutation.SagaCleared() && len(sduo.mutation.SagaIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SagaData.saga"`)
	}
	return nil
}

func (sduo *SagaDataUpdateOne) sqlSave(ctx context.Context) (_node *SagaData, err error) {
	if err := sduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(sagadata.Table, sagadata.Columns, sqlgraph.NewFieldSpec(sagadata.FieldID, field.TypeInt))
	id, ok := sduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SagaData.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sagadata.FieldID)
		for _, f := range fields {
			if !sagadata.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sagadata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sduo.mutation.CreatedAt(); ok {
		_spec.SetField(sagadata.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := sduo.mutation.UpdatedAt(); ok {
		_spec.SetField(sagadata.FieldUpdatedAt, field.TypeTime, value)
	}
	if sduo.mutation.SagaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   sagadata.SagaTable,
			Columns: []string{sagadata.SagaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagaentity.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sduo.mutation.SagaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   sagadata.SagaTable,
			Columns: []string{sagadata.SagaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagaentity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sduo.mutation.ValuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sagadata.ValuesTable,
			Columns: []string{sagadata.ValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagavalue.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sduo.mutation.RemovedValuesIDs(); len(nodes) > 0 && !sduo.mutation.ValuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sagadata.ValuesTable,
			Columns: []string{sagadata.ValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagavalue.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sduo.mutation.ValuesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sagadata.ValuesTable,
			Columns: []string{sagadata.ValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagavalue.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SagaData{config: sduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sagadata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sduo.mutation.done = true
	return _node, nil
}
