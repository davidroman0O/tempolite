// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/tempolite/ent/predicate"
	"github.com/davidroman0O/tempolite/ent/sagaexecution"
	"github.com/davidroman0O/tempolite/ent/sagaexecutiondata"
	"github.com/davidroman0O/tempolite/ent/sagavalue"
	"github.com/davidroman0O/tempolite/ent/schema"
)

// SagaExecutionDataQuery is the builder for querying SagaExecutionData entities.
type SagaExecutionDataQuery struct {
	config
	ctx           *QueryContext
	order         []sagaexecutiondata.OrderOption
	inters        []Interceptor
	predicates    []predicate.SagaExecutionData
	withExecution *SagaExecutionQuery
	withValues    *SagaValueQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SagaExecutionDataQuery builder.
func (sedq *SagaExecutionDataQuery) Where(ps ...predicate.SagaExecutionData) *SagaExecutionDataQuery {
	sedq.predicates = append(sedq.predicates, ps...)
	return sedq
}

// Limit the number of records to be returned by this query.
func (sedq *SagaExecutionDataQuery) Limit(limit int) *SagaExecutionDataQuery {
	sedq.ctx.Limit = &limit
	return sedq
}

// Offset to start from.
func (sedq *SagaExecutionDataQuery) Offset(offset int) *SagaExecutionDataQuery {
	sedq.ctx.Offset = &offset
	return sedq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (sedq *SagaExecutionDataQuery) Unique(unique bool) *SagaExecutionDataQuery {
	sedq.ctx.Unique = &unique
	return sedq
}

// Order specifies how the records should be ordered.
func (sedq *SagaExecutionDataQuery) Order(o ...sagaexecutiondata.OrderOption) *SagaExecutionDataQuery {
	sedq.order = append(sedq.order, o...)
	return sedq
}

// QueryExecution chains the current query on the "execution" edge.
func (sedq *SagaExecutionDataQuery) QueryExecution() *SagaExecutionQuery {
	query := (&SagaExecutionClient{config: sedq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sedq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sedq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(sagaexecutiondata.Table, sagaexecutiondata.FieldID, selector),
			sqlgraph.To(sagaexecution.Table, sagaexecution.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, sagaexecutiondata.ExecutionTable, sagaexecutiondata.ExecutionColumn),
		)
		fromU = sqlgraph.SetNeighbors(sedq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryValues chains the current query on the "values" edge.
func (sedq *SagaExecutionDataQuery) QueryValues() *SagaValueQuery {
	query := (&SagaValueClient{config: sedq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sedq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sedq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(sagaexecutiondata.Table, sagaexecutiondata.FieldID, selector),
			sqlgraph.To(sagavalue.Table, sagavalue.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, sagaexecutiondata.ValuesTable, sagaexecutiondata.ValuesColumn),
		)
		fromU = sqlgraph.SetNeighbors(sedq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first SagaExecutionData entity from the query.
// Returns a *NotFoundError when no SagaExecutionData was found.
func (sedq *SagaExecutionDataQuery) First(ctx context.Context) (*SagaExecutionData, error) {
	nodes, err := sedq.Limit(1).All(setContextOp(ctx, sedq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{sagaexecutiondata.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (sedq *SagaExecutionDataQuery) FirstX(ctx context.Context) *SagaExecutionData {
	node, err := sedq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SagaExecutionData ID from the query.
// Returns a *NotFoundError when no SagaExecutionData ID was found.
func (sedq *SagaExecutionDataQuery) FirstID(ctx context.Context) (id schema.SagaExecutionDataID, err error) {
	var ids []schema.SagaExecutionDataID
	if ids, err = sedq.Limit(1).IDs(setContextOp(ctx, sedq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{sagaexecutiondata.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (sedq *SagaExecutionDataQuery) FirstIDX(ctx context.Context) schema.SagaExecutionDataID {
	id, err := sedq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SagaExecutionData entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one SagaExecutionData entity is found.
// Returns a *NotFoundError when no SagaExecutionData entities are found.
func (sedq *SagaExecutionDataQuery) Only(ctx context.Context) (*SagaExecutionData, error) {
	nodes, err := sedq.Limit(2).All(setContextOp(ctx, sedq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{sagaexecutiondata.Label}
	default:
		return nil, &NotSingularError{sagaexecutiondata.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (sedq *SagaExecutionDataQuery) OnlyX(ctx context.Context) *SagaExecutionData {
	node, err := sedq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SagaExecutionData ID in the query.
// Returns a *NotSingularError when more than one SagaExecutionData ID is found.
// Returns a *NotFoundError when no entities are found.
func (sedq *SagaExecutionDataQuery) OnlyID(ctx context.Context) (id schema.SagaExecutionDataID, err error) {
	var ids []schema.SagaExecutionDataID
	if ids, err = sedq.Limit(2).IDs(setContextOp(ctx, sedq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{sagaexecutiondata.Label}
	default:
		err = &NotSingularError{sagaexecutiondata.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (sedq *SagaExecutionDataQuery) OnlyIDX(ctx context.Context) schema.SagaExecutionDataID {
	id, err := sedq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SagaExecutionDataSlice.
func (sedq *SagaExecutionDataQuery) All(ctx context.Context) ([]*SagaExecutionData, error) {
	ctx = setContextOp(ctx, sedq.ctx, ent.OpQueryAll)
	if err := sedq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*SagaExecutionData, *SagaExecutionDataQuery]()
	return withInterceptors[[]*SagaExecutionData](ctx, sedq, qr, sedq.inters)
}

// AllX is like All, but panics if an error occurs.
func (sedq *SagaExecutionDataQuery) AllX(ctx context.Context) []*SagaExecutionData {
	nodes, err := sedq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SagaExecutionData IDs.
func (sedq *SagaExecutionDataQuery) IDs(ctx context.Context) (ids []schema.SagaExecutionDataID, err error) {
	if sedq.ctx.Unique == nil && sedq.path != nil {
		sedq.Unique(true)
	}
	ctx = setContextOp(ctx, sedq.ctx, ent.OpQueryIDs)
	if err = sedq.Select(sagaexecutiondata.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (sedq *SagaExecutionDataQuery) IDsX(ctx context.Context) []schema.SagaExecutionDataID {
	ids, err := sedq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (sedq *SagaExecutionDataQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, sedq.ctx, ent.OpQueryCount)
	if err := sedq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, sedq, querierCount[*SagaExecutionDataQuery](), sedq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (sedq *SagaExecutionDataQuery) CountX(ctx context.Context) int {
	count, err := sedq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (sedq *SagaExecutionDataQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, sedq.ctx, ent.OpQueryExist)
	switch _, err := sedq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (sedq *SagaExecutionDataQuery) ExistX(ctx context.Context) bool {
	exist, err := sedq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SagaExecutionDataQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (sedq *SagaExecutionDataQuery) Clone() *SagaExecutionDataQuery {
	if sedq == nil {
		return nil
	}
	return &SagaExecutionDataQuery{
		config:        sedq.config,
		ctx:           sedq.ctx.Clone(),
		order:         append([]sagaexecutiondata.OrderOption{}, sedq.order...),
		inters:        append([]Interceptor{}, sedq.inters...),
		predicates:    append([]predicate.SagaExecutionData{}, sedq.predicates...),
		withExecution: sedq.withExecution.Clone(),
		withValues:    sedq.withValues.Clone(),
		// clone intermediate query.
		sql:  sedq.sql.Clone(),
		path: sedq.path,
	}
}

// WithExecution tells the query-builder to eager-load the nodes that are connected to
// the "execution" edge. The optional arguments are used to configure the query builder of the edge.
func (sedq *SagaExecutionDataQuery) WithExecution(opts ...func(*SagaExecutionQuery)) *SagaExecutionDataQuery {
	query := (&SagaExecutionClient{config: sedq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sedq.withExecution = query
	return sedq
}

// WithValues tells the query-builder to eager-load the nodes that are connected to
// the "values" edge. The optional arguments are used to configure the query builder of the edge.
func (sedq *SagaExecutionDataQuery) WithValues(opts ...func(*SagaValueQuery)) *SagaExecutionDataQuery {
	query := (&SagaValueClient{config: sedq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sedq.withValues = query
	return sedq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ExecutionID schema.SagaExecutionID `json:"execution_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SagaExecutionData.Query().
//		GroupBy(sagaexecutiondata.FieldExecutionID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (sedq *SagaExecutionDataQuery) GroupBy(field string, fields ...string) *SagaExecutionDataGroupBy {
	sedq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &SagaExecutionDataGroupBy{build: sedq}
	grbuild.flds = &sedq.ctx.Fields
	grbuild.label = sagaexecutiondata.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ExecutionID schema.SagaExecutionID `json:"execution_id,omitempty"`
//	}
//
//	client.SagaExecutionData.Query().
//		Select(sagaexecutiondata.FieldExecutionID).
//		Scan(ctx, &v)
func (sedq *SagaExecutionDataQuery) Select(fields ...string) *SagaExecutionDataSelect {
	sedq.ctx.Fields = append(sedq.ctx.Fields, fields...)
	sbuild := &SagaExecutionDataSelect{SagaExecutionDataQuery: sedq}
	sbuild.label = sagaexecutiondata.Label
	sbuild.flds, sbuild.scan = &sedq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a SagaExecutionDataSelect configured with the given aggregations.
func (sedq *SagaExecutionDataQuery) Aggregate(fns ...AggregateFunc) *SagaExecutionDataSelect {
	return sedq.Select().Aggregate(fns...)
}

func (sedq *SagaExecutionDataQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range sedq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, sedq); err != nil {
				return err
			}
		}
	}
	for _, f := range sedq.ctx.Fields {
		if !sagaexecutiondata.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if sedq.path != nil {
		prev, err := sedq.path(ctx)
		if err != nil {
			return err
		}
		sedq.sql = prev
	}
	return nil
}

func (sedq *SagaExecutionDataQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*SagaExecutionData, error) {
	var (
		nodes       = []*SagaExecutionData{}
		_spec       = sedq.querySpec()
		loadedTypes = [2]bool{
			sedq.withExecution != nil,
			sedq.withValues != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*SagaExecutionData).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &SagaExecutionData{config: sedq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, sedq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := sedq.withExecution; query != nil {
		if err := sedq.loadExecution(ctx, query, nodes, nil,
			func(n *SagaExecutionData, e *SagaExecution) { n.Edges.Execution = e }); err != nil {
			return nil, err
		}
	}
	if query := sedq.withValues; query != nil {
		if err := sedq.loadValues(ctx, query, nodes,
			func(n *SagaExecutionData) { n.Edges.Values = []*SagaValue{} },
			func(n *SagaExecutionData, e *SagaValue) { n.Edges.Values = append(n.Edges.Values, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (sedq *SagaExecutionDataQuery) loadExecution(ctx context.Context, query *SagaExecutionQuery, nodes []*SagaExecutionData, init func(*SagaExecutionData), assign func(*SagaExecutionData, *SagaExecution)) error {
	ids := make([]schema.SagaExecutionID, 0, len(nodes))
	nodeids := make(map[schema.SagaExecutionID][]*SagaExecutionData)
	for i := range nodes {
		fk := nodes[i].ExecutionID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(sagaexecution.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "execution_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (sedq *SagaExecutionDataQuery) loadValues(ctx context.Context, query *SagaValueQuery, nodes []*SagaExecutionData, init func(*SagaExecutionData), assign func(*SagaExecutionData, *SagaValue)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[schema.SagaExecutionDataID]*SagaExecutionData)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.SagaValue(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(sagaexecutiondata.ValuesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.saga_execution_data_values
		if fk == nil {
			return fmt.Errorf(`foreign-key "saga_execution_data_values" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "saga_execution_data_values" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (sedq *SagaExecutionDataQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := sedq.querySpec()
	_spec.Node.Columns = sedq.ctx.Fields
	if len(sedq.ctx.Fields) > 0 {
		_spec.Unique = sedq.ctx.Unique != nil && *sedq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, sedq.driver, _spec)
}

func (sedq *SagaExecutionDataQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(sagaexecutiondata.Table, sagaexecutiondata.Columns, sqlgraph.NewFieldSpec(sagaexecutiondata.FieldID, field.TypeInt))
	_spec.From = sedq.sql
	if unique := sedq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if sedq.path != nil {
		_spec.Unique = true
	}
	if fields := sedq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sagaexecutiondata.FieldID)
		for i := range fields {
			if fields[i] != sagaexecutiondata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if sedq.withExecution != nil {
			_spec.Node.AddColumnOnce(sagaexecutiondata.FieldExecutionID)
		}
	}
	if ps := sedq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := sedq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := sedq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := sedq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (sedq *SagaExecutionDataQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(sedq.driver.Dialect())
	t1 := builder.Table(sagaexecutiondata.Table)
	columns := sedq.ctx.Fields
	if len(columns) == 0 {
		columns = sagaexecutiondata.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if sedq.sql != nil {
		selector = sedq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if sedq.ctx.Unique != nil && *sedq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range sedq.predicates {
		p(selector)
	}
	for _, p := range sedq.order {
		p(selector)
	}
	if offset := sedq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := sedq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// SagaExecutionDataGroupBy is the group-by builder for SagaExecutionData entities.
type SagaExecutionDataGroupBy struct {
	selector
	build *SagaExecutionDataQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sedgb *SagaExecutionDataGroupBy) Aggregate(fns ...AggregateFunc) *SagaExecutionDataGroupBy {
	sedgb.fns = append(sedgb.fns, fns...)
	return sedgb
}

// Scan applies the selector query and scans the result into the given value.
func (sedgb *SagaExecutionDataGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sedgb.build.ctx, ent.OpQueryGroupBy)
	if err := sedgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SagaExecutionDataQuery, *SagaExecutionDataGroupBy](ctx, sedgb.build, sedgb, sedgb.build.inters, v)
}

func (sedgb *SagaExecutionDataGroupBy) sqlScan(ctx context.Context, root *SagaExecutionDataQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(sedgb.fns))
	for _, fn := range sedgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*sedgb.flds)+len(sedgb.fns))
		for _, f := range *sedgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*sedgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sedgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// SagaExecutionDataSelect is the builder for selecting fields of SagaExecutionData entities.
type SagaExecutionDataSelect struct {
	*SagaExecutionDataQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (seds *SagaExecutionDataSelect) Aggregate(fns ...AggregateFunc) *SagaExecutionDataSelect {
	seds.fns = append(seds.fns, fns...)
	return seds
}

// Scan applies the selector query and scans the result into the given value.
func (seds *SagaExecutionDataSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, seds.ctx, ent.OpQuerySelect)
	if err := seds.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SagaExecutionDataQuery, *SagaExecutionDataSelect](ctx, seds.SagaExecutionDataQuery, seds, seds.inters, v)
}

func (seds *SagaExecutionDataSelect) sqlScan(ctx context.Context, root *SagaExecutionDataQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(seds.fns))
	for _, fn := range seds.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*seds.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := seds.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
