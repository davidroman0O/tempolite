// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/davidroman0O/tempolite/ent/schema"
	"github.com/davidroman0O/tempolite/ent/workflowdata"
	"github.com/davidroman0O/tempolite/ent/workflowentity"
)

// WorkflowData is the model entity for the WorkflowData schema.
type WorkflowData struct {
	config `json:"-"`
	// ID of the ent.
	ID schema.WorkflowDataID `json:"id,omitempty"`
	// EntityID holds the value of the "entity_id" field.
	EntityID schema.WorkflowEntityID `json:"entity_id,omitempty"`
	// Duration holds the value of the "duration" field.
	Duration string `json:"duration,omitempty"`
	// Paused holds the value of the "paused" field.
	Paused bool `json:"paused,omitempty"`
	// Resumable holds the value of the "resumable" field.
	Resumable bool `json:"resumable,omitempty"`
	// IsRoot holds the value of the "is_root" field.
	IsRoot bool `json:"is_root,omitempty"`
	// Inputs holds the value of the "inputs" field.
	Inputs [][]uint8 `json:"inputs,omitempty"`
	// ContinuedFrom holds the value of the "continued_from" field.
	ContinuedFrom *schema.WorkflowEntityID `json:"continued_from,omitempty"`
	// ContinuedExecutionFrom holds the value of the "continued_execution_from" field.
	ContinuedExecutionFrom *schema.WorkflowExecutionID `json:"continued_execution_from,omitempty"`
	// WorkflowStepID holds the value of the "workflow_step_id" field.
	WorkflowStepID *string `json:"workflow_step_id,omitempty"`
	// WorkflowFrom holds the value of the "workflow_from" field.
	WorkflowFrom *schema.WorkflowEntityID `json:"workflow_from,omitempty"`
	// WorkflowExecutionFrom holds the value of the "workflow_execution_from" field.
	WorkflowExecutionFrom *schema.WorkflowExecutionID `json:"workflow_execution_from,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WorkflowDataQuery when eager-loading is set.
	Edges        WorkflowDataEdges `json:"edges"`
	selectValues sql.SelectValues
}

// WorkflowDataEdges holds the relations/edges for other nodes in the graph.
type WorkflowDataEdges struct {
	// Workflow holds the value of the workflow edge.
	Workflow *WorkflowEntity `json:"workflow,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// WorkflowOrErr returns the Workflow value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkflowDataEdges) WorkflowOrErr() (*WorkflowEntity, error) {
	if e.Workflow != nil {
		return e.Workflow, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: workflowentity.Label}
	}
	return nil, &NotLoadedError{edge: "workflow"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WorkflowData) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case workflowdata.FieldInputs:
			values[i] = new([]byte)
		case workflowdata.FieldPaused, workflowdata.FieldResumable, workflowdata.FieldIsRoot:
			values[i] = new(sql.NullBool)
		case workflowdata.FieldID, workflowdata.FieldEntityID, workflowdata.FieldContinuedFrom, workflowdata.FieldContinuedExecutionFrom, workflowdata.FieldWorkflowFrom, workflowdata.FieldWorkflowExecutionFrom:
			values[i] = new(sql.NullInt64)
		case workflowdata.FieldDuration, workflowdata.FieldWorkflowStepID:
			values[i] = new(sql.NullString)
		case workflowdata.FieldCreatedAt, workflowdata.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WorkflowData fields.
func (wd *WorkflowData) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case workflowdata.FieldID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				wd.ID = schema.WorkflowDataID(value.Int64)
			}
		case workflowdata.FieldEntityID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field entity_id", values[i])
			} else if value.Valid {
				wd.EntityID = schema.WorkflowEntityID(value.Int64)
			}
		case workflowdata.FieldDuration:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field duration", values[i])
			} else if value.Valid {
				wd.Duration = value.String
			}
		case workflowdata.FieldPaused:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field paused", values[i])
			} else if value.Valid {
				wd.Paused = value.Bool
			}
		case workflowdata.FieldResumable:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field resumable", values[i])
			} else if value.Valid {
				wd.Resumable = value.Bool
			}
		case workflowdata.FieldIsRoot:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_root", values[i])
			} else if value.Valid {
				wd.IsRoot = value.Bool
			}
		case workflowdata.FieldInputs:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field inputs", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &wd.Inputs); err != nil {
					return fmt.Errorf("unmarshal field inputs: %w", err)
				}
			}
		case workflowdata.FieldContinuedFrom:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field continued_from", values[i])
			} else if value.Valid {
				wd.ContinuedFrom = new(schema.WorkflowEntityID)
				*wd.ContinuedFrom = schema.WorkflowEntityID(value.Int64)
			}
		case workflowdata.FieldContinuedExecutionFrom:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field continued_execution_from", values[i])
			} else if value.Valid {
				wd.ContinuedExecutionFrom = new(schema.WorkflowExecutionID)
				*wd.ContinuedExecutionFrom = schema.WorkflowExecutionID(value.Int64)
			}
		case workflowdata.FieldWorkflowStepID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field workflow_step_id", values[i])
			} else if value.Valid {
				wd.WorkflowStepID = new(string)
				*wd.WorkflowStepID = value.String
			}
		case workflowdata.FieldWorkflowFrom:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field workflow_from", values[i])
			} else if value.Valid {
				wd.WorkflowFrom = new(schema.WorkflowEntityID)
				*wd.WorkflowFrom = schema.WorkflowEntityID(value.Int64)
			}
		case workflowdata.FieldWorkflowExecutionFrom:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field workflow_execution_from", values[i])
			} else if value.Valid {
				wd.WorkflowExecutionFrom = new(schema.WorkflowExecutionID)
				*wd.WorkflowExecutionFrom = schema.WorkflowExecutionID(value.Int64)
			}
		case workflowdata.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				wd.CreatedAt = value.Time
			}
		case workflowdata.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				wd.UpdatedAt = value.Time
			}
		default:
			wd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WorkflowData.
// This includes values selected through modifiers, order, etc.
func (wd *WorkflowData) Value(name string) (ent.Value, error) {
	return wd.selectValues.Get(name)
}

// QueryWorkflow queries the "workflow" edge of the WorkflowData entity.
func (wd *WorkflowData) QueryWorkflow() *WorkflowEntityQuery {
	return NewWorkflowDataClient(wd.config).QueryWorkflow(wd)
}

// Update returns a builder for updating this WorkflowData.
// Note that you need to call WorkflowData.Unwrap() before calling this method if this WorkflowData
// was returned from a transaction, and the transaction was committed or rolled back.
func (wd *WorkflowData) Update() *WorkflowDataUpdateOne {
	return NewWorkflowDataClient(wd.config).UpdateOne(wd)
}

// Unwrap unwraps the WorkflowData entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wd *WorkflowData) Unwrap() *WorkflowData {
	_tx, ok := wd.config.driver.(*txDriver)
	if !ok {
		panic("ent: WorkflowData is not a transactional entity")
	}
	wd.config.driver = _tx.drv
	return wd
}

// String implements the fmt.Stringer.
func (wd *WorkflowData) String() string {
	var builder strings.Builder
	builder.WriteString("WorkflowData(")
	builder.WriteString(fmt.Sprintf("id=%v, ", wd.ID))
	builder.WriteString("entity_id=")
	builder.WriteString(fmt.Sprintf("%v", wd.EntityID))
	builder.WriteString(", ")
	builder.WriteString("duration=")
	builder.WriteString(wd.Duration)
	builder.WriteString(", ")
	builder.WriteString("paused=")
	builder.WriteString(fmt.Sprintf("%v", wd.Paused))
	builder.WriteString(", ")
	builder.WriteString("resumable=")
	builder.WriteString(fmt.Sprintf("%v", wd.Resumable))
	builder.WriteString(", ")
	builder.WriteString("is_root=")
	builder.WriteString(fmt.Sprintf("%v", wd.IsRoot))
	builder.WriteString(", ")
	builder.WriteString("inputs=")
	builder.WriteString(fmt.Sprintf("%v", wd.Inputs))
	builder.WriteString(", ")
	if v := wd.ContinuedFrom; v != nil {
		builder.WriteString("continued_from=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := wd.ContinuedExecutionFrom; v != nil {
		builder.WriteString("continued_execution_from=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := wd.WorkflowStepID; v != nil {
		builder.WriteString("workflow_step_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := wd.WorkflowFrom; v != nil {
		builder.WriteString("workflow_from=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := wd.WorkflowExecutionFrom; v != nil {
		builder.WriteString("workflow_execution_from=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(wd.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(wd.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// WorkflowDataSlice is a parsable slice of WorkflowData.
type WorkflowDataSlice []*WorkflowData
