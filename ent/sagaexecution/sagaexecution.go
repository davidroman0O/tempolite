// Code generated by ent, DO NOT EDIT.

package sagaexecution

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/davidroman0O/tempolite/ent/schema"
)

const (
	// Label holds the string label denoting the sagaexecution type in the database.
	Label = "saga_execution"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSagaEntityID holds the string denoting the saga_entity_id field in the database.
	FieldSagaEntityID = "saga_entity_id"
	// FieldExecutionType holds the string denoting the execution_type field in the database.
	FieldExecutionType = "execution_type"
	// FieldStartedAt holds the string denoting the started_at field in the database.
	FieldStartedAt = "started_at"
	// FieldCompletedAt holds the string denoting the completed_at field in the database.
	FieldCompletedAt = "completed_at"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldError holds the string denoting the error field in the database.
	FieldError = "error"
	// FieldStackTrace holds the string denoting the stack_trace field in the database.
	FieldStackTrace = "stack_trace"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeSaga holds the string denoting the saga edge name in mutations.
	EdgeSaga = "saga"
	// EdgeExecutionData holds the string denoting the execution_data edge name in mutations.
	EdgeExecutionData = "execution_data"
	// EdgeValues holds the string denoting the values edge name in mutations.
	EdgeValues = "values"
	// Table holds the table name of the sagaexecution in the database.
	Table = "saga_executions"
	// SagaTable is the table that holds the saga relation/edge.
	SagaTable = "saga_executions"
	// SagaInverseTable is the table name for the SagaEntity entity.
	// It exists in this package in order to avoid circular dependency with the "sagaentity" package.
	SagaInverseTable = "saga_entities"
	// SagaColumn is the table column denoting the saga relation/edge.
	SagaColumn = "saga_entity_id"
	// ExecutionDataTable is the table that holds the execution_data relation/edge.
	ExecutionDataTable = "saga_execution_data"
	// ExecutionDataInverseTable is the table name for the SagaExecutionData entity.
	// It exists in this package in order to avoid circular dependency with the "sagaexecutiondata" package.
	ExecutionDataInverseTable = "saga_execution_data"
	// ExecutionDataColumn is the table column denoting the execution_data relation/edge.
	ExecutionDataColumn = "execution_id"
	// ValuesTable is the table that holds the values relation/edge.
	ValuesTable = "saga_values"
	// ValuesInverseTable is the table name for the SagaValue entity.
	// It exists in this package in order to avoid circular dependency with the "sagavalue" package.
	ValuesInverseTable = "saga_values"
	// ValuesColumn is the table column denoting the values relation/edge.
	ValuesColumn = "saga_execution_id"
)

// Columns holds all SQL columns for sagaexecution fields.
var Columns = []string{
	FieldID,
	FieldSagaEntityID,
	FieldExecutionType,
	FieldStartedAt,
	FieldCompletedAt,
	FieldStatus,
	FieldError,
	FieldStackTrace,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultExecutionType holds the default value on creation for the "execution_type" field.
	DefaultExecutionType schema.ExecutionType
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus schema.ExecutionStatus
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the SagaExecution queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySagaEntityID orders the results by the saga_entity_id field.
func BySagaEntityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSagaEntityID, opts...).ToFunc()
}

// ByExecutionType orders the results by the execution_type field.
func ByExecutionType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExecutionType, opts...).ToFunc()
}

// ByStartedAt orders the results by the started_at field.
func ByStartedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartedAt, opts...).ToFunc()
}

// ByCompletedAt orders the results by the completed_at field.
func ByCompletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompletedAt, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByError orders the results by the error field.
func ByError(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldError, opts...).ToFunc()
}

// ByStackTrace orders the results by the stack_trace field.
func ByStackTrace(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStackTrace, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// BySagaField orders the results by saga field.
func BySagaField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSagaStep(), sql.OrderByField(field, opts...))
	}
}

// ByExecutionDataField orders the results by execution_data field.
func ByExecutionDataField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExecutionDataStep(), sql.OrderByField(field, opts...))
	}
}

// ByValuesCount orders the results by values count.
func ByValuesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newValuesStep(), opts...)
	}
}

// ByValues orders the results by values terms.
func ByValues(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newValuesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newSagaStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SagaInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SagaTable, SagaColumn),
	)
}
func newExecutionDataStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExecutionDataInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, ExecutionDataTable, ExecutionDataColumn),
	)
}
func newValuesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ValuesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ValuesTable, ValuesColumn),
	)
}
