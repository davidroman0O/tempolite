// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/tempolite/ent/eventlog"
	"github.com/davidroman0O/tempolite/ent/run"
	"github.com/davidroman0O/tempolite/ent/schema"
	"github.com/davidroman0O/tempolite/ent/workflowentity"
	"github.com/davidroman0O/tempolite/ent/workflowexecution"
)

// EventLogCreate is the builder for creating a EventLog entity.
type EventLogCreate struct {
	config
	mutation *EventLogMutation
	hooks    []Hook
}

// SetTimestamp sets the "timestamp" field.
func (elc *EventLogCreate) SetTimestamp(t time.Time) *EventLogCreate {
	elc.mutation.SetTimestamp(t)
	return elc
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (elc *EventLogCreate) SetNillableTimestamp(t *time.Time) *EventLogCreate {
	if t != nil {
		elc.SetTimestamp(*t)
	}
	return elc
}

// SetEventType sets the "event_type" field.
func (elc *EventLogCreate) SetEventType(st schema.EventType) *EventLogCreate {
	elc.mutation.SetEventType(st)
	return elc
}

// SetRunID sets the "run_id" field.
func (elc *EventLogCreate) SetRunID(si schema.RunID) *EventLogCreate {
	elc.mutation.SetRunID(si)
	return elc
}

// SetNillableRunID sets the "run_id" field if the given value is not nil.
func (elc *EventLogCreate) SetNillableRunID(si *schema.RunID) *EventLogCreate {
	if si != nil {
		elc.SetRunID(*si)
	}
	return elc
}

// SetWorkflowID sets the "workflow_id" field.
func (elc *EventLogCreate) SetWorkflowID(sei schema.WorkflowEntityID) *EventLogCreate {
	elc.mutation.SetWorkflowID(sei)
	return elc
}

// SetNillableWorkflowID sets the "workflow_id" field if the given value is not nil.
func (elc *EventLogCreate) SetNillableWorkflowID(sei *schema.WorkflowEntityID) *EventLogCreate {
	if sei != nil {
		elc.SetWorkflowID(*sei)
	}
	return elc
}

// SetWorkflowExecutionID sets the "workflow_execution_id" field.
func (elc *EventLogCreate) SetWorkflowExecutionID(sei schema.WorkflowExecutionID) *EventLogCreate {
	elc.mutation.SetWorkflowExecutionID(sei)
	return elc
}

// SetNillableWorkflowExecutionID sets the "workflow_execution_id" field if the given value is not nil.
func (elc *EventLogCreate) SetNillableWorkflowExecutionID(sei *schema.WorkflowExecutionID) *EventLogCreate {
	if sei != nil {
		elc.SetWorkflowExecutionID(*sei)
	}
	return elc
}

// SetEntityID sets the "entity_id" field.
func (elc *EventLogCreate) SetEntityID(i int) *EventLogCreate {
	elc.mutation.SetEntityID(i)
	return elc
}

// SetNillableEntityID sets the "entity_id" field if the given value is not nil.
func (elc *EventLogCreate) SetNillableEntityID(i *int) *EventLogCreate {
	if i != nil {
		elc.SetEntityID(*i)
	}
	return elc
}

// SetExecutionID sets the "execution_id" field.
func (elc *EventLogCreate) SetExecutionID(i int) *EventLogCreate {
	elc.mutation.SetExecutionID(i)
	return elc
}

// SetNillableExecutionID sets the "execution_id" field if the given value is not nil.
func (elc *EventLogCreate) SetNillableExecutionID(i *int) *EventLogCreate {
	if i != nil {
		elc.SetExecutionID(*i)
	}
	return elc
}

// SetEntityType sets the "entity_type" field.
func (elc *EventLogCreate) SetEntityType(st schema.EntityType) *EventLogCreate {
	elc.mutation.SetEntityType(st)
	return elc
}

// SetNillableEntityType sets the "entity_type" field if the given value is not nil.
func (elc *EventLogCreate) SetNillableEntityType(st *schema.EntityType) *EventLogCreate {
	if st != nil {
		elc.SetEntityType(*st)
	}
	return elc
}

// SetStepID sets the "step_id" field.
func (elc *EventLogCreate) SetStepID(s string) *EventLogCreate {
	elc.mutation.SetStepID(s)
	return elc
}

// SetNillableStepID sets the "step_id" field if the given value is not nil.
func (elc *EventLogCreate) SetNillableStepID(s *string) *EventLogCreate {
	if s != nil {
		elc.SetStepID(*s)
	}
	return elc
}

// SetHandlerName sets the "handler_name" field.
func (elc *EventLogCreate) SetHandlerName(s string) *EventLogCreate {
	elc.mutation.SetHandlerName(s)
	return elc
}

// SetNillableHandlerName sets the "handler_name" field if the given value is not nil.
func (elc *EventLogCreate) SetNillableHandlerName(s *string) *EventLogCreate {
	if s != nil {
		elc.SetHandlerName(*s)
	}
	return elc
}

// SetQueueName sets the "queue_name" field.
func (elc *EventLogCreate) SetQueueName(s string) *EventLogCreate {
	elc.mutation.SetQueueName(s)
	return elc
}

// SetNillableQueueName sets the "queue_name" field if the given value is not nil.
func (elc *EventLogCreate) SetNillableQueueName(s *string) *EventLogCreate {
	if s != nil {
		elc.SetQueueName(*s)
	}
	return elc
}

// SetPreviousState sets the "previous_state" field.
func (elc *EventLogCreate) SetPreviousState(m map[string]interface{}) *EventLogCreate {
	elc.mutation.SetPreviousState(m)
	return elc
}

// SetNewState sets the "new_state" field.
func (elc *EventLogCreate) SetNewState(m map[string]interface{}) *EventLogCreate {
	elc.mutation.SetNewState(m)
	return elc
}

// SetError sets the "error" field.
func (elc *EventLogCreate) SetError(s string) *EventLogCreate {
	elc.mutation.SetError(s)
	return elc
}

// SetNillableError sets the "error" field if the given value is not nil.
func (elc *EventLogCreate) SetNillableError(s *string) *EventLogCreate {
	if s != nil {
		elc.SetError(*s)
	}
	return elc
}

// SetCreatedAt sets the "created_at" field.
func (elc *EventLogCreate) SetCreatedAt(t time.Time) *EventLogCreate {
	elc.mutation.SetCreatedAt(t)
	return elc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (elc *EventLogCreate) SetNillableCreatedAt(t *time.Time) *EventLogCreate {
	if t != nil {
		elc.SetCreatedAt(*t)
	}
	return elc
}

// SetID sets the "id" field.
func (elc *EventLogCreate) SetID(sli schema.EventLogID) *EventLogCreate {
	elc.mutation.SetID(sli)
	return elc
}

// SetRun sets the "run" edge to the Run entity.
func (elc *EventLogCreate) SetRun(r *Run) *EventLogCreate {
	return elc.SetRunID(r.ID)
}

// SetWorkflow sets the "workflow" edge to the WorkflowEntity entity.
func (elc *EventLogCreate) SetWorkflow(w *WorkflowEntity) *EventLogCreate {
	return elc.SetWorkflowID(w.ID)
}

// SetWorkflowExecution sets the "workflow_execution" edge to the WorkflowExecution entity.
func (elc *EventLogCreate) SetWorkflowExecution(w *WorkflowExecution) *EventLogCreate {
	return elc.SetWorkflowExecutionID(w.ID)
}

// Mutation returns the EventLogMutation object of the builder.
func (elc *EventLogCreate) Mutation() *EventLogMutation {
	return elc.mutation
}

// Save creates the EventLog in the database.
func (elc *EventLogCreate) Save(ctx context.Context) (*EventLog, error) {
	elc.defaults()
	return withHooks(ctx, elc.sqlSave, elc.mutation, elc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (elc *EventLogCreate) SaveX(ctx context.Context) *EventLog {
	v, err := elc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (elc *EventLogCreate) Exec(ctx context.Context) error {
	_, err := elc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (elc *EventLogCreate) ExecX(ctx context.Context) {
	if err := elc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (elc *EventLogCreate) defaults() {
	if _, ok := elc.mutation.Timestamp(); !ok {
		v := eventlog.DefaultTimestamp()
		elc.mutation.SetTimestamp(v)
	}
	if _, ok := elc.mutation.CreatedAt(); !ok {
		v := eventlog.DefaultCreatedAt()
		elc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (elc *EventLogCreate) check() error {
	if _, ok := elc.mutation.Timestamp(); !ok {
		return &ValidationError{Name: "timestamp", err: errors.New(`ent: missing required field "EventLog.timestamp"`)}
	}
	if _, ok := elc.mutation.EventType(); !ok {
		return &ValidationError{Name: "event_type", err: errors.New(`ent: missing required field "EventLog.event_type"`)}
	}
	if _, ok := elc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "EventLog.created_at"`)}
	}
	return nil
}

func (elc *EventLogCreate) sqlSave(ctx context.Context) (*EventLog, error) {
	if err := elc.check(); err != nil {
		return nil, err
	}
	_node, _spec := elc.createSpec()
	if err := sqlgraph.CreateNode(ctx, elc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = schema.EventLogID(id)
	}
	elc.mutation.id = &_node.ID
	elc.mutation.done = true
	return _node, nil
}

func (elc *EventLogCreate) createSpec() (*EventLog, *sqlgraph.CreateSpec) {
	var (
		_node = &EventLog{config: elc.config}
		_spec = sqlgraph.NewCreateSpec(eventlog.Table, sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt))
	)
	if id, ok := elc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := elc.mutation.Timestamp(); ok {
		_spec.SetField(eventlog.FieldTimestamp, field.TypeTime, value)
		_node.Timestamp = value
	}
	if value, ok := elc.mutation.EventType(); ok {
		_spec.SetField(eventlog.FieldEventType, field.TypeString, value)
		_node.EventType = value
	}
	if value, ok := elc.mutation.EntityID(); ok {
		_spec.SetField(eventlog.FieldEntityID, field.TypeInt, value)
		_node.EntityID = value
	}
	if value, ok := elc.mutation.ExecutionID(); ok {
		_spec.SetField(eventlog.FieldExecutionID, field.TypeInt, value)
		_node.ExecutionID = value
	}
	if value, ok := elc.mutation.EntityType(); ok {
		_spec.SetField(eventlog.FieldEntityType, field.TypeString, value)
		_node.EntityType = value
	}
	if value, ok := elc.mutation.StepID(); ok {
		_spec.SetField(eventlog.FieldStepID, field.TypeString, value)
		_node.StepID = value
	}
	if value, ok := elc.mutation.HandlerName(); ok {
		_spec.SetField(eventlog.FieldHandlerName, field.TypeString, value)
		_node.HandlerName = value
	}
	if value, ok := elc.mutation.QueueName(); ok {
		_spec.SetField(eventlog.FieldQueueName, field.TypeString, value)
		_node.QueueName = value
	}
	if value, ok := elc.mutation.PreviousState(); ok {
		_spec.SetField(eventlog.FieldPreviousState, field.TypeJSON, value)
		_node.PreviousState = value
	}
	if value, ok := elc.mutation.NewState(); ok {
		_spec.SetField(eventlog.FieldNewState, field.TypeJSON, value)
		_node.NewState = value
	}
	if value, ok := elc.mutation.Error(); ok {
		_spec.SetField(eventlog.FieldError, field.TypeString, value)
		_node.Error = value
	}
	if value, ok := elc.mutation.CreatedAt(); ok {
		_spec.SetField(eventlog.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := elc.mutation.RunIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventlog.RunTable,
			Columns: []string{eventlog.RunColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(run.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RunID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := elc.mutation.WorkflowIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventlog.WorkflowTable,
			Columns: []string{eventlog.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowentity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.WorkflowID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := elc.mutation.WorkflowExecutionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventlog.WorkflowExecutionTable,
			Columns: []string{eventlog.WorkflowExecutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowexecution.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.WorkflowExecutionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EventLogCreateBulk is the builder for creating many EventLog entities in bulk.
type EventLogCreateBulk struct {
	config
	err      error
	builders []*EventLogCreate
}

// Save creates the EventLog entities in the database.
func (elcb *EventLogCreateBulk) Save(ctx context.Context) ([]*EventLog, error) {
	if elcb.err != nil {
		return nil, elcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(elcb.builders))
	nodes := make([]*EventLog, len(elcb.builders))
	mutators := make([]Mutator, len(elcb.builders))
	for i := range elcb.builders {
		func(i int, root context.Context) {
			builder := elcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EventLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, elcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, elcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = schema.EventLogID(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, elcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (elcb *EventLogCreateBulk) SaveX(ctx context.Context) []*EventLog {
	v, err := elcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (elcb *EventLogCreateBulk) Exec(ctx context.Context) error {
	_, err := elcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (elcb *EventLogCreateBulk) ExecX(ctx context.Context) {
	if err := elcb.Exec(ctx); err != nil {
		panic(err)
	}
}
