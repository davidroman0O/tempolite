// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/davidroman0O/tempolite/ent/activityexecution"
	"github.com/davidroman0O/tempolite/ent/activityexecutiondata"
	"github.com/davidroman0O/tempolite/ent/schema"
)

// ActivityExecutionData is the model entity for the ActivityExecutionData schema.
type ActivityExecutionData struct {
	config `json:"-"`
	// ID of the ent.
	ID schema.ActivityExecutionDataID `json:"id,omitempty"`
	// ExecutionID holds the value of the "execution_id" field.
	ExecutionID schema.ActivityExecutionID `json:"execution_id,omitempty"`
	// LastHeartbeat holds the value of the "last_heartbeat" field.
	LastHeartbeat *time.Time `json:"last_heartbeat,omitempty"`
	// Outputs holds the value of the "outputs" field.
	Outputs []byte `json:"outputs,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ActivityExecutionDataQuery when eager-loading is set.
	Edges        ActivityExecutionDataEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ActivityExecutionDataEdges holds the relations/edges for other nodes in the graph.
type ActivityExecutionDataEdges struct {
	// Execution holds the value of the execution edge.
	Execution *ActivityExecution `json:"execution,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ExecutionOrErr returns the Execution value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ActivityExecutionDataEdges) ExecutionOrErr() (*ActivityExecution, error) {
	if e.Execution != nil {
		return e.Execution, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: activityexecution.Label}
	}
	return nil, &NotLoadedError{edge: "execution"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ActivityExecutionData) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case activityexecutiondata.FieldOutputs:
			values[i] = new([]byte)
		case activityexecutiondata.FieldID, activityexecutiondata.FieldExecutionID:
			values[i] = new(sql.NullInt64)
		case activityexecutiondata.FieldLastHeartbeat, activityexecutiondata.FieldCreatedAt, activityexecutiondata.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ActivityExecutionData fields.
func (aed *ActivityExecutionData) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case activityexecutiondata.FieldID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				aed.ID = schema.ActivityExecutionDataID(value.Int64)
			}
		case activityexecutiondata.FieldExecutionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field execution_id", values[i])
			} else if value.Valid {
				aed.ExecutionID = schema.ActivityExecutionID(value.Int64)
			}
		case activityexecutiondata.FieldLastHeartbeat:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_heartbeat", values[i])
			} else if value.Valid {
				aed.LastHeartbeat = new(time.Time)
				*aed.LastHeartbeat = value.Time
			}
		case activityexecutiondata.FieldOutputs:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field outputs", values[i])
			} else if value != nil {
				aed.Outputs = *value
			}
		case activityexecutiondata.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				aed.CreatedAt = value.Time
			}
		case activityexecutiondata.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				aed.UpdatedAt = value.Time
			}
		default:
			aed.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ActivityExecutionData.
// This includes values selected through modifiers, order, etc.
func (aed *ActivityExecutionData) Value(name string) (ent.Value, error) {
	return aed.selectValues.Get(name)
}

// QueryExecution queries the "execution" edge of the ActivityExecutionData entity.
func (aed *ActivityExecutionData) QueryExecution() *ActivityExecutionQuery {
	return NewActivityExecutionDataClient(aed.config).QueryExecution(aed)
}

// Update returns a builder for updating this ActivityExecutionData.
// Note that you need to call ActivityExecutionData.Unwrap() before calling this method if this ActivityExecutionData
// was returned from a transaction, and the transaction was committed or rolled back.
func (aed *ActivityExecutionData) Update() *ActivityExecutionDataUpdateOne {
	return NewActivityExecutionDataClient(aed.config).UpdateOne(aed)
}

// Unwrap unwraps the ActivityExecutionData entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (aed *ActivityExecutionData) Unwrap() *ActivityExecutionData {
	_tx, ok := aed.config.driver.(*txDriver)
	if !ok {
		panic("ent: ActivityExecutionData is not a transactional entity")
	}
	aed.config.driver = _tx.drv
	return aed
}

// String implements the fmt.Stringer.
func (aed *ActivityExecutionData) String() string {
	var builder strings.Builder
	builder.WriteString("ActivityExecutionData(")
	builder.WriteString(fmt.Sprintf("id=%v, ", aed.ID))
	builder.WriteString("execution_id=")
	builder.WriteString(fmt.Sprintf("%v", aed.ExecutionID))
	builder.WriteString(", ")
	if v := aed.LastHeartbeat; v != nil {
		builder.WriteString("last_heartbeat=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("outputs=")
	builder.WriteString(fmt.Sprintf("%v", aed.Outputs))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(aed.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(aed.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ActivityExecutionDataSlice is a parsable slice of ActivityExecutionData.
type ActivityExecutionDataSlice []*ActivityExecutionData
