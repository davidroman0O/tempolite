// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/tempolite/ent/eventlog"
	"github.com/davidroman0O/tempolite/ent/predicate"
	"github.com/davidroman0O/tempolite/ent/run"
	"github.com/davidroman0O/tempolite/ent/schema"
	"github.com/davidroman0O/tempolite/ent/workflowentity"
	"github.com/davidroman0O/tempolite/ent/workflowexecution"
)

// EventLogUpdate is the builder for updating EventLog entities.
type EventLogUpdate struct {
	config
	hooks    []Hook
	mutation *EventLogMutation
}

// Where appends a list predicates to the EventLogUpdate builder.
func (elu *EventLogUpdate) Where(ps ...predicate.EventLog) *EventLogUpdate {
	elu.mutation.Where(ps...)
	return elu
}

// SetTimestamp sets the "timestamp" field.
func (elu *EventLogUpdate) SetTimestamp(t time.Time) *EventLogUpdate {
	elu.mutation.SetTimestamp(t)
	return elu
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (elu *EventLogUpdate) SetNillableTimestamp(t *time.Time) *EventLogUpdate {
	if t != nil {
		elu.SetTimestamp(*t)
	}
	return elu
}

// SetEventType sets the "event_type" field.
func (elu *EventLogUpdate) SetEventType(st schema.EventType) *EventLogUpdate {
	elu.mutation.SetEventType(st)
	return elu
}

// SetNillableEventType sets the "event_type" field if the given value is not nil.
func (elu *EventLogUpdate) SetNillableEventType(st *schema.EventType) *EventLogUpdate {
	if st != nil {
		elu.SetEventType(*st)
	}
	return elu
}

// SetRunID sets the "run_id" field.
func (elu *EventLogUpdate) SetRunID(si schema.RunID) *EventLogUpdate {
	elu.mutation.SetRunID(si)
	return elu
}

// SetNillableRunID sets the "run_id" field if the given value is not nil.
func (elu *EventLogUpdate) SetNillableRunID(si *schema.RunID) *EventLogUpdate {
	if si != nil {
		elu.SetRunID(*si)
	}
	return elu
}

// ClearRunID clears the value of the "run_id" field.
func (elu *EventLogUpdate) ClearRunID() *EventLogUpdate {
	elu.mutation.ClearRunID()
	return elu
}

// SetWorkflowID sets the "workflow_id" field.
func (elu *EventLogUpdate) SetWorkflowID(sei schema.WorkflowEntityID) *EventLogUpdate {
	elu.mutation.SetWorkflowID(sei)
	return elu
}

// SetNillableWorkflowID sets the "workflow_id" field if the given value is not nil.
func (elu *EventLogUpdate) SetNillableWorkflowID(sei *schema.WorkflowEntityID) *EventLogUpdate {
	if sei != nil {
		elu.SetWorkflowID(*sei)
	}
	return elu
}

// ClearWorkflowID clears the value of the "workflow_id" field.
func (elu *EventLogUpdate) ClearWorkflowID() *EventLogUpdate {
	elu.mutation.ClearWorkflowID()
	return elu
}

// SetWorkflowExecutionID sets the "workflow_execution_id" field.
func (elu *EventLogUpdate) SetWorkflowExecutionID(sei schema.WorkflowExecutionID) *EventLogUpdate {
	elu.mutation.SetWorkflowExecutionID(sei)
	return elu
}

// SetNillableWorkflowExecutionID sets the "workflow_execution_id" field if the given value is not nil.
func (elu *EventLogUpdate) SetNillableWorkflowExecutionID(sei *schema.WorkflowExecutionID) *EventLogUpdate {
	if sei != nil {
		elu.SetWorkflowExecutionID(*sei)
	}
	return elu
}

// ClearWorkflowExecutionID clears the value of the "workflow_execution_id" field.
func (elu *EventLogUpdate) ClearWorkflowExecutionID() *EventLogUpdate {
	elu.mutation.ClearWorkflowExecutionID()
	return elu
}

// SetEntityID sets the "entity_id" field.
func (elu *EventLogUpdate) SetEntityID(i int) *EventLogUpdate {
	elu.mutation.ResetEntityID()
	elu.mutation.SetEntityID(i)
	return elu
}

// SetNillableEntityID sets the "entity_id" field if the given value is not nil.
func (elu *EventLogUpdate) SetNillableEntityID(i *int) *EventLogUpdate {
	if i != nil {
		elu.SetEntityID(*i)
	}
	return elu
}

// AddEntityID adds i to the "entity_id" field.
func (elu *EventLogUpdate) AddEntityID(i int) *EventLogUpdate {
	elu.mutation.AddEntityID(i)
	return elu
}

// ClearEntityID clears the value of the "entity_id" field.
func (elu *EventLogUpdate) ClearEntityID() *EventLogUpdate {
	elu.mutation.ClearEntityID()
	return elu
}

// SetExecutionID sets the "execution_id" field.
func (elu *EventLogUpdate) SetExecutionID(i int) *EventLogUpdate {
	elu.mutation.ResetExecutionID()
	elu.mutation.SetExecutionID(i)
	return elu
}

// SetNillableExecutionID sets the "execution_id" field if the given value is not nil.
func (elu *EventLogUpdate) SetNillableExecutionID(i *int) *EventLogUpdate {
	if i != nil {
		elu.SetExecutionID(*i)
	}
	return elu
}

// AddExecutionID adds i to the "execution_id" field.
func (elu *EventLogUpdate) AddExecutionID(i int) *EventLogUpdate {
	elu.mutation.AddExecutionID(i)
	return elu
}

// ClearExecutionID clears the value of the "execution_id" field.
func (elu *EventLogUpdate) ClearExecutionID() *EventLogUpdate {
	elu.mutation.ClearExecutionID()
	return elu
}

// SetEntityType sets the "entity_type" field.
func (elu *EventLogUpdate) SetEntityType(st schema.EntityType) *EventLogUpdate {
	elu.mutation.SetEntityType(st)
	return elu
}

// SetNillableEntityType sets the "entity_type" field if the given value is not nil.
func (elu *EventLogUpdate) SetNillableEntityType(st *schema.EntityType) *EventLogUpdate {
	if st != nil {
		elu.SetEntityType(*st)
	}
	return elu
}

// ClearEntityType clears the value of the "entity_type" field.
func (elu *EventLogUpdate) ClearEntityType() *EventLogUpdate {
	elu.mutation.ClearEntityType()
	return elu
}

// SetStepID sets the "step_id" field.
func (elu *EventLogUpdate) SetStepID(s string) *EventLogUpdate {
	elu.mutation.SetStepID(s)
	return elu
}

// SetNillableStepID sets the "step_id" field if the given value is not nil.
func (elu *EventLogUpdate) SetNillableStepID(s *string) *EventLogUpdate {
	if s != nil {
		elu.SetStepID(*s)
	}
	return elu
}

// ClearStepID clears the value of the "step_id" field.
func (elu *EventLogUpdate) ClearStepID() *EventLogUpdate {
	elu.mutation.ClearStepID()
	return elu
}

// SetHandlerName sets the "handler_name" field.
func (elu *EventLogUpdate) SetHandlerName(s string) *EventLogUpdate {
	elu.mutation.SetHandlerName(s)
	return elu
}

// SetNillableHandlerName sets the "handler_name" field if the given value is not nil.
func (elu *EventLogUpdate) SetNillableHandlerName(s *string) *EventLogUpdate {
	if s != nil {
		elu.SetHandlerName(*s)
	}
	return elu
}

// ClearHandlerName clears the value of the "handler_name" field.
func (elu *EventLogUpdate) ClearHandlerName() *EventLogUpdate {
	elu.mutation.ClearHandlerName()
	return elu
}

// SetQueueName sets the "queue_name" field.
func (elu *EventLogUpdate) SetQueueName(s string) *EventLogUpdate {
	elu.mutation.SetQueueName(s)
	return elu
}

// SetNillableQueueName sets the "queue_name" field if the given value is not nil.
func (elu *EventLogUpdate) SetNillableQueueName(s *string) *EventLogUpdate {
	if s != nil {
		elu.SetQueueName(*s)
	}
	return elu
}

// ClearQueueName clears the value of the "queue_name" field.
func (elu *EventLogUpdate) ClearQueueName() *EventLogUpdate {
	elu.mutation.ClearQueueName()
	return elu
}

// SetPreviousState sets the "previous_state" field.
func (elu *EventLogUpdate) SetPreviousState(m map[string]interface{}) *EventLogUpdate {
	elu.mutation.SetPreviousState(m)
	return elu
}

// ClearPreviousState clears the value of the "previous_state" field.
func (elu *EventLogUpdate) ClearPreviousState() *EventLogUpdate {
	elu.mutation.ClearPreviousState()
	return elu
}

// SetNewState sets the "new_state" field.
func (elu *EventLogUpdate) SetNewState(m map[string]interface{}) *EventLogUpdate {
	elu.mutation.SetNewState(m)
	return elu
}

// ClearNewState clears the value of the "new_state" field.
func (elu *EventLogUpdate) ClearNewState() *EventLogUpdate {
	elu.mutation.ClearNewState()
	return elu
}

// SetError sets the "error" field.
func (elu *EventLogUpdate) SetError(s string) *EventLogUpdate {
	elu.mutation.SetError(s)
	return elu
}

// SetNillableError sets the "error" field if the given value is not nil.
func (elu *EventLogUpdate) SetNillableError(s *string) *EventLogUpdate {
	if s != nil {
		elu.SetError(*s)
	}
	return elu
}

// ClearError clears the value of the "error" field.
func (elu *EventLogUpdate) ClearError() *EventLogUpdate {
	elu.mutation.ClearError()
	return elu
}

// SetCreatedAt sets the "created_at" field.
func (elu *EventLogUpdate) SetCreatedAt(t time.Time) *EventLogUpdate {
	elu.mutation.SetCreatedAt(t)
	return elu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (elu *EventLogUpdate) SetNillableCreatedAt(t *time.Time) *EventLogUpdate {
	if t != nil {
		elu.SetCreatedAt(*t)
	}
	return elu
}

// SetRun sets the "run" edge to the Run entity.
func (elu *EventLogUpdate) SetRun(r *Run) *EventLogUpdate {
	return elu.SetRunID(r.ID)
}

// SetWorkflow sets the "workflow" edge to the WorkflowEntity entity.
func (elu *EventLogUpdate) SetWorkflow(w *WorkflowEntity) *EventLogUpdate {
	return elu.SetWorkflowID(w.ID)
}

// SetWorkflowExecution sets the "workflow_execution" edge to the WorkflowExecution entity.
func (elu *EventLogUpdate) SetWorkflowExecution(w *WorkflowExecution) *EventLogUpdate {
	return elu.SetWorkflowExecutionID(w.ID)
}

// Mutation returns the EventLogMutation object of the builder.
func (elu *EventLogUpdate) Mutation() *EventLogMutation {
	return elu.mutation
}

// ClearRun clears the "run" edge to the Run entity.
func (elu *EventLogUpdate) ClearRun() *EventLogUpdate {
	elu.mutation.ClearRun()
	return elu
}

// ClearWorkflow clears the "workflow" edge to the WorkflowEntity entity.
func (elu *EventLogUpdate) ClearWorkflow() *EventLogUpdate {
	elu.mutation.ClearWorkflow()
	return elu
}

// ClearWorkflowExecution clears the "workflow_execution" edge to the WorkflowExecution entity.
func (elu *EventLogUpdate) ClearWorkflowExecution() *EventLogUpdate {
	elu.mutation.ClearWorkflowExecution()
	return elu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (elu *EventLogUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, elu.sqlSave, elu.mutation, elu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (elu *EventLogUpdate) SaveX(ctx context.Context) int {
	affected, err := elu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (elu *EventLogUpdate) Exec(ctx context.Context) error {
	_, err := elu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (elu *EventLogUpdate) ExecX(ctx context.Context) {
	if err := elu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (elu *EventLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(eventlog.Table, eventlog.Columns, sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt))
	if ps := elu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := elu.mutation.Timestamp(); ok {
		_spec.SetField(eventlog.FieldTimestamp, field.TypeTime, value)
	}
	if value, ok := elu.mutation.EventType(); ok {
		_spec.SetField(eventlog.FieldEventType, field.TypeString, value)
	}
	if value, ok := elu.mutation.EntityID(); ok {
		_spec.SetField(eventlog.FieldEntityID, field.TypeInt, value)
	}
	if value, ok := elu.mutation.AddedEntityID(); ok {
		_spec.AddField(eventlog.FieldEntityID, field.TypeInt, value)
	}
	if elu.mutation.EntityIDCleared() {
		_spec.ClearField(eventlog.FieldEntityID, field.TypeInt)
	}
	if value, ok := elu.mutation.ExecutionID(); ok {
		_spec.SetField(eventlog.FieldExecutionID, field.TypeInt, value)
	}
	if value, ok := elu.mutation.AddedExecutionID(); ok {
		_spec.AddField(eventlog.FieldExecutionID, field.TypeInt, value)
	}
	if elu.mutation.ExecutionIDCleared() {
		_spec.ClearField(eventlog.FieldExecutionID, field.TypeInt)
	}
	if value, ok := elu.mutation.EntityType(); ok {
		_spec.SetField(eventlog.FieldEntityType, field.TypeString, value)
	}
	if elu.mutation.EntityTypeCleared() {
		_spec.ClearField(eventlog.FieldEntityType, field.TypeString)
	}
	if value, ok := elu.mutation.StepID(); ok {
		_spec.SetField(eventlog.FieldStepID, field.TypeString, value)
	}
	if elu.mutation.StepIDCleared() {
		_spec.ClearField(eventlog.FieldStepID, field.TypeString)
	}
	if value, ok := elu.mutation.HandlerName(); ok {
		_spec.SetField(eventlog.FieldHandlerName, field.TypeString, value)
	}
	if elu.mutation.HandlerNameCleared() {
		_spec.ClearField(eventlog.FieldHandlerName, field.TypeString)
	}
	if value, ok := elu.mutation.QueueName(); ok {
		_spec.SetField(eventlog.FieldQueueName, field.TypeString, value)
	}
	if elu.mutation.QueueNameCleared() {
		_spec.ClearField(eventlog.FieldQueueName, field.TypeString)
	}
	if value, ok := elu.mutation.PreviousState(); ok {
		_spec.SetField(eventlog.FieldPreviousState, field.TypeJSON, value)
	}
	if elu.mutation.PreviousStateCleared() {
		_spec.ClearField(eventlog.FieldPreviousState, field.TypeJSON)
	}
	if value, ok := elu.mutation.NewState(); ok {
		_spec.SetField(eventlog.FieldNewState, field.TypeJSON, value)
	}
	if elu.mutation.NewStateCleared() {
		_spec.ClearField(eventlog.FieldNewState, field.TypeJSON)
	}
	if value, ok := elu.mutation.Error(); ok {
		_spec.SetField(eventlog.FieldError, field.TypeString, value)
	}
	if elu.mutation.ErrorCleared() {
		_spec.ClearField(eventlog.FieldError, field.TypeString)
	}
	if value, ok := elu.mutation.CreatedAt(); ok {
		_spec.SetField(eventlog.FieldCreatedAt, field.TypeTime, value)
	}
	if elu.mutation.RunCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventlog.RunTable,
			Columns: []string{eventlog.RunColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(run.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := elu.mutation.RunIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventlog.RunTable,
			Columns: []string{eventlog.RunColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(run.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if elu.mutation.WorkflowCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventlog.WorkflowTable,
			Columns: []string{eventlog.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowentity.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := elu.mutation.WorkflowIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventlog.WorkflowTable,
			Columns: []string{eventlog.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowentity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if elu.mutation.WorkflowExecutionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventlog.WorkflowExecutionTable,
			Columns: []string{eventlog.WorkflowExecutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowexecution.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := elu.mutation.WorkflowExecutionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventlog.WorkflowExecutionTable,
			Columns: []string{eventlog.WorkflowExecutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowexecution.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, elu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{eventlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	elu.mutation.done = true
	return n, nil
}

// EventLogUpdateOne is the builder for updating a single EventLog entity.
type EventLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EventLogMutation
}

// SetTimestamp sets the "timestamp" field.
func (eluo *EventLogUpdateOne) SetTimestamp(t time.Time) *EventLogUpdateOne {
	eluo.mutation.SetTimestamp(t)
	return eluo
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (eluo *EventLogUpdateOne) SetNillableTimestamp(t *time.Time) *EventLogUpdateOne {
	if t != nil {
		eluo.SetTimestamp(*t)
	}
	return eluo
}

// SetEventType sets the "event_type" field.
func (eluo *EventLogUpdateOne) SetEventType(st schema.EventType) *EventLogUpdateOne {
	eluo.mutation.SetEventType(st)
	return eluo
}

// SetNillableEventType sets the "event_type" field if the given value is not nil.
func (eluo *EventLogUpdateOne) SetNillableEventType(st *schema.EventType) *EventLogUpdateOne {
	if st != nil {
		eluo.SetEventType(*st)
	}
	return eluo
}

// SetRunID sets the "run_id" field.
func (eluo *EventLogUpdateOne) SetRunID(si schema.RunID) *EventLogUpdateOne {
	eluo.mutation.SetRunID(si)
	return eluo
}

// SetNillableRunID sets the "run_id" field if the given value is not nil.
func (eluo *EventLogUpdateOne) SetNillableRunID(si *schema.RunID) *EventLogUpdateOne {
	if si != nil {
		eluo.SetRunID(*si)
	}
	return eluo
}

// ClearRunID clears the value of the "run_id" field.
func (eluo *EventLogUpdateOne) ClearRunID() *EventLogUpdateOne {
	eluo.mutation.ClearRunID()
	return eluo
}

// SetWorkflowID sets the "workflow_id" field.
func (eluo *EventLogUpdateOne) SetWorkflowID(sei schema.WorkflowEntityID) *EventLogUpdateOne {
	eluo.mutation.SetWorkflowID(sei)
	return eluo
}

// SetNillableWorkflowID sets the "workflow_id" field if the given value is not nil.
func (eluo *EventLogUpdateOne) SetNillableWorkflowID(sei *schema.WorkflowEntityID) *EventLogUpdateOne {
	if sei != nil {
		eluo.SetWorkflowID(*sei)
	}
	return eluo
}

// ClearWorkflowID clears the value of the "workflow_id" field.
func (eluo *EventLogUpdateOne) ClearWorkflowID() *EventLogUpdateOne {
	eluo.mutation.ClearWorkflowID()
	return eluo
}

// SetWorkflowExecutionID sets the "workflow_execution_id" field.
func (eluo *EventLogUpdateOne) SetWorkflowExecutionID(sei schema.WorkflowExecutionID) *EventLogUpdateOne {
	eluo.mutation.SetWorkflowExecutionID(sei)
	return eluo
}

// SetNillableWorkflowExecutionID sets the "workflow_execution_id" field if the given value is not nil.
func (eluo *EventLogUpdateOne) SetNillableWorkflowExecutionID(sei *schema.WorkflowExecutionID) *EventLogUpdateOne {
	if sei != nil {
		eluo.SetWorkflowExecutionID(*sei)
	}
	return eluo
}

// ClearWorkflowExecutionID clears the value of the "workflow_execution_id" field.
func (eluo *EventLogUpdateOne) ClearWorkflowExecutionID() *EventLogUpdateOne {
	eluo.mutation.ClearWorkflowExecutionID()
	return eluo
}

// SetEntityID sets the "entity_id" field.
func (eluo *EventLogUpdateOne) SetEntityID(i int) *EventLogUpdateOne {
	eluo.mutation.ResetEntityID()
	eluo.mutation.SetEntityID(i)
	return eluo
}

// SetNillableEntityID sets the "entity_id" field if the given value is not nil.
func (eluo *EventLogUpdateOne) SetNillableEntityID(i *int) *EventLogUpdateOne {
	if i != nil {
		eluo.SetEntityID(*i)
	}
	return eluo
}

// AddEntityID adds i to the "entity_id" field.
func (eluo *EventLogUpdateOne) AddEntityID(i int) *EventLogUpdateOne {
	eluo.mutation.AddEntityID(i)
	return eluo
}

// ClearEntityID clears the value of the "entity_id" field.
func (eluo *EventLogUpdateOne) ClearEntityID() *EventLogUpdateOne {
	eluo.mutation.ClearEntityID()
	return eluo
}

// SetExecutionID sets the "execution_id" field.
func (eluo *EventLogUpdateOne) SetExecutionID(i int) *EventLogUpdateOne {
	eluo.mutation.ResetExecutionID()
	eluo.mutation.SetExecutionID(i)
	return eluo
}

// SetNillableExecutionID sets the "execution_id" field if the given value is not nil.
func (eluo *EventLogUpdateOne) SetNillableExecutionID(i *int) *EventLogUpdateOne {
	if i != nil {
		eluo.SetExecutionID(*i)
	}
	return eluo
}

// AddExecutionID adds i to the "execution_id" field.
func (eluo *EventLogUpdateOne) AddExecutionID(i int) *EventLogUpdateOne {
	eluo.mutation.AddExecutionID(i)
	return eluo
}

// ClearExecutionID clears the value of the "execution_id" field.
func (eluo *EventLogUpdateOne) ClearExecutionID() *EventLogUpdateOne {
	eluo.mutation.ClearExecutionID()
	return eluo
}

// SetEntityType sets the "entity_type" field.
func (eluo *EventLogUpdateOne) SetEntityType(st schema.EntityType) *EventLogUpdateOne {
	eluo.mutation.SetEntityType(st)
	return eluo
}

// SetNillableEntityType sets the "entity_type" field if the given value is not nil.
func (eluo *EventLogUpdateOne) SetNillableEntityType(st *schema.EntityType) *EventLogUpdateOne {
	if st != nil {
		eluo.SetEntityType(*st)
	}
	return eluo
}

// ClearEntityType clears the value of the "entity_type" field.
func (eluo *EventLogUpdateOne) ClearEntityType() *EventLogUpdateOne {
	eluo.mutation.ClearEntityType()
	return eluo
}

// SetStepID sets the "step_id" field.
func (eluo *EventLogUpdateOne) SetStepID(s string) *EventLogUpdateOne {
	eluo.mutation.SetStepID(s)
	return eluo
}

// SetNillableStepID sets the "step_id" field if the given value is not nil.
func (eluo *EventLogUpdateOne) SetNillableStepID(s *string) *EventLogUpdateOne {
	if s != nil {
		eluo.SetStepID(*s)
	}
	return eluo
}

// ClearStepID clears the value of the "step_id" field.
func (eluo *EventLogUpdateOne) ClearStepID() *EventLogUpdateOne {
	eluo.mutation.ClearStepID()
	return eluo
}

// SetHandlerName sets the "handler_name" field.
func (eluo *EventLogUpdateOne) SetHandlerName(s string) *EventLogUpdateOne {
	eluo.mutation.SetHandlerName(s)
	return eluo
}

// SetNillableHandlerName sets the "handler_name" field if the given value is not nil.
func (eluo *EventLogUpdateOne) SetNillableHandlerName(s *string) *EventLogUpdateOne {
	if s != nil {
		eluo.SetHandlerName(*s)
	}
	return eluo
}

// ClearHandlerName clears the value of the "handler_name" field.
func (eluo *EventLogUpdateOne) ClearHandlerName() *EventLogUpdateOne {
	eluo.mutation.ClearHandlerName()
	return eluo
}

// SetQueueName sets the "queue_name" field.
func (eluo *EventLogUpdateOne) SetQueueName(s string) *EventLogUpdateOne {
	eluo.mutation.SetQueueName(s)
	return eluo
}

// SetNillableQueueName sets the "queue_name" field if the given value is not nil.
func (eluo *EventLogUpdateOne) SetNillableQueueName(s *string) *EventLogUpdateOne {
	if s != nil {
		eluo.SetQueueName(*s)
	}
	return eluo
}

// ClearQueueName clears the value of the "queue_name" field.
func (eluo *EventLogUpdateOne) ClearQueueName() *EventLogUpdateOne {
	eluo.mutation.ClearQueueName()
	return eluo
}

// SetPreviousState sets the "previous_state" field.
func (eluo *EventLogUpdateOne) SetPreviousState(m map[string]interface{}) *EventLogUpdateOne {
	eluo.mutation.SetPreviousState(m)
	return eluo
}

// ClearPreviousState clears the value of the "previous_state" field.
func (eluo *EventLogUpdateOne) ClearPreviousState() *EventLogUpdateOne {
	eluo.mutation.ClearPreviousState()
	return eluo
}

// SetNewState sets the "new_state" field.
func (eluo *EventLogUpdateOne) SetNewState(m map[string]interface{}) *EventLogUpdateOne {
	eluo.mutation.SetNewState(m)
	return eluo
}

// ClearNewState clears the value of the "new_state" field.
func (eluo *EventLogUpdateOne) ClearNewState() *EventLogUpdateOne {
	eluo.mutation.ClearNewState()
	return eluo
}

// SetError sets the "error" field.
func (eluo *EventLogUpdateOne) SetError(s string) *EventLogUpdateOne {
	eluo.mutation.SetError(s)
	return eluo
}

// SetNillableError sets the "error" field if the given value is not nil.
func (eluo *EventLogUpdateOne) SetNillableError(s *string) *EventLogUpdateOne {
	if s != nil {
		eluo.SetError(*s)
	}
	return eluo
}

// ClearError clears the value of the "error" field.
func (eluo *EventLogUpdateOne) ClearError() *EventLogUpdateOne {
	eluo.mutation.ClearError()
	return eluo
}

// SetCreatedAt sets the "created_at" field.
func (eluo *EventLogUpdateOne) SetCreatedAt(t time.Time) *EventLogUpdateOne {
	eluo.mutation.SetCreatedAt(t)
	return eluo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (eluo *EventLogUpdateOne) SetNillableCreatedAt(t *time.Time) *EventLogUpdateOne {
	if t != nil {
		eluo.SetCreatedAt(*t)
	}
	return eluo
}

// SetRun sets the "run" edge to the Run entity.
func (eluo *EventLogUpdateOne) SetRun(r *Run) *EventLogUpdateOne {
	return eluo.SetRunID(r.ID)
}

// SetWorkflow sets the "workflow" edge to the WorkflowEntity entity.
func (eluo *EventLogUpdateOne) SetWorkflow(w *WorkflowEntity) *EventLogUpdateOne {
	return eluo.SetWorkflowID(w.ID)
}

// SetWorkflowExecution sets the "workflow_execution" edge to the WorkflowExecution entity.
func (eluo *EventLogUpdateOne) SetWorkflowExecution(w *WorkflowExecution) *EventLogUpdateOne {
	return eluo.SetWorkflowExecutionID(w.ID)
}

// Mutation returns the EventLogMutation object of the builder.
func (eluo *EventLogUpdateOne) Mutation() *EventLogMutation {
	return eluo.mutation
}

// ClearRun clears the "run" edge to the Run entity.
func (eluo *EventLogUpdateOne) ClearRun() *EventLogUpdateOne {
	eluo.mutation.ClearRun()
	return eluo
}

// ClearWorkflow clears the "workflow" edge to the WorkflowEntity entity.
func (eluo *EventLogUpdateOne) ClearWorkflow() *EventLogUpdateOne {
	eluo.mutation.ClearWorkflow()
	return eluo
}

// ClearWorkflowExecution clears the "workflow_execution" edge to the WorkflowExecution entity.
func (eluo *EventLogUpdateOne) ClearWorkflowExecution() *EventLogUpdateOne {
	eluo.mutation.ClearWorkflowExecution()
	return eluo
}

// Where appends a list predicates to the EventLogUpdate builder.
func (eluo *EventLogUpdateOne) Where(ps ...predicate.EventLog) *EventLogUpdateOne {
	eluo.mutation.Where(ps...)
	return eluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (eluo *EventLogUpdateOne) Select(field string, fields ...string) *EventLogUpdateOne {
	eluo.fields = append([]string{field}, fields...)
	return eluo
}

// Save executes the query and returns the updated EventLog entity.
func (eluo *EventLogUpdateOne) Save(ctx context.Context) (*EventLog, error) {
	return withHooks(ctx, eluo.sqlSave, eluo.mutation, eluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eluo *EventLogUpdateOne) SaveX(ctx context.Context) *EventLog {
	node, err := eluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (eluo *EventLogUpdateOne) Exec(ctx context.Context) error {
	_, err := eluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eluo *EventLogUpdateOne) ExecX(ctx context.Context) {
	if err := eluo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eluo *EventLogUpdateOne) sqlSave(ctx context.Context) (_node *EventLog, err error) {
	_spec := sqlgraph.NewUpdateSpec(eventlog.Table, eventlog.Columns, sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt))
	id, ok := eluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EventLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := eluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, eventlog.FieldID)
		for _, f := range fields {
			if !eventlog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != eventlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := eluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eluo.mutation.Timestamp(); ok {
		_spec.SetField(eventlog.FieldTimestamp, field.TypeTime, value)
	}
	if value, ok := eluo.mutation.EventType(); ok {
		_spec.SetField(eventlog.FieldEventType, field.TypeString, value)
	}
	if value, ok := eluo.mutation.EntityID(); ok {
		_spec.SetField(eventlog.FieldEntityID, field.TypeInt, value)
	}
	if value, ok := eluo.mutation.AddedEntityID(); ok {
		_spec.AddField(eventlog.FieldEntityID, field.TypeInt, value)
	}
	if eluo.mutation.EntityIDCleared() {
		_spec.ClearField(eventlog.FieldEntityID, field.TypeInt)
	}
	if value, ok := eluo.mutation.ExecutionID(); ok {
		_spec.SetField(eventlog.FieldExecutionID, field.TypeInt, value)
	}
	if value, ok := eluo.mutation.AddedExecutionID(); ok {
		_spec.AddField(eventlog.FieldExecutionID, field.TypeInt, value)
	}
	if eluo.mutation.ExecutionIDCleared() {
		_spec.ClearField(eventlog.FieldExecutionID, field.TypeInt)
	}
	if value, ok := eluo.mutation.EntityType(); ok {
		_spec.SetField(eventlog.FieldEntityType, field.TypeString, value)
	}
	if eluo.mutation.EntityTypeCleared() {
		_spec.ClearField(eventlog.FieldEntityType, field.TypeString)
	}
	if value, ok := eluo.mutation.StepID(); ok {
		_spec.SetField(eventlog.FieldStepID, field.TypeString, value)
	}
	if eluo.mutation.StepIDCleared() {
		_spec.ClearField(eventlog.FieldStepID, field.TypeString)
	}
	if value, ok := eluo.mutation.HandlerName(); ok {
		_spec.SetField(eventlog.FieldHandlerName, field.TypeString, value)
	}
	if eluo.mutation.HandlerNameCleared() {
		_spec.ClearField(eventlog.FieldHandlerName, field.TypeString)
	}
	if value, ok := eluo.mutation.QueueName(); ok {
		_spec.SetField(eventlog.FieldQueueName, field.TypeString, value)
	}
	if eluo.mutation.QueueNameCleared() {
		_spec.ClearField(eventlog.FieldQueueName, field.TypeString)
	}
	if value, ok := eluo.mutation.PreviousState(); ok {
		_spec.SetField(eventlog.FieldPreviousState, field.TypeJSON, value)
	}
	if eluo.mutation.PreviousStateCleared() {
		_spec.ClearField(eventlog.FieldPreviousState, field.TypeJSON)
	}
	if value, ok := eluo.mutation.NewState(); ok {
		_spec.SetField(eventlog.FieldNewState, field.TypeJSON, value)
	}
	if eluo.mutation.NewStateCleared() {
		_spec.ClearField(eventlog.FieldNewState, field.TypeJSON)
	}
	if value, ok := eluo.mutation.Error(); ok {
		_spec.SetField(eventlog.FieldError, field.TypeString, value)
	}
	if eluo.mutation.ErrorCleared() {
		_spec.ClearField(eventlog.FieldError, field.TypeString)
	}
	if value, ok := eluo.mutation.CreatedAt(); ok {
		_spec.SetField(eventlog.FieldCreatedAt, field.TypeTime, value)
	}
	if eluo.mutation.RunCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventlog.RunTable,
			Columns: []string{eventlog.RunColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(run.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eluo.mutation.RunIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventlog.RunTable,
			Columns: []string{eventlog.RunColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(run.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eluo.mutation.WorkflowCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventlog.WorkflowTable,
			Columns: []string{eventlog.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowentity.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eluo.mutation.WorkflowIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventlog.WorkflowTable,
			Columns: []string{eventlog.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowentity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eluo.mutation.WorkflowExecutionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventlog.WorkflowExecutionTable,
			Columns: []string{eventlog.WorkflowExecutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowexecution.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eluo.mutation.WorkflowExecutionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventlog.WorkflowExecutionTable,
			Columns: []string{eventlog.WorkflowExecutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowexecution.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EventLog{config: eluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, eluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{eventlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	eluo.mutation.done = true
	return _node, nil
}
