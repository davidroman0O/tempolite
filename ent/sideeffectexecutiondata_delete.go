// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/tempolite/ent/predicate"
	"github.com/davidroman0O/tempolite/ent/sideeffectexecutiondata"
)

// SideEffectExecutionDataDelete is the builder for deleting a SideEffectExecutionData entity.
type SideEffectExecutionDataDelete struct {
	config
	hooks    []Hook
	mutation *SideEffectExecutionDataMutation
}

// Where appends a list predicates to the SideEffectExecutionDataDelete builder.
func (seedd *SideEffectExecutionDataDelete) Where(ps ...predicate.SideEffectExecutionData) *SideEffectExecutionDataDelete {
	seedd.mutation.Where(ps...)
	return seedd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (seedd *SideEffectExecutionDataDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, seedd.sqlExec, seedd.mutation, seedd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (seedd *SideEffectExecutionDataDelete) ExecX(ctx context.Context) int {
	n, err := seedd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (seedd *SideEffectExecutionDataDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(sideeffectexecutiondata.Table, sqlgraph.NewFieldSpec(sideeffectexecutiondata.FieldID, field.TypeInt))
	if ps := seedd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, seedd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	seedd.mutation.done = true
	return affected, err
}

// SideEffectExecutionDataDeleteOne is the builder for deleting a single SideEffectExecutionData entity.
type SideEffectExecutionDataDeleteOne struct {
	seedd *SideEffectExecutionDataDelete
}

// Where appends a list predicates to the SideEffectExecutionDataDelete builder.
func (seeddo *SideEffectExecutionDataDeleteOne) Where(ps ...predicate.SideEffectExecutionData) *SideEffectExecutionDataDeleteOne {
	seeddo.seedd.mutation.Where(ps...)
	return seeddo
}

// Exec executes the deletion query.
func (seeddo *SideEffectExecutionDataDeleteOne) Exec(ctx context.Context) error {
	n, err := seeddo.seedd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{sideeffectexecutiondata.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (seeddo *SideEffectExecutionDataDeleteOne) ExecX(ctx context.Context) {
	if err := seeddo.Exec(ctx); err != nil {
		panic(err)
	}
}
