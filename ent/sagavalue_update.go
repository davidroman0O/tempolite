// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/tempolite/ent/predicate"
	"github.com/davidroman0O/tempolite/ent/sagadata"
	"github.com/davidroman0O/tempolite/ent/sagaexecution"
	"github.com/davidroman0O/tempolite/ent/sagaexecutiondata"
	"github.com/davidroman0O/tempolite/ent/sagavalue"
	"github.com/davidroman0O/tempolite/ent/schema"
)

// SagaValueUpdate is the builder for updating SagaValue entities.
type SagaValueUpdate struct {
	config
	hooks    []Hook
	mutation *SagaValueMutation
}

// Where appends a list predicates to the SagaValueUpdate builder.
func (svu *SagaValueUpdate) Where(ps ...predicate.SagaValue) *SagaValueUpdate {
	svu.mutation.Where(ps...)
	return svu
}

// SetKey sets the "key" field.
func (svu *SagaValueUpdate) SetKey(s string) *SagaValueUpdate {
	svu.mutation.SetKey(s)
	return svu
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (svu *SagaValueUpdate) SetNillableKey(s *string) *SagaValueUpdate {
	if s != nil {
		svu.SetKey(*s)
	}
	return svu
}

// SetValue sets the "value" field.
func (svu *SagaValueUpdate) SetValue(b []byte) *SagaValueUpdate {
	svu.mutation.SetValue(b)
	return svu
}

// SetSagaEntityID sets the "saga_entity_id" field.
func (svu *SagaValueUpdate) SetSagaEntityID(sei schema.SagaEntityID) *SagaValueUpdate {
	svu.mutation.ResetSagaEntityID()
	svu.mutation.SetSagaEntityID(sei)
	return svu
}

// SetNillableSagaEntityID sets the "saga_entity_id" field if the given value is not nil.
func (svu *SagaValueUpdate) SetNillableSagaEntityID(sei *schema.SagaEntityID) *SagaValueUpdate {
	if sei != nil {
		svu.SetSagaEntityID(*sei)
	}
	return svu
}

// AddSagaEntityID adds sei to the "saga_entity_id" field.
func (svu *SagaValueUpdate) AddSagaEntityID(sei schema.SagaEntityID) *SagaValueUpdate {
	svu.mutation.AddSagaEntityID(sei)
	return svu
}

// SetSagaExecutionID sets the "saga_execution_id" field.
func (svu *SagaValueUpdate) SetSagaExecutionID(sei schema.SagaExecutionID) *SagaValueUpdate {
	svu.mutation.SetSagaExecutionID(sei)
	return svu
}

// SetNillableSagaExecutionID sets the "saga_execution_id" field if the given value is not nil.
func (svu *SagaValueUpdate) SetNillableSagaExecutionID(sei *schema.SagaExecutionID) *SagaValueUpdate {
	if sei != nil {
		svu.SetSagaExecutionID(*sei)
	}
	return svu
}

// SetCreatedAt sets the "created_at" field.
func (svu *SagaValueUpdate) SetCreatedAt(t time.Time) *SagaValueUpdate {
	svu.mutation.SetCreatedAt(t)
	return svu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (svu *SagaValueUpdate) SetNillableCreatedAt(t *time.Time) *SagaValueUpdate {
	if t != nil {
		svu.SetCreatedAt(*t)
	}
	return svu
}

// SetUpdatedAt sets the "updated_at" field.
func (svu *SagaValueUpdate) SetUpdatedAt(t time.Time) *SagaValueUpdate {
	svu.mutation.SetUpdatedAt(t)
	return svu
}

// SetExecutionID sets the "execution" edge to the SagaExecution entity by ID.
func (svu *SagaValueUpdate) SetExecutionID(id schema.SagaExecutionID) *SagaValueUpdate {
	svu.mutation.SetExecutionID(id)
	return svu
}

// SetExecution sets the "execution" edge to the SagaExecution entity.
func (svu *SagaValueUpdate) SetExecution(s *SagaExecution) *SagaValueUpdate {
	return svu.SetExecutionID(s.ID)
}

// SetSagaDataID sets the "saga_data" edge to the SagaData entity by ID.
func (svu *SagaValueUpdate) SetSagaDataID(id schema.SagaDataID) *SagaValueUpdate {
	svu.mutation.SetSagaDataID(id)
	return svu
}

// SetNillableSagaDataID sets the "saga_data" edge to the SagaData entity by ID if the given value is not nil.
func (svu *SagaValueUpdate) SetNillableSagaDataID(id *schema.SagaDataID) *SagaValueUpdate {
	if id != nil {
		svu = svu.SetSagaDataID(*id)
	}
	return svu
}

// SetSagaData sets the "saga_data" edge to the SagaData entity.
func (svu *SagaValueUpdate) SetSagaData(s *SagaData) *SagaValueUpdate {
	return svu.SetSagaDataID(s.ID)
}

// SetExecutionDataID sets the "execution_data" edge to the SagaExecutionData entity by ID.
func (svu *SagaValueUpdate) SetExecutionDataID(id schema.SagaExecutionDataID) *SagaValueUpdate {
	svu.mutation.SetExecutionDataID(id)
	return svu
}

// SetNillableExecutionDataID sets the "execution_data" edge to the SagaExecutionData entity by ID if the given value is not nil.
func (svu *SagaValueUpdate) SetNillableExecutionDataID(id *schema.SagaExecutionDataID) *SagaValueUpdate {
	if id != nil {
		svu = svu.SetExecutionDataID(*id)
	}
	return svu
}

// SetExecutionData sets the "execution_data" edge to the SagaExecutionData entity.
func (svu *SagaValueUpdate) SetExecutionData(s *SagaExecutionData) *SagaValueUpdate {
	return svu.SetExecutionDataID(s.ID)
}

// Mutation returns the SagaValueMutation object of the builder.
func (svu *SagaValueUpdate) Mutation() *SagaValueMutation {
	return svu.mutation
}

// ClearExecution clears the "execution" edge to the SagaExecution entity.
func (svu *SagaValueUpdate) ClearExecution() *SagaValueUpdate {
	svu.mutation.ClearExecution()
	return svu
}

// ClearSagaData clears the "saga_data" edge to the SagaData entity.
func (svu *SagaValueUpdate) ClearSagaData() *SagaValueUpdate {
	svu.mutation.ClearSagaData()
	return svu
}

// ClearExecutionData clears the "execution_data" edge to the SagaExecutionData entity.
func (svu *SagaValueUpdate) ClearExecutionData() *SagaValueUpdate {
	svu.mutation.ClearExecutionData()
	return svu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (svu *SagaValueUpdate) Save(ctx context.Context) (int, error) {
	svu.defaults()
	return withHooks(ctx, svu.sqlSave, svu.mutation, svu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (svu *SagaValueUpdate) SaveX(ctx context.Context) int {
	affected, err := svu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (svu *SagaValueUpdate) Exec(ctx context.Context) error {
	_, err := svu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (svu *SagaValueUpdate) ExecX(ctx context.Context) {
	if err := svu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (svu *SagaValueUpdate) defaults() {
	if _, ok := svu.mutation.UpdatedAt(); !ok {
		v := sagavalue.UpdateDefaultUpdatedAt()
		svu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (svu *SagaValueUpdate) check() error {
	if svu.mutation.ExecutionCleared() && len(svu.mutation.ExecutionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SagaValue.execution"`)
	}
	return nil
}

func (svu *SagaValueUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := svu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(sagavalue.Table, sagavalue.Columns, sqlgraph.NewFieldSpec(sagavalue.FieldID, field.TypeInt))
	if ps := svu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := svu.mutation.Key(); ok {
		_spec.SetField(sagavalue.FieldKey, field.TypeString, value)
	}
	if value, ok := svu.mutation.Value(); ok {
		_spec.SetField(sagavalue.FieldValue, field.TypeBytes, value)
	}
	if value, ok := svu.mutation.SagaEntityID(); ok {
		_spec.SetField(sagavalue.FieldSagaEntityID, field.TypeInt, value)
	}
	if value, ok := svu.mutation.AddedSagaEntityID(); ok {
		_spec.AddField(sagavalue.FieldSagaEntityID, field.TypeInt, value)
	}
	if value, ok := svu.mutation.CreatedAt(); ok {
		_spec.SetField(sagavalue.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := svu.mutation.UpdatedAt(); ok {
		_spec.SetField(sagavalue.FieldUpdatedAt, field.TypeTime, value)
	}
	if svu.mutation.ExecutionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sagavalue.ExecutionTable,
			Columns: []string{sagavalue.ExecutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagaexecution.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := svu.mutation.ExecutionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sagavalue.ExecutionTable,
			Columns: []string{sagavalue.ExecutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagaexecution.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if svu.mutation.SagaDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sagavalue.SagaDataTable,
			Columns: []string{sagavalue.SagaDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagadata.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := svu.mutation.SagaDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sagavalue.SagaDataTable,
			Columns: []string{sagavalue.SagaDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagadata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if svu.mutation.ExecutionDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sagavalue.ExecutionDataTable,
			Columns: []string{sagavalue.ExecutionDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagaexecutiondata.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := svu.mutation.ExecutionDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sagavalue.ExecutionDataTable,
			Columns: []string{sagavalue.ExecutionDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagaexecutiondata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, svu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sagavalue.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	svu.mutation.done = true
	return n, nil
}

// SagaValueUpdateOne is the builder for updating a single SagaValue entity.
type SagaValueUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SagaValueMutation
}

// SetKey sets the "key" field.
func (svuo *SagaValueUpdateOne) SetKey(s string) *SagaValueUpdateOne {
	svuo.mutation.SetKey(s)
	return svuo
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (svuo *SagaValueUpdateOne) SetNillableKey(s *string) *SagaValueUpdateOne {
	if s != nil {
		svuo.SetKey(*s)
	}
	return svuo
}

// SetValue sets the "value" field.
func (svuo *SagaValueUpdateOne) SetValue(b []byte) *SagaValueUpdateOne {
	svuo.mutation.SetValue(b)
	return svuo
}

// SetSagaEntityID sets the "saga_entity_id" field.
func (svuo *SagaValueUpdateOne) SetSagaEntityID(sei schema.SagaEntityID) *SagaValueUpdateOne {
	svuo.mutation.ResetSagaEntityID()
	svuo.mutation.SetSagaEntityID(sei)
	return svuo
}

// SetNillableSagaEntityID sets the "saga_entity_id" field if the given value is not nil.
func (svuo *SagaValueUpdateOne) SetNillableSagaEntityID(sei *schema.SagaEntityID) *SagaValueUpdateOne {
	if sei != nil {
		svuo.SetSagaEntityID(*sei)
	}
	return svuo
}

// AddSagaEntityID adds sei to the "saga_entity_id" field.
func (svuo *SagaValueUpdateOne) AddSagaEntityID(sei schema.SagaEntityID) *SagaValueUpdateOne {
	svuo.mutation.AddSagaEntityID(sei)
	return svuo
}

// SetSagaExecutionID sets the "saga_execution_id" field.
func (svuo *SagaValueUpdateOne) SetSagaExecutionID(sei schema.SagaExecutionID) *SagaValueUpdateOne {
	svuo.mutation.SetSagaExecutionID(sei)
	return svuo
}

// SetNillableSagaExecutionID sets the "saga_execution_id" field if the given value is not nil.
func (svuo *SagaValueUpdateOne) SetNillableSagaExecutionID(sei *schema.SagaExecutionID) *SagaValueUpdateOne {
	if sei != nil {
		svuo.SetSagaExecutionID(*sei)
	}
	return svuo
}

// SetCreatedAt sets the "created_at" field.
func (svuo *SagaValueUpdateOne) SetCreatedAt(t time.Time) *SagaValueUpdateOne {
	svuo.mutation.SetCreatedAt(t)
	return svuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (svuo *SagaValueUpdateOne) SetNillableCreatedAt(t *time.Time) *SagaValueUpdateOne {
	if t != nil {
		svuo.SetCreatedAt(*t)
	}
	return svuo
}

// SetUpdatedAt sets the "updated_at" field.
func (svuo *SagaValueUpdateOne) SetUpdatedAt(t time.Time) *SagaValueUpdateOne {
	svuo.mutation.SetUpdatedAt(t)
	return svuo
}

// SetExecutionID sets the "execution" edge to the SagaExecution entity by ID.
func (svuo *SagaValueUpdateOne) SetExecutionID(id schema.SagaExecutionID) *SagaValueUpdateOne {
	svuo.mutation.SetExecutionID(id)
	return svuo
}

// SetExecution sets the "execution" edge to the SagaExecution entity.
func (svuo *SagaValueUpdateOne) SetExecution(s *SagaExecution) *SagaValueUpdateOne {
	return svuo.SetExecutionID(s.ID)
}

// SetSagaDataID sets the "saga_data" edge to the SagaData entity by ID.
func (svuo *SagaValueUpdateOne) SetSagaDataID(id schema.SagaDataID) *SagaValueUpdateOne {
	svuo.mutation.SetSagaDataID(id)
	return svuo
}

// SetNillableSagaDataID sets the "saga_data" edge to the SagaData entity by ID if the given value is not nil.
func (svuo *SagaValueUpdateOne) SetNillableSagaDataID(id *schema.SagaDataID) *SagaValueUpdateOne {
	if id != nil {
		svuo = svuo.SetSagaDataID(*id)
	}
	return svuo
}

// SetSagaData sets the "saga_data" edge to the SagaData entity.
func (svuo *SagaValueUpdateOne) SetSagaData(s *SagaData) *SagaValueUpdateOne {
	return svuo.SetSagaDataID(s.ID)
}

// SetExecutionDataID sets the "execution_data" edge to the SagaExecutionData entity by ID.
func (svuo *SagaValueUpdateOne) SetExecutionDataID(id schema.SagaExecutionDataID) *SagaValueUpdateOne {
	svuo.mutation.SetExecutionDataID(id)
	return svuo
}

// SetNillableExecutionDataID sets the "execution_data" edge to the SagaExecutionData entity by ID if the given value is not nil.
func (svuo *SagaValueUpdateOne) SetNillableExecutionDataID(id *schema.SagaExecutionDataID) *SagaValueUpdateOne {
	if id != nil {
		svuo = svuo.SetExecutionDataID(*id)
	}
	return svuo
}

// SetExecutionData sets the "execution_data" edge to the SagaExecutionData entity.
func (svuo *SagaValueUpdateOne) SetExecutionData(s *SagaExecutionData) *SagaValueUpdateOne {
	return svuo.SetExecutionDataID(s.ID)
}

// Mutation returns the SagaValueMutation object of the builder.
func (svuo *SagaValueUpdateOne) Mutation() *SagaValueMutation {
	return svuo.mutation
}

// ClearExecution clears the "execution" edge to the SagaExecution entity.
func (svuo *SagaValueUpdateOne) ClearExecution() *SagaValueUpdateOne {
	svuo.mutation.ClearExecution()
	return svuo
}

// ClearSagaData clears the "saga_data" edge to the SagaData entity.
func (svuo *SagaValueUpdateOne) ClearSagaData() *SagaValueUpdateOne {
	svuo.mutation.ClearSagaData()
	return svuo
}

// ClearExecutionData clears the "execution_data" edge to the SagaExecutionData entity.
func (svuo *SagaValueUpdateOne) ClearExecutionData() *SagaValueUpdateOne {
	svuo.mutation.ClearExecutionData()
	return svuo
}

// Where appends a list predicates to the SagaValueUpdate builder.
func (svuo *SagaValueUpdateOne) Where(ps ...predicate.SagaValue) *SagaValueUpdateOne {
	svuo.mutation.Where(ps...)
	return svuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (svuo *SagaValueUpdateOne) Select(field string, fields ...string) *SagaValueUpdateOne {
	svuo.fields = append([]string{field}, fields...)
	return svuo
}

// Save executes the query and returns the updated SagaValue entity.
func (svuo *SagaValueUpdateOne) Save(ctx context.Context) (*SagaValue, error) {
	svuo.defaults()
	return withHooks(ctx, svuo.sqlSave, svuo.mutation, svuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (svuo *SagaValueUpdateOne) SaveX(ctx context.Context) *SagaValue {
	node, err := svuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (svuo *SagaValueUpdateOne) Exec(ctx context.Context) error {
	_, err := svuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (svuo *SagaValueUpdateOne) ExecX(ctx context.Context) {
	if err := svuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (svuo *SagaValueUpdateOne) defaults() {
	if _, ok := svuo.mutation.UpdatedAt(); !ok {
		v := sagavalue.UpdateDefaultUpdatedAt()
		svuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (svuo *SagaValueUpdateOne) check() error {
	if svuo.mutation.ExecutionCleared() && len(svuo.mutation.ExecutionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SagaValue.execution"`)
	}
	return nil
}

func (svuo *SagaValueUpdateOne) sqlSave(ctx context.Context) (_node *SagaValue, err error) {
	if err := svuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(sagavalue.Table, sagavalue.Columns, sqlgraph.NewFieldSpec(sagavalue.FieldID, field.TypeInt))
	id, ok := svuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SagaValue.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := svuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sagavalue.FieldID)
		for _, f := range fields {
			if !sagavalue.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sagavalue.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := svuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := svuo.mutation.Key(); ok {
		_spec.SetField(sagavalue.FieldKey, field.TypeString, value)
	}
	if value, ok := svuo.mutation.Value(); ok {
		_spec.SetField(sagavalue.FieldValue, field.TypeBytes, value)
	}
	if value, ok := svuo.mutation.SagaEntityID(); ok {
		_spec.SetField(sagavalue.FieldSagaEntityID, field.TypeInt, value)
	}
	if value, ok := svuo.mutation.AddedSagaEntityID(); ok {
		_spec.AddField(sagavalue.FieldSagaEntityID, field.TypeInt, value)
	}
	if value, ok := svuo.mutation.CreatedAt(); ok {
		_spec.SetField(sagavalue.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := svuo.mutation.UpdatedAt(); ok {
		_spec.SetField(sagavalue.FieldUpdatedAt, field.TypeTime, value)
	}
	if svuo.mutation.ExecutionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sagavalue.ExecutionTable,
			Columns: []string{sagavalue.ExecutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagaexecution.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := svuo.mutation.ExecutionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sagavalue.ExecutionTable,
			Columns: []string{sagavalue.ExecutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagaexecution.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if svuo.mutation.SagaDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sagavalue.SagaDataTable,
			Columns: []string{sagavalue.SagaDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagadata.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := svuo.mutation.SagaDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sagavalue.SagaDataTable,
			Columns: []string{sagavalue.SagaDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagadata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if svuo.mutation.ExecutionDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sagavalue.ExecutionDataTable,
			Columns: []string{sagavalue.ExecutionDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagaexecutiondata.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := svuo.mutation.ExecutionDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sagavalue.ExecutionDataTable,
			Columns: []string{sagavalue.ExecutionDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagaexecutiondata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SagaValue{config: svuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, svuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sagavalue.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	svuo.mutation.done = true
	return _node, nil
}
