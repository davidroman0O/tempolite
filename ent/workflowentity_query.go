// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/tempolite/ent/activityentity"
	"github.com/davidroman0O/tempolite/ent/predicate"
	"github.com/davidroman0O/tempolite/ent/queue"
	"github.com/davidroman0O/tempolite/ent/run"
	"github.com/davidroman0O/tempolite/ent/sagaentity"
	"github.com/davidroman0O/tempolite/ent/schema"
	"github.com/davidroman0O/tempolite/ent/sideeffectentity"
	"github.com/davidroman0O/tempolite/ent/version"
	"github.com/davidroman0O/tempolite/ent/workflowdata"
	"github.com/davidroman0O/tempolite/ent/workflowentity"
	"github.com/davidroman0O/tempolite/ent/workflowexecution"
)

// WorkflowEntityQuery is the builder for querying WorkflowEntity entities.
type WorkflowEntityQuery struct {
	config
	ctx                    *QueryContext
	order                  []workflowentity.OrderOption
	inters                 []Interceptor
	predicates             []predicate.WorkflowEntity
	withQueue              *QueueQuery
	withRun                *RunQuery
	withVersions           *VersionQuery
	withWorkflowData       *WorkflowDataQuery
	withActivityChildren   *ActivityEntityQuery
	withSagaChildren       *SagaEntityQuery
	withSideEffectChildren *SideEffectEntityQuery
	withExecutions         *WorkflowExecutionQuery
	withFKs                bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the WorkflowEntityQuery builder.
func (weq *WorkflowEntityQuery) Where(ps ...predicate.WorkflowEntity) *WorkflowEntityQuery {
	weq.predicates = append(weq.predicates, ps...)
	return weq
}

// Limit the number of records to be returned by this query.
func (weq *WorkflowEntityQuery) Limit(limit int) *WorkflowEntityQuery {
	weq.ctx.Limit = &limit
	return weq
}

// Offset to start from.
func (weq *WorkflowEntityQuery) Offset(offset int) *WorkflowEntityQuery {
	weq.ctx.Offset = &offset
	return weq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (weq *WorkflowEntityQuery) Unique(unique bool) *WorkflowEntityQuery {
	weq.ctx.Unique = &unique
	return weq
}

// Order specifies how the records should be ordered.
func (weq *WorkflowEntityQuery) Order(o ...workflowentity.OrderOption) *WorkflowEntityQuery {
	weq.order = append(weq.order, o...)
	return weq
}

// QueryQueue chains the current query on the "queue" edge.
func (weq *WorkflowEntityQuery) QueryQueue() *QueueQuery {
	query := (&QueueClient{config: weq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := weq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := weq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workflowentity.Table, workflowentity.FieldID, selector),
			sqlgraph.To(queue.Table, queue.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workflowentity.QueueTable, workflowentity.QueueColumn),
		)
		fromU = sqlgraph.SetNeighbors(weq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRun chains the current query on the "run" edge.
func (weq *WorkflowEntityQuery) QueryRun() *RunQuery {
	query := (&RunClient{config: weq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := weq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := weq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workflowentity.Table, workflowentity.FieldID, selector),
			sqlgraph.To(run.Table, run.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workflowentity.RunTable, workflowentity.RunColumn),
		)
		fromU = sqlgraph.SetNeighbors(weq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryVersions chains the current query on the "versions" edge.
func (weq *WorkflowEntityQuery) QueryVersions() *VersionQuery {
	query := (&VersionClient{config: weq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := weq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := weq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workflowentity.Table, workflowentity.FieldID, selector),
			sqlgraph.To(version.Table, version.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workflowentity.VersionsTable, workflowentity.VersionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(weq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryWorkflowData chains the current query on the "workflow_data" edge.
func (weq *WorkflowEntityQuery) QueryWorkflowData() *WorkflowDataQuery {
	query := (&WorkflowDataClient{config: weq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := weq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := weq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workflowentity.Table, workflowentity.FieldID, selector),
			sqlgraph.To(workflowdata.Table, workflowdata.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, workflowentity.WorkflowDataTable, workflowentity.WorkflowDataColumn),
		)
		fromU = sqlgraph.SetNeighbors(weq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryActivityChildren chains the current query on the "activity_children" edge.
func (weq *WorkflowEntityQuery) QueryActivityChildren() *ActivityEntityQuery {
	query := (&ActivityEntityClient{config: weq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := weq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := weq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workflowentity.Table, workflowentity.FieldID, selector),
			sqlgraph.To(activityentity.Table, activityentity.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workflowentity.ActivityChildrenTable, workflowentity.ActivityChildrenColumn),
		)
		fromU = sqlgraph.SetNeighbors(weq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySagaChildren chains the current query on the "saga_children" edge.
func (weq *WorkflowEntityQuery) QuerySagaChildren() *SagaEntityQuery {
	query := (&SagaEntityClient{config: weq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := weq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := weq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workflowentity.Table, workflowentity.FieldID, selector),
			sqlgraph.To(sagaentity.Table, sagaentity.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workflowentity.SagaChildrenTable, workflowentity.SagaChildrenColumn),
		)
		fromU = sqlgraph.SetNeighbors(weq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySideEffectChildren chains the current query on the "side_effect_children" edge.
func (weq *WorkflowEntityQuery) QuerySideEffectChildren() *SideEffectEntityQuery {
	query := (&SideEffectEntityClient{config: weq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := weq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := weq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workflowentity.Table, workflowentity.FieldID, selector),
			sqlgraph.To(sideeffectentity.Table, sideeffectentity.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workflowentity.SideEffectChildrenTable, workflowentity.SideEffectChildrenColumn),
		)
		fromU = sqlgraph.SetNeighbors(weq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryExecutions chains the current query on the "executions" edge.
func (weq *WorkflowEntityQuery) QueryExecutions() *WorkflowExecutionQuery {
	query := (&WorkflowExecutionClient{config: weq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := weq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := weq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workflowentity.Table, workflowentity.FieldID, selector),
			sqlgraph.To(workflowexecution.Table, workflowexecution.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workflowentity.ExecutionsTable, workflowentity.ExecutionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(weq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first WorkflowEntity entity from the query.
// Returns a *NotFoundError when no WorkflowEntity was found.
func (weq *WorkflowEntityQuery) First(ctx context.Context) (*WorkflowEntity, error) {
	nodes, err := weq.Limit(1).All(setContextOp(ctx, weq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{workflowentity.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (weq *WorkflowEntityQuery) FirstX(ctx context.Context) *WorkflowEntity {
	node, err := weq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first WorkflowEntity ID from the query.
// Returns a *NotFoundError when no WorkflowEntity ID was found.
func (weq *WorkflowEntityQuery) FirstID(ctx context.Context) (id schema.WorkflowEntityID, err error) {
	var ids []schema.WorkflowEntityID
	if ids, err = weq.Limit(1).IDs(setContextOp(ctx, weq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{workflowentity.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (weq *WorkflowEntityQuery) FirstIDX(ctx context.Context) schema.WorkflowEntityID {
	id, err := weq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single WorkflowEntity entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one WorkflowEntity entity is found.
// Returns a *NotFoundError when no WorkflowEntity entities are found.
func (weq *WorkflowEntityQuery) Only(ctx context.Context) (*WorkflowEntity, error) {
	nodes, err := weq.Limit(2).All(setContextOp(ctx, weq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{workflowentity.Label}
	default:
		return nil, &NotSingularError{workflowentity.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (weq *WorkflowEntityQuery) OnlyX(ctx context.Context) *WorkflowEntity {
	node, err := weq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only WorkflowEntity ID in the query.
// Returns a *NotSingularError when more than one WorkflowEntity ID is found.
// Returns a *NotFoundError when no entities are found.
func (weq *WorkflowEntityQuery) OnlyID(ctx context.Context) (id schema.WorkflowEntityID, err error) {
	var ids []schema.WorkflowEntityID
	if ids, err = weq.Limit(2).IDs(setContextOp(ctx, weq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{workflowentity.Label}
	default:
		err = &NotSingularError{workflowentity.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (weq *WorkflowEntityQuery) OnlyIDX(ctx context.Context) schema.WorkflowEntityID {
	id, err := weq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of WorkflowEntities.
func (weq *WorkflowEntityQuery) All(ctx context.Context) ([]*WorkflowEntity, error) {
	ctx = setContextOp(ctx, weq.ctx, ent.OpQueryAll)
	if err := weq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*WorkflowEntity, *WorkflowEntityQuery]()
	return withInterceptors[[]*WorkflowEntity](ctx, weq, qr, weq.inters)
}

// AllX is like All, but panics if an error occurs.
func (weq *WorkflowEntityQuery) AllX(ctx context.Context) []*WorkflowEntity {
	nodes, err := weq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of WorkflowEntity IDs.
func (weq *WorkflowEntityQuery) IDs(ctx context.Context) (ids []schema.WorkflowEntityID, err error) {
	if weq.ctx.Unique == nil && weq.path != nil {
		weq.Unique(true)
	}
	ctx = setContextOp(ctx, weq.ctx, ent.OpQueryIDs)
	if err = weq.Select(workflowentity.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (weq *WorkflowEntityQuery) IDsX(ctx context.Context) []schema.WorkflowEntityID {
	ids, err := weq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (weq *WorkflowEntityQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, weq.ctx, ent.OpQueryCount)
	if err := weq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, weq, querierCount[*WorkflowEntityQuery](), weq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (weq *WorkflowEntityQuery) CountX(ctx context.Context) int {
	count, err := weq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (weq *WorkflowEntityQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, weq.ctx, ent.OpQueryExist)
	switch _, err := weq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (weq *WorkflowEntityQuery) ExistX(ctx context.Context) bool {
	exist, err := weq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the WorkflowEntityQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (weq *WorkflowEntityQuery) Clone() *WorkflowEntityQuery {
	if weq == nil {
		return nil
	}
	return &WorkflowEntityQuery{
		config:                 weq.config,
		ctx:                    weq.ctx.Clone(),
		order:                  append([]workflowentity.OrderOption{}, weq.order...),
		inters:                 append([]Interceptor{}, weq.inters...),
		predicates:             append([]predicate.WorkflowEntity{}, weq.predicates...),
		withQueue:              weq.withQueue.Clone(),
		withRun:                weq.withRun.Clone(),
		withVersions:           weq.withVersions.Clone(),
		withWorkflowData:       weq.withWorkflowData.Clone(),
		withActivityChildren:   weq.withActivityChildren.Clone(),
		withSagaChildren:       weq.withSagaChildren.Clone(),
		withSideEffectChildren: weq.withSideEffectChildren.Clone(),
		withExecutions:         weq.withExecutions.Clone(),
		// clone intermediate query.
		sql:  weq.sql.Clone(),
		path: weq.path,
	}
}

// WithQueue tells the query-builder to eager-load the nodes that are connected to
// the "queue" edge. The optional arguments are used to configure the query builder of the edge.
func (weq *WorkflowEntityQuery) WithQueue(opts ...func(*QueueQuery)) *WorkflowEntityQuery {
	query := (&QueueClient{config: weq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	weq.withQueue = query
	return weq
}

// WithRun tells the query-builder to eager-load the nodes that are connected to
// the "run" edge. The optional arguments are used to configure the query builder of the edge.
func (weq *WorkflowEntityQuery) WithRun(opts ...func(*RunQuery)) *WorkflowEntityQuery {
	query := (&RunClient{config: weq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	weq.withRun = query
	return weq
}

// WithVersions tells the query-builder to eager-load the nodes that are connected to
// the "versions" edge. The optional arguments are used to configure the query builder of the edge.
func (weq *WorkflowEntityQuery) WithVersions(opts ...func(*VersionQuery)) *WorkflowEntityQuery {
	query := (&VersionClient{config: weq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	weq.withVersions = query
	return weq
}

// WithWorkflowData tells the query-builder to eager-load the nodes that are connected to
// the "workflow_data" edge. The optional arguments are used to configure the query builder of the edge.
func (weq *WorkflowEntityQuery) WithWorkflowData(opts ...func(*WorkflowDataQuery)) *WorkflowEntityQuery {
	query := (&WorkflowDataClient{config: weq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	weq.withWorkflowData = query
	return weq
}

// WithActivityChildren tells the query-builder to eager-load the nodes that are connected to
// the "activity_children" edge. The optional arguments are used to configure the query builder of the edge.
func (weq *WorkflowEntityQuery) WithActivityChildren(opts ...func(*ActivityEntityQuery)) *WorkflowEntityQuery {
	query := (&ActivityEntityClient{config: weq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	weq.withActivityChildren = query
	return weq
}

// WithSagaChildren tells the query-builder to eager-load the nodes that are connected to
// the "saga_children" edge. The optional arguments are used to configure the query builder of the edge.
func (weq *WorkflowEntityQuery) WithSagaChildren(opts ...func(*SagaEntityQuery)) *WorkflowEntityQuery {
	query := (&SagaEntityClient{config: weq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	weq.withSagaChildren = query
	return weq
}

// WithSideEffectChildren tells the query-builder to eager-load the nodes that are connected to
// the "side_effect_children" edge. The optional arguments are used to configure the query builder of the edge.
func (weq *WorkflowEntityQuery) WithSideEffectChildren(opts ...func(*SideEffectEntityQuery)) *WorkflowEntityQuery {
	query := (&SideEffectEntityClient{config: weq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	weq.withSideEffectChildren = query
	return weq
}

// WithExecutions tells the query-builder to eager-load the nodes that are connected to
// the "executions" edge. The optional arguments are used to configure the query builder of the edge.
func (weq *WorkflowEntityQuery) WithExecutions(opts ...func(*WorkflowExecutionQuery)) *WorkflowEntityQuery {
	query := (&WorkflowExecutionClient{config: weq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	weq.withExecutions = query
	return weq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		HandlerName string `json:"handler_name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.WorkflowEntity.Query().
//		GroupBy(workflowentity.FieldHandlerName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (weq *WorkflowEntityQuery) GroupBy(field string, fields ...string) *WorkflowEntityGroupBy {
	weq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &WorkflowEntityGroupBy{build: weq}
	grbuild.flds = &weq.ctx.Fields
	grbuild.label = workflowentity.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		HandlerName string `json:"handler_name,omitempty"`
//	}
//
//	client.WorkflowEntity.Query().
//		Select(workflowentity.FieldHandlerName).
//		Scan(ctx, &v)
func (weq *WorkflowEntityQuery) Select(fields ...string) *WorkflowEntitySelect {
	weq.ctx.Fields = append(weq.ctx.Fields, fields...)
	sbuild := &WorkflowEntitySelect{WorkflowEntityQuery: weq}
	sbuild.label = workflowentity.Label
	sbuild.flds, sbuild.scan = &weq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a WorkflowEntitySelect configured with the given aggregations.
func (weq *WorkflowEntityQuery) Aggregate(fns ...AggregateFunc) *WorkflowEntitySelect {
	return weq.Select().Aggregate(fns...)
}

func (weq *WorkflowEntityQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range weq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, weq); err != nil {
				return err
			}
		}
	}
	for _, f := range weq.ctx.Fields {
		if !workflowentity.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if weq.path != nil {
		prev, err := weq.path(ctx)
		if err != nil {
			return err
		}
		weq.sql = prev
	}
	return nil
}

func (weq *WorkflowEntityQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*WorkflowEntity, error) {
	var (
		nodes       = []*WorkflowEntity{}
		withFKs     = weq.withFKs
		_spec       = weq.querySpec()
		loadedTypes = [8]bool{
			weq.withQueue != nil,
			weq.withRun != nil,
			weq.withVersions != nil,
			weq.withWorkflowData != nil,
			weq.withActivityChildren != nil,
			weq.withSagaChildren != nil,
			weq.withSideEffectChildren != nil,
			weq.withExecutions != nil,
		}
	)
	if weq.withQueue != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, workflowentity.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*WorkflowEntity).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &WorkflowEntity{config: weq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, weq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := weq.withQueue; query != nil {
		if err := weq.loadQueue(ctx, query, nodes, nil,
			func(n *WorkflowEntity, e *Queue) { n.Edges.Queue = e }); err != nil {
			return nil, err
		}
	}
	if query := weq.withRun; query != nil {
		if err := weq.loadRun(ctx, query, nodes, nil,
			func(n *WorkflowEntity, e *Run) { n.Edges.Run = e }); err != nil {
			return nil, err
		}
	}
	if query := weq.withVersions; query != nil {
		if err := weq.loadVersions(ctx, query, nodes,
			func(n *WorkflowEntity) { n.Edges.Versions = []*Version{} },
			func(n *WorkflowEntity, e *Version) { n.Edges.Versions = append(n.Edges.Versions, e) }); err != nil {
			return nil, err
		}
	}
	if query := weq.withWorkflowData; query != nil {
		if err := weq.loadWorkflowData(ctx, query, nodes, nil,
			func(n *WorkflowEntity, e *WorkflowData) { n.Edges.WorkflowData = e }); err != nil {
			return nil, err
		}
	}
	if query := weq.withActivityChildren; query != nil {
		if err := weq.loadActivityChildren(ctx, query, nodes,
			func(n *WorkflowEntity) { n.Edges.ActivityChildren = []*ActivityEntity{} },
			func(n *WorkflowEntity, e *ActivityEntity) {
				n.Edges.ActivityChildren = append(n.Edges.ActivityChildren, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := weq.withSagaChildren; query != nil {
		if err := weq.loadSagaChildren(ctx, query, nodes,
			func(n *WorkflowEntity) { n.Edges.SagaChildren = []*SagaEntity{} },
			func(n *WorkflowEntity, e *SagaEntity) { n.Edges.SagaChildren = append(n.Edges.SagaChildren, e) }); err != nil {
			return nil, err
		}
	}
	if query := weq.withSideEffectChildren; query != nil {
		if err := weq.loadSideEffectChildren(ctx, query, nodes,
			func(n *WorkflowEntity) { n.Edges.SideEffectChildren = []*SideEffectEntity{} },
			func(n *WorkflowEntity, e *SideEffectEntity) {
				n.Edges.SideEffectChildren = append(n.Edges.SideEffectChildren, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := weq.withExecutions; query != nil {
		if err := weq.loadExecutions(ctx, query, nodes,
			func(n *WorkflowEntity) { n.Edges.Executions = []*WorkflowExecution{} },
			func(n *WorkflowEntity, e *WorkflowExecution) { n.Edges.Executions = append(n.Edges.Executions, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (weq *WorkflowEntityQuery) loadQueue(ctx context.Context, query *QueueQuery, nodes []*WorkflowEntity, init func(*WorkflowEntity), assign func(*WorkflowEntity, *Queue)) error {
	ids := make([]schema.QueueID, 0, len(nodes))
	nodeids := make(map[schema.QueueID][]*WorkflowEntity)
	for i := range nodes {
		if nodes[i].queue_entities == nil {
			continue
		}
		fk := *nodes[i].queue_entities
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(queue.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "queue_entities" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (weq *WorkflowEntityQuery) loadRun(ctx context.Context, query *RunQuery, nodes []*WorkflowEntity, init func(*WorkflowEntity), assign func(*WorkflowEntity, *Run)) error {
	ids := make([]schema.RunID, 0, len(nodes))
	nodeids := make(map[schema.RunID][]*WorkflowEntity)
	for i := range nodes {
		fk := nodes[i].RunID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(run.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "run_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (weq *WorkflowEntityQuery) loadVersions(ctx context.Context, query *VersionQuery, nodes []*WorkflowEntity, init func(*WorkflowEntity), assign func(*WorkflowEntity, *Version)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[schema.WorkflowEntityID]*WorkflowEntity)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(version.FieldEntityID)
	}
	query.Where(predicate.Version(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(workflowentity.VersionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.EntityID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "entity_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (weq *WorkflowEntityQuery) loadWorkflowData(ctx context.Context, query *WorkflowDataQuery, nodes []*WorkflowEntity, init func(*WorkflowEntity), assign func(*WorkflowEntity, *WorkflowData)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[schema.WorkflowEntityID]*WorkflowEntity)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(workflowdata.FieldEntityID)
	}
	query.Where(predicate.WorkflowData(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(workflowentity.WorkflowDataColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.EntityID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "entity_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (weq *WorkflowEntityQuery) loadActivityChildren(ctx context.Context, query *ActivityEntityQuery, nodes []*WorkflowEntity, init func(*WorkflowEntity), assign func(*WorkflowEntity, *ActivityEntity)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[schema.WorkflowEntityID]*WorkflowEntity)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ActivityEntity(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(workflowentity.ActivityChildrenColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.workflow_entity_activity_children
		if fk == nil {
			return fmt.Errorf(`foreign-key "workflow_entity_activity_children" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "workflow_entity_activity_children" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (weq *WorkflowEntityQuery) loadSagaChildren(ctx context.Context, query *SagaEntityQuery, nodes []*WorkflowEntity, init func(*WorkflowEntity), assign func(*WorkflowEntity, *SagaEntity)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[schema.WorkflowEntityID]*WorkflowEntity)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.SagaEntity(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(workflowentity.SagaChildrenColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.workflow_entity_saga_children
		if fk == nil {
			return fmt.Errorf(`foreign-key "workflow_entity_saga_children" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "workflow_entity_saga_children" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (weq *WorkflowEntityQuery) loadSideEffectChildren(ctx context.Context, query *SideEffectEntityQuery, nodes []*WorkflowEntity, init func(*WorkflowEntity), assign func(*WorkflowEntity, *SideEffectEntity)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[schema.WorkflowEntityID]*WorkflowEntity)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.SideEffectEntity(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(workflowentity.SideEffectChildrenColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.workflow_entity_side_effect_children
		if fk == nil {
			return fmt.Errorf(`foreign-key "workflow_entity_side_effect_children" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "workflow_entity_side_effect_children" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (weq *WorkflowEntityQuery) loadExecutions(ctx context.Context, query *WorkflowExecutionQuery, nodes []*WorkflowEntity, init func(*WorkflowEntity), assign func(*WorkflowEntity, *WorkflowExecution)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[schema.WorkflowEntityID]*WorkflowEntity)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(workflowexecution.FieldWorkflowEntityID)
	}
	query.Where(predicate.WorkflowExecution(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(workflowentity.ExecutionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.WorkflowEntityID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "workflow_entity_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (weq *WorkflowEntityQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := weq.querySpec()
	_spec.Node.Columns = weq.ctx.Fields
	if len(weq.ctx.Fields) > 0 {
		_spec.Unique = weq.ctx.Unique != nil && *weq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, weq.driver, _spec)
}

func (weq *WorkflowEntityQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(workflowentity.Table, workflowentity.Columns, sqlgraph.NewFieldSpec(workflowentity.FieldID, field.TypeInt))
	_spec.From = weq.sql
	if unique := weq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if weq.path != nil {
		_spec.Unique = true
	}
	if fields := weq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workflowentity.FieldID)
		for i := range fields {
			if fields[i] != workflowentity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if weq.withRun != nil {
			_spec.Node.AddColumnOnce(workflowentity.FieldRunID)
		}
	}
	if ps := weq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := weq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := weq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := weq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (weq *WorkflowEntityQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(weq.driver.Dialect())
	t1 := builder.Table(workflowentity.Table)
	columns := weq.ctx.Fields
	if len(columns) == 0 {
		columns = workflowentity.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if weq.sql != nil {
		selector = weq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if weq.ctx.Unique != nil && *weq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range weq.predicates {
		p(selector)
	}
	for _, p := range weq.order {
		p(selector)
	}
	if offset := weq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := weq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WorkflowEntityGroupBy is the group-by builder for WorkflowEntity entities.
type WorkflowEntityGroupBy struct {
	selector
	build *WorkflowEntityQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (wegb *WorkflowEntityGroupBy) Aggregate(fns ...AggregateFunc) *WorkflowEntityGroupBy {
	wegb.fns = append(wegb.fns, fns...)
	return wegb
}

// Scan applies the selector query and scans the result into the given value.
func (wegb *WorkflowEntityGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, wegb.build.ctx, ent.OpQueryGroupBy)
	if err := wegb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*WorkflowEntityQuery, *WorkflowEntityGroupBy](ctx, wegb.build, wegb, wegb.build.inters, v)
}

func (wegb *WorkflowEntityGroupBy) sqlScan(ctx context.Context, root *WorkflowEntityQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(wegb.fns))
	for _, fn := range wegb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*wegb.flds)+len(wegb.fns))
		for _, f := range *wegb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*wegb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := wegb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// WorkflowEntitySelect is the builder for selecting fields of WorkflowEntity entities.
type WorkflowEntitySelect struct {
	*WorkflowEntityQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (wes *WorkflowEntitySelect) Aggregate(fns ...AggregateFunc) *WorkflowEntitySelect {
	wes.fns = append(wes.fns, fns...)
	return wes
}

// Scan applies the selector query and scans the result into the given value.
func (wes *WorkflowEntitySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, wes.ctx, ent.OpQuerySelect)
	if err := wes.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*WorkflowEntityQuery, *WorkflowEntitySelect](ctx, wes.WorkflowEntityQuery, wes, wes.inters, v)
}

func (wes *WorkflowEntitySelect) sqlScan(ctx context.Context, root *WorkflowEntityQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(wes.fns))
	for _, fn := range wes.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*wes.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := wes.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
