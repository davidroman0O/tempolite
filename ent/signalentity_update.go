// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/tempolite/ent/predicate"
	"github.com/davidroman0O/tempolite/ent/schema"
	"github.com/davidroman0O/tempolite/ent/signaldata"
	"github.com/davidroman0O/tempolite/ent/signalentity"
	"github.com/davidroman0O/tempolite/ent/signalexecution"
)

// SignalEntityUpdate is the builder for updating SignalEntity entities.
type SignalEntityUpdate struct {
	config
	hooks    []Hook
	mutation *SignalEntityMutation
}

// Where appends a list predicates to the SignalEntityUpdate builder.
func (seu *SignalEntityUpdate) Where(ps ...predicate.SignalEntity) *SignalEntityUpdate {
	seu.mutation.Where(ps...)
	return seu
}

// SetHandlerName sets the "handler_name" field.
func (seu *SignalEntityUpdate) SetHandlerName(s string) *SignalEntityUpdate {
	seu.mutation.SetHandlerName(s)
	return seu
}

// SetNillableHandlerName sets the "handler_name" field if the given value is not nil.
func (seu *SignalEntityUpdate) SetNillableHandlerName(s *string) *SignalEntityUpdate {
	if s != nil {
		seu.SetHandlerName(*s)
	}
	return seu
}

// SetType sets the "type" field.
func (seu *SignalEntityUpdate) SetType(st schema.EntityType) *SignalEntityUpdate {
	seu.mutation.SetType(st)
	return seu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (seu *SignalEntityUpdate) SetNillableType(st *schema.EntityType) *SignalEntityUpdate {
	if st != nil {
		seu.SetType(*st)
	}
	return seu
}

// SetStatus sets the "status" field.
func (seu *SignalEntityUpdate) SetStatus(ss schema.EntityStatus) *SignalEntityUpdate {
	seu.mutation.SetStatus(ss)
	return seu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (seu *SignalEntityUpdate) SetNillableStatus(ss *schema.EntityStatus) *SignalEntityUpdate {
	if ss != nil {
		seu.SetStatus(*ss)
	}
	return seu
}

// SetStepID sets the "step_id" field.
func (seu *SignalEntityUpdate) SetStepID(s string) *SignalEntityUpdate {
	seu.mutation.SetStepID(s)
	return seu
}

// SetNillableStepID sets the "step_id" field if the given value is not nil.
func (seu *SignalEntityUpdate) SetNillableStepID(s *string) *SignalEntityUpdate {
	if s != nil {
		seu.SetStepID(*s)
	}
	return seu
}

// SetRunID sets the "run_id" field.
func (seu *SignalEntityUpdate) SetRunID(si schema.RunID) *SignalEntityUpdate {
	seu.mutation.ResetRunID()
	seu.mutation.SetRunID(si)
	return seu
}

// SetNillableRunID sets the "run_id" field if the given value is not nil.
func (seu *SignalEntityUpdate) SetNillableRunID(si *schema.RunID) *SignalEntityUpdate {
	if si != nil {
		seu.SetRunID(*si)
	}
	return seu
}

// AddRunID adds si to the "run_id" field.
func (seu *SignalEntityUpdate) AddRunID(si schema.RunID) *SignalEntityUpdate {
	seu.mutation.AddRunID(si)
	return seu
}

// SetRetryPolicy sets the "retry_policy" field.
func (seu *SignalEntityUpdate) SetRetryPolicy(sp schema.RetryPolicy) *SignalEntityUpdate {
	seu.mutation.SetRetryPolicy(sp)
	return seu
}

// SetNillableRetryPolicy sets the "retry_policy" field if the given value is not nil.
func (seu *SignalEntityUpdate) SetNillableRetryPolicy(sp *schema.RetryPolicy) *SignalEntityUpdate {
	if sp != nil {
		seu.SetRetryPolicy(*sp)
	}
	return seu
}

// SetRetryState sets the "retry_state" field.
func (seu *SignalEntityUpdate) SetRetryState(ss schema.RetryState) *SignalEntityUpdate {
	seu.mutation.SetRetryState(ss)
	return seu
}

// SetNillableRetryState sets the "retry_state" field if the given value is not nil.
func (seu *SignalEntityUpdate) SetNillableRetryState(ss *schema.RetryState) *SignalEntityUpdate {
	if ss != nil {
		seu.SetRetryState(*ss)
	}
	return seu
}

// SetCreatedAt sets the "created_at" field.
func (seu *SignalEntityUpdate) SetCreatedAt(t time.Time) *SignalEntityUpdate {
	seu.mutation.SetCreatedAt(t)
	return seu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (seu *SignalEntityUpdate) SetNillableCreatedAt(t *time.Time) *SignalEntityUpdate {
	if t != nil {
		seu.SetCreatedAt(*t)
	}
	return seu
}

// SetUpdatedAt sets the "updated_at" field.
func (seu *SignalEntityUpdate) SetUpdatedAt(t time.Time) *SignalEntityUpdate {
	seu.mutation.SetUpdatedAt(t)
	return seu
}

// SetSignalDataID sets the "signal_data" edge to the SignalData entity by ID.
func (seu *SignalEntityUpdate) SetSignalDataID(id schema.SignalDataID) *SignalEntityUpdate {
	seu.mutation.SetSignalDataID(id)
	return seu
}

// SetNillableSignalDataID sets the "signal_data" edge to the SignalData entity by ID if the given value is not nil.
func (seu *SignalEntityUpdate) SetNillableSignalDataID(id *schema.SignalDataID) *SignalEntityUpdate {
	if id != nil {
		seu = seu.SetSignalDataID(*id)
	}
	return seu
}

// SetSignalData sets the "signal_data" edge to the SignalData entity.
func (seu *SignalEntityUpdate) SetSignalData(s *SignalData) *SignalEntityUpdate {
	return seu.SetSignalDataID(s.ID)
}

// AddExecutionIDs adds the "executions" edge to the SignalExecution entity by IDs.
func (seu *SignalEntityUpdate) AddExecutionIDs(ids ...schema.SignalExecutionID) *SignalEntityUpdate {
	seu.mutation.AddExecutionIDs(ids...)
	return seu
}

// AddExecutions adds the "executions" edges to the SignalExecution entity.
func (seu *SignalEntityUpdate) AddExecutions(s ...*SignalExecution) *SignalEntityUpdate {
	ids := make([]schema.SignalExecutionID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return seu.AddExecutionIDs(ids...)
}

// Mutation returns the SignalEntityMutation object of the builder.
func (seu *SignalEntityUpdate) Mutation() *SignalEntityMutation {
	return seu.mutation
}

// ClearSignalData clears the "signal_data" edge to the SignalData entity.
func (seu *SignalEntityUpdate) ClearSignalData() *SignalEntityUpdate {
	seu.mutation.ClearSignalData()
	return seu
}

// ClearExecutions clears all "executions" edges to the SignalExecution entity.
func (seu *SignalEntityUpdate) ClearExecutions() *SignalEntityUpdate {
	seu.mutation.ClearExecutions()
	return seu
}

// RemoveExecutionIDs removes the "executions" edge to SignalExecution entities by IDs.
func (seu *SignalEntityUpdate) RemoveExecutionIDs(ids ...schema.SignalExecutionID) *SignalEntityUpdate {
	seu.mutation.RemoveExecutionIDs(ids...)
	return seu
}

// RemoveExecutions removes "executions" edges to SignalExecution entities.
func (seu *SignalEntityUpdate) RemoveExecutions(s ...*SignalExecution) *SignalEntityUpdate {
	ids := make([]schema.SignalExecutionID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return seu.RemoveExecutionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (seu *SignalEntityUpdate) Save(ctx context.Context) (int, error) {
	seu.defaults()
	return withHooks(ctx, seu.sqlSave, seu.mutation, seu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (seu *SignalEntityUpdate) SaveX(ctx context.Context) int {
	affected, err := seu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (seu *SignalEntityUpdate) Exec(ctx context.Context) error {
	_, err := seu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (seu *SignalEntityUpdate) ExecX(ctx context.Context) {
	if err := seu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (seu *SignalEntityUpdate) defaults() {
	if _, ok := seu.mutation.UpdatedAt(); !ok {
		v := signalentity.UpdateDefaultUpdatedAt()
		seu.mutation.SetUpdatedAt(v)
	}
}

func (seu *SignalEntityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(signalentity.Table, signalentity.Columns, sqlgraph.NewFieldSpec(signalentity.FieldID, field.TypeInt))
	if ps := seu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := seu.mutation.HandlerName(); ok {
		_spec.SetField(signalentity.FieldHandlerName, field.TypeString, value)
	}
	if value, ok := seu.mutation.GetType(); ok {
		_spec.SetField(signalentity.FieldType, field.TypeString, value)
	}
	if value, ok := seu.mutation.Status(); ok {
		_spec.SetField(signalentity.FieldStatus, field.TypeString, value)
	}
	if value, ok := seu.mutation.StepID(); ok {
		_spec.SetField(signalentity.FieldStepID, field.TypeString, value)
	}
	if value, ok := seu.mutation.RunID(); ok {
		_spec.SetField(signalentity.FieldRunID, field.TypeInt, value)
	}
	if value, ok := seu.mutation.AddedRunID(); ok {
		_spec.AddField(signalentity.FieldRunID, field.TypeInt, value)
	}
	if value, ok := seu.mutation.RetryPolicy(); ok {
		_spec.SetField(signalentity.FieldRetryPolicy, field.TypeJSON, value)
	}
	if value, ok := seu.mutation.RetryState(); ok {
		_spec.SetField(signalentity.FieldRetryState, field.TypeJSON, value)
	}
	if value, ok := seu.mutation.CreatedAt(); ok {
		_spec.SetField(signalentity.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := seu.mutation.UpdatedAt(); ok {
		_spec.SetField(signalentity.FieldUpdatedAt, field.TypeTime, value)
	}
	if seu.mutation.SignalDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   signalentity.SignalDataTable,
			Columns: []string{signalentity.SignalDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signaldata.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := seu.mutation.SignalDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   signalentity.SignalDataTable,
			Columns: []string{signalentity.SignalDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signaldata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if seu.mutation.ExecutionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   signalentity.ExecutionsTable,
			Columns: []string{signalentity.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signalexecution.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := seu.mutation.RemovedExecutionsIDs(); len(nodes) > 0 && !seu.mutation.ExecutionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   signalentity.ExecutionsTable,
			Columns: []string{signalentity.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signalexecution.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := seu.mutation.ExecutionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   signalentity.ExecutionsTable,
			Columns: []string{signalentity.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signalexecution.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, seu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{signalentity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	seu.mutation.done = true
	return n, nil
}

// SignalEntityUpdateOne is the builder for updating a single SignalEntity entity.
type SignalEntityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SignalEntityMutation
}

// SetHandlerName sets the "handler_name" field.
func (seuo *SignalEntityUpdateOne) SetHandlerName(s string) *SignalEntityUpdateOne {
	seuo.mutation.SetHandlerName(s)
	return seuo
}

// SetNillableHandlerName sets the "handler_name" field if the given value is not nil.
func (seuo *SignalEntityUpdateOne) SetNillableHandlerName(s *string) *SignalEntityUpdateOne {
	if s != nil {
		seuo.SetHandlerName(*s)
	}
	return seuo
}

// SetType sets the "type" field.
func (seuo *SignalEntityUpdateOne) SetType(st schema.EntityType) *SignalEntityUpdateOne {
	seuo.mutation.SetType(st)
	return seuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (seuo *SignalEntityUpdateOne) SetNillableType(st *schema.EntityType) *SignalEntityUpdateOne {
	if st != nil {
		seuo.SetType(*st)
	}
	return seuo
}

// SetStatus sets the "status" field.
func (seuo *SignalEntityUpdateOne) SetStatus(ss schema.EntityStatus) *SignalEntityUpdateOne {
	seuo.mutation.SetStatus(ss)
	return seuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (seuo *SignalEntityUpdateOne) SetNillableStatus(ss *schema.EntityStatus) *SignalEntityUpdateOne {
	if ss != nil {
		seuo.SetStatus(*ss)
	}
	return seuo
}

// SetStepID sets the "step_id" field.
func (seuo *SignalEntityUpdateOne) SetStepID(s string) *SignalEntityUpdateOne {
	seuo.mutation.SetStepID(s)
	return seuo
}

// SetNillableStepID sets the "step_id" field if the given value is not nil.
func (seuo *SignalEntityUpdateOne) SetNillableStepID(s *string) *SignalEntityUpdateOne {
	if s != nil {
		seuo.SetStepID(*s)
	}
	return seuo
}

// SetRunID sets the "run_id" field.
func (seuo *SignalEntityUpdateOne) SetRunID(si schema.RunID) *SignalEntityUpdateOne {
	seuo.mutation.ResetRunID()
	seuo.mutation.SetRunID(si)
	return seuo
}

// SetNillableRunID sets the "run_id" field if the given value is not nil.
func (seuo *SignalEntityUpdateOne) SetNillableRunID(si *schema.RunID) *SignalEntityUpdateOne {
	if si != nil {
		seuo.SetRunID(*si)
	}
	return seuo
}

// AddRunID adds si to the "run_id" field.
func (seuo *SignalEntityUpdateOne) AddRunID(si schema.RunID) *SignalEntityUpdateOne {
	seuo.mutation.AddRunID(si)
	return seuo
}

// SetRetryPolicy sets the "retry_policy" field.
func (seuo *SignalEntityUpdateOne) SetRetryPolicy(sp schema.RetryPolicy) *SignalEntityUpdateOne {
	seuo.mutation.SetRetryPolicy(sp)
	return seuo
}

// SetNillableRetryPolicy sets the "retry_policy" field if the given value is not nil.
func (seuo *SignalEntityUpdateOne) SetNillableRetryPolicy(sp *schema.RetryPolicy) *SignalEntityUpdateOne {
	if sp != nil {
		seuo.SetRetryPolicy(*sp)
	}
	return seuo
}

// SetRetryState sets the "retry_state" field.
func (seuo *SignalEntityUpdateOne) SetRetryState(ss schema.RetryState) *SignalEntityUpdateOne {
	seuo.mutation.SetRetryState(ss)
	return seuo
}

// SetNillableRetryState sets the "retry_state" field if the given value is not nil.
func (seuo *SignalEntityUpdateOne) SetNillableRetryState(ss *schema.RetryState) *SignalEntityUpdateOne {
	if ss != nil {
		seuo.SetRetryState(*ss)
	}
	return seuo
}

// SetCreatedAt sets the "created_at" field.
func (seuo *SignalEntityUpdateOne) SetCreatedAt(t time.Time) *SignalEntityUpdateOne {
	seuo.mutation.SetCreatedAt(t)
	return seuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (seuo *SignalEntityUpdateOne) SetNillableCreatedAt(t *time.Time) *SignalEntityUpdateOne {
	if t != nil {
		seuo.SetCreatedAt(*t)
	}
	return seuo
}

// SetUpdatedAt sets the "updated_at" field.
func (seuo *SignalEntityUpdateOne) SetUpdatedAt(t time.Time) *SignalEntityUpdateOne {
	seuo.mutation.SetUpdatedAt(t)
	return seuo
}

// SetSignalDataID sets the "signal_data" edge to the SignalData entity by ID.
func (seuo *SignalEntityUpdateOne) SetSignalDataID(id schema.SignalDataID) *SignalEntityUpdateOne {
	seuo.mutation.SetSignalDataID(id)
	return seuo
}

// SetNillableSignalDataID sets the "signal_data" edge to the SignalData entity by ID if the given value is not nil.
func (seuo *SignalEntityUpdateOne) SetNillableSignalDataID(id *schema.SignalDataID) *SignalEntityUpdateOne {
	if id != nil {
		seuo = seuo.SetSignalDataID(*id)
	}
	return seuo
}

// SetSignalData sets the "signal_data" edge to the SignalData entity.
func (seuo *SignalEntityUpdateOne) SetSignalData(s *SignalData) *SignalEntityUpdateOne {
	return seuo.SetSignalDataID(s.ID)
}

// AddExecutionIDs adds the "executions" edge to the SignalExecution entity by IDs.
func (seuo *SignalEntityUpdateOne) AddExecutionIDs(ids ...schema.SignalExecutionID) *SignalEntityUpdateOne {
	seuo.mutation.AddExecutionIDs(ids...)
	return seuo
}

// AddExecutions adds the "executions" edges to the SignalExecution entity.
func (seuo *SignalEntityUpdateOne) AddExecutions(s ...*SignalExecution) *SignalEntityUpdateOne {
	ids := make([]schema.SignalExecutionID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return seuo.AddExecutionIDs(ids...)
}

// Mutation returns the SignalEntityMutation object of the builder.
func (seuo *SignalEntityUpdateOne) Mutation() *SignalEntityMutation {
	return seuo.mutation
}

// ClearSignalData clears the "signal_data" edge to the SignalData entity.
func (seuo *SignalEntityUpdateOne) ClearSignalData() *SignalEntityUpdateOne {
	seuo.mutation.ClearSignalData()
	return seuo
}

// ClearExecutions clears all "executions" edges to the SignalExecution entity.
func (seuo *SignalEntityUpdateOne) ClearExecutions() *SignalEntityUpdateOne {
	seuo.mutation.ClearExecutions()
	return seuo
}

// RemoveExecutionIDs removes the "executions" edge to SignalExecution entities by IDs.
func (seuo *SignalEntityUpdateOne) RemoveExecutionIDs(ids ...schema.SignalExecutionID) *SignalEntityUpdateOne {
	seuo.mutation.RemoveExecutionIDs(ids...)
	return seuo
}

// RemoveExecutions removes "executions" edges to SignalExecution entities.
func (seuo *SignalEntityUpdateOne) RemoveExecutions(s ...*SignalExecution) *SignalEntityUpdateOne {
	ids := make([]schema.SignalExecutionID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return seuo.RemoveExecutionIDs(ids...)
}

// Where appends a list predicates to the SignalEntityUpdate builder.
func (seuo *SignalEntityUpdateOne) Where(ps ...predicate.SignalEntity) *SignalEntityUpdateOne {
	seuo.mutation.Where(ps...)
	return seuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (seuo *SignalEntityUpdateOne) Select(field string, fields ...string) *SignalEntityUpdateOne {
	seuo.fields = append([]string{field}, fields...)
	return seuo
}

// Save executes the query and returns the updated SignalEntity entity.
func (seuo *SignalEntityUpdateOne) Save(ctx context.Context) (*SignalEntity, error) {
	seuo.defaults()
	return withHooks(ctx, seuo.sqlSave, seuo.mutation, seuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (seuo *SignalEntityUpdateOne) SaveX(ctx context.Context) *SignalEntity {
	node, err := seuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (seuo *SignalEntityUpdateOne) Exec(ctx context.Context) error {
	_, err := seuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (seuo *SignalEntityUpdateOne) ExecX(ctx context.Context) {
	if err := seuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (seuo *SignalEntityUpdateOne) defaults() {
	if _, ok := seuo.mutation.UpdatedAt(); !ok {
		v := signalentity.UpdateDefaultUpdatedAt()
		seuo.mutation.SetUpdatedAt(v)
	}
}

func (seuo *SignalEntityUpdateOne) sqlSave(ctx context.Context) (_node *SignalEntity, err error) {
	_spec := sqlgraph.NewUpdateSpec(signalentity.Table, signalentity.Columns, sqlgraph.NewFieldSpec(signalentity.FieldID, field.TypeInt))
	id, ok := seuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SignalEntity.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := seuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, signalentity.FieldID)
		for _, f := range fields {
			if !signalentity.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != signalentity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := seuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := seuo.mutation.HandlerName(); ok {
		_spec.SetField(signalentity.FieldHandlerName, field.TypeString, value)
	}
	if value, ok := seuo.mutation.GetType(); ok {
		_spec.SetField(signalentity.FieldType, field.TypeString, value)
	}
	if value, ok := seuo.mutation.Status(); ok {
		_spec.SetField(signalentity.FieldStatus, field.TypeString, value)
	}
	if value, ok := seuo.mutation.StepID(); ok {
		_spec.SetField(signalentity.FieldStepID, field.TypeString, value)
	}
	if value, ok := seuo.mutation.RunID(); ok {
		_spec.SetField(signalentity.FieldRunID, field.TypeInt, value)
	}
	if value, ok := seuo.mutation.AddedRunID(); ok {
		_spec.AddField(signalentity.FieldRunID, field.TypeInt, value)
	}
	if value, ok := seuo.mutation.RetryPolicy(); ok {
		_spec.SetField(signalentity.FieldRetryPolicy, field.TypeJSON, value)
	}
	if value, ok := seuo.mutation.RetryState(); ok {
		_spec.SetField(signalentity.FieldRetryState, field.TypeJSON, value)
	}
	if value, ok := seuo.mutation.CreatedAt(); ok {
		_spec.SetField(signalentity.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := seuo.mutation.UpdatedAt(); ok {
		_spec.SetField(signalentity.FieldUpdatedAt, field.TypeTime, value)
	}
	if seuo.mutation.SignalDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   signalentity.SignalDataTable,
			Columns: []string{signalentity.SignalDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signaldata.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := seuo.mutation.SignalDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   signalentity.SignalDataTable,
			Columns: []string{signalentity.SignalDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signaldata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if seuo.mutation.ExecutionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   signalentity.ExecutionsTable,
			Columns: []string{signalentity.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signalexecution.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := seuo.mutation.RemovedExecutionsIDs(); len(nodes) > 0 && !seuo.mutation.ExecutionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   signalentity.ExecutionsTable,
			Columns: []string{signalentity.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signalexecution.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := seuo.mutation.ExecutionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   signalentity.ExecutionsTable,
			Columns: []string{signalentity.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signalexecution.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SignalEntity{config: seuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, seuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{signalentity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	seuo.mutation.done = true
	return _node, nil
}
