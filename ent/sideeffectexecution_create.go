// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/tempolite/ent/schema"
	"github.com/davidroman0O/tempolite/ent/sideeffectentity"
	"github.com/davidroman0O/tempolite/ent/sideeffectexecution"
	"github.com/davidroman0O/tempolite/ent/sideeffectexecutiondata"
)

// SideEffectExecutionCreate is the builder for creating a SideEffectExecution entity.
type SideEffectExecutionCreate struct {
	config
	mutation *SideEffectExecutionMutation
	hooks    []Hook
}

// SetSideEffectEntityID sets the "side_effect_entity_id" field.
func (seec *SideEffectExecutionCreate) SetSideEffectEntityID(seei schema.SideEffectEntityID) *SideEffectExecutionCreate {
	seec.mutation.SetSideEffectEntityID(seei)
	return seec
}

// SetStartedAt sets the "started_at" field.
func (seec *SideEffectExecutionCreate) SetStartedAt(t time.Time) *SideEffectExecutionCreate {
	seec.mutation.SetStartedAt(t)
	return seec
}

// SetCompletedAt sets the "completed_at" field.
func (seec *SideEffectExecutionCreate) SetCompletedAt(t time.Time) *SideEffectExecutionCreate {
	seec.mutation.SetCompletedAt(t)
	return seec
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (seec *SideEffectExecutionCreate) SetNillableCompletedAt(t *time.Time) *SideEffectExecutionCreate {
	if t != nil {
		seec.SetCompletedAt(*t)
	}
	return seec
}

// SetStatus sets the "status" field.
func (seec *SideEffectExecutionCreate) SetStatus(ss schema.ExecutionStatus) *SideEffectExecutionCreate {
	seec.mutation.SetStatus(ss)
	return seec
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (seec *SideEffectExecutionCreate) SetNillableStatus(ss *schema.ExecutionStatus) *SideEffectExecutionCreate {
	if ss != nil {
		seec.SetStatus(*ss)
	}
	return seec
}

// SetError sets the "error" field.
func (seec *SideEffectExecutionCreate) SetError(s string) *SideEffectExecutionCreate {
	seec.mutation.SetError(s)
	return seec
}

// SetNillableError sets the "error" field if the given value is not nil.
func (seec *SideEffectExecutionCreate) SetNillableError(s *string) *SideEffectExecutionCreate {
	if s != nil {
		seec.SetError(*s)
	}
	return seec
}

// SetStackTrace sets the "stack_trace" field.
func (seec *SideEffectExecutionCreate) SetStackTrace(s string) *SideEffectExecutionCreate {
	seec.mutation.SetStackTrace(s)
	return seec
}

// SetNillableStackTrace sets the "stack_trace" field if the given value is not nil.
func (seec *SideEffectExecutionCreate) SetNillableStackTrace(s *string) *SideEffectExecutionCreate {
	if s != nil {
		seec.SetStackTrace(*s)
	}
	return seec
}

// SetCreatedAt sets the "created_at" field.
func (seec *SideEffectExecutionCreate) SetCreatedAt(t time.Time) *SideEffectExecutionCreate {
	seec.mutation.SetCreatedAt(t)
	return seec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (seec *SideEffectExecutionCreate) SetNillableCreatedAt(t *time.Time) *SideEffectExecutionCreate {
	if t != nil {
		seec.SetCreatedAt(*t)
	}
	return seec
}

// SetUpdatedAt sets the "updated_at" field.
func (seec *SideEffectExecutionCreate) SetUpdatedAt(t time.Time) *SideEffectExecutionCreate {
	seec.mutation.SetUpdatedAt(t)
	return seec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (seec *SideEffectExecutionCreate) SetNillableUpdatedAt(t *time.Time) *SideEffectExecutionCreate {
	if t != nil {
		seec.SetUpdatedAt(*t)
	}
	return seec
}

// SetID sets the "id" field.
func (seec *SideEffectExecutionCreate) SetID(seei schema.SideEffectExecutionID) *SideEffectExecutionCreate {
	seec.mutation.SetID(seei)
	return seec
}

// SetSideEffectID sets the "side_effect" edge to the SideEffectEntity entity by ID.
func (seec *SideEffectExecutionCreate) SetSideEffectID(id schema.SideEffectEntityID) *SideEffectExecutionCreate {
	seec.mutation.SetSideEffectID(id)
	return seec
}

// SetSideEffect sets the "side_effect" edge to the SideEffectEntity entity.
func (seec *SideEffectExecutionCreate) SetSideEffect(s *SideEffectEntity) *SideEffectExecutionCreate {
	return seec.SetSideEffectID(s.ID)
}

// SetExecutionDataID sets the "execution_data" edge to the SideEffectExecutionData entity by ID.
func (seec *SideEffectExecutionCreate) SetExecutionDataID(id schema.SideEffectExecutionDataID) *SideEffectExecutionCreate {
	seec.mutation.SetExecutionDataID(id)
	return seec
}

// SetNillableExecutionDataID sets the "execution_data" edge to the SideEffectExecutionData entity by ID if the given value is not nil.
func (seec *SideEffectExecutionCreate) SetNillableExecutionDataID(id *schema.SideEffectExecutionDataID) *SideEffectExecutionCreate {
	if id != nil {
		seec = seec.SetExecutionDataID(*id)
	}
	return seec
}

// SetExecutionData sets the "execution_data" edge to the SideEffectExecutionData entity.
func (seec *SideEffectExecutionCreate) SetExecutionData(s *SideEffectExecutionData) *SideEffectExecutionCreate {
	return seec.SetExecutionDataID(s.ID)
}

// Mutation returns the SideEffectExecutionMutation object of the builder.
func (seec *SideEffectExecutionCreate) Mutation() *SideEffectExecutionMutation {
	return seec.mutation
}

// Save creates the SideEffectExecution in the database.
func (seec *SideEffectExecutionCreate) Save(ctx context.Context) (*SideEffectExecution, error) {
	seec.defaults()
	return withHooks(ctx, seec.sqlSave, seec.mutation, seec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (seec *SideEffectExecutionCreate) SaveX(ctx context.Context) *SideEffectExecution {
	v, err := seec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (seec *SideEffectExecutionCreate) Exec(ctx context.Context) error {
	_, err := seec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (seec *SideEffectExecutionCreate) ExecX(ctx context.Context) {
	if err := seec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (seec *SideEffectExecutionCreate) defaults() {
	if _, ok := seec.mutation.Status(); !ok {
		v := sideeffectexecution.DefaultStatus
		seec.mutation.SetStatus(v)
	}
	if _, ok := seec.mutation.CreatedAt(); !ok {
		v := sideeffectexecution.DefaultCreatedAt()
		seec.mutation.SetCreatedAt(v)
	}
	if _, ok := seec.mutation.UpdatedAt(); !ok {
		v := sideeffectexecution.DefaultUpdatedAt()
		seec.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (seec *SideEffectExecutionCreate) check() error {
	if _, ok := seec.mutation.SideEffectEntityID(); !ok {
		return &ValidationError{Name: "side_effect_entity_id", err: errors.New(`ent: missing required field "SideEffectExecution.side_effect_entity_id"`)}
	}
	if _, ok := seec.mutation.StartedAt(); !ok {
		return &ValidationError{Name: "started_at", err: errors.New(`ent: missing required field "SideEffectExecution.started_at"`)}
	}
	if _, ok := seec.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "SideEffectExecution.status"`)}
	}
	if _, ok := seec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SideEffectExecution.created_at"`)}
	}
	if _, ok := seec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SideEffectExecution.updated_at"`)}
	}
	if len(seec.mutation.SideEffectIDs()) == 0 {
		return &ValidationError{Name: "side_effect", err: errors.New(`ent: missing required edge "SideEffectExecution.side_effect"`)}
	}
	return nil
}

func (seec *SideEffectExecutionCreate) sqlSave(ctx context.Context) (*SideEffectExecution, error) {
	if err := seec.check(); err != nil {
		return nil, err
	}
	_node, _spec := seec.createSpec()
	if err := sqlgraph.CreateNode(ctx, seec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = schema.SideEffectExecutionID(id)
	}
	seec.mutation.id = &_node.ID
	seec.mutation.done = true
	return _node, nil
}

func (seec *SideEffectExecutionCreate) createSpec() (*SideEffectExecution, *sqlgraph.CreateSpec) {
	var (
		_node = &SideEffectExecution{config: seec.config}
		_spec = sqlgraph.NewCreateSpec(sideeffectexecution.Table, sqlgraph.NewFieldSpec(sideeffectexecution.FieldID, field.TypeInt))
	)
	if id, ok := seec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := seec.mutation.StartedAt(); ok {
		_spec.SetField(sideeffectexecution.FieldStartedAt, field.TypeTime, value)
		_node.StartedAt = value
	}
	if value, ok := seec.mutation.CompletedAt(); ok {
		_spec.SetField(sideeffectexecution.FieldCompletedAt, field.TypeTime, value)
		_node.CompletedAt = &value
	}
	if value, ok := seec.mutation.Status(); ok {
		_spec.SetField(sideeffectexecution.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := seec.mutation.Error(); ok {
		_spec.SetField(sideeffectexecution.FieldError, field.TypeString, value)
		_node.Error = value
	}
	if value, ok := seec.mutation.StackTrace(); ok {
		_spec.SetField(sideeffectexecution.FieldStackTrace, field.TypeString, value)
		_node.StackTrace = value
	}
	if value, ok := seec.mutation.CreatedAt(); ok {
		_spec.SetField(sideeffectexecution.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := seec.mutation.UpdatedAt(); ok {
		_spec.SetField(sideeffectexecution.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := seec.mutation.SideEffectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sideeffectexecution.SideEffectTable,
			Columns: []string{sideeffectexecution.SideEffectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sideeffectentity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SideEffectEntityID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := seec.mutation.ExecutionDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   sideeffectexecution.ExecutionDataTable,
			Columns: []string{sideeffectexecution.ExecutionDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sideeffectexecutiondata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SideEffectExecutionCreateBulk is the builder for creating many SideEffectExecution entities in bulk.
type SideEffectExecutionCreateBulk struct {
	config
	err      error
	builders []*SideEffectExecutionCreate
}

// Save creates the SideEffectExecution entities in the database.
func (seecb *SideEffectExecutionCreateBulk) Save(ctx context.Context) ([]*SideEffectExecution, error) {
	if seecb.err != nil {
		return nil, seecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(seecb.builders))
	nodes := make([]*SideEffectExecution, len(seecb.builders))
	mutators := make([]Mutator, len(seecb.builders))
	for i := range seecb.builders {
		func(i int, root context.Context) {
			builder := seecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SideEffectExecutionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, seecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, seecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = schema.SideEffectExecutionID(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, seecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (seecb *SideEffectExecutionCreateBulk) SaveX(ctx context.Context) []*SideEffectExecution {
	v, err := seecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (seecb *SideEffectExecutionCreateBulk) Exec(ctx context.Context) error {
	_, err := seecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (seecb *SideEffectExecutionCreateBulk) ExecX(ctx context.Context) {
	if err := seecb.Exec(ctx); err != nil {
		panic(err)
	}
}
