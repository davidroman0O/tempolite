// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/tempolite/ent/predicate"
	"github.com/davidroman0O/tempolite/ent/schema"
	"github.com/davidroman0O/tempolite/ent/sideeffect"
	"github.com/davidroman0O/tempolite/ent/sideeffectexecution"
)

// SideEffectUpdate is the builder for updating SideEffect entities.
type SideEffectUpdate struct {
	config
	hooks    []Hook
	mutation *SideEffectMutation
}

// Where appends a list predicates to the SideEffectUpdate builder.
func (seu *SideEffectUpdate) Where(ps ...predicate.SideEffect) *SideEffectUpdate {
	seu.mutation.Where(ps...)
	return seu
}

// SetIdentity sets the "identity" field.
func (seu *SideEffectUpdate) SetIdentity(s string) *SideEffectUpdate {
	seu.mutation.SetIdentity(s)
	return seu
}

// SetNillableIdentity sets the "identity" field if the given value is not nil.
func (seu *SideEffectUpdate) SetNillableIdentity(s *string) *SideEffectUpdate {
	if s != nil {
		seu.SetIdentity(*s)
	}
	return seu
}

// SetStepID sets the "step_id" field.
func (seu *SideEffectUpdate) SetStepID(s string) *SideEffectUpdate {
	seu.mutation.SetStepID(s)
	return seu
}

// SetNillableStepID sets the "step_id" field if the given value is not nil.
func (seu *SideEffectUpdate) SetNillableStepID(s *string) *SideEffectUpdate {
	if s != nil {
		seu.SetStepID(*s)
	}
	return seu
}

// SetHandlerName sets the "handler_name" field.
func (seu *SideEffectUpdate) SetHandlerName(s string) *SideEffectUpdate {
	seu.mutation.SetHandlerName(s)
	return seu
}

// SetNillableHandlerName sets the "handler_name" field if the given value is not nil.
func (seu *SideEffectUpdate) SetNillableHandlerName(s *string) *SideEffectUpdate {
	if s != nil {
		seu.SetHandlerName(*s)
	}
	return seu
}

// SetStatus sets the "status" field.
func (seu *SideEffectUpdate) SetStatus(s sideeffect.Status) *SideEffectUpdate {
	seu.mutation.SetStatus(s)
	return seu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (seu *SideEffectUpdate) SetNillableStatus(s *sideeffect.Status) *SideEffectUpdate {
	if s != nil {
		seu.SetStatus(*s)
	}
	return seu
}

// SetQueueName sets the "queue_name" field.
func (seu *SideEffectUpdate) SetQueueName(s string) *SideEffectUpdate {
	seu.mutation.SetQueueName(s)
	return seu
}

// SetNillableQueueName sets the "queue_name" field if the given value is not nil.
func (seu *SideEffectUpdate) SetNillableQueueName(s *string) *SideEffectUpdate {
	if s != nil {
		seu.SetQueueName(*s)
	}
	return seu
}

// SetRetryPolicy sets the "retry_policy" field.
func (seu *SideEffectUpdate) SetRetryPolicy(sp schema.RetryPolicy) *SideEffectUpdate {
	seu.mutation.SetRetryPolicy(sp)
	return seu
}

// SetNillableRetryPolicy sets the "retry_policy" field if the given value is not nil.
func (seu *SideEffectUpdate) SetNillableRetryPolicy(sp *schema.RetryPolicy) *SideEffectUpdate {
	if sp != nil {
		seu.SetRetryPolicy(*sp)
	}
	return seu
}

// ClearRetryPolicy clears the value of the "retry_policy" field.
func (seu *SideEffectUpdate) ClearRetryPolicy() *SideEffectUpdate {
	seu.mutation.ClearRetryPolicy()
	return seu
}

// SetTimeout sets the "timeout" field.
func (seu *SideEffectUpdate) SetTimeout(t time.Time) *SideEffectUpdate {
	seu.mutation.SetTimeout(t)
	return seu
}

// SetNillableTimeout sets the "timeout" field if the given value is not nil.
func (seu *SideEffectUpdate) SetNillableTimeout(t *time.Time) *SideEffectUpdate {
	if t != nil {
		seu.SetTimeout(*t)
	}
	return seu
}

// ClearTimeout clears the value of the "timeout" field.
func (seu *SideEffectUpdate) ClearTimeout() *SideEffectUpdate {
	seu.mutation.ClearTimeout()
	return seu
}

// SetCreatedAt sets the "created_at" field.
func (seu *SideEffectUpdate) SetCreatedAt(t time.Time) *SideEffectUpdate {
	seu.mutation.SetCreatedAt(t)
	return seu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (seu *SideEffectUpdate) SetNillableCreatedAt(t *time.Time) *SideEffectUpdate {
	if t != nil {
		seu.SetCreatedAt(*t)
	}
	return seu
}

// AddExecutionIDs adds the "executions" edge to the SideEffectExecution entity by IDs.
func (seu *SideEffectUpdate) AddExecutionIDs(ids ...string) *SideEffectUpdate {
	seu.mutation.AddExecutionIDs(ids...)
	return seu
}

// AddExecutions adds the "executions" edges to the SideEffectExecution entity.
func (seu *SideEffectUpdate) AddExecutions(s ...*SideEffectExecution) *SideEffectUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return seu.AddExecutionIDs(ids...)
}

// Mutation returns the SideEffectMutation object of the builder.
func (seu *SideEffectUpdate) Mutation() *SideEffectMutation {
	return seu.mutation
}

// ClearExecutions clears all "executions" edges to the SideEffectExecution entity.
func (seu *SideEffectUpdate) ClearExecutions() *SideEffectUpdate {
	seu.mutation.ClearExecutions()
	return seu
}

// RemoveExecutionIDs removes the "executions" edge to SideEffectExecution entities by IDs.
func (seu *SideEffectUpdate) RemoveExecutionIDs(ids ...string) *SideEffectUpdate {
	seu.mutation.RemoveExecutionIDs(ids...)
	return seu
}

// RemoveExecutions removes "executions" edges to SideEffectExecution entities.
func (seu *SideEffectUpdate) RemoveExecutions(s ...*SideEffectExecution) *SideEffectUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return seu.RemoveExecutionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (seu *SideEffectUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, seu.sqlSave, seu.mutation, seu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (seu *SideEffectUpdate) SaveX(ctx context.Context) int {
	affected, err := seu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (seu *SideEffectUpdate) Exec(ctx context.Context) error {
	_, err := seu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (seu *SideEffectUpdate) ExecX(ctx context.Context) {
	if err := seu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (seu *SideEffectUpdate) check() error {
	if v, ok := seu.mutation.Identity(); ok {
		if err := sideeffect.IdentityValidator(v); err != nil {
			return &ValidationError{Name: "identity", err: fmt.Errorf(`ent: validator failed for field "SideEffect.identity": %w`, err)}
		}
	}
	if v, ok := seu.mutation.StepID(); ok {
		if err := sideeffect.StepIDValidator(v); err != nil {
			return &ValidationError{Name: "step_id", err: fmt.Errorf(`ent: validator failed for field "SideEffect.step_id": %w`, err)}
		}
	}
	if v, ok := seu.mutation.HandlerName(); ok {
		if err := sideeffect.HandlerNameValidator(v); err != nil {
			return &ValidationError{Name: "handler_name", err: fmt.Errorf(`ent: validator failed for field "SideEffect.handler_name": %w`, err)}
		}
	}
	if v, ok := seu.mutation.Status(); ok {
		if err := sideeffect.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "SideEffect.status": %w`, err)}
		}
	}
	if v, ok := seu.mutation.QueueName(); ok {
		if err := sideeffect.QueueNameValidator(v); err != nil {
			return &ValidationError{Name: "queue_name", err: fmt.Errorf(`ent: validator failed for field "SideEffect.queue_name": %w`, err)}
		}
	}
	return nil
}

func (seu *SideEffectUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := seu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(sideeffect.Table, sideeffect.Columns, sqlgraph.NewFieldSpec(sideeffect.FieldID, field.TypeString))
	if ps := seu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := seu.mutation.Identity(); ok {
		_spec.SetField(sideeffect.FieldIdentity, field.TypeString, value)
	}
	if value, ok := seu.mutation.StepID(); ok {
		_spec.SetField(sideeffect.FieldStepID, field.TypeString, value)
	}
	if value, ok := seu.mutation.HandlerName(); ok {
		_spec.SetField(sideeffect.FieldHandlerName, field.TypeString, value)
	}
	if value, ok := seu.mutation.Status(); ok {
		_spec.SetField(sideeffect.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := seu.mutation.QueueName(); ok {
		_spec.SetField(sideeffect.FieldQueueName, field.TypeString, value)
	}
	if value, ok := seu.mutation.RetryPolicy(); ok {
		_spec.SetField(sideeffect.FieldRetryPolicy, field.TypeJSON, value)
	}
	if seu.mutation.RetryPolicyCleared() {
		_spec.ClearField(sideeffect.FieldRetryPolicy, field.TypeJSON)
	}
	if value, ok := seu.mutation.Timeout(); ok {
		_spec.SetField(sideeffect.FieldTimeout, field.TypeTime, value)
	}
	if seu.mutation.TimeoutCleared() {
		_spec.ClearField(sideeffect.FieldTimeout, field.TypeTime)
	}
	if value, ok := seu.mutation.CreatedAt(); ok {
		_spec.SetField(sideeffect.FieldCreatedAt, field.TypeTime, value)
	}
	if seu.mutation.ExecutionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sideeffect.ExecutionsTable,
			Columns: []string{sideeffect.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sideeffectexecution.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := seu.mutation.RemovedExecutionsIDs(); len(nodes) > 0 && !seu.mutation.ExecutionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sideeffect.ExecutionsTable,
			Columns: []string{sideeffect.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sideeffectexecution.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := seu.mutation.ExecutionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sideeffect.ExecutionsTable,
			Columns: []string{sideeffect.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sideeffectexecution.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, seu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sideeffect.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	seu.mutation.done = true
	return n, nil
}

// SideEffectUpdateOne is the builder for updating a single SideEffect entity.
type SideEffectUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SideEffectMutation
}

// SetIdentity sets the "identity" field.
func (seuo *SideEffectUpdateOne) SetIdentity(s string) *SideEffectUpdateOne {
	seuo.mutation.SetIdentity(s)
	return seuo
}

// SetNillableIdentity sets the "identity" field if the given value is not nil.
func (seuo *SideEffectUpdateOne) SetNillableIdentity(s *string) *SideEffectUpdateOne {
	if s != nil {
		seuo.SetIdentity(*s)
	}
	return seuo
}

// SetStepID sets the "step_id" field.
func (seuo *SideEffectUpdateOne) SetStepID(s string) *SideEffectUpdateOne {
	seuo.mutation.SetStepID(s)
	return seuo
}

// SetNillableStepID sets the "step_id" field if the given value is not nil.
func (seuo *SideEffectUpdateOne) SetNillableStepID(s *string) *SideEffectUpdateOne {
	if s != nil {
		seuo.SetStepID(*s)
	}
	return seuo
}

// SetHandlerName sets the "handler_name" field.
func (seuo *SideEffectUpdateOne) SetHandlerName(s string) *SideEffectUpdateOne {
	seuo.mutation.SetHandlerName(s)
	return seuo
}

// SetNillableHandlerName sets the "handler_name" field if the given value is not nil.
func (seuo *SideEffectUpdateOne) SetNillableHandlerName(s *string) *SideEffectUpdateOne {
	if s != nil {
		seuo.SetHandlerName(*s)
	}
	return seuo
}

// SetStatus sets the "status" field.
func (seuo *SideEffectUpdateOne) SetStatus(s sideeffect.Status) *SideEffectUpdateOne {
	seuo.mutation.SetStatus(s)
	return seuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (seuo *SideEffectUpdateOne) SetNillableStatus(s *sideeffect.Status) *SideEffectUpdateOne {
	if s != nil {
		seuo.SetStatus(*s)
	}
	return seuo
}

// SetQueueName sets the "queue_name" field.
func (seuo *SideEffectUpdateOne) SetQueueName(s string) *SideEffectUpdateOne {
	seuo.mutation.SetQueueName(s)
	return seuo
}

// SetNillableQueueName sets the "queue_name" field if the given value is not nil.
func (seuo *SideEffectUpdateOne) SetNillableQueueName(s *string) *SideEffectUpdateOne {
	if s != nil {
		seuo.SetQueueName(*s)
	}
	return seuo
}

// SetRetryPolicy sets the "retry_policy" field.
func (seuo *SideEffectUpdateOne) SetRetryPolicy(sp schema.RetryPolicy) *SideEffectUpdateOne {
	seuo.mutation.SetRetryPolicy(sp)
	return seuo
}

// SetNillableRetryPolicy sets the "retry_policy" field if the given value is not nil.
func (seuo *SideEffectUpdateOne) SetNillableRetryPolicy(sp *schema.RetryPolicy) *SideEffectUpdateOne {
	if sp != nil {
		seuo.SetRetryPolicy(*sp)
	}
	return seuo
}

// ClearRetryPolicy clears the value of the "retry_policy" field.
func (seuo *SideEffectUpdateOne) ClearRetryPolicy() *SideEffectUpdateOne {
	seuo.mutation.ClearRetryPolicy()
	return seuo
}

// SetTimeout sets the "timeout" field.
func (seuo *SideEffectUpdateOne) SetTimeout(t time.Time) *SideEffectUpdateOne {
	seuo.mutation.SetTimeout(t)
	return seuo
}

// SetNillableTimeout sets the "timeout" field if the given value is not nil.
func (seuo *SideEffectUpdateOne) SetNillableTimeout(t *time.Time) *SideEffectUpdateOne {
	if t != nil {
		seuo.SetTimeout(*t)
	}
	return seuo
}

// ClearTimeout clears the value of the "timeout" field.
func (seuo *SideEffectUpdateOne) ClearTimeout() *SideEffectUpdateOne {
	seuo.mutation.ClearTimeout()
	return seuo
}

// SetCreatedAt sets the "created_at" field.
func (seuo *SideEffectUpdateOne) SetCreatedAt(t time.Time) *SideEffectUpdateOne {
	seuo.mutation.SetCreatedAt(t)
	return seuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (seuo *SideEffectUpdateOne) SetNillableCreatedAt(t *time.Time) *SideEffectUpdateOne {
	if t != nil {
		seuo.SetCreatedAt(*t)
	}
	return seuo
}

// AddExecutionIDs adds the "executions" edge to the SideEffectExecution entity by IDs.
func (seuo *SideEffectUpdateOne) AddExecutionIDs(ids ...string) *SideEffectUpdateOne {
	seuo.mutation.AddExecutionIDs(ids...)
	return seuo
}

// AddExecutions adds the "executions" edges to the SideEffectExecution entity.
func (seuo *SideEffectUpdateOne) AddExecutions(s ...*SideEffectExecution) *SideEffectUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return seuo.AddExecutionIDs(ids...)
}

// Mutation returns the SideEffectMutation object of the builder.
func (seuo *SideEffectUpdateOne) Mutation() *SideEffectMutation {
	return seuo.mutation
}

// ClearExecutions clears all "executions" edges to the SideEffectExecution entity.
func (seuo *SideEffectUpdateOne) ClearExecutions() *SideEffectUpdateOne {
	seuo.mutation.ClearExecutions()
	return seuo
}

// RemoveExecutionIDs removes the "executions" edge to SideEffectExecution entities by IDs.
func (seuo *SideEffectUpdateOne) RemoveExecutionIDs(ids ...string) *SideEffectUpdateOne {
	seuo.mutation.RemoveExecutionIDs(ids...)
	return seuo
}

// RemoveExecutions removes "executions" edges to SideEffectExecution entities.
func (seuo *SideEffectUpdateOne) RemoveExecutions(s ...*SideEffectExecution) *SideEffectUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return seuo.RemoveExecutionIDs(ids...)
}

// Where appends a list predicates to the SideEffectUpdate builder.
func (seuo *SideEffectUpdateOne) Where(ps ...predicate.SideEffect) *SideEffectUpdateOne {
	seuo.mutation.Where(ps...)
	return seuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (seuo *SideEffectUpdateOne) Select(field string, fields ...string) *SideEffectUpdateOne {
	seuo.fields = append([]string{field}, fields...)
	return seuo
}

// Save executes the query and returns the updated SideEffect entity.
func (seuo *SideEffectUpdateOne) Save(ctx context.Context) (*SideEffect, error) {
	return withHooks(ctx, seuo.sqlSave, seuo.mutation, seuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (seuo *SideEffectUpdateOne) SaveX(ctx context.Context) *SideEffect {
	node, err := seuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (seuo *SideEffectUpdateOne) Exec(ctx context.Context) error {
	_, err := seuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (seuo *SideEffectUpdateOne) ExecX(ctx context.Context) {
	if err := seuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (seuo *SideEffectUpdateOne) check() error {
	if v, ok := seuo.mutation.Identity(); ok {
		if err := sideeffect.IdentityValidator(v); err != nil {
			return &ValidationError{Name: "identity", err: fmt.Errorf(`ent: validator failed for field "SideEffect.identity": %w`, err)}
		}
	}
	if v, ok := seuo.mutation.StepID(); ok {
		if err := sideeffect.StepIDValidator(v); err != nil {
			return &ValidationError{Name: "step_id", err: fmt.Errorf(`ent: validator failed for field "SideEffect.step_id": %w`, err)}
		}
	}
	if v, ok := seuo.mutation.HandlerName(); ok {
		if err := sideeffect.HandlerNameValidator(v); err != nil {
			return &ValidationError{Name: "handler_name", err: fmt.Errorf(`ent: validator failed for field "SideEffect.handler_name": %w`, err)}
		}
	}
	if v, ok := seuo.mutation.Status(); ok {
		if err := sideeffect.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "SideEffect.status": %w`, err)}
		}
	}
	if v, ok := seuo.mutation.QueueName(); ok {
		if err := sideeffect.QueueNameValidator(v); err != nil {
			return &ValidationError{Name: "queue_name", err: fmt.Errorf(`ent: validator failed for field "SideEffect.queue_name": %w`, err)}
		}
	}
	return nil
}

func (seuo *SideEffectUpdateOne) sqlSave(ctx context.Context) (_node *SideEffect, err error) {
	if err := seuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(sideeffect.Table, sideeffect.Columns, sqlgraph.NewFieldSpec(sideeffect.FieldID, field.TypeString))
	id, ok := seuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SideEffect.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := seuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sideeffect.FieldID)
		for _, f := range fields {
			if !sideeffect.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sideeffect.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := seuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := seuo.mutation.Identity(); ok {
		_spec.SetField(sideeffect.FieldIdentity, field.TypeString, value)
	}
	if value, ok := seuo.mutation.StepID(); ok {
		_spec.SetField(sideeffect.FieldStepID, field.TypeString, value)
	}
	if value, ok := seuo.mutation.HandlerName(); ok {
		_spec.SetField(sideeffect.FieldHandlerName, field.TypeString, value)
	}
	if value, ok := seuo.mutation.Status(); ok {
		_spec.SetField(sideeffect.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := seuo.mutation.QueueName(); ok {
		_spec.SetField(sideeffect.FieldQueueName, field.TypeString, value)
	}
	if value, ok := seuo.mutation.RetryPolicy(); ok {
		_spec.SetField(sideeffect.FieldRetryPolicy, field.TypeJSON, value)
	}
	if seuo.mutation.RetryPolicyCleared() {
		_spec.ClearField(sideeffect.FieldRetryPolicy, field.TypeJSON)
	}
	if value, ok := seuo.mutation.Timeout(); ok {
		_spec.SetField(sideeffect.FieldTimeout, field.TypeTime, value)
	}
	if seuo.mutation.TimeoutCleared() {
		_spec.ClearField(sideeffect.FieldTimeout, field.TypeTime)
	}
	if value, ok := seuo.mutation.CreatedAt(); ok {
		_spec.SetField(sideeffect.FieldCreatedAt, field.TypeTime, value)
	}
	if seuo.mutation.ExecutionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sideeffect.ExecutionsTable,
			Columns: []string{sideeffect.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sideeffectexecution.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := seuo.mutation.RemovedExecutionsIDs(); len(nodes) > 0 && !seuo.mutation.ExecutionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sideeffect.ExecutionsTable,
			Columns: []string{sideeffect.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sideeffectexecution.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := seuo.mutation.ExecutionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sideeffect.ExecutionsTable,
			Columns: []string{sideeffect.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sideeffectexecution.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SideEffect{config: seuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, seuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sideeffect.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	seuo.mutation.done = true
	return _node, nil
}
