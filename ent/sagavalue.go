// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/davidroman0O/tempolite/ent/sagadata"
	"github.com/davidroman0O/tempolite/ent/sagaexecution"
	"github.com/davidroman0O/tempolite/ent/sagaexecutiondata"
	"github.com/davidroman0O/tempolite/ent/sagavalue"
	"github.com/davidroman0O/tempolite/ent/schema"
)

// SagaValue is the model entity for the SagaValue schema.
type SagaValue struct {
	config `json:"-"`
	// ID of the ent.
	ID schema.SagaValueID `json:"id,omitempty"`
	// Key holds the value of the "key" field.
	Key string `json:"key,omitempty"`
	// Value holds the value of the "value" field.
	Value []byte `json:"value,omitempty"`
	// SagaEntityID holds the value of the "saga_entity_id" field.
	SagaEntityID schema.SagaEntityID `json:"saga_entity_id,omitempty"`
	// SagaExecutionID holds the value of the "saga_execution_id" field.
	SagaExecutionID schema.SagaExecutionID `json:"saga_execution_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SagaValueQuery when eager-loading is set.
	Edges                      SagaValueEdges `json:"edges"`
	saga_data_values           *schema.SagaDataID
	saga_entity_values         *schema.SagaEntityID
	saga_execution_data_values *schema.SagaExecutionDataID
	selectValues               sql.SelectValues
}

// SagaValueEdges holds the relations/edges for other nodes in the graph.
type SagaValueEdges struct {
	// Execution holds the value of the execution edge.
	Execution *SagaExecution `json:"execution,omitempty"`
	// SagaData holds the value of the saga_data edge.
	SagaData *SagaData `json:"saga_data,omitempty"`
	// ExecutionData holds the value of the execution_data edge.
	ExecutionData *SagaExecutionData `json:"execution_data,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ExecutionOrErr returns the Execution value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SagaValueEdges) ExecutionOrErr() (*SagaExecution, error) {
	if e.Execution != nil {
		return e.Execution, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: sagaexecution.Label}
	}
	return nil, &NotLoadedError{edge: "execution"}
}

// SagaDataOrErr returns the SagaData value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SagaValueEdges) SagaDataOrErr() (*SagaData, error) {
	if e.SagaData != nil {
		return e.SagaData, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: sagadata.Label}
	}
	return nil, &NotLoadedError{edge: "saga_data"}
}

// ExecutionDataOrErr returns the ExecutionData value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SagaValueEdges) ExecutionDataOrErr() (*SagaExecutionData, error) {
	if e.ExecutionData != nil {
		return e.ExecutionData, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: sagaexecutiondata.Label}
	}
	return nil, &NotLoadedError{edge: "execution_data"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SagaValue) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sagavalue.FieldValue:
			values[i] = new([]byte)
		case sagavalue.FieldID, sagavalue.FieldSagaEntityID, sagavalue.FieldSagaExecutionID:
			values[i] = new(sql.NullInt64)
		case sagavalue.FieldKey:
			values[i] = new(sql.NullString)
		case sagavalue.FieldCreatedAt, sagavalue.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case sagavalue.ForeignKeys[0]: // saga_data_values
			values[i] = new(sql.NullInt64)
		case sagavalue.ForeignKeys[1]: // saga_entity_values
			values[i] = new(sql.NullInt64)
		case sagavalue.ForeignKeys[2]: // saga_execution_data_values
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SagaValue fields.
func (sv *SagaValue) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sagavalue.FieldID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				sv.ID = schema.SagaValueID(value.Int64)
			}
		case sagavalue.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				sv.Key = value.String
			}
		case sagavalue.FieldValue:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value != nil {
				sv.Value = *value
			}
		case sagavalue.FieldSagaEntityID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field saga_entity_id", values[i])
			} else if value.Valid {
				sv.SagaEntityID = schema.SagaEntityID(value.Int64)
			}
		case sagavalue.FieldSagaExecutionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field saga_execution_id", values[i])
			} else if value.Valid {
				sv.SagaExecutionID = schema.SagaExecutionID(value.Int64)
			}
		case sagavalue.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sv.CreatedAt = value.Time
			}
		case sagavalue.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sv.UpdatedAt = value.Time
			}
		case sagavalue.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field saga_data_values", values[i])
			} else if value.Valid {
				sv.saga_data_values = new(schema.SagaDataID)
				*sv.saga_data_values = schema.SagaDataID(value.Int64)
			}
		case sagavalue.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field saga_entity_values", values[i])
			} else if value.Valid {
				sv.saga_entity_values = new(schema.SagaEntityID)
				*sv.saga_entity_values = schema.SagaEntityID(value.Int64)
			}
		case sagavalue.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field saga_execution_data_values", values[i])
			} else if value.Valid {
				sv.saga_execution_data_values = new(schema.SagaExecutionDataID)
				*sv.saga_execution_data_values = schema.SagaExecutionDataID(value.Int64)
			}
		default:
			sv.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the SagaValue.
// This includes values selected through modifiers, order, etc.
func (sv *SagaValue) GetValue(name string) (ent.Value, error) {
	return sv.selectValues.Get(name)
}

// QueryExecution queries the "execution" edge of the SagaValue entity.
func (sv *SagaValue) QueryExecution() *SagaExecutionQuery {
	return NewSagaValueClient(sv.config).QueryExecution(sv)
}

// QuerySagaData queries the "saga_data" edge of the SagaValue entity.
func (sv *SagaValue) QuerySagaData() *SagaDataQuery {
	return NewSagaValueClient(sv.config).QuerySagaData(sv)
}

// QueryExecutionData queries the "execution_data" edge of the SagaValue entity.
func (sv *SagaValue) QueryExecutionData() *SagaExecutionDataQuery {
	return NewSagaValueClient(sv.config).QueryExecutionData(sv)
}

// Update returns a builder for updating this SagaValue.
// Note that you need to call SagaValue.Unwrap() before calling this method if this SagaValue
// was returned from a transaction, and the transaction was committed or rolled back.
func (sv *SagaValue) Update() *SagaValueUpdateOne {
	return NewSagaValueClient(sv.config).UpdateOne(sv)
}

// Unwrap unwraps the SagaValue entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sv *SagaValue) Unwrap() *SagaValue {
	_tx, ok := sv.config.driver.(*txDriver)
	if !ok {
		panic("ent: SagaValue is not a transactional entity")
	}
	sv.config.driver = _tx.drv
	return sv
}

// String implements the fmt.Stringer.
func (sv *SagaValue) String() string {
	var builder strings.Builder
	builder.WriteString("SagaValue(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sv.ID))
	builder.WriteString("key=")
	builder.WriteString(sv.Key)
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(fmt.Sprintf("%v", sv.Value))
	builder.WriteString(", ")
	builder.WriteString("saga_entity_id=")
	builder.WriteString(fmt.Sprintf("%v", sv.SagaEntityID))
	builder.WriteString(", ")
	builder.WriteString("saga_execution_id=")
	builder.WriteString(fmt.Sprintf("%v", sv.SagaExecutionID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(sv.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sv.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SagaValues is a parsable slice of SagaValue.
type SagaValues []*SagaValue
