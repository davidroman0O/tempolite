// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/tempolite/ent/schema"
	"github.com/davidroman0O/tempolite/ent/signalentity"
	"github.com/davidroman0O/tempolite/ent/signalexecution"
	"github.com/davidroman0O/tempolite/ent/signalexecutiondata"
)

// SignalExecutionCreate is the builder for creating a SignalExecution entity.
type SignalExecutionCreate struct {
	config
	mutation *SignalExecutionMutation
	hooks    []Hook
}

// SetEntityID sets the "entity_id" field.
func (sec *SignalExecutionCreate) SetEntityID(sei schema.SignalEntityID) *SignalExecutionCreate {
	sec.mutation.SetEntityID(sei)
	return sec
}

// SetStartedAt sets the "started_at" field.
func (sec *SignalExecutionCreate) SetStartedAt(t time.Time) *SignalExecutionCreate {
	sec.mutation.SetStartedAt(t)
	return sec
}

// SetCompletedAt sets the "completed_at" field.
func (sec *SignalExecutionCreate) SetCompletedAt(t time.Time) *SignalExecutionCreate {
	sec.mutation.SetCompletedAt(t)
	return sec
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (sec *SignalExecutionCreate) SetNillableCompletedAt(t *time.Time) *SignalExecutionCreate {
	if t != nil {
		sec.SetCompletedAt(*t)
	}
	return sec
}

// SetStatus sets the "status" field.
func (sec *SignalExecutionCreate) SetStatus(ss schema.ExecutionStatus) *SignalExecutionCreate {
	sec.mutation.SetStatus(ss)
	return sec
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sec *SignalExecutionCreate) SetNillableStatus(ss *schema.ExecutionStatus) *SignalExecutionCreate {
	if ss != nil {
		sec.SetStatus(*ss)
	}
	return sec
}

// SetError sets the "error" field.
func (sec *SignalExecutionCreate) SetError(s string) *SignalExecutionCreate {
	sec.mutation.SetError(s)
	return sec
}

// SetNillableError sets the "error" field if the given value is not nil.
func (sec *SignalExecutionCreate) SetNillableError(s *string) *SignalExecutionCreate {
	if s != nil {
		sec.SetError(*s)
	}
	return sec
}

// SetStackTrace sets the "stack_trace" field.
func (sec *SignalExecutionCreate) SetStackTrace(s string) *SignalExecutionCreate {
	sec.mutation.SetStackTrace(s)
	return sec
}

// SetNillableStackTrace sets the "stack_trace" field if the given value is not nil.
func (sec *SignalExecutionCreate) SetNillableStackTrace(s *string) *SignalExecutionCreate {
	if s != nil {
		sec.SetStackTrace(*s)
	}
	return sec
}

// SetCreatedAt sets the "created_at" field.
func (sec *SignalExecutionCreate) SetCreatedAt(t time.Time) *SignalExecutionCreate {
	sec.mutation.SetCreatedAt(t)
	return sec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sec *SignalExecutionCreate) SetNillableCreatedAt(t *time.Time) *SignalExecutionCreate {
	if t != nil {
		sec.SetCreatedAt(*t)
	}
	return sec
}

// SetUpdatedAt sets the "updated_at" field.
func (sec *SignalExecutionCreate) SetUpdatedAt(t time.Time) *SignalExecutionCreate {
	sec.mutation.SetUpdatedAt(t)
	return sec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sec *SignalExecutionCreate) SetNillableUpdatedAt(t *time.Time) *SignalExecutionCreate {
	if t != nil {
		sec.SetUpdatedAt(*t)
	}
	return sec
}

// SetID sets the "id" field.
func (sec *SignalExecutionCreate) SetID(sei schema.SignalExecutionID) *SignalExecutionCreate {
	sec.mutation.SetID(sei)
	return sec
}

// SetSignalID sets the "signal" edge to the SignalEntity entity by ID.
func (sec *SignalExecutionCreate) SetSignalID(id schema.SignalEntityID) *SignalExecutionCreate {
	sec.mutation.SetSignalID(id)
	return sec
}

// SetSignal sets the "signal" edge to the SignalEntity entity.
func (sec *SignalExecutionCreate) SetSignal(s *SignalEntity) *SignalExecutionCreate {
	return sec.SetSignalID(s.ID)
}

// SetExecutionDataID sets the "execution_data" edge to the SignalExecutionData entity by ID.
func (sec *SignalExecutionCreate) SetExecutionDataID(id schema.SignalExecutionDataID) *SignalExecutionCreate {
	sec.mutation.SetExecutionDataID(id)
	return sec
}

// SetNillableExecutionDataID sets the "execution_data" edge to the SignalExecutionData entity by ID if the given value is not nil.
func (sec *SignalExecutionCreate) SetNillableExecutionDataID(id *schema.SignalExecutionDataID) *SignalExecutionCreate {
	if id != nil {
		sec = sec.SetExecutionDataID(*id)
	}
	return sec
}

// SetExecutionData sets the "execution_data" edge to the SignalExecutionData entity.
func (sec *SignalExecutionCreate) SetExecutionData(s *SignalExecutionData) *SignalExecutionCreate {
	return sec.SetExecutionDataID(s.ID)
}

// Mutation returns the SignalExecutionMutation object of the builder.
func (sec *SignalExecutionCreate) Mutation() *SignalExecutionMutation {
	return sec.mutation
}

// Save creates the SignalExecution in the database.
func (sec *SignalExecutionCreate) Save(ctx context.Context) (*SignalExecution, error) {
	sec.defaults()
	return withHooks(ctx, sec.sqlSave, sec.mutation, sec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sec *SignalExecutionCreate) SaveX(ctx context.Context) *SignalExecution {
	v, err := sec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sec *SignalExecutionCreate) Exec(ctx context.Context) error {
	_, err := sec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sec *SignalExecutionCreate) ExecX(ctx context.Context) {
	if err := sec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sec *SignalExecutionCreate) defaults() {
	if _, ok := sec.mutation.Status(); !ok {
		v := signalexecution.DefaultStatus
		sec.mutation.SetStatus(v)
	}
	if _, ok := sec.mutation.CreatedAt(); !ok {
		v := signalexecution.DefaultCreatedAt()
		sec.mutation.SetCreatedAt(v)
	}
	if _, ok := sec.mutation.UpdatedAt(); !ok {
		v := signalexecution.DefaultUpdatedAt()
		sec.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sec *SignalExecutionCreate) check() error {
	if _, ok := sec.mutation.EntityID(); !ok {
		return &ValidationError{Name: "entity_id", err: errors.New(`ent: missing required field "SignalExecution.entity_id"`)}
	}
	if _, ok := sec.mutation.StartedAt(); !ok {
		return &ValidationError{Name: "started_at", err: errors.New(`ent: missing required field "SignalExecution.started_at"`)}
	}
	if _, ok := sec.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "SignalExecution.status"`)}
	}
	if _, ok := sec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SignalExecution.created_at"`)}
	}
	if _, ok := sec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SignalExecution.updated_at"`)}
	}
	if len(sec.mutation.SignalIDs()) == 0 {
		return &ValidationError{Name: "signal", err: errors.New(`ent: missing required edge "SignalExecution.signal"`)}
	}
	return nil
}

func (sec *SignalExecutionCreate) sqlSave(ctx context.Context) (*SignalExecution, error) {
	if err := sec.check(); err != nil {
		return nil, err
	}
	_node, _spec := sec.createSpec()
	if err := sqlgraph.CreateNode(ctx, sec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = schema.SignalExecutionID(id)
	}
	sec.mutation.id = &_node.ID
	sec.mutation.done = true
	return _node, nil
}

func (sec *SignalExecutionCreate) createSpec() (*SignalExecution, *sqlgraph.CreateSpec) {
	var (
		_node = &SignalExecution{config: sec.config}
		_spec = sqlgraph.NewCreateSpec(signalexecution.Table, sqlgraph.NewFieldSpec(signalexecution.FieldID, field.TypeInt))
	)
	if id, ok := sec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sec.mutation.StartedAt(); ok {
		_spec.SetField(signalexecution.FieldStartedAt, field.TypeTime, value)
		_node.StartedAt = value
	}
	if value, ok := sec.mutation.CompletedAt(); ok {
		_spec.SetField(signalexecution.FieldCompletedAt, field.TypeTime, value)
		_node.CompletedAt = &value
	}
	if value, ok := sec.mutation.Status(); ok {
		_spec.SetField(signalexecution.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := sec.mutation.Error(); ok {
		_spec.SetField(signalexecution.FieldError, field.TypeString, value)
		_node.Error = value
	}
	if value, ok := sec.mutation.StackTrace(); ok {
		_spec.SetField(signalexecution.FieldStackTrace, field.TypeString, value)
		_node.StackTrace = value
	}
	if value, ok := sec.mutation.CreatedAt(); ok {
		_spec.SetField(signalexecution.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sec.mutation.UpdatedAt(); ok {
		_spec.SetField(signalexecution.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := sec.mutation.SignalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   signalexecution.SignalTable,
			Columns: []string{signalexecution.SignalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signalentity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EntityID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sec.mutation.ExecutionDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   signalexecution.ExecutionDataTable,
			Columns: []string{signalexecution.ExecutionDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signalexecutiondata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SignalExecutionCreateBulk is the builder for creating many SignalExecution entities in bulk.
type SignalExecutionCreateBulk struct {
	config
	err      error
	builders []*SignalExecutionCreate
}

// Save creates the SignalExecution entities in the database.
func (secb *SignalExecutionCreateBulk) Save(ctx context.Context) ([]*SignalExecution, error) {
	if secb.err != nil {
		return nil, secb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(secb.builders))
	nodes := make([]*SignalExecution, len(secb.builders))
	mutators := make([]Mutator, len(secb.builders))
	for i := range secb.builders {
		func(i int, root context.Context) {
			builder := secb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SignalExecutionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, secb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, secb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = schema.SignalExecutionID(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, secb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (secb *SignalExecutionCreateBulk) SaveX(ctx context.Context) []*SignalExecution {
	v, err := secb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (secb *SignalExecutionCreateBulk) Exec(ctx context.Context) error {
	_, err := secb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (secb *SignalExecutionCreateBulk) ExecX(ctx context.Context) {
	if err := secb.Exec(ctx); err != nil {
		panic(err)
	}
}
