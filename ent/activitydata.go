// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/davidroman0O/tempolite/ent/activitydata"
	"github.com/davidroman0O/tempolite/ent/activityentity"
	"github.com/davidroman0O/tempolite/ent/schema"
)

// ActivityData is the model entity for the ActivityData schema.
type ActivityData struct {
	config `json:"-"`
	// ID of the ent.
	ID schema.ActivityDataID `json:"id,omitempty"`
	// EntityID holds the value of the "entity_id" field.
	EntityID schema.ActivityEntityID `json:"entity_id,omitempty"`
	// Inputs holds the value of the "inputs" field.
	Inputs []byte `json:"inputs,omitempty"`
	// Output holds the value of the "output" field.
	Output []byte `json:"output,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ActivityDataQuery when eager-loading is set.
	Edges        ActivityDataEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ActivityDataEdges holds the relations/edges for other nodes in the graph.
type ActivityDataEdges struct {
	// Activity holds the value of the activity edge.
	Activity *ActivityEntity `json:"activity,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ActivityOrErr returns the Activity value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ActivityDataEdges) ActivityOrErr() (*ActivityEntity, error) {
	if e.Activity != nil {
		return e.Activity, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: activityentity.Label}
	}
	return nil, &NotLoadedError{edge: "activity"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ActivityData) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case activitydata.FieldInputs, activitydata.FieldOutput:
			values[i] = new([]byte)
		case activitydata.FieldID, activitydata.FieldEntityID:
			values[i] = new(sql.NullInt64)
		case activitydata.FieldCreatedAt, activitydata.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ActivityData fields.
func (ad *ActivityData) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case activitydata.FieldID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ad.ID = schema.ActivityDataID(value.Int64)
			}
		case activitydata.FieldEntityID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field entity_id", values[i])
			} else if value.Valid {
				ad.EntityID = schema.ActivityEntityID(value.Int64)
			}
		case activitydata.FieldInputs:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field inputs", values[i])
			} else if value != nil {
				ad.Inputs = *value
			}
		case activitydata.FieldOutput:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field output", values[i])
			} else if value != nil {
				ad.Output = *value
			}
		case activitydata.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ad.CreatedAt = value.Time
			}
		case activitydata.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ad.UpdatedAt = value.Time
			}
		default:
			ad.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ActivityData.
// This includes values selected through modifiers, order, etc.
func (ad *ActivityData) Value(name string) (ent.Value, error) {
	return ad.selectValues.Get(name)
}

// QueryActivity queries the "activity" edge of the ActivityData entity.
func (ad *ActivityData) QueryActivity() *ActivityEntityQuery {
	return NewActivityDataClient(ad.config).QueryActivity(ad)
}

// Update returns a builder for updating this ActivityData.
// Note that you need to call ActivityData.Unwrap() before calling this method if this ActivityData
// was returned from a transaction, and the transaction was committed or rolled back.
func (ad *ActivityData) Update() *ActivityDataUpdateOne {
	return NewActivityDataClient(ad.config).UpdateOne(ad)
}

// Unwrap unwraps the ActivityData entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ad *ActivityData) Unwrap() *ActivityData {
	_tx, ok := ad.config.driver.(*txDriver)
	if !ok {
		panic("ent: ActivityData is not a transactional entity")
	}
	ad.config.driver = _tx.drv
	return ad
}

// String implements the fmt.Stringer.
func (ad *ActivityData) String() string {
	var builder strings.Builder
	builder.WriteString("ActivityData(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ad.ID))
	builder.WriteString("entity_id=")
	builder.WriteString(fmt.Sprintf("%v", ad.EntityID))
	builder.WriteString(", ")
	builder.WriteString("inputs=")
	builder.WriteString(fmt.Sprintf("%v", ad.Inputs))
	builder.WriteString(", ")
	builder.WriteString("output=")
	builder.WriteString(fmt.Sprintf("%v", ad.Output))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ad.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ad.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ActivityDataSlice is a parsable slice of ActivityData.
type ActivityDataSlice []*ActivityData
