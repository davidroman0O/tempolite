// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/tempolite/ent/activityentity"
	"github.com/davidroman0O/tempolite/ent/queue"
	"github.com/davidroman0O/tempolite/ent/run"
	"github.com/davidroman0O/tempolite/ent/sagaentity"
	"github.com/davidroman0O/tempolite/ent/schema"
	"github.com/davidroman0O/tempolite/ent/sideeffectentity"
	"github.com/davidroman0O/tempolite/ent/version"
	"github.com/davidroman0O/tempolite/ent/workflowdata"
	"github.com/davidroman0O/tempolite/ent/workflowentity"
	"github.com/davidroman0O/tempolite/ent/workflowexecution"
)

// WorkflowEntityCreate is the builder for creating a WorkflowEntity entity.
type WorkflowEntityCreate struct {
	config
	mutation *WorkflowEntityMutation
	hooks    []Hook
}

// SetHandlerName sets the "handler_name" field.
func (wec *WorkflowEntityCreate) SetHandlerName(s string) *WorkflowEntityCreate {
	wec.mutation.SetHandlerName(s)
	return wec
}

// SetType sets the "type" field.
func (wec *WorkflowEntityCreate) SetType(st schema.EntityType) *WorkflowEntityCreate {
	wec.mutation.SetType(st)
	return wec
}

// SetNillableType sets the "type" field if the given value is not nil.
func (wec *WorkflowEntityCreate) SetNillableType(st *schema.EntityType) *WorkflowEntityCreate {
	if st != nil {
		wec.SetType(*st)
	}
	return wec
}

// SetStatus sets the "status" field.
func (wec *WorkflowEntityCreate) SetStatus(ss schema.EntityStatus) *WorkflowEntityCreate {
	wec.mutation.SetStatus(ss)
	return wec
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (wec *WorkflowEntityCreate) SetNillableStatus(ss *schema.EntityStatus) *WorkflowEntityCreate {
	if ss != nil {
		wec.SetStatus(*ss)
	}
	return wec
}

// SetStepID sets the "step_id" field.
func (wec *WorkflowEntityCreate) SetStepID(ssi schema.WorkflowStepID) *WorkflowEntityCreate {
	wec.mutation.SetStepID(ssi)
	return wec
}

// SetRunID sets the "run_id" field.
func (wec *WorkflowEntityCreate) SetRunID(si schema.RunID) *WorkflowEntityCreate {
	wec.mutation.SetRunID(si)
	return wec
}

// SetRetryPolicy sets the "retry_policy" field.
func (wec *WorkflowEntityCreate) SetRetryPolicy(sp schema.RetryPolicy) *WorkflowEntityCreate {
	wec.mutation.SetRetryPolicy(sp)
	return wec
}

// SetRetryState sets the "retry_state" field.
func (wec *WorkflowEntityCreate) SetRetryState(ss schema.RetryState) *WorkflowEntityCreate {
	wec.mutation.SetRetryState(ss)
	return wec
}

// SetCreatedAt sets the "created_at" field.
func (wec *WorkflowEntityCreate) SetCreatedAt(t time.Time) *WorkflowEntityCreate {
	wec.mutation.SetCreatedAt(t)
	return wec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wec *WorkflowEntityCreate) SetNillableCreatedAt(t *time.Time) *WorkflowEntityCreate {
	if t != nil {
		wec.SetCreatedAt(*t)
	}
	return wec
}

// SetUpdatedAt sets the "updated_at" field.
func (wec *WorkflowEntityCreate) SetUpdatedAt(t time.Time) *WorkflowEntityCreate {
	wec.mutation.SetUpdatedAt(t)
	return wec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (wec *WorkflowEntityCreate) SetNillableUpdatedAt(t *time.Time) *WorkflowEntityCreate {
	if t != nil {
		wec.SetUpdatedAt(*t)
	}
	return wec
}

// SetID sets the "id" field.
func (wec *WorkflowEntityCreate) SetID(sei schema.WorkflowEntityID) *WorkflowEntityCreate {
	wec.mutation.SetID(sei)
	return wec
}

// SetQueueID sets the "queue" edge to the Queue entity by ID.
func (wec *WorkflowEntityCreate) SetQueueID(id schema.QueueID) *WorkflowEntityCreate {
	wec.mutation.SetQueueID(id)
	return wec
}

// SetNillableQueueID sets the "queue" edge to the Queue entity by ID if the given value is not nil.
func (wec *WorkflowEntityCreate) SetNillableQueueID(id *schema.QueueID) *WorkflowEntityCreate {
	if id != nil {
		wec = wec.SetQueueID(*id)
	}
	return wec
}

// SetQueue sets the "queue" edge to the Queue entity.
func (wec *WorkflowEntityCreate) SetQueue(q *Queue) *WorkflowEntityCreate {
	return wec.SetQueueID(q.ID)
}

// SetRun sets the "run" edge to the Run entity.
func (wec *WorkflowEntityCreate) SetRun(r *Run) *WorkflowEntityCreate {
	return wec.SetRunID(r.ID)
}

// AddVersionIDs adds the "versions" edge to the Version entity by IDs.
func (wec *WorkflowEntityCreate) AddVersionIDs(ids ...schema.VersionID) *WorkflowEntityCreate {
	wec.mutation.AddVersionIDs(ids...)
	return wec
}

// AddVersions adds the "versions" edges to the Version entity.
func (wec *WorkflowEntityCreate) AddVersions(v ...*Version) *WorkflowEntityCreate {
	ids := make([]schema.VersionID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return wec.AddVersionIDs(ids...)
}

// SetWorkflowDataID sets the "workflow_data" edge to the WorkflowData entity by ID.
func (wec *WorkflowEntityCreate) SetWorkflowDataID(id schema.WorkflowDataID) *WorkflowEntityCreate {
	wec.mutation.SetWorkflowDataID(id)
	return wec
}

// SetNillableWorkflowDataID sets the "workflow_data" edge to the WorkflowData entity by ID if the given value is not nil.
func (wec *WorkflowEntityCreate) SetNillableWorkflowDataID(id *schema.WorkflowDataID) *WorkflowEntityCreate {
	if id != nil {
		wec = wec.SetWorkflowDataID(*id)
	}
	return wec
}

// SetWorkflowData sets the "workflow_data" edge to the WorkflowData entity.
func (wec *WorkflowEntityCreate) SetWorkflowData(w *WorkflowData) *WorkflowEntityCreate {
	return wec.SetWorkflowDataID(w.ID)
}

// AddActivityChildIDs adds the "activity_children" edge to the ActivityEntity entity by IDs.
func (wec *WorkflowEntityCreate) AddActivityChildIDs(ids ...schema.ActivityEntityID) *WorkflowEntityCreate {
	wec.mutation.AddActivityChildIDs(ids...)
	return wec
}

// AddActivityChildren adds the "activity_children" edges to the ActivityEntity entity.
func (wec *WorkflowEntityCreate) AddActivityChildren(a ...*ActivityEntity) *WorkflowEntityCreate {
	ids := make([]schema.ActivityEntityID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return wec.AddActivityChildIDs(ids...)
}

// AddSagaChildIDs adds the "saga_children" edge to the SagaEntity entity by IDs.
func (wec *WorkflowEntityCreate) AddSagaChildIDs(ids ...schema.SagaEntityID) *WorkflowEntityCreate {
	wec.mutation.AddSagaChildIDs(ids...)
	return wec
}

// AddSagaChildren adds the "saga_children" edges to the SagaEntity entity.
func (wec *WorkflowEntityCreate) AddSagaChildren(s ...*SagaEntity) *WorkflowEntityCreate {
	ids := make([]schema.SagaEntityID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return wec.AddSagaChildIDs(ids...)
}

// AddSideEffectChildIDs adds the "side_effect_children" edge to the SideEffectEntity entity by IDs.
func (wec *WorkflowEntityCreate) AddSideEffectChildIDs(ids ...schema.SideEffectEntityID) *WorkflowEntityCreate {
	wec.mutation.AddSideEffectChildIDs(ids...)
	return wec
}

// AddSideEffectChildren adds the "side_effect_children" edges to the SideEffectEntity entity.
func (wec *WorkflowEntityCreate) AddSideEffectChildren(s ...*SideEffectEntity) *WorkflowEntityCreate {
	ids := make([]schema.SideEffectEntityID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return wec.AddSideEffectChildIDs(ids...)
}

// AddExecutionIDs adds the "executions" edge to the WorkflowExecution entity by IDs.
func (wec *WorkflowEntityCreate) AddExecutionIDs(ids ...schema.WorkflowExecutionID) *WorkflowEntityCreate {
	wec.mutation.AddExecutionIDs(ids...)
	return wec
}

// AddExecutions adds the "executions" edges to the WorkflowExecution entity.
func (wec *WorkflowEntityCreate) AddExecutions(w ...*WorkflowExecution) *WorkflowEntityCreate {
	ids := make([]schema.WorkflowExecutionID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wec.AddExecutionIDs(ids...)
}

// Mutation returns the WorkflowEntityMutation object of the builder.
func (wec *WorkflowEntityCreate) Mutation() *WorkflowEntityMutation {
	return wec.mutation
}

// Save creates the WorkflowEntity in the database.
func (wec *WorkflowEntityCreate) Save(ctx context.Context) (*WorkflowEntity, error) {
	wec.defaults()
	return withHooks(ctx, wec.sqlSave, wec.mutation, wec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wec *WorkflowEntityCreate) SaveX(ctx context.Context) *WorkflowEntity {
	v, err := wec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wec *WorkflowEntityCreate) Exec(ctx context.Context) error {
	_, err := wec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wec *WorkflowEntityCreate) ExecX(ctx context.Context) {
	if err := wec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wec *WorkflowEntityCreate) defaults() {
	if _, ok := wec.mutation.GetType(); !ok {
		v := workflowentity.DefaultType
		wec.mutation.SetType(v)
	}
	if _, ok := wec.mutation.Status(); !ok {
		v := workflowentity.DefaultStatus
		wec.mutation.SetStatus(v)
	}
	if _, ok := wec.mutation.CreatedAt(); !ok {
		v := workflowentity.DefaultCreatedAt()
		wec.mutation.SetCreatedAt(v)
	}
	if _, ok := wec.mutation.UpdatedAt(); !ok {
		v := workflowentity.DefaultUpdatedAt()
		wec.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wec *WorkflowEntityCreate) check() error {
	if _, ok := wec.mutation.HandlerName(); !ok {
		return &ValidationError{Name: "handler_name", err: errors.New(`ent: missing required field "WorkflowEntity.handler_name"`)}
	}
	if _, ok := wec.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "WorkflowEntity.type"`)}
	}
	if _, ok := wec.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "WorkflowEntity.status"`)}
	}
	if _, ok := wec.mutation.StepID(); !ok {
		return &ValidationError{Name: "step_id", err: errors.New(`ent: missing required field "WorkflowEntity.step_id"`)}
	}
	if v, ok := wec.mutation.StepID(); ok {
		if err := workflowentity.StepIDValidator(string(v)); err != nil {
			return &ValidationError{Name: "step_id", err: fmt.Errorf(`ent: validator failed for field "WorkflowEntity.step_id": %w`, err)}
		}
	}
	if _, ok := wec.mutation.RunID(); !ok {
		return &ValidationError{Name: "run_id", err: errors.New(`ent: missing required field "WorkflowEntity.run_id"`)}
	}
	if _, ok := wec.mutation.RetryPolicy(); !ok {
		return &ValidationError{Name: "retry_policy", err: errors.New(`ent: missing required field "WorkflowEntity.retry_policy"`)}
	}
	if _, ok := wec.mutation.RetryState(); !ok {
		return &ValidationError{Name: "retry_state", err: errors.New(`ent: missing required field "WorkflowEntity.retry_state"`)}
	}
	if _, ok := wec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "WorkflowEntity.created_at"`)}
	}
	if _, ok := wec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "WorkflowEntity.updated_at"`)}
	}
	if len(wec.mutation.RunIDs()) == 0 {
		return &ValidationError{Name: "run", err: errors.New(`ent: missing required edge "WorkflowEntity.run"`)}
	}
	return nil
}

func (wec *WorkflowEntityCreate) sqlSave(ctx context.Context) (*WorkflowEntity, error) {
	if err := wec.check(); err != nil {
		return nil, err
	}
	_node, _spec := wec.createSpec()
	if err := sqlgraph.CreateNode(ctx, wec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = schema.WorkflowEntityID(id)
	}
	wec.mutation.id = &_node.ID
	wec.mutation.done = true
	return _node, nil
}

func (wec *WorkflowEntityCreate) createSpec() (*WorkflowEntity, *sqlgraph.CreateSpec) {
	var (
		_node = &WorkflowEntity{config: wec.config}
		_spec = sqlgraph.NewCreateSpec(workflowentity.Table, sqlgraph.NewFieldSpec(workflowentity.FieldID, field.TypeInt))
	)
	if id, ok := wec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := wec.mutation.HandlerName(); ok {
		_spec.SetField(workflowentity.FieldHandlerName, field.TypeString, value)
		_node.HandlerName = value
	}
	if value, ok := wec.mutation.GetType(); ok {
		_spec.SetField(workflowentity.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := wec.mutation.Status(); ok {
		_spec.SetField(workflowentity.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := wec.mutation.StepID(); ok {
		_spec.SetField(workflowentity.FieldStepID, field.TypeString, value)
		_node.StepID = value
	}
	if value, ok := wec.mutation.RetryPolicy(); ok {
		_spec.SetField(workflowentity.FieldRetryPolicy, field.TypeJSON, value)
		_node.RetryPolicy = value
	}
	if value, ok := wec.mutation.RetryState(); ok {
		_spec.SetField(workflowentity.FieldRetryState, field.TypeJSON, value)
		_node.RetryState = value
	}
	if value, ok := wec.mutation.CreatedAt(); ok {
		_spec.SetField(workflowentity.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := wec.mutation.UpdatedAt(); ok {
		_spec.SetField(workflowentity.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := wec.mutation.QueueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowentity.QueueTable,
			Columns: []string{workflowentity.QueueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(queue.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.queue_entities = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wec.mutation.RunIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowentity.RunTable,
			Columns: []string{workflowentity.RunColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(run.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RunID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wec.mutation.VersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowentity.VersionsTable,
			Columns: []string{workflowentity.VersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(version.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wec.mutation.WorkflowDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   workflowentity.WorkflowDataTable,
			Columns: []string{workflowentity.WorkflowDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowdata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wec.mutation.ActivityChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowentity.ActivityChildrenTable,
			Columns: []string{workflowentity.ActivityChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activityentity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wec.mutation.SagaChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowentity.SagaChildrenTable,
			Columns: []string{workflowentity.SagaChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagaentity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wec.mutation.SideEffectChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowentity.SideEffectChildrenTable,
			Columns: []string{workflowentity.SideEffectChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sideeffectentity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wec.mutation.ExecutionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowentity.ExecutionsTable,
			Columns: []string{workflowentity.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowexecution.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// WorkflowEntityCreateBulk is the builder for creating many WorkflowEntity entities in bulk.
type WorkflowEntityCreateBulk struct {
	config
	err      error
	builders []*WorkflowEntityCreate
}

// Save creates the WorkflowEntity entities in the database.
func (wecb *WorkflowEntityCreateBulk) Save(ctx context.Context) ([]*WorkflowEntity, error) {
	if wecb.err != nil {
		return nil, wecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(wecb.builders))
	nodes := make([]*WorkflowEntity, len(wecb.builders))
	mutators := make([]Mutator, len(wecb.builders))
	for i := range wecb.builders {
		func(i int, root context.Context) {
			builder := wecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WorkflowEntityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = schema.WorkflowEntityID(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wecb *WorkflowEntityCreateBulk) SaveX(ctx context.Context) []*WorkflowEntity {
	v, err := wecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wecb *WorkflowEntityCreateBulk) Exec(ctx context.Context) error {
	_, err := wecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wecb *WorkflowEntityCreateBulk) ExecX(ctx context.Context) {
	if err := wecb.Exec(ctx); err != nil {
		panic(err)
	}
}
