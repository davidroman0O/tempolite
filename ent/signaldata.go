// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/davidroman0O/tempolite/ent/schema"
	"github.com/davidroman0O/tempolite/ent/signaldata"
	"github.com/davidroman0O/tempolite/ent/signalentity"
)

// SignalData is the model entity for the SignalData schema.
type SignalData struct {
	config `json:"-"`
	// ID of the ent.
	ID schema.SignalDataID `json:"id,omitempty"`
	// EntityID holds the value of the "entity_id" field.
	EntityID schema.SignalEntityID `json:"entity_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SignalDataQuery when eager-loading is set.
	Edges        SignalDataEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SignalDataEdges holds the relations/edges for other nodes in the graph.
type SignalDataEdges struct {
	// Signal holds the value of the signal edge.
	Signal *SignalEntity `json:"signal,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SignalOrErr returns the Signal value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SignalDataEdges) SignalOrErr() (*SignalEntity, error) {
	if e.Signal != nil {
		return e.Signal, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: signalentity.Label}
	}
	return nil, &NotLoadedError{edge: "signal"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SignalData) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case signaldata.FieldID, signaldata.FieldEntityID:
			values[i] = new(sql.NullInt64)
		case signaldata.FieldName:
			values[i] = new(sql.NullString)
		case signaldata.FieldCreatedAt, signaldata.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SignalData fields.
func (sd *SignalData) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case signaldata.FieldID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				sd.ID = schema.SignalDataID(value.Int64)
			}
		case signaldata.FieldEntityID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field entity_id", values[i])
			} else if value.Valid {
				sd.EntityID = schema.SignalEntityID(value.Int64)
			}
		case signaldata.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				sd.Name = value.String
			}
		case signaldata.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sd.CreatedAt = value.Time
			}
		case signaldata.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sd.UpdatedAt = value.Time
			}
		default:
			sd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SignalData.
// This includes values selected through modifiers, order, etc.
func (sd *SignalData) Value(name string) (ent.Value, error) {
	return sd.selectValues.Get(name)
}

// QuerySignal queries the "signal" edge of the SignalData entity.
func (sd *SignalData) QuerySignal() *SignalEntityQuery {
	return NewSignalDataClient(sd.config).QuerySignal(sd)
}

// Update returns a builder for updating this SignalData.
// Note that you need to call SignalData.Unwrap() before calling this method if this SignalData
// was returned from a transaction, and the transaction was committed or rolled back.
func (sd *SignalData) Update() *SignalDataUpdateOne {
	return NewSignalDataClient(sd.config).UpdateOne(sd)
}

// Unwrap unwraps the SignalData entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sd *SignalData) Unwrap() *SignalData {
	_tx, ok := sd.config.driver.(*txDriver)
	if !ok {
		panic("ent: SignalData is not a transactional entity")
	}
	sd.config.driver = _tx.drv
	return sd
}

// String implements the fmt.Stringer.
func (sd *SignalData) String() string {
	var builder strings.Builder
	builder.WriteString("SignalData(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sd.ID))
	builder.WriteString("entity_id=")
	builder.WriteString(fmt.Sprintf("%v", sd.EntityID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(sd.Name)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(sd.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sd.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SignalDataSlice is a parsable slice of SignalData.
type SignalDataSlice []*SignalData
