// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/tempolite/ent/schema"
	"github.com/davidroman0O/tempolite/ent/signalexecution"
	"github.com/davidroman0O/tempolite/ent/signalexecutiondata"
)

// SignalExecutionDataCreate is the builder for creating a SignalExecutionData entity.
type SignalExecutionDataCreate struct {
	config
	mutation *SignalExecutionDataMutation
	hooks    []Hook
}

// SetExecutionID sets the "execution_id" field.
func (sedc *SignalExecutionDataCreate) SetExecutionID(sei schema.SignalExecutionID) *SignalExecutionDataCreate {
	sedc.mutation.SetExecutionID(sei)
	return sedc
}

// SetValue sets the "value" field.
func (sedc *SignalExecutionDataCreate) SetValue(b []byte) *SignalExecutionDataCreate {
	sedc.mutation.SetValue(b)
	return sedc
}

// SetKind sets the "kind" field.
func (sedc *SignalExecutionDataCreate) SetKind(u uint) *SignalExecutionDataCreate {
	sedc.mutation.SetKind(u)
	return sedc
}

// SetCreatedAt sets the "created_at" field.
func (sedc *SignalExecutionDataCreate) SetCreatedAt(t time.Time) *SignalExecutionDataCreate {
	sedc.mutation.SetCreatedAt(t)
	return sedc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sedc *SignalExecutionDataCreate) SetNillableCreatedAt(t *time.Time) *SignalExecutionDataCreate {
	if t != nil {
		sedc.SetCreatedAt(*t)
	}
	return sedc
}

// SetUpdatedAt sets the "updated_at" field.
func (sedc *SignalExecutionDataCreate) SetUpdatedAt(t time.Time) *SignalExecutionDataCreate {
	sedc.mutation.SetUpdatedAt(t)
	return sedc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sedc *SignalExecutionDataCreate) SetNillableUpdatedAt(t *time.Time) *SignalExecutionDataCreate {
	if t != nil {
		sedc.SetUpdatedAt(*t)
	}
	return sedc
}

// SetID sets the "id" field.
func (sedc *SignalExecutionDataCreate) SetID(sedi schema.SignalExecutionDataID) *SignalExecutionDataCreate {
	sedc.mutation.SetID(sedi)
	return sedc
}

// SetExecution sets the "execution" edge to the SignalExecution entity.
func (sedc *SignalExecutionDataCreate) SetExecution(s *SignalExecution) *SignalExecutionDataCreate {
	return sedc.SetExecutionID(s.ID)
}

// Mutation returns the SignalExecutionDataMutation object of the builder.
func (sedc *SignalExecutionDataCreate) Mutation() *SignalExecutionDataMutation {
	return sedc.mutation
}

// Save creates the SignalExecutionData in the database.
func (sedc *SignalExecutionDataCreate) Save(ctx context.Context) (*SignalExecutionData, error) {
	sedc.defaults()
	return withHooks(ctx, sedc.sqlSave, sedc.mutation, sedc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sedc *SignalExecutionDataCreate) SaveX(ctx context.Context) *SignalExecutionData {
	v, err := sedc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sedc *SignalExecutionDataCreate) Exec(ctx context.Context) error {
	_, err := sedc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sedc *SignalExecutionDataCreate) ExecX(ctx context.Context) {
	if err := sedc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sedc *SignalExecutionDataCreate) defaults() {
	if _, ok := sedc.mutation.CreatedAt(); !ok {
		v := signalexecutiondata.DefaultCreatedAt()
		sedc.mutation.SetCreatedAt(v)
	}
	if _, ok := sedc.mutation.UpdatedAt(); !ok {
		v := signalexecutiondata.DefaultUpdatedAt()
		sedc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sedc *SignalExecutionDataCreate) check() error {
	if _, ok := sedc.mutation.ExecutionID(); !ok {
		return &ValidationError{Name: "execution_id", err: errors.New(`ent: missing required field "SignalExecutionData.execution_id"`)}
	}
	if _, ok := sedc.mutation.Kind(); !ok {
		return &ValidationError{Name: "kind", err: errors.New(`ent: missing required field "SignalExecutionData.kind"`)}
	}
	if _, ok := sedc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SignalExecutionData.created_at"`)}
	}
	if _, ok := sedc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SignalExecutionData.updated_at"`)}
	}
	if len(sedc.mutation.ExecutionIDs()) == 0 {
		return &ValidationError{Name: "execution", err: errors.New(`ent: missing required edge "SignalExecutionData.execution"`)}
	}
	return nil
}

func (sedc *SignalExecutionDataCreate) sqlSave(ctx context.Context) (*SignalExecutionData, error) {
	if err := sedc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sedc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sedc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = schema.SignalExecutionDataID(id)
	}
	sedc.mutation.id = &_node.ID
	sedc.mutation.done = true
	return _node, nil
}

func (sedc *SignalExecutionDataCreate) createSpec() (*SignalExecutionData, *sqlgraph.CreateSpec) {
	var (
		_node = &SignalExecutionData{config: sedc.config}
		_spec = sqlgraph.NewCreateSpec(signalexecutiondata.Table, sqlgraph.NewFieldSpec(signalexecutiondata.FieldID, field.TypeInt))
	)
	if id, ok := sedc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sedc.mutation.Value(); ok {
		_spec.SetField(signalexecutiondata.FieldValue, field.TypeBytes, value)
		_node.Value = value
	}
	if value, ok := sedc.mutation.Kind(); ok {
		_spec.SetField(signalexecutiondata.FieldKind, field.TypeUint, value)
		_node.Kind = value
	}
	if value, ok := sedc.mutation.CreatedAt(); ok {
		_spec.SetField(signalexecutiondata.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sedc.mutation.UpdatedAt(); ok {
		_spec.SetField(signalexecutiondata.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := sedc.mutation.ExecutionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   signalexecutiondata.ExecutionTable,
			Columns: []string{signalexecutiondata.ExecutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signalexecution.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ExecutionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SignalExecutionDataCreateBulk is the builder for creating many SignalExecutionData entities in bulk.
type SignalExecutionDataCreateBulk struct {
	config
	err      error
	builders []*SignalExecutionDataCreate
}

// Save creates the SignalExecutionData entities in the database.
func (sedcb *SignalExecutionDataCreateBulk) Save(ctx context.Context) ([]*SignalExecutionData, error) {
	if sedcb.err != nil {
		return nil, sedcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sedcb.builders))
	nodes := make([]*SignalExecutionData, len(sedcb.builders))
	mutators := make([]Mutator, len(sedcb.builders))
	for i := range sedcb.builders {
		func(i int, root context.Context) {
			builder := sedcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SignalExecutionDataMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sedcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sedcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = schema.SignalExecutionDataID(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sedcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sedcb *SignalExecutionDataCreateBulk) SaveX(ctx context.Context) []*SignalExecutionData {
	v, err := sedcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sedcb *SignalExecutionDataCreateBulk) Exec(ctx context.Context) error {
	_, err := sedcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sedcb *SignalExecutionDataCreateBulk) ExecX(ctx context.Context) {
	if err := sedcb.Exec(ctx); err != nil {
		panic(err)
	}
}
