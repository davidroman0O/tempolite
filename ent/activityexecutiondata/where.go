// Code generated by ent, DO NOT EDIT.

package activityexecutiondata

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/davidroman0O/tempolite/ent/predicate"
	"github.com/davidroman0O/tempolite/ent/schema"
)

// ID filters vertices based on their ID field.
func ID(id schema.ActivityExecutionDataID) predicate.ActivityExecutionData {
	return predicate.ActivityExecutionData(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id schema.ActivityExecutionDataID) predicate.ActivityExecutionData {
	return predicate.ActivityExecutionData(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id schema.ActivityExecutionDataID) predicate.ActivityExecutionData {
	return predicate.ActivityExecutionData(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...schema.ActivityExecutionDataID) predicate.ActivityExecutionData {
	return predicate.ActivityExecutionData(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...schema.ActivityExecutionDataID) predicate.ActivityExecutionData {
	return predicate.ActivityExecutionData(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id schema.ActivityExecutionDataID) predicate.ActivityExecutionData {
	return predicate.ActivityExecutionData(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id schema.ActivityExecutionDataID) predicate.ActivityExecutionData {
	return predicate.ActivityExecutionData(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id schema.ActivityExecutionDataID) predicate.ActivityExecutionData {
	return predicate.ActivityExecutionData(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id schema.ActivityExecutionDataID) predicate.ActivityExecutionData {
	return predicate.ActivityExecutionData(sql.FieldLTE(FieldID, id))
}

// ExecutionID applies equality check predicate on the "execution_id" field. It's identical to ExecutionIDEQ.
func ExecutionID(v schema.ActivityExecutionID) predicate.ActivityExecutionData {
	vc := int(v)
	return predicate.ActivityExecutionData(sql.FieldEQ(FieldExecutionID, vc))
}

// LastHeartbeat applies equality check predicate on the "last_heartbeat" field. It's identical to LastHeartbeatEQ.
func LastHeartbeat(v time.Time) predicate.ActivityExecutionData {
	return predicate.ActivityExecutionData(sql.FieldEQ(FieldLastHeartbeat, v))
}

// Outputs applies equality check predicate on the "outputs" field. It's identical to OutputsEQ.
func Outputs(v []byte) predicate.ActivityExecutionData {
	return predicate.ActivityExecutionData(sql.FieldEQ(FieldOutputs, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ActivityExecutionData {
	return predicate.ActivityExecutionData(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ActivityExecutionData {
	return predicate.ActivityExecutionData(sql.FieldEQ(FieldUpdatedAt, v))
}

// ExecutionIDEQ applies the EQ predicate on the "execution_id" field.
func ExecutionIDEQ(v schema.ActivityExecutionID) predicate.ActivityExecutionData {
	vc := int(v)
	return predicate.ActivityExecutionData(sql.FieldEQ(FieldExecutionID, vc))
}

// ExecutionIDNEQ applies the NEQ predicate on the "execution_id" field.
func ExecutionIDNEQ(v schema.ActivityExecutionID) predicate.ActivityExecutionData {
	vc := int(v)
	return predicate.ActivityExecutionData(sql.FieldNEQ(FieldExecutionID, vc))
}

// ExecutionIDIn applies the In predicate on the "execution_id" field.
func ExecutionIDIn(vs ...schema.ActivityExecutionID) predicate.ActivityExecutionData {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int(vs[i])
	}
	return predicate.ActivityExecutionData(sql.FieldIn(FieldExecutionID, v...))
}

// ExecutionIDNotIn applies the NotIn predicate on the "execution_id" field.
func ExecutionIDNotIn(vs ...schema.ActivityExecutionID) predicate.ActivityExecutionData {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int(vs[i])
	}
	return predicate.ActivityExecutionData(sql.FieldNotIn(FieldExecutionID, v...))
}

// LastHeartbeatEQ applies the EQ predicate on the "last_heartbeat" field.
func LastHeartbeatEQ(v time.Time) predicate.ActivityExecutionData {
	return predicate.ActivityExecutionData(sql.FieldEQ(FieldLastHeartbeat, v))
}

// LastHeartbeatNEQ applies the NEQ predicate on the "last_heartbeat" field.
func LastHeartbeatNEQ(v time.Time) predicate.ActivityExecutionData {
	return predicate.ActivityExecutionData(sql.FieldNEQ(FieldLastHeartbeat, v))
}

// LastHeartbeatIn applies the In predicate on the "last_heartbeat" field.
func LastHeartbeatIn(vs ...time.Time) predicate.ActivityExecutionData {
	return predicate.ActivityExecutionData(sql.FieldIn(FieldLastHeartbeat, vs...))
}

// LastHeartbeatNotIn applies the NotIn predicate on the "last_heartbeat" field.
func LastHeartbeatNotIn(vs ...time.Time) predicate.ActivityExecutionData {
	return predicate.ActivityExecutionData(sql.FieldNotIn(FieldLastHeartbeat, vs...))
}

// LastHeartbeatGT applies the GT predicate on the "last_heartbeat" field.
func LastHeartbeatGT(v time.Time) predicate.ActivityExecutionData {
	return predicate.ActivityExecutionData(sql.FieldGT(FieldLastHeartbeat, v))
}

// LastHeartbeatGTE applies the GTE predicate on the "last_heartbeat" field.
func LastHeartbeatGTE(v time.Time) predicate.ActivityExecutionData {
	return predicate.ActivityExecutionData(sql.FieldGTE(FieldLastHeartbeat, v))
}

// LastHeartbeatLT applies the LT predicate on the "last_heartbeat" field.
func LastHeartbeatLT(v time.Time) predicate.ActivityExecutionData {
	return predicate.ActivityExecutionData(sql.FieldLT(FieldLastHeartbeat, v))
}

// LastHeartbeatLTE applies the LTE predicate on the "last_heartbeat" field.
func LastHeartbeatLTE(v time.Time) predicate.ActivityExecutionData {
	return predicate.ActivityExecutionData(sql.FieldLTE(FieldLastHeartbeat, v))
}

// LastHeartbeatIsNil applies the IsNil predicate on the "last_heartbeat" field.
func LastHeartbeatIsNil() predicate.ActivityExecutionData {
	return predicate.ActivityExecutionData(sql.FieldIsNull(FieldLastHeartbeat))
}

// LastHeartbeatNotNil applies the NotNil predicate on the "last_heartbeat" field.
func LastHeartbeatNotNil() predicate.ActivityExecutionData {
	return predicate.ActivityExecutionData(sql.FieldNotNull(FieldLastHeartbeat))
}

// OutputsEQ applies the EQ predicate on the "outputs" field.
func OutputsEQ(v []byte) predicate.ActivityExecutionData {
	return predicate.ActivityExecutionData(sql.FieldEQ(FieldOutputs, v))
}

// OutputsNEQ applies the NEQ predicate on the "outputs" field.
func OutputsNEQ(v []byte) predicate.ActivityExecutionData {
	return predicate.ActivityExecutionData(sql.FieldNEQ(FieldOutputs, v))
}

// OutputsIn applies the In predicate on the "outputs" field.
func OutputsIn(vs ...[]byte) predicate.ActivityExecutionData {
	return predicate.ActivityExecutionData(sql.FieldIn(FieldOutputs, vs...))
}

// OutputsNotIn applies the NotIn predicate on the "outputs" field.
func OutputsNotIn(vs ...[]byte) predicate.ActivityExecutionData {
	return predicate.ActivityExecutionData(sql.FieldNotIn(FieldOutputs, vs...))
}

// OutputsGT applies the GT predicate on the "outputs" field.
func OutputsGT(v []byte) predicate.ActivityExecutionData {
	return predicate.ActivityExecutionData(sql.FieldGT(FieldOutputs, v))
}

// OutputsGTE applies the GTE predicate on the "outputs" field.
func OutputsGTE(v []byte) predicate.ActivityExecutionData {
	return predicate.ActivityExecutionData(sql.FieldGTE(FieldOutputs, v))
}

// OutputsLT applies the LT predicate on the "outputs" field.
func OutputsLT(v []byte) predicate.ActivityExecutionData {
	return predicate.ActivityExecutionData(sql.FieldLT(FieldOutputs, v))
}

// OutputsLTE applies the LTE predicate on the "outputs" field.
func OutputsLTE(v []byte) predicate.ActivityExecutionData {
	return predicate.ActivityExecutionData(sql.FieldLTE(FieldOutputs, v))
}

// OutputsIsNil applies the IsNil predicate on the "outputs" field.
func OutputsIsNil() predicate.ActivityExecutionData {
	return predicate.ActivityExecutionData(sql.FieldIsNull(FieldOutputs))
}

// OutputsNotNil applies the NotNil predicate on the "outputs" field.
func OutputsNotNil() predicate.ActivityExecutionData {
	return predicate.ActivityExecutionData(sql.FieldNotNull(FieldOutputs))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ActivityExecutionData {
	return predicate.ActivityExecutionData(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ActivityExecutionData {
	return predicate.ActivityExecutionData(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ActivityExecutionData {
	return predicate.ActivityExecutionData(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ActivityExecutionData {
	return predicate.ActivityExecutionData(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ActivityExecutionData {
	return predicate.ActivityExecutionData(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ActivityExecutionData {
	return predicate.ActivityExecutionData(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ActivityExecutionData {
	return predicate.ActivityExecutionData(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ActivityExecutionData {
	return predicate.ActivityExecutionData(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ActivityExecutionData {
	return predicate.ActivityExecutionData(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ActivityExecutionData {
	return predicate.ActivityExecutionData(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ActivityExecutionData {
	return predicate.ActivityExecutionData(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ActivityExecutionData {
	return predicate.ActivityExecutionData(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ActivityExecutionData {
	return predicate.ActivityExecutionData(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ActivityExecutionData {
	return predicate.ActivityExecutionData(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ActivityExecutionData {
	return predicate.ActivityExecutionData(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ActivityExecutionData {
	return predicate.ActivityExecutionData(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasExecution applies the HasEdge predicate on the "execution" edge.
func HasExecution() predicate.ActivityExecutionData {
	return predicate.ActivityExecutionData(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ExecutionTable, ExecutionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExecutionWith applies the HasEdge predicate on the "execution" edge with a given conditions (other predicates).
func HasExecutionWith(preds ...predicate.ActivityExecution) predicate.ActivityExecutionData {
	return predicate.ActivityExecutionData(func(s *sql.Selector) {
		step := newExecutionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ActivityExecutionData) predicate.ActivityExecutionData {
	return predicate.ActivityExecutionData(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ActivityExecutionData) predicate.ActivityExecutionData {
	return predicate.ActivityExecutionData(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ActivityExecutionData) predicate.ActivityExecutionData {
	return predicate.ActivityExecutionData(sql.NotPredicates(p))
}
