// Code generated by ent, DO NOT EDIT.

package signalentity

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/davidroman0O/tempolite/ent/schema"
)

const (
	// Label holds the string label denoting the signalentity type in the database.
	Label = "signal_entity"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldHandlerName holds the string denoting the handler_name field in the database.
	FieldHandlerName = "handler_name"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldStepID holds the string denoting the step_id field in the database.
	FieldStepID = "step_id"
	// FieldRunID holds the string denoting the run_id field in the database.
	FieldRunID = "run_id"
	// FieldRetryPolicy holds the string denoting the retry_policy field in the database.
	FieldRetryPolicy = "retry_policy"
	// FieldRetryState holds the string denoting the retry_state field in the database.
	FieldRetryState = "retry_state"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeSignalData holds the string denoting the signal_data edge name in mutations.
	EdgeSignalData = "signal_data"
	// EdgeExecutions holds the string denoting the executions edge name in mutations.
	EdgeExecutions = "executions"
	// Table holds the table name of the signalentity in the database.
	Table = "signal_entities"
	// SignalDataTable is the table that holds the signal_data relation/edge.
	SignalDataTable = "signal_data"
	// SignalDataInverseTable is the table name for the SignalData entity.
	// It exists in this package in order to avoid circular dependency with the "signaldata" package.
	SignalDataInverseTable = "signal_data"
	// SignalDataColumn is the table column denoting the signal_data relation/edge.
	SignalDataColumn = "entity_id"
	// ExecutionsTable is the table that holds the executions relation/edge.
	ExecutionsTable = "signal_executions"
	// ExecutionsInverseTable is the table name for the SignalExecution entity.
	// It exists in this package in order to avoid circular dependency with the "signalexecution" package.
	ExecutionsInverseTable = "signal_executions"
	// ExecutionsColumn is the table column denoting the executions relation/edge.
	ExecutionsColumn = "entity_id"
)

// Columns holds all SQL columns for signalentity fields.
var Columns = []string{
	FieldID,
	FieldHandlerName,
	FieldType,
	FieldStatus,
	FieldStepID,
	FieldRunID,
	FieldRetryPolicy,
	FieldRetryState,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultType holds the default value on creation for the "type" field.
	DefaultType schema.EntityType
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus schema.EntityStatus
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the SignalEntity queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByHandlerName orders the results by the handler_name field.
func ByHandlerName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHandlerName, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByStepID orders the results by the step_id field.
func ByStepID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStepID, opts...).ToFunc()
}

// ByRunID orders the results by the run_id field.
func ByRunID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRunID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// BySignalDataField orders the results by signal_data field.
func BySignalDataField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSignalDataStep(), sql.OrderByField(field, opts...))
	}
}

// ByExecutionsCount orders the results by executions count.
func ByExecutionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newExecutionsStep(), opts...)
	}
}

// ByExecutions orders the results by executions terms.
func ByExecutions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExecutionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newSignalDataStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SignalDataInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, SignalDataTable, SignalDataColumn),
	)
}
func newExecutionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExecutionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ExecutionsTable, ExecutionsColumn),
	)
}
