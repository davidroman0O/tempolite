// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/tempolite/ent/activityexecution"
	"github.com/davidroman0O/tempolite/ent/activityexecutiondata"
	"github.com/davidroman0O/tempolite/ent/predicate"
	"github.com/davidroman0O/tempolite/ent/schema"
)

// ActivityExecutionDataUpdate is the builder for updating ActivityExecutionData entities.
type ActivityExecutionDataUpdate struct {
	config
	hooks    []Hook
	mutation *ActivityExecutionDataMutation
}

// Where appends a list predicates to the ActivityExecutionDataUpdate builder.
func (aedu *ActivityExecutionDataUpdate) Where(ps ...predicate.ActivityExecutionData) *ActivityExecutionDataUpdate {
	aedu.mutation.Where(ps...)
	return aedu
}

// SetExecutionID sets the "execution_id" field.
func (aedu *ActivityExecutionDataUpdate) SetExecutionID(sei schema.ActivityExecutionID) *ActivityExecutionDataUpdate {
	aedu.mutation.SetExecutionID(sei)
	return aedu
}

// SetNillableExecutionID sets the "execution_id" field if the given value is not nil.
func (aedu *ActivityExecutionDataUpdate) SetNillableExecutionID(sei *schema.ActivityExecutionID) *ActivityExecutionDataUpdate {
	if sei != nil {
		aedu.SetExecutionID(*sei)
	}
	return aedu
}

// SetLastHeartbeat sets the "last_heartbeat" field.
func (aedu *ActivityExecutionDataUpdate) SetLastHeartbeat(t time.Time) *ActivityExecutionDataUpdate {
	aedu.mutation.SetLastHeartbeat(t)
	return aedu
}

// SetNillableLastHeartbeat sets the "last_heartbeat" field if the given value is not nil.
func (aedu *ActivityExecutionDataUpdate) SetNillableLastHeartbeat(t *time.Time) *ActivityExecutionDataUpdate {
	if t != nil {
		aedu.SetLastHeartbeat(*t)
	}
	return aedu
}

// ClearLastHeartbeat clears the value of the "last_heartbeat" field.
func (aedu *ActivityExecutionDataUpdate) ClearLastHeartbeat() *ActivityExecutionDataUpdate {
	aedu.mutation.ClearLastHeartbeat()
	return aedu
}

// SetOutputs sets the "outputs" field.
func (aedu *ActivityExecutionDataUpdate) SetOutputs(b []byte) *ActivityExecutionDataUpdate {
	aedu.mutation.SetOutputs(b)
	return aedu
}

// ClearOutputs clears the value of the "outputs" field.
func (aedu *ActivityExecutionDataUpdate) ClearOutputs() *ActivityExecutionDataUpdate {
	aedu.mutation.ClearOutputs()
	return aedu
}

// SetCreatedAt sets the "created_at" field.
func (aedu *ActivityExecutionDataUpdate) SetCreatedAt(t time.Time) *ActivityExecutionDataUpdate {
	aedu.mutation.SetCreatedAt(t)
	return aedu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (aedu *ActivityExecutionDataUpdate) SetNillableCreatedAt(t *time.Time) *ActivityExecutionDataUpdate {
	if t != nil {
		aedu.SetCreatedAt(*t)
	}
	return aedu
}

// SetUpdatedAt sets the "updated_at" field.
func (aedu *ActivityExecutionDataUpdate) SetUpdatedAt(t time.Time) *ActivityExecutionDataUpdate {
	aedu.mutation.SetUpdatedAt(t)
	return aedu
}

// SetExecution sets the "execution" edge to the ActivityExecution entity.
func (aedu *ActivityExecutionDataUpdate) SetExecution(a *ActivityExecution) *ActivityExecutionDataUpdate {
	return aedu.SetExecutionID(a.ID)
}

// Mutation returns the ActivityExecutionDataMutation object of the builder.
func (aedu *ActivityExecutionDataUpdate) Mutation() *ActivityExecutionDataMutation {
	return aedu.mutation
}

// ClearExecution clears the "execution" edge to the ActivityExecution entity.
func (aedu *ActivityExecutionDataUpdate) ClearExecution() *ActivityExecutionDataUpdate {
	aedu.mutation.ClearExecution()
	return aedu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aedu *ActivityExecutionDataUpdate) Save(ctx context.Context) (int, error) {
	aedu.defaults()
	return withHooks(ctx, aedu.sqlSave, aedu.mutation, aedu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aedu *ActivityExecutionDataUpdate) SaveX(ctx context.Context) int {
	affected, err := aedu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aedu *ActivityExecutionDataUpdate) Exec(ctx context.Context) error {
	_, err := aedu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aedu *ActivityExecutionDataUpdate) ExecX(ctx context.Context) {
	if err := aedu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aedu *ActivityExecutionDataUpdate) defaults() {
	if _, ok := aedu.mutation.UpdatedAt(); !ok {
		v := activityexecutiondata.UpdateDefaultUpdatedAt()
		aedu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aedu *ActivityExecutionDataUpdate) check() error {
	if aedu.mutation.ExecutionCleared() && len(aedu.mutation.ExecutionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ActivityExecutionData.execution"`)
	}
	return nil
}

func (aedu *ActivityExecutionDataUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := aedu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(activityexecutiondata.Table, activityexecutiondata.Columns, sqlgraph.NewFieldSpec(activityexecutiondata.FieldID, field.TypeInt))
	if ps := aedu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aedu.mutation.LastHeartbeat(); ok {
		_spec.SetField(activityexecutiondata.FieldLastHeartbeat, field.TypeTime, value)
	}
	if aedu.mutation.LastHeartbeatCleared() {
		_spec.ClearField(activityexecutiondata.FieldLastHeartbeat, field.TypeTime)
	}
	if value, ok := aedu.mutation.Outputs(); ok {
		_spec.SetField(activityexecutiondata.FieldOutputs, field.TypeBytes, value)
	}
	if aedu.mutation.OutputsCleared() {
		_spec.ClearField(activityexecutiondata.FieldOutputs, field.TypeBytes)
	}
	if value, ok := aedu.mutation.CreatedAt(); ok {
		_spec.SetField(activityexecutiondata.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := aedu.mutation.UpdatedAt(); ok {
		_spec.SetField(activityexecutiondata.FieldUpdatedAt, field.TypeTime, value)
	}
	if aedu.mutation.ExecutionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   activityexecutiondata.ExecutionTable,
			Columns: []string{activityexecutiondata.ExecutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activityexecution.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aedu.mutation.ExecutionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   activityexecutiondata.ExecutionTable,
			Columns: []string{activityexecutiondata.ExecutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activityexecution.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aedu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{activityexecutiondata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	aedu.mutation.done = true
	return n, nil
}

// ActivityExecutionDataUpdateOne is the builder for updating a single ActivityExecutionData entity.
type ActivityExecutionDataUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ActivityExecutionDataMutation
}

// SetExecutionID sets the "execution_id" field.
func (aeduo *ActivityExecutionDataUpdateOne) SetExecutionID(sei schema.ActivityExecutionID) *ActivityExecutionDataUpdateOne {
	aeduo.mutation.SetExecutionID(sei)
	return aeduo
}

// SetNillableExecutionID sets the "execution_id" field if the given value is not nil.
func (aeduo *ActivityExecutionDataUpdateOne) SetNillableExecutionID(sei *schema.ActivityExecutionID) *ActivityExecutionDataUpdateOne {
	if sei != nil {
		aeduo.SetExecutionID(*sei)
	}
	return aeduo
}

// SetLastHeartbeat sets the "last_heartbeat" field.
func (aeduo *ActivityExecutionDataUpdateOne) SetLastHeartbeat(t time.Time) *ActivityExecutionDataUpdateOne {
	aeduo.mutation.SetLastHeartbeat(t)
	return aeduo
}

// SetNillableLastHeartbeat sets the "last_heartbeat" field if the given value is not nil.
func (aeduo *ActivityExecutionDataUpdateOne) SetNillableLastHeartbeat(t *time.Time) *ActivityExecutionDataUpdateOne {
	if t != nil {
		aeduo.SetLastHeartbeat(*t)
	}
	return aeduo
}

// ClearLastHeartbeat clears the value of the "last_heartbeat" field.
func (aeduo *ActivityExecutionDataUpdateOne) ClearLastHeartbeat() *ActivityExecutionDataUpdateOne {
	aeduo.mutation.ClearLastHeartbeat()
	return aeduo
}

// SetOutputs sets the "outputs" field.
func (aeduo *ActivityExecutionDataUpdateOne) SetOutputs(b []byte) *ActivityExecutionDataUpdateOne {
	aeduo.mutation.SetOutputs(b)
	return aeduo
}

// ClearOutputs clears the value of the "outputs" field.
func (aeduo *ActivityExecutionDataUpdateOne) ClearOutputs() *ActivityExecutionDataUpdateOne {
	aeduo.mutation.ClearOutputs()
	return aeduo
}

// SetCreatedAt sets the "created_at" field.
func (aeduo *ActivityExecutionDataUpdateOne) SetCreatedAt(t time.Time) *ActivityExecutionDataUpdateOne {
	aeduo.mutation.SetCreatedAt(t)
	return aeduo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (aeduo *ActivityExecutionDataUpdateOne) SetNillableCreatedAt(t *time.Time) *ActivityExecutionDataUpdateOne {
	if t != nil {
		aeduo.SetCreatedAt(*t)
	}
	return aeduo
}

// SetUpdatedAt sets the "updated_at" field.
func (aeduo *ActivityExecutionDataUpdateOne) SetUpdatedAt(t time.Time) *ActivityExecutionDataUpdateOne {
	aeduo.mutation.SetUpdatedAt(t)
	return aeduo
}

// SetExecution sets the "execution" edge to the ActivityExecution entity.
func (aeduo *ActivityExecutionDataUpdateOne) SetExecution(a *ActivityExecution) *ActivityExecutionDataUpdateOne {
	return aeduo.SetExecutionID(a.ID)
}

// Mutation returns the ActivityExecutionDataMutation object of the builder.
func (aeduo *ActivityExecutionDataUpdateOne) Mutation() *ActivityExecutionDataMutation {
	return aeduo.mutation
}

// ClearExecution clears the "execution" edge to the ActivityExecution entity.
func (aeduo *ActivityExecutionDataUpdateOne) ClearExecution() *ActivityExecutionDataUpdateOne {
	aeduo.mutation.ClearExecution()
	return aeduo
}

// Where appends a list predicates to the ActivityExecutionDataUpdate builder.
func (aeduo *ActivityExecutionDataUpdateOne) Where(ps ...predicate.ActivityExecutionData) *ActivityExecutionDataUpdateOne {
	aeduo.mutation.Where(ps...)
	return aeduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aeduo *ActivityExecutionDataUpdateOne) Select(field string, fields ...string) *ActivityExecutionDataUpdateOne {
	aeduo.fields = append([]string{field}, fields...)
	return aeduo
}

// Save executes the query and returns the updated ActivityExecutionData entity.
func (aeduo *ActivityExecutionDataUpdateOne) Save(ctx context.Context) (*ActivityExecutionData, error) {
	aeduo.defaults()
	return withHooks(ctx, aeduo.sqlSave, aeduo.mutation, aeduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aeduo *ActivityExecutionDataUpdateOne) SaveX(ctx context.Context) *ActivityExecutionData {
	node, err := aeduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aeduo *ActivityExecutionDataUpdateOne) Exec(ctx context.Context) error {
	_, err := aeduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aeduo *ActivityExecutionDataUpdateOne) ExecX(ctx context.Context) {
	if err := aeduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aeduo *ActivityExecutionDataUpdateOne) defaults() {
	if _, ok := aeduo.mutation.UpdatedAt(); !ok {
		v := activityexecutiondata.UpdateDefaultUpdatedAt()
		aeduo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aeduo *ActivityExecutionDataUpdateOne) check() error {
	if aeduo.mutation.ExecutionCleared() && len(aeduo.mutation.ExecutionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ActivityExecutionData.execution"`)
	}
	return nil
}

func (aeduo *ActivityExecutionDataUpdateOne) sqlSave(ctx context.Context) (_node *ActivityExecutionData, err error) {
	if err := aeduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(activityexecutiondata.Table, activityexecutiondata.Columns, sqlgraph.NewFieldSpec(activityexecutiondata.FieldID, field.TypeInt))
	id, ok := aeduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ActivityExecutionData.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aeduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, activityexecutiondata.FieldID)
		for _, f := range fields {
			if !activityexecutiondata.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != activityexecutiondata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aeduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aeduo.mutation.LastHeartbeat(); ok {
		_spec.SetField(activityexecutiondata.FieldLastHeartbeat, field.TypeTime, value)
	}
	if aeduo.mutation.LastHeartbeatCleared() {
		_spec.ClearField(activityexecutiondata.FieldLastHeartbeat, field.TypeTime)
	}
	if value, ok := aeduo.mutation.Outputs(); ok {
		_spec.SetField(activityexecutiondata.FieldOutputs, field.TypeBytes, value)
	}
	if aeduo.mutation.OutputsCleared() {
		_spec.ClearField(activityexecutiondata.FieldOutputs, field.TypeBytes)
	}
	if value, ok := aeduo.mutation.CreatedAt(); ok {
		_spec.SetField(activityexecutiondata.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := aeduo.mutation.UpdatedAt(); ok {
		_spec.SetField(activityexecutiondata.FieldUpdatedAt, field.TypeTime, value)
	}
	if aeduo.mutation.ExecutionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   activityexecutiondata.ExecutionTable,
			Columns: []string{activityexecutiondata.ExecutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activityexecution.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aeduo.mutation.ExecutionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   activityexecutiondata.ExecutionTable,
			Columns: []string{activityexecutiondata.ExecutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activityexecution.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ActivityExecutionData{config: aeduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aeduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{activityexecutiondata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aeduo.mutation.done = true
	return _node, nil
}
