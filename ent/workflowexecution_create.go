// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/tempolite/ent/workflow"
	"github.com/davidroman0O/tempolite/ent/workflowexecution"
)

// WorkflowExecutionCreate is the builder for creating a WorkflowExecution entity.
type WorkflowExecutionCreate struct {
	config
	mutation *WorkflowExecutionMutation
	hooks    []Hook
}

// SetRunID sets the "run_id" field.
func (wec *WorkflowExecutionCreate) SetRunID(s string) *WorkflowExecutionCreate {
	wec.mutation.SetRunID(s)
	return wec
}

// SetStatus sets the "status" field.
func (wec *WorkflowExecutionCreate) SetStatus(w workflowexecution.Status) *WorkflowExecutionCreate {
	wec.mutation.SetStatus(w)
	return wec
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (wec *WorkflowExecutionCreate) SetNillableStatus(w *workflowexecution.Status) *WorkflowExecutionCreate {
	if w != nil {
		wec.SetStatus(*w)
	}
	return wec
}

// SetOutput sets the "output" field.
func (wec *WorkflowExecutionCreate) SetOutput(u [][]uint8) *WorkflowExecutionCreate {
	wec.mutation.SetOutput(u)
	return wec
}

// SetError sets the "error" field.
func (wec *WorkflowExecutionCreate) SetError(s string) *WorkflowExecutionCreate {
	wec.mutation.SetError(s)
	return wec
}

// SetNillableError sets the "error" field if the given value is not nil.
func (wec *WorkflowExecutionCreate) SetNillableError(s *string) *WorkflowExecutionCreate {
	if s != nil {
		wec.SetError(*s)
	}
	return wec
}

// SetIsReplay sets the "is_replay" field.
func (wec *WorkflowExecutionCreate) SetIsReplay(b bool) *WorkflowExecutionCreate {
	wec.mutation.SetIsReplay(b)
	return wec
}

// SetNillableIsReplay sets the "is_replay" field if the given value is not nil.
func (wec *WorkflowExecutionCreate) SetNillableIsReplay(b *bool) *WorkflowExecutionCreate {
	if b != nil {
		wec.SetIsReplay(*b)
	}
	return wec
}

// SetStartedAt sets the "started_at" field.
func (wec *WorkflowExecutionCreate) SetStartedAt(t time.Time) *WorkflowExecutionCreate {
	wec.mutation.SetStartedAt(t)
	return wec
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (wec *WorkflowExecutionCreate) SetNillableStartedAt(t *time.Time) *WorkflowExecutionCreate {
	if t != nil {
		wec.SetStartedAt(*t)
	}
	return wec
}

// SetUpdatedAt sets the "updated_at" field.
func (wec *WorkflowExecutionCreate) SetUpdatedAt(t time.Time) *WorkflowExecutionCreate {
	wec.mutation.SetUpdatedAt(t)
	return wec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (wec *WorkflowExecutionCreate) SetNillableUpdatedAt(t *time.Time) *WorkflowExecutionCreate {
	if t != nil {
		wec.SetUpdatedAt(*t)
	}
	return wec
}

// SetID sets the "id" field.
func (wec *WorkflowExecutionCreate) SetID(s string) *WorkflowExecutionCreate {
	wec.mutation.SetID(s)
	return wec
}

// SetWorkflowID sets the "workflow" edge to the Workflow entity by ID.
func (wec *WorkflowExecutionCreate) SetWorkflowID(id string) *WorkflowExecutionCreate {
	wec.mutation.SetWorkflowID(id)
	return wec
}

// SetWorkflow sets the "workflow" edge to the Workflow entity.
func (wec *WorkflowExecutionCreate) SetWorkflow(w *Workflow) *WorkflowExecutionCreate {
	return wec.SetWorkflowID(w.ID)
}

// Mutation returns the WorkflowExecutionMutation object of the builder.
func (wec *WorkflowExecutionCreate) Mutation() *WorkflowExecutionMutation {
	return wec.mutation
}

// Save creates the WorkflowExecution in the database.
func (wec *WorkflowExecutionCreate) Save(ctx context.Context) (*WorkflowExecution, error) {
	wec.defaults()
	return withHooks(ctx, wec.sqlSave, wec.mutation, wec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wec *WorkflowExecutionCreate) SaveX(ctx context.Context) *WorkflowExecution {
	v, err := wec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wec *WorkflowExecutionCreate) Exec(ctx context.Context) error {
	_, err := wec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wec *WorkflowExecutionCreate) ExecX(ctx context.Context) {
	if err := wec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wec *WorkflowExecutionCreate) defaults() {
	if _, ok := wec.mutation.Status(); !ok {
		v := workflowexecution.DefaultStatus
		wec.mutation.SetStatus(v)
	}
	if _, ok := wec.mutation.IsReplay(); !ok {
		v := workflowexecution.DefaultIsReplay
		wec.mutation.SetIsReplay(v)
	}
	if _, ok := wec.mutation.StartedAt(); !ok {
		v := workflowexecution.DefaultStartedAt()
		wec.mutation.SetStartedAt(v)
	}
	if _, ok := wec.mutation.UpdatedAt(); !ok {
		v := workflowexecution.DefaultUpdatedAt()
		wec.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wec *WorkflowExecutionCreate) check() error {
	if _, ok := wec.mutation.RunID(); !ok {
		return &ValidationError{Name: "run_id", err: errors.New(`ent: missing required field "WorkflowExecution.run_id"`)}
	}
	if _, ok := wec.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "WorkflowExecution.status"`)}
	}
	if v, ok := wec.mutation.Status(); ok {
		if err := workflowexecution.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "WorkflowExecution.status": %w`, err)}
		}
	}
	if _, ok := wec.mutation.IsReplay(); !ok {
		return &ValidationError{Name: "is_replay", err: errors.New(`ent: missing required field "WorkflowExecution.is_replay"`)}
	}
	if _, ok := wec.mutation.StartedAt(); !ok {
		return &ValidationError{Name: "started_at", err: errors.New(`ent: missing required field "WorkflowExecution.started_at"`)}
	}
	if _, ok := wec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "WorkflowExecution.updated_at"`)}
	}
	if len(wec.mutation.WorkflowIDs()) == 0 {
		return &ValidationError{Name: "workflow", err: errors.New(`ent: missing required edge "WorkflowExecution.workflow"`)}
	}
	return nil
}

func (wec *WorkflowExecutionCreate) sqlSave(ctx context.Context) (*WorkflowExecution, error) {
	if err := wec.check(); err != nil {
		return nil, err
	}
	_node, _spec := wec.createSpec()
	if err := sqlgraph.CreateNode(ctx, wec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected WorkflowExecution.ID type: %T", _spec.ID.Value)
		}
	}
	wec.mutation.id = &_node.ID
	wec.mutation.done = true
	return _node, nil
}

func (wec *WorkflowExecutionCreate) createSpec() (*WorkflowExecution, *sqlgraph.CreateSpec) {
	var (
		_node = &WorkflowExecution{config: wec.config}
		_spec = sqlgraph.NewCreateSpec(workflowexecution.Table, sqlgraph.NewFieldSpec(workflowexecution.FieldID, field.TypeString))
	)
	if id, ok := wec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := wec.mutation.RunID(); ok {
		_spec.SetField(workflowexecution.FieldRunID, field.TypeString, value)
		_node.RunID = value
	}
	if value, ok := wec.mutation.Status(); ok {
		_spec.SetField(workflowexecution.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := wec.mutation.Output(); ok {
		_spec.SetField(workflowexecution.FieldOutput, field.TypeJSON, value)
		_node.Output = value
	}
	if value, ok := wec.mutation.Error(); ok {
		_spec.SetField(workflowexecution.FieldError, field.TypeString, value)
		_node.Error = value
	}
	if value, ok := wec.mutation.IsReplay(); ok {
		_spec.SetField(workflowexecution.FieldIsReplay, field.TypeBool, value)
		_node.IsReplay = value
	}
	if value, ok := wec.mutation.StartedAt(); ok {
		_spec.SetField(workflowexecution.FieldStartedAt, field.TypeTime, value)
		_node.StartedAt = value
	}
	if value, ok := wec.mutation.UpdatedAt(); ok {
		_spec.SetField(workflowexecution.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := wec.mutation.WorkflowIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowexecution.WorkflowTable,
			Columns: []string{workflowexecution.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflow.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.workflow_executions = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// WorkflowExecutionCreateBulk is the builder for creating many WorkflowExecution entities in bulk.
type WorkflowExecutionCreateBulk struct {
	config
	err      error
	builders []*WorkflowExecutionCreate
}

// Save creates the WorkflowExecution entities in the database.
func (wecb *WorkflowExecutionCreateBulk) Save(ctx context.Context) ([]*WorkflowExecution, error) {
	if wecb.err != nil {
		return nil, wecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(wecb.builders))
	nodes := make([]*WorkflowExecution, len(wecb.builders))
	mutators := make([]Mutator, len(wecb.builders))
	for i := range wecb.builders {
		func(i int, root context.Context) {
			builder := wecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WorkflowExecutionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wecb *WorkflowExecutionCreateBulk) SaveX(ctx context.Context) []*WorkflowExecution {
	v, err := wecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wecb *WorkflowExecutionCreateBulk) Exec(ctx context.Context) error {
	_, err := wecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wecb *WorkflowExecutionCreateBulk) ExecX(ctx context.Context) {
	if err := wecb.Exec(ctx); err != nil {
		panic(err)
	}
}
