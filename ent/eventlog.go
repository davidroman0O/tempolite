// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/davidroman0O/tempolite/ent/eventlog"
	"github.com/davidroman0O/tempolite/ent/run"
	"github.com/davidroman0O/tempolite/ent/schema"
	"github.com/davidroman0O/tempolite/ent/workflowentity"
	"github.com/davidroman0O/tempolite/ent/workflowexecution"
)

// EventLog is the model entity for the EventLog schema.
type EventLog struct {
	config `json:"-"`
	// ID of the ent.
	ID schema.EventLogID `json:"id,omitempty"`
	// Timestamp holds the value of the "timestamp" field.
	Timestamp time.Time `json:"timestamp,omitempty"`
	// EventType holds the value of the "event_type" field.
	EventType schema.EventType `json:"event_type,omitempty"`
	// RunID holds the value of the "run_id" field.
	RunID schema.RunID `json:"run_id,omitempty"`
	// WorkflowID holds the value of the "workflow_id" field.
	WorkflowID schema.WorkflowEntityID `json:"workflow_id,omitempty"`
	// WorkflowExecutionID holds the value of the "workflow_execution_id" field.
	WorkflowExecutionID schema.WorkflowExecutionID `json:"workflow_execution_id,omitempty"`
	// EntityID holds the value of the "entity_id" field.
	EntityID int `json:"entity_id,omitempty"`
	// ExecutionID holds the value of the "execution_id" field.
	ExecutionID int `json:"execution_id,omitempty"`
	// EntityType holds the value of the "entity_type" field.
	EntityType schema.EntityType `json:"entity_type,omitempty"`
	// StepID holds the value of the "step_id" field.
	StepID string `json:"step_id,omitempty"`
	// HandlerName holds the value of the "handler_name" field.
	HandlerName string `json:"handler_name,omitempty"`
	// QueueName holds the value of the "queue_name" field.
	QueueName string `json:"queue_name,omitempty"`
	// PreviousState holds the value of the "previous_state" field.
	PreviousState map[string]interface{} `json:"previous_state,omitempty"`
	// NewState holds the value of the "new_state" field.
	NewState map[string]interface{} `json:"new_state,omitempty"`
	// Error holds the value of the "error" field.
	Error string `json:"error,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EventLogQuery when eager-loading is set.
	Edges        EventLogEdges `json:"edges"`
	selectValues sql.SelectValues
}

// EventLogEdges holds the relations/edges for other nodes in the graph.
type EventLogEdges struct {
	// Run holds the value of the run edge.
	Run *Run `json:"run,omitempty"`
	// Workflow holds the value of the workflow edge.
	Workflow *WorkflowEntity `json:"workflow,omitempty"`
	// WorkflowExecution holds the value of the workflow_execution edge.
	WorkflowExecution *WorkflowExecution `json:"workflow_execution,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// RunOrErr returns the Run value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventLogEdges) RunOrErr() (*Run, error) {
	if e.Run != nil {
		return e.Run, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: run.Label}
	}
	return nil, &NotLoadedError{edge: "run"}
}

// WorkflowOrErr returns the Workflow value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventLogEdges) WorkflowOrErr() (*WorkflowEntity, error) {
	if e.Workflow != nil {
		return e.Workflow, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: workflowentity.Label}
	}
	return nil, &NotLoadedError{edge: "workflow"}
}

// WorkflowExecutionOrErr returns the WorkflowExecution value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventLogEdges) WorkflowExecutionOrErr() (*WorkflowExecution, error) {
	if e.WorkflowExecution != nil {
		return e.WorkflowExecution, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: workflowexecution.Label}
	}
	return nil, &NotLoadedError{edge: "workflow_execution"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EventLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case eventlog.FieldPreviousState, eventlog.FieldNewState:
			values[i] = new([]byte)
		case eventlog.FieldID, eventlog.FieldRunID, eventlog.FieldWorkflowID, eventlog.FieldWorkflowExecutionID, eventlog.FieldEntityID, eventlog.FieldExecutionID:
			values[i] = new(sql.NullInt64)
		case eventlog.FieldEventType, eventlog.FieldEntityType, eventlog.FieldStepID, eventlog.FieldHandlerName, eventlog.FieldQueueName, eventlog.FieldError:
			values[i] = new(sql.NullString)
		case eventlog.FieldTimestamp, eventlog.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EventLog fields.
func (el *EventLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case eventlog.FieldID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				el.ID = schema.EventLogID(value.Int64)
			}
		case eventlog.FieldTimestamp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field timestamp", values[i])
			} else if value.Valid {
				el.Timestamp = value.Time
			}
		case eventlog.FieldEventType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field event_type", values[i])
			} else if value.Valid {
				el.EventType = schema.EventType(value.String)
			}
		case eventlog.FieldRunID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field run_id", values[i])
			} else if value.Valid {
				el.RunID = schema.RunID(value.Int64)
			}
		case eventlog.FieldWorkflowID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field workflow_id", values[i])
			} else if value.Valid {
				el.WorkflowID = schema.WorkflowEntityID(value.Int64)
			}
		case eventlog.FieldWorkflowExecutionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field workflow_execution_id", values[i])
			} else if value.Valid {
				el.WorkflowExecutionID = schema.WorkflowExecutionID(value.Int64)
			}
		case eventlog.FieldEntityID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field entity_id", values[i])
			} else if value.Valid {
				el.EntityID = int(value.Int64)
			}
		case eventlog.FieldExecutionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field execution_id", values[i])
			} else if value.Valid {
				el.ExecutionID = int(value.Int64)
			}
		case eventlog.FieldEntityType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field entity_type", values[i])
			} else if value.Valid {
				el.EntityType = schema.EntityType(value.String)
			}
		case eventlog.FieldStepID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field step_id", values[i])
			} else if value.Valid {
				el.StepID = value.String
			}
		case eventlog.FieldHandlerName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field handler_name", values[i])
			} else if value.Valid {
				el.HandlerName = value.String
			}
		case eventlog.FieldQueueName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field queue_name", values[i])
			} else if value.Valid {
				el.QueueName = value.String
			}
		case eventlog.FieldPreviousState:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field previous_state", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &el.PreviousState); err != nil {
					return fmt.Errorf("unmarshal field previous_state: %w", err)
				}
			}
		case eventlog.FieldNewState:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field new_state", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &el.NewState); err != nil {
					return fmt.Errorf("unmarshal field new_state: %w", err)
				}
			}
		case eventlog.FieldError:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field error", values[i])
			} else if value.Valid {
				el.Error = value.String
			}
		case eventlog.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				el.CreatedAt = value.Time
			}
		default:
			el.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EventLog.
// This includes values selected through modifiers, order, etc.
func (el *EventLog) Value(name string) (ent.Value, error) {
	return el.selectValues.Get(name)
}

// QueryRun queries the "run" edge of the EventLog entity.
func (el *EventLog) QueryRun() *RunQuery {
	return NewEventLogClient(el.config).QueryRun(el)
}

// QueryWorkflow queries the "workflow" edge of the EventLog entity.
func (el *EventLog) QueryWorkflow() *WorkflowEntityQuery {
	return NewEventLogClient(el.config).QueryWorkflow(el)
}

// QueryWorkflowExecution queries the "workflow_execution" edge of the EventLog entity.
func (el *EventLog) QueryWorkflowExecution() *WorkflowExecutionQuery {
	return NewEventLogClient(el.config).QueryWorkflowExecution(el)
}

// Update returns a builder for updating this EventLog.
// Note that you need to call EventLog.Unwrap() before calling this method if this EventLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (el *EventLog) Update() *EventLogUpdateOne {
	return NewEventLogClient(el.config).UpdateOne(el)
}

// Unwrap unwraps the EventLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (el *EventLog) Unwrap() *EventLog {
	_tx, ok := el.config.driver.(*txDriver)
	if !ok {
		panic("ent: EventLog is not a transactional entity")
	}
	el.config.driver = _tx.drv
	return el
}

// String implements the fmt.Stringer.
func (el *EventLog) String() string {
	var builder strings.Builder
	builder.WriteString("EventLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", el.ID))
	builder.WriteString("timestamp=")
	builder.WriteString(el.Timestamp.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("event_type=")
	builder.WriteString(fmt.Sprintf("%v", el.EventType))
	builder.WriteString(", ")
	builder.WriteString("run_id=")
	builder.WriteString(fmt.Sprintf("%v", el.RunID))
	builder.WriteString(", ")
	builder.WriteString("workflow_id=")
	builder.WriteString(fmt.Sprintf("%v", el.WorkflowID))
	builder.WriteString(", ")
	builder.WriteString("workflow_execution_id=")
	builder.WriteString(fmt.Sprintf("%v", el.WorkflowExecutionID))
	builder.WriteString(", ")
	builder.WriteString("entity_id=")
	builder.WriteString(fmt.Sprintf("%v", el.EntityID))
	builder.WriteString(", ")
	builder.WriteString("execution_id=")
	builder.WriteString(fmt.Sprintf("%v", el.ExecutionID))
	builder.WriteString(", ")
	builder.WriteString("entity_type=")
	builder.WriteString(fmt.Sprintf("%v", el.EntityType))
	builder.WriteString(", ")
	builder.WriteString("step_id=")
	builder.WriteString(el.StepID)
	builder.WriteString(", ")
	builder.WriteString("handler_name=")
	builder.WriteString(el.HandlerName)
	builder.WriteString(", ")
	builder.WriteString("queue_name=")
	builder.WriteString(el.QueueName)
	builder.WriteString(", ")
	builder.WriteString("previous_state=")
	builder.WriteString(fmt.Sprintf("%v", el.PreviousState))
	builder.WriteString(", ")
	builder.WriteString("new_state=")
	builder.WriteString(fmt.Sprintf("%v", el.NewState))
	builder.WriteString(", ")
	builder.WriteString("error=")
	builder.WriteString(el.Error)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(el.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// EventLogs is a parsable slice of EventLog.
type EventLogs []*EventLog
