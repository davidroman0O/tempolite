// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/tempolite/ent/predicate"
	"github.com/davidroman0O/tempolite/ent/workflowexecutiondata"
)

// WorkflowExecutionDataDelete is the builder for deleting a WorkflowExecutionData entity.
type WorkflowExecutionDataDelete struct {
	config
	hooks    []Hook
	mutation *WorkflowExecutionDataMutation
}

// Where appends a list predicates to the WorkflowExecutionDataDelete builder.
func (wedd *WorkflowExecutionDataDelete) Where(ps ...predicate.WorkflowExecutionData) *WorkflowExecutionDataDelete {
	wedd.mutation.Where(ps...)
	return wedd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (wedd *WorkflowExecutionDataDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, wedd.sqlExec, wedd.mutation, wedd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (wedd *WorkflowExecutionDataDelete) ExecX(ctx context.Context) int {
	n, err := wedd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (wedd *WorkflowExecutionDataDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(workflowexecutiondata.Table, sqlgraph.NewFieldSpec(workflowexecutiondata.FieldID, field.TypeInt))
	if ps := wedd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, wedd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	wedd.mutation.done = true
	return affected, err
}

// WorkflowExecutionDataDeleteOne is the builder for deleting a single WorkflowExecutionData entity.
type WorkflowExecutionDataDeleteOne struct {
	wedd *WorkflowExecutionDataDelete
}

// Where appends a list predicates to the WorkflowExecutionDataDelete builder.
func (weddo *WorkflowExecutionDataDeleteOne) Where(ps ...predicate.WorkflowExecutionData) *WorkflowExecutionDataDeleteOne {
	weddo.wedd.mutation.Where(ps...)
	return weddo
}

// Exec executes the deletion query.
func (weddo *WorkflowExecutionDataDeleteOne) Exec(ctx context.Context) error {
	n, err := weddo.wedd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{workflowexecutiondata.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (weddo *WorkflowExecutionDataDeleteOne) ExecX(ctx context.Context) {
	if err := weddo.Exec(ctx); err != nil {
		panic(err)
	}
}
