// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/tempolite/ent/activitydata"
	"github.com/davidroman0O/tempolite/ent/activityentity"
	"github.com/davidroman0O/tempolite/ent/activityexecution"
	"github.com/davidroman0O/tempolite/ent/predicate"
	"github.com/davidroman0O/tempolite/ent/schema"
	"github.com/davidroman0O/tempolite/ent/workflowentity"
)

// ActivityEntityUpdate is the builder for updating ActivityEntity entities.
type ActivityEntityUpdate struct {
	config
	hooks    []Hook
	mutation *ActivityEntityMutation
}

// Where appends a list predicates to the ActivityEntityUpdate builder.
func (aeu *ActivityEntityUpdate) Where(ps ...predicate.ActivityEntity) *ActivityEntityUpdate {
	aeu.mutation.Where(ps...)
	return aeu
}

// SetHandlerName sets the "handler_name" field.
func (aeu *ActivityEntityUpdate) SetHandlerName(s string) *ActivityEntityUpdate {
	aeu.mutation.SetHandlerName(s)
	return aeu
}

// SetNillableHandlerName sets the "handler_name" field if the given value is not nil.
func (aeu *ActivityEntityUpdate) SetNillableHandlerName(s *string) *ActivityEntityUpdate {
	if s != nil {
		aeu.SetHandlerName(*s)
	}
	return aeu
}

// SetType sets the "type" field.
func (aeu *ActivityEntityUpdate) SetType(st schema.EntityType) *ActivityEntityUpdate {
	aeu.mutation.SetType(st)
	return aeu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (aeu *ActivityEntityUpdate) SetNillableType(st *schema.EntityType) *ActivityEntityUpdate {
	if st != nil {
		aeu.SetType(*st)
	}
	return aeu
}

// SetStatus sets the "status" field.
func (aeu *ActivityEntityUpdate) SetStatus(ss schema.EntityStatus) *ActivityEntityUpdate {
	aeu.mutation.SetStatus(ss)
	return aeu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (aeu *ActivityEntityUpdate) SetNillableStatus(ss *schema.EntityStatus) *ActivityEntityUpdate {
	if ss != nil {
		aeu.SetStatus(*ss)
	}
	return aeu
}

// SetStepID sets the "step_id" field.
func (aeu *ActivityEntityUpdate) SetStepID(ssi schema.ActivityStepID) *ActivityEntityUpdate {
	aeu.mutation.SetStepID(ssi)
	return aeu
}

// SetNillableStepID sets the "step_id" field if the given value is not nil.
func (aeu *ActivityEntityUpdate) SetNillableStepID(ssi *schema.ActivityStepID) *ActivityEntityUpdate {
	if ssi != nil {
		aeu.SetStepID(*ssi)
	}
	return aeu
}

// SetRunID sets the "run_id" field.
func (aeu *ActivityEntityUpdate) SetRunID(si schema.RunID) *ActivityEntityUpdate {
	aeu.mutation.ResetRunID()
	aeu.mutation.SetRunID(si)
	return aeu
}

// SetNillableRunID sets the "run_id" field if the given value is not nil.
func (aeu *ActivityEntityUpdate) SetNillableRunID(si *schema.RunID) *ActivityEntityUpdate {
	if si != nil {
		aeu.SetRunID(*si)
	}
	return aeu
}

// AddRunID adds si to the "run_id" field.
func (aeu *ActivityEntityUpdate) AddRunID(si schema.RunID) *ActivityEntityUpdate {
	aeu.mutation.AddRunID(si)
	return aeu
}

// SetRetryPolicy sets the "retry_policy" field.
func (aeu *ActivityEntityUpdate) SetRetryPolicy(sp schema.RetryPolicy) *ActivityEntityUpdate {
	aeu.mutation.SetRetryPolicy(sp)
	return aeu
}

// SetNillableRetryPolicy sets the "retry_policy" field if the given value is not nil.
func (aeu *ActivityEntityUpdate) SetNillableRetryPolicy(sp *schema.RetryPolicy) *ActivityEntityUpdate {
	if sp != nil {
		aeu.SetRetryPolicy(*sp)
	}
	return aeu
}

// SetRetryState sets the "retry_state" field.
func (aeu *ActivityEntityUpdate) SetRetryState(ss schema.RetryState) *ActivityEntityUpdate {
	aeu.mutation.SetRetryState(ss)
	return aeu
}

// SetNillableRetryState sets the "retry_state" field if the given value is not nil.
func (aeu *ActivityEntityUpdate) SetNillableRetryState(ss *schema.RetryState) *ActivityEntityUpdate {
	if ss != nil {
		aeu.SetRetryState(*ss)
	}
	return aeu
}

// SetCreatedAt sets the "created_at" field.
func (aeu *ActivityEntityUpdate) SetCreatedAt(t time.Time) *ActivityEntityUpdate {
	aeu.mutation.SetCreatedAt(t)
	return aeu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (aeu *ActivityEntityUpdate) SetNillableCreatedAt(t *time.Time) *ActivityEntityUpdate {
	if t != nil {
		aeu.SetCreatedAt(*t)
	}
	return aeu
}

// SetUpdatedAt sets the "updated_at" field.
func (aeu *ActivityEntityUpdate) SetUpdatedAt(t time.Time) *ActivityEntityUpdate {
	aeu.mutation.SetUpdatedAt(t)
	return aeu
}

// SetWorkflowID sets the "workflow" edge to the WorkflowEntity entity by ID.
func (aeu *ActivityEntityUpdate) SetWorkflowID(id schema.WorkflowEntityID) *ActivityEntityUpdate {
	aeu.mutation.SetWorkflowID(id)
	return aeu
}

// SetWorkflow sets the "workflow" edge to the WorkflowEntity entity.
func (aeu *ActivityEntityUpdate) SetWorkflow(w *WorkflowEntity) *ActivityEntityUpdate {
	return aeu.SetWorkflowID(w.ID)
}

// SetActivityDataID sets the "activity_data" edge to the ActivityData entity by ID.
func (aeu *ActivityEntityUpdate) SetActivityDataID(id schema.ActivityDataID) *ActivityEntityUpdate {
	aeu.mutation.SetActivityDataID(id)
	return aeu
}

// SetNillableActivityDataID sets the "activity_data" edge to the ActivityData entity by ID if the given value is not nil.
func (aeu *ActivityEntityUpdate) SetNillableActivityDataID(id *schema.ActivityDataID) *ActivityEntityUpdate {
	if id != nil {
		aeu = aeu.SetActivityDataID(*id)
	}
	return aeu
}

// SetActivityData sets the "activity_data" edge to the ActivityData entity.
func (aeu *ActivityEntityUpdate) SetActivityData(a *ActivityData) *ActivityEntityUpdate {
	return aeu.SetActivityDataID(a.ID)
}

// AddExecutionIDs adds the "executions" edge to the ActivityExecution entity by IDs.
func (aeu *ActivityEntityUpdate) AddExecutionIDs(ids ...schema.ActivityExecutionID) *ActivityEntityUpdate {
	aeu.mutation.AddExecutionIDs(ids...)
	return aeu
}

// AddExecutions adds the "executions" edges to the ActivityExecution entity.
func (aeu *ActivityEntityUpdate) AddExecutions(a ...*ActivityExecution) *ActivityEntityUpdate {
	ids := make([]schema.ActivityExecutionID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aeu.AddExecutionIDs(ids...)
}

// Mutation returns the ActivityEntityMutation object of the builder.
func (aeu *ActivityEntityUpdate) Mutation() *ActivityEntityMutation {
	return aeu.mutation
}

// ClearWorkflow clears the "workflow" edge to the WorkflowEntity entity.
func (aeu *ActivityEntityUpdate) ClearWorkflow() *ActivityEntityUpdate {
	aeu.mutation.ClearWorkflow()
	return aeu
}

// ClearActivityData clears the "activity_data" edge to the ActivityData entity.
func (aeu *ActivityEntityUpdate) ClearActivityData() *ActivityEntityUpdate {
	aeu.mutation.ClearActivityData()
	return aeu
}

// ClearExecutions clears all "executions" edges to the ActivityExecution entity.
func (aeu *ActivityEntityUpdate) ClearExecutions() *ActivityEntityUpdate {
	aeu.mutation.ClearExecutions()
	return aeu
}

// RemoveExecutionIDs removes the "executions" edge to ActivityExecution entities by IDs.
func (aeu *ActivityEntityUpdate) RemoveExecutionIDs(ids ...schema.ActivityExecutionID) *ActivityEntityUpdate {
	aeu.mutation.RemoveExecutionIDs(ids...)
	return aeu
}

// RemoveExecutions removes "executions" edges to ActivityExecution entities.
func (aeu *ActivityEntityUpdate) RemoveExecutions(a ...*ActivityExecution) *ActivityEntityUpdate {
	ids := make([]schema.ActivityExecutionID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aeu.RemoveExecutionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aeu *ActivityEntityUpdate) Save(ctx context.Context) (int, error) {
	aeu.defaults()
	return withHooks(ctx, aeu.sqlSave, aeu.mutation, aeu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aeu *ActivityEntityUpdate) SaveX(ctx context.Context) int {
	affected, err := aeu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aeu *ActivityEntityUpdate) Exec(ctx context.Context) error {
	_, err := aeu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aeu *ActivityEntityUpdate) ExecX(ctx context.Context) {
	if err := aeu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aeu *ActivityEntityUpdate) defaults() {
	if _, ok := aeu.mutation.UpdatedAt(); !ok {
		v := activityentity.UpdateDefaultUpdatedAt()
		aeu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aeu *ActivityEntityUpdate) check() error {
	if aeu.mutation.WorkflowCleared() && len(aeu.mutation.WorkflowIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ActivityEntity.workflow"`)
	}
	return nil
}

func (aeu *ActivityEntityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := aeu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(activityentity.Table, activityentity.Columns, sqlgraph.NewFieldSpec(activityentity.FieldID, field.TypeInt))
	if ps := aeu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aeu.mutation.HandlerName(); ok {
		_spec.SetField(activityentity.FieldHandlerName, field.TypeString, value)
	}
	if value, ok := aeu.mutation.GetType(); ok {
		_spec.SetField(activityentity.FieldType, field.TypeString, value)
	}
	if value, ok := aeu.mutation.Status(); ok {
		_spec.SetField(activityentity.FieldStatus, field.TypeString, value)
	}
	if value, ok := aeu.mutation.StepID(); ok {
		_spec.SetField(activityentity.FieldStepID, field.TypeString, value)
	}
	if value, ok := aeu.mutation.RunID(); ok {
		_spec.SetField(activityentity.FieldRunID, field.TypeInt, value)
	}
	if value, ok := aeu.mutation.AddedRunID(); ok {
		_spec.AddField(activityentity.FieldRunID, field.TypeInt, value)
	}
	if value, ok := aeu.mutation.RetryPolicy(); ok {
		_spec.SetField(activityentity.FieldRetryPolicy, field.TypeJSON, value)
	}
	if value, ok := aeu.mutation.RetryState(); ok {
		_spec.SetField(activityentity.FieldRetryState, field.TypeJSON, value)
	}
	if value, ok := aeu.mutation.CreatedAt(); ok {
		_spec.SetField(activityentity.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := aeu.mutation.UpdatedAt(); ok {
		_spec.SetField(activityentity.FieldUpdatedAt, field.TypeTime, value)
	}
	if aeu.mutation.WorkflowCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activityentity.WorkflowTable,
			Columns: []string{activityentity.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowentity.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aeu.mutation.WorkflowIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activityentity.WorkflowTable,
			Columns: []string{activityentity.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowentity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aeu.mutation.ActivityDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   activityentity.ActivityDataTable,
			Columns: []string{activityentity.ActivityDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activitydata.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aeu.mutation.ActivityDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   activityentity.ActivityDataTable,
			Columns: []string{activityentity.ActivityDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activitydata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aeu.mutation.ExecutionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activityentity.ExecutionsTable,
			Columns: []string{activityentity.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activityexecution.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aeu.mutation.RemovedExecutionsIDs(); len(nodes) > 0 && !aeu.mutation.ExecutionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activityentity.ExecutionsTable,
			Columns: []string{activityentity.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activityexecution.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aeu.mutation.ExecutionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activityentity.ExecutionsTable,
			Columns: []string{activityentity.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activityexecution.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aeu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{activityentity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	aeu.mutation.done = true
	return n, nil
}

// ActivityEntityUpdateOne is the builder for updating a single ActivityEntity entity.
type ActivityEntityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ActivityEntityMutation
}

// SetHandlerName sets the "handler_name" field.
func (aeuo *ActivityEntityUpdateOne) SetHandlerName(s string) *ActivityEntityUpdateOne {
	aeuo.mutation.SetHandlerName(s)
	return aeuo
}

// SetNillableHandlerName sets the "handler_name" field if the given value is not nil.
func (aeuo *ActivityEntityUpdateOne) SetNillableHandlerName(s *string) *ActivityEntityUpdateOne {
	if s != nil {
		aeuo.SetHandlerName(*s)
	}
	return aeuo
}

// SetType sets the "type" field.
func (aeuo *ActivityEntityUpdateOne) SetType(st schema.EntityType) *ActivityEntityUpdateOne {
	aeuo.mutation.SetType(st)
	return aeuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (aeuo *ActivityEntityUpdateOne) SetNillableType(st *schema.EntityType) *ActivityEntityUpdateOne {
	if st != nil {
		aeuo.SetType(*st)
	}
	return aeuo
}

// SetStatus sets the "status" field.
func (aeuo *ActivityEntityUpdateOne) SetStatus(ss schema.EntityStatus) *ActivityEntityUpdateOne {
	aeuo.mutation.SetStatus(ss)
	return aeuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (aeuo *ActivityEntityUpdateOne) SetNillableStatus(ss *schema.EntityStatus) *ActivityEntityUpdateOne {
	if ss != nil {
		aeuo.SetStatus(*ss)
	}
	return aeuo
}

// SetStepID sets the "step_id" field.
func (aeuo *ActivityEntityUpdateOne) SetStepID(ssi schema.ActivityStepID) *ActivityEntityUpdateOne {
	aeuo.mutation.SetStepID(ssi)
	return aeuo
}

// SetNillableStepID sets the "step_id" field if the given value is not nil.
func (aeuo *ActivityEntityUpdateOne) SetNillableStepID(ssi *schema.ActivityStepID) *ActivityEntityUpdateOne {
	if ssi != nil {
		aeuo.SetStepID(*ssi)
	}
	return aeuo
}

// SetRunID sets the "run_id" field.
func (aeuo *ActivityEntityUpdateOne) SetRunID(si schema.RunID) *ActivityEntityUpdateOne {
	aeuo.mutation.ResetRunID()
	aeuo.mutation.SetRunID(si)
	return aeuo
}

// SetNillableRunID sets the "run_id" field if the given value is not nil.
func (aeuo *ActivityEntityUpdateOne) SetNillableRunID(si *schema.RunID) *ActivityEntityUpdateOne {
	if si != nil {
		aeuo.SetRunID(*si)
	}
	return aeuo
}

// AddRunID adds si to the "run_id" field.
func (aeuo *ActivityEntityUpdateOne) AddRunID(si schema.RunID) *ActivityEntityUpdateOne {
	aeuo.mutation.AddRunID(si)
	return aeuo
}

// SetRetryPolicy sets the "retry_policy" field.
func (aeuo *ActivityEntityUpdateOne) SetRetryPolicy(sp schema.RetryPolicy) *ActivityEntityUpdateOne {
	aeuo.mutation.SetRetryPolicy(sp)
	return aeuo
}

// SetNillableRetryPolicy sets the "retry_policy" field if the given value is not nil.
func (aeuo *ActivityEntityUpdateOne) SetNillableRetryPolicy(sp *schema.RetryPolicy) *ActivityEntityUpdateOne {
	if sp != nil {
		aeuo.SetRetryPolicy(*sp)
	}
	return aeuo
}

// SetRetryState sets the "retry_state" field.
func (aeuo *ActivityEntityUpdateOne) SetRetryState(ss schema.RetryState) *ActivityEntityUpdateOne {
	aeuo.mutation.SetRetryState(ss)
	return aeuo
}

// SetNillableRetryState sets the "retry_state" field if the given value is not nil.
func (aeuo *ActivityEntityUpdateOne) SetNillableRetryState(ss *schema.RetryState) *ActivityEntityUpdateOne {
	if ss != nil {
		aeuo.SetRetryState(*ss)
	}
	return aeuo
}

// SetCreatedAt sets the "created_at" field.
func (aeuo *ActivityEntityUpdateOne) SetCreatedAt(t time.Time) *ActivityEntityUpdateOne {
	aeuo.mutation.SetCreatedAt(t)
	return aeuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (aeuo *ActivityEntityUpdateOne) SetNillableCreatedAt(t *time.Time) *ActivityEntityUpdateOne {
	if t != nil {
		aeuo.SetCreatedAt(*t)
	}
	return aeuo
}

// SetUpdatedAt sets the "updated_at" field.
func (aeuo *ActivityEntityUpdateOne) SetUpdatedAt(t time.Time) *ActivityEntityUpdateOne {
	aeuo.mutation.SetUpdatedAt(t)
	return aeuo
}

// SetWorkflowID sets the "workflow" edge to the WorkflowEntity entity by ID.
func (aeuo *ActivityEntityUpdateOne) SetWorkflowID(id schema.WorkflowEntityID) *ActivityEntityUpdateOne {
	aeuo.mutation.SetWorkflowID(id)
	return aeuo
}

// SetWorkflow sets the "workflow" edge to the WorkflowEntity entity.
func (aeuo *ActivityEntityUpdateOne) SetWorkflow(w *WorkflowEntity) *ActivityEntityUpdateOne {
	return aeuo.SetWorkflowID(w.ID)
}

// SetActivityDataID sets the "activity_data" edge to the ActivityData entity by ID.
func (aeuo *ActivityEntityUpdateOne) SetActivityDataID(id schema.ActivityDataID) *ActivityEntityUpdateOne {
	aeuo.mutation.SetActivityDataID(id)
	return aeuo
}

// SetNillableActivityDataID sets the "activity_data" edge to the ActivityData entity by ID if the given value is not nil.
func (aeuo *ActivityEntityUpdateOne) SetNillableActivityDataID(id *schema.ActivityDataID) *ActivityEntityUpdateOne {
	if id != nil {
		aeuo = aeuo.SetActivityDataID(*id)
	}
	return aeuo
}

// SetActivityData sets the "activity_data" edge to the ActivityData entity.
func (aeuo *ActivityEntityUpdateOne) SetActivityData(a *ActivityData) *ActivityEntityUpdateOne {
	return aeuo.SetActivityDataID(a.ID)
}

// AddExecutionIDs adds the "executions" edge to the ActivityExecution entity by IDs.
func (aeuo *ActivityEntityUpdateOne) AddExecutionIDs(ids ...schema.ActivityExecutionID) *ActivityEntityUpdateOne {
	aeuo.mutation.AddExecutionIDs(ids...)
	return aeuo
}

// AddExecutions adds the "executions" edges to the ActivityExecution entity.
func (aeuo *ActivityEntityUpdateOne) AddExecutions(a ...*ActivityExecution) *ActivityEntityUpdateOne {
	ids := make([]schema.ActivityExecutionID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aeuo.AddExecutionIDs(ids...)
}

// Mutation returns the ActivityEntityMutation object of the builder.
func (aeuo *ActivityEntityUpdateOne) Mutation() *ActivityEntityMutation {
	return aeuo.mutation
}

// ClearWorkflow clears the "workflow" edge to the WorkflowEntity entity.
func (aeuo *ActivityEntityUpdateOne) ClearWorkflow() *ActivityEntityUpdateOne {
	aeuo.mutation.ClearWorkflow()
	return aeuo
}

// ClearActivityData clears the "activity_data" edge to the ActivityData entity.
func (aeuo *ActivityEntityUpdateOne) ClearActivityData() *ActivityEntityUpdateOne {
	aeuo.mutation.ClearActivityData()
	return aeuo
}

// ClearExecutions clears all "executions" edges to the ActivityExecution entity.
func (aeuo *ActivityEntityUpdateOne) ClearExecutions() *ActivityEntityUpdateOne {
	aeuo.mutation.ClearExecutions()
	return aeuo
}

// RemoveExecutionIDs removes the "executions" edge to ActivityExecution entities by IDs.
func (aeuo *ActivityEntityUpdateOne) RemoveExecutionIDs(ids ...schema.ActivityExecutionID) *ActivityEntityUpdateOne {
	aeuo.mutation.RemoveExecutionIDs(ids...)
	return aeuo
}

// RemoveExecutions removes "executions" edges to ActivityExecution entities.
func (aeuo *ActivityEntityUpdateOne) RemoveExecutions(a ...*ActivityExecution) *ActivityEntityUpdateOne {
	ids := make([]schema.ActivityExecutionID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aeuo.RemoveExecutionIDs(ids...)
}

// Where appends a list predicates to the ActivityEntityUpdate builder.
func (aeuo *ActivityEntityUpdateOne) Where(ps ...predicate.ActivityEntity) *ActivityEntityUpdateOne {
	aeuo.mutation.Where(ps...)
	return aeuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aeuo *ActivityEntityUpdateOne) Select(field string, fields ...string) *ActivityEntityUpdateOne {
	aeuo.fields = append([]string{field}, fields...)
	return aeuo
}

// Save executes the query and returns the updated ActivityEntity entity.
func (aeuo *ActivityEntityUpdateOne) Save(ctx context.Context) (*ActivityEntity, error) {
	aeuo.defaults()
	return withHooks(ctx, aeuo.sqlSave, aeuo.mutation, aeuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aeuo *ActivityEntityUpdateOne) SaveX(ctx context.Context) *ActivityEntity {
	node, err := aeuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aeuo *ActivityEntityUpdateOne) Exec(ctx context.Context) error {
	_, err := aeuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aeuo *ActivityEntityUpdateOne) ExecX(ctx context.Context) {
	if err := aeuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aeuo *ActivityEntityUpdateOne) defaults() {
	if _, ok := aeuo.mutation.UpdatedAt(); !ok {
		v := activityentity.UpdateDefaultUpdatedAt()
		aeuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aeuo *ActivityEntityUpdateOne) check() error {
	if aeuo.mutation.WorkflowCleared() && len(aeuo.mutation.WorkflowIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ActivityEntity.workflow"`)
	}
	return nil
}

func (aeuo *ActivityEntityUpdateOne) sqlSave(ctx context.Context) (_node *ActivityEntity, err error) {
	if err := aeuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(activityentity.Table, activityentity.Columns, sqlgraph.NewFieldSpec(activityentity.FieldID, field.TypeInt))
	id, ok := aeuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ActivityEntity.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aeuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, activityentity.FieldID)
		for _, f := range fields {
			if !activityentity.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != activityentity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aeuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aeuo.mutation.HandlerName(); ok {
		_spec.SetField(activityentity.FieldHandlerName, field.TypeString, value)
	}
	if value, ok := aeuo.mutation.GetType(); ok {
		_spec.SetField(activityentity.FieldType, field.TypeString, value)
	}
	if value, ok := aeuo.mutation.Status(); ok {
		_spec.SetField(activityentity.FieldStatus, field.TypeString, value)
	}
	if value, ok := aeuo.mutation.StepID(); ok {
		_spec.SetField(activityentity.FieldStepID, field.TypeString, value)
	}
	if value, ok := aeuo.mutation.RunID(); ok {
		_spec.SetField(activityentity.FieldRunID, field.TypeInt, value)
	}
	if value, ok := aeuo.mutation.AddedRunID(); ok {
		_spec.AddField(activityentity.FieldRunID, field.TypeInt, value)
	}
	if value, ok := aeuo.mutation.RetryPolicy(); ok {
		_spec.SetField(activityentity.FieldRetryPolicy, field.TypeJSON, value)
	}
	if value, ok := aeuo.mutation.RetryState(); ok {
		_spec.SetField(activityentity.FieldRetryState, field.TypeJSON, value)
	}
	if value, ok := aeuo.mutation.CreatedAt(); ok {
		_spec.SetField(activityentity.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := aeuo.mutation.UpdatedAt(); ok {
		_spec.SetField(activityentity.FieldUpdatedAt, field.TypeTime, value)
	}
	if aeuo.mutation.WorkflowCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activityentity.WorkflowTable,
			Columns: []string{activityentity.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowentity.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aeuo.mutation.WorkflowIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activityentity.WorkflowTable,
			Columns: []string{activityentity.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowentity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aeuo.mutation.ActivityDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   activityentity.ActivityDataTable,
			Columns: []string{activityentity.ActivityDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activitydata.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aeuo.mutation.ActivityDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   activityentity.ActivityDataTable,
			Columns: []string{activityentity.ActivityDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activitydata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aeuo.mutation.ExecutionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activityentity.ExecutionsTable,
			Columns: []string{activityentity.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activityexecution.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aeuo.mutation.RemovedExecutionsIDs(); len(nodes) > 0 && !aeuo.mutation.ExecutionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activityentity.ExecutionsTable,
			Columns: []string{activityentity.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activityexecution.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aeuo.mutation.ExecutionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activityentity.ExecutionsTable,
			Columns: []string{activityentity.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activityexecution.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ActivityEntity{config: aeuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aeuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{activityentity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aeuo.mutation.done = true
	return _node, nil
}
