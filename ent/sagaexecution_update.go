// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/tempolite/ent/predicate"
	"github.com/davidroman0O/tempolite/ent/sagaentity"
	"github.com/davidroman0O/tempolite/ent/sagaexecution"
	"github.com/davidroman0O/tempolite/ent/sagaexecutiondata"
	"github.com/davidroman0O/tempolite/ent/sagavalue"
	"github.com/davidroman0O/tempolite/ent/schema"
)

// SagaExecutionUpdate is the builder for updating SagaExecution entities.
type SagaExecutionUpdate struct {
	config
	hooks    []Hook
	mutation *SagaExecutionMutation
}

// Where appends a list predicates to the SagaExecutionUpdate builder.
func (seu *SagaExecutionUpdate) Where(ps ...predicate.SagaExecution) *SagaExecutionUpdate {
	seu.mutation.Where(ps...)
	return seu
}

// SetSagaEntityID sets the "saga_entity_id" field.
func (seu *SagaExecutionUpdate) SetSagaEntityID(sei schema.SagaEntityID) *SagaExecutionUpdate {
	seu.mutation.SetSagaEntityID(sei)
	return seu
}

// SetNillableSagaEntityID sets the "saga_entity_id" field if the given value is not nil.
func (seu *SagaExecutionUpdate) SetNillableSagaEntityID(sei *schema.SagaEntityID) *SagaExecutionUpdate {
	if sei != nil {
		seu.SetSagaEntityID(*sei)
	}
	return seu
}

// SetExecutionType sets the "execution_type" field.
func (seu *SagaExecutionUpdate) SetExecutionType(st schema.ExecutionType) *SagaExecutionUpdate {
	seu.mutation.SetExecutionType(st)
	return seu
}

// SetNillableExecutionType sets the "execution_type" field if the given value is not nil.
func (seu *SagaExecutionUpdate) SetNillableExecutionType(st *schema.ExecutionType) *SagaExecutionUpdate {
	if st != nil {
		seu.SetExecutionType(*st)
	}
	return seu
}

// SetStartedAt sets the "started_at" field.
func (seu *SagaExecutionUpdate) SetStartedAt(t time.Time) *SagaExecutionUpdate {
	seu.mutation.SetStartedAt(t)
	return seu
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (seu *SagaExecutionUpdate) SetNillableStartedAt(t *time.Time) *SagaExecutionUpdate {
	if t != nil {
		seu.SetStartedAt(*t)
	}
	return seu
}

// SetCompletedAt sets the "completed_at" field.
func (seu *SagaExecutionUpdate) SetCompletedAt(t time.Time) *SagaExecutionUpdate {
	seu.mutation.SetCompletedAt(t)
	return seu
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (seu *SagaExecutionUpdate) SetNillableCompletedAt(t *time.Time) *SagaExecutionUpdate {
	if t != nil {
		seu.SetCompletedAt(*t)
	}
	return seu
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (seu *SagaExecutionUpdate) ClearCompletedAt() *SagaExecutionUpdate {
	seu.mutation.ClearCompletedAt()
	return seu
}

// SetStatus sets the "status" field.
func (seu *SagaExecutionUpdate) SetStatus(ss schema.ExecutionStatus) *SagaExecutionUpdate {
	seu.mutation.SetStatus(ss)
	return seu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (seu *SagaExecutionUpdate) SetNillableStatus(ss *schema.ExecutionStatus) *SagaExecutionUpdate {
	if ss != nil {
		seu.SetStatus(*ss)
	}
	return seu
}

// SetError sets the "error" field.
func (seu *SagaExecutionUpdate) SetError(s string) *SagaExecutionUpdate {
	seu.mutation.SetError(s)
	return seu
}

// SetNillableError sets the "error" field if the given value is not nil.
func (seu *SagaExecutionUpdate) SetNillableError(s *string) *SagaExecutionUpdate {
	if s != nil {
		seu.SetError(*s)
	}
	return seu
}

// ClearError clears the value of the "error" field.
func (seu *SagaExecutionUpdate) ClearError() *SagaExecutionUpdate {
	seu.mutation.ClearError()
	return seu
}

// SetStackTrace sets the "stack_trace" field.
func (seu *SagaExecutionUpdate) SetStackTrace(s string) *SagaExecutionUpdate {
	seu.mutation.SetStackTrace(s)
	return seu
}

// SetNillableStackTrace sets the "stack_trace" field if the given value is not nil.
func (seu *SagaExecutionUpdate) SetNillableStackTrace(s *string) *SagaExecutionUpdate {
	if s != nil {
		seu.SetStackTrace(*s)
	}
	return seu
}

// ClearStackTrace clears the value of the "stack_trace" field.
func (seu *SagaExecutionUpdate) ClearStackTrace() *SagaExecutionUpdate {
	seu.mutation.ClearStackTrace()
	return seu
}

// SetCreatedAt sets the "created_at" field.
func (seu *SagaExecutionUpdate) SetCreatedAt(t time.Time) *SagaExecutionUpdate {
	seu.mutation.SetCreatedAt(t)
	return seu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (seu *SagaExecutionUpdate) SetNillableCreatedAt(t *time.Time) *SagaExecutionUpdate {
	if t != nil {
		seu.SetCreatedAt(*t)
	}
	return seu
}

// SetUpdatedAt sets the "updated_at" field.
func (seu *SagaExecutionUpdate) SetUpdatedAt(t time.Time) *SagaExecutionUpdate {
	seu.mutation.SetUpdatedAt(t)
	return seu
}

// SetSagaID sets the "saga" edge to the SagaEntity entity by ID.
func (seu *SagaExecutionUpdate) SetSagaID(id schema.SagaEntityID) *SagaExecutionUpdate {
	seu.mutation.SetSagaID(id)
	return seu
}

// SetSaga sets the "saga" edge to the SagaEntity entity.
func (seu *SagaExecutionUpdate) SetSaga(s *SagaEntity) *SagaExecutionUpdate {
	return seu.SetSagaID(s.ID)
}

// SetExecutionDataID sets the "execution_data" edge to the SagaExecutionData entity by ID.
func (seu *SagaExecutionUpdate) SetExecutionDataID(id schema.SagaExecutionDataID) *SagaExecutionUpdate {
	seu.mutation.SetExecutionDataID(id)
	return seu
}

// SetNillableExecutionDataID sets the "execution_data" edge to the SagaExecutionData entity by ID if the given value is not nil.
func (seu *SagaExecutionUpdate) SetNillableExecutionDataID(id *schema.SagaExecutionDataID) *SagaExecutionUpdate {
	if id != nil {
		seu = seu.SetExecutionDataID(*id)
	}
	return seu
}

// SetExecutionData sets the "execution_data" edge to the SagaExecutionData entity.
func (seu *SagaExecutionUpdate) SetExecutionData(s *SagaExecutionData) *SagaExecutionUpdate {
	return seu.SetExecutionDataID(s.ID)
}

// AddValueIDs adds the "values" edge to the SagaValue entity by IDs.
func (seu *SagaExecutionUpdate) AddValueIDs(ids ...schema.SagaValueID) *SagaExecutionUpdate {
	seu.mutation.AddValueIDs(ids...)
	return seu
}

// AddValues adds the "values" edges to the SagaValue entity.
func (seu *SagaExecutionUpdate) AddValues(s ...*SagaValue) *SagaExecutionUpdate {
	ids := make([]schema.SagaValueID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return seu.AddValueIDs(ids...)
}

// Mutation returns the SagaExecutionMutation object of the builder.
func (seu *SagaExecutionUpdate) Mutation() *SagaExecutionMutation {
	return seu.mutation
}

// ClearSaga clears the "saga" edge to the SagaEntity entity.
func (seu *SagaExecutionUpdate) ClearSaga() *SagaExecutionUpdate {
	seu.mutation.ClearSaga()
	return seu
}

// ClearExecutionData clears the "execution_data" edge to the SagaExecutionData entity.
func (seu *SagaExecutionUpdate) ClearExecutionData() *SagaExecutionUpdate {
	seu.mutation.ClearExecutionData()
	return seu
}

// ClearValues clears all "values" edges to the SagaValue entity.
func (seu *SagaExecutionUpdate) ClearValues() *SagaExecutionUpdate {
	seu.mutation.ClearValues()
	return seu
}

// RemoveValueIDs removes the "values" edge to SagaValue entities by IDs.
func (seu *SagaExecutionUpdate) RemoveValueIDs(ids ...schema.SagaValueID) *SagaExecutionUpdate {
	seu.mutation.RemoveValueIDs(ids...)
	return seu
}

// RemoveValues removes "values" edges to SagaValue entities.
func (seu *SagaExecutionUpdate) RemoveValues(s ...*SagaValue) *SagaExecutionUpdate {
	ids := make([]schema.SagaValueID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return seu.RemoveValueIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (seu *SagaExecutionUpdate) Save(ctx context.Context) (int, error) {
	seu.defaults()
	return withHooks(ctx, seu.sqlSave, seu.mutation, seu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (seu *SagaExecutionUpdate) SaveX(ctx context.Context) int {
	affected, err := seu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (seu *SagaExecutionUpdate) Exec(ctx context.Context) error {
	_, err := seu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (seu *SagaExecutionUpdate) ExecX(ctx context.Context) {
	if err := seu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (seu *SagaExecutionUpdate) defaults() {
	if _, ok := seu.mutation.UpdatedAt(); !ok {
		v := sagaexecution.UpdateDefaultUpdatedAt()
		seu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (seu *SagaExecutionUpdate) check() error {
	if seu.mutation.SagaCleared() && len(seu.mutation.SagaIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SagaExecution.saga"`)
	}
	return nil
}

func (seu *SagaExecutionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := seu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(sagaexecution.Table, sagaexecution.Columns, sqlgraph.NewFieldSpec(sagaexecution.FieldID, field.TypeInt))
	if ps := seu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := seu.mutation.ExecutionType(); ok {
		_spec.SetField(sagaexecution.FieldExecutionType, field.TypeString, value)
	}
	if value, ok := seu.mutation.StartedAt(); ok {
		_spec.SetField(sagaexecution.FieldStartedAt, field.TypeTime, value)
	}
	if value, ok := seu.mutation.CompletedAt(); ok {
		_spec.SetField(sagaexecution.FieldCompletedAt, field.TypeTime, value)
	}
	if seu.mutation.CompletedAtCleared() {
		_spec.ClearField(sagaexecution.FieldCompletedAt, field.TypeTime)
	}
	if value, ok := seu.mutation.Status(); ok {
		_spec.SetField(sagaexecution.FieldStatus, field.TypeString, value)
	}
	if value, ok := seu.mutation.Error(); ok {
		_spec.SetField(sagaexecution.FieldError, field.TypeString, value)
	}
	if seu.mutation.ErrorCleared() {
		_spec.ClearField(sagaexecution.FieldError, field.TypeString)
	}
	if value, ok := seu.mutation.StackTrace(); ok {
		_spec.SetField(sagaexecution.FieldStackTrace, field.TypeString, value)
	}
	if seu.mutation.StackTraceCleared() {
		_spec.ClearField(sagaexecution.FieldStackTrace, field.TypeString)
	}
	if value, ok := seu.mutation.CreatedAt(); ok {
		_spec.SetField(sagaexecution.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := seu.mutation.UpdatedAt(); ok {
		_spec.SetField(sagaexecution.FieldUpdatedAt, field.TypeTime, value)
	}
	if seu.mutation.SagaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sagaexecution.SagaTable,
			Columns: []string{sagaexecution.SagaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagaentity.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := seu.mutation.SagaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sagaexecution.SagaTable,
			Columns: []string{sagaexecution.SagaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagaentity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if seu.mutation.ExecutionDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   sagaexecution.ExecutionDataTable,
			Columns: []string{sagaexecution.ExecutionDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagaexecutiondata.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := seu.mutation.ExecutionDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   sagaexecution.ExecutionDataTable,
			Columns: []string{sagaexecution.ExecutionDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagaexecutiondata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if seu.mutation.ValuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sagaexecution.ValuesTable,
			Columns: []string{sagaexecution.ValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagavalue.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := seu.mutation.RemovedValuesIDs(); len(nodes) > 0 && !seu.mutation.ValuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sagaexecution.ValuesTable,
			Columns: []string{sagaexecution.ValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagavalue.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := seu.mutation.ValuesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sagaexecution.ValuesTable,
			Columns: []string{sagaexecution.ValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagavalue.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, seu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sagaexecution.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	seu.mutation.done = true
	return n, nil
}

// SagaExecutionUpdateOne is the builder for updating a single SagaExecution entity.
type SagaExecutionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SagaExecutionMutation
}

// SetSagaEntityID sets the "saga_entity_id" field.
func (seuo *SagaExecutionUpdateOne) SetSagaEntityID(sei schema.SagaEntityID) *SagaExecutionUpdateOne {
	seuo.mutation.SetSagaEntityID(sei)
	return seuo
}

// SetNillableSagaEntityID sets the "saga_entity_id" field if the given value is not nil.
func (seuo *SagaExecutionUpdateOne) SetNillableSagaEntityID(sei *schema.SagaEntityID) *SagaExecutionUpdateOne {
	if sei != nil {
		seuo.SetSagaEntityID(*sei)
	}
	return seuo
}

// SetExecutionType sets the "execution_type" field.
func (seuo *SagaExecutionUpdateOne) SetExecutionType(st schema.ExecutionType) *SagaExecutionUpdateOne {
	seuo.mutation.SetExecutionType(st)
	return seuo
}

// SetNillableExecutionType sets the "execution_type" field if the given value is not nil.
func (seuo *SagaExecutionUpdateOne) SetNillableExecutionType(st *schema.ExecutionType) *SagaExecutionUpdateOne {
	if st != nil {
		seuo.SetExecutionType(*st)
	}
	return seuo
}

// SetStartedAt sets the "started_at" field.
func (seuo *SagaExecutionUpdateOne) SetStartedAt(t time.Time) *SagaExecutionUpdateOne {
	seuo.mutation.SetStartedAt(t)
	return seuo
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (seuo *SagaExecutionUpdateOne) SetNillableStartedAt(t *time.Time) *SagaExecutionUpdateOne {
	if t != nil {
		seuo.SetStartedAt(*t)
	}
	return seuo
}

// SetCompletedAt sets the "completed_at" field.
func (seuo *SagaExecutionUpdateOne) SetCompletedAt(t time.Time) *SagaExecutionUpdateOne {
	seuo.mutation.SetCompletedAt(t)
	return seuo
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (seuo *SagaExecutionUpdateOne) SetNillableCompletedAt(t *time.Time) *SagaExecutionUpdateOne {
	if t != nil {
		seuo.SetCompletedAt(*t)
	}
	return seuo
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (seuo *SagaExecutionUpdateOne) ClearCompletedAt() *SagaExecutionUpdateOne {
	seuo.mutation.ClearCompletedAt()
	return seuo
}

// SetStatus sets the "status" field.
func (seuo *SagaExecutionUpdateOne) SetStatus(ss schema.ExecutionStatus) *SagaExecutionUpdateOne {
	seuo.mutation.SetStatus(ss)
	return seuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (seuo *SagaExecutionUpdateOne) SetNillableStatus(ss *schema.ExecutionStatus) *SagaExecutionUpdateOne {
	if ss != nil {
		seuo.SetStatus(*ss)
	}
	return seuo
}

// SetError sets the "error" field.
func (seuo *SagaExecutionUpdateOne) SetError(s string) *SagaExecutionUpdateOne {
	seuo.mutation.SetError(s)
	return seuo
}

// SetNillableError sets the "error" field if the given value is not nil.
func (seuo *SagaExecutionUpdateOne) SetNillableError(s *string) *SagaExecutionUpdateOne {
	if s != nil {
		seuo.SetError(*s)
	}
	return seuo
}

// ClearError clears the value of the "error" field.
func (seuo *SagaExecutionUpdateOne) ClearError() *SagaExecutionUpdateOne {
	seuo.mutation.ClearError()
	return seuo
}

// SetStackTrace sets the "stack_trace" field.
func (seuo *SagaExecutionUpdateOne) SetStackTrace(s string) *SagaExecutionUpdateOne {
	seuo.mutation.SetStackTrace(s)
	return seuo
}

// SetNillableStackTrace sets the "stack_trace" field if the given value is not nil.
func (seuo *SagaExecutionUpdateOne) SetNillableStackTrace(s *string) *SagaExecutionUpdateOne {
	if s != nil {
		seuo.SetStackTrace(*s)
	}
	return seuo
}

// ClearStackTrace clears the value of the "stack_trace" field.
func (seuo *SagaExecutionUpdateOne) ClearStackTrace() *SagaExecutionUpdateOne {
	seuo.mutation.ClearStackTrace()
	return seuo
}

// SetCreatedAt sets the "created_at" field.
func (seuo *SagaExecutionUpdateOne) SetCreatedAt(t time.Time) *SagaExecutionUpdateOne {
	seuo.mutation.SetCreatedAt(t)
	return seuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (seuo *SagaExecutionUpdateOne) SetNillableCreatedAt(t *time.Time) *SagaExecutionUpdateOne {
	if t != nil {
		seuo.SetCreatedAt(*t)
	}
	return seuo
}

// SetUpdatedAt sets the "updated_at" field.
func (seuo *SagaExecutionUpdateOne) SetUpdatedAt(t time.Time) *SagaExecutionUpdateOne {
	seuo.mutation.SetUpdatedAt(t)
	return seuo
}

// SetSagaID sets the "saga" edge to the SagaEntity entity by ID.
func (seuo *SagaExecutionUpdateOne) SetSagaID(id schema.SagaEntityID) *SagaExecutionUpdateOne {
	seuo.mutation.SetSagaID(id)
	return seuo
}

// SetSaga sets the "saga" edge to the SagaEntity entity.
func (seuo *SagaExecutionUpdateOne) SetSaga(s *SagaEntity) *SagaExecutionUpdateOne {
	return seuo.SetSagaID(s.ID)
}

// SetExecutionDataID sets the "execution_data" edge to the SagaExecutionData entity by ID.
func (seuo *SagaExecutionUpdateOne) SetExecutionDataID(id schema.SagaExecutionDataID) *SagaExecutionUpdateOne {
	seuo.mutation.SetExecutionDataID(id)
	return seuo
}

// SetNillableExecutionDataID sets the "execution_data" edge to the SagaExecutionData entity by ID if the given value is not nil.
func (seuo *SagaExecutionUpdateOne) SetNillableExecutionDataID(id *schema.SagaExecutionDataID) *SagaExecutionUpdateOne {
	if id != nil {
		seuo = seuo.SetExecutionDataID(*id)
	}
	return seuo
}

// SetExecutionData sets the "execution_data" edge to the SagaExecutionData entity.
func (seuo *SagaExecutionUpdateOne) SetExecutionData(s *SagaExecutionData) *SagaExecutionUpdateOne {
	return seuo.SetExecutionDataID(s.ID)
}

// AddValueIDs adds the "values" edge to the SagaValue entity by IDs.
func (seuo *SagaExecutionUpdateOne) AddValueIDs(ids ...schema.SagaValueID) *SagaExecutionUpdateOne {
	seuo.mutation.AddValueIDs(ids...)
	return seuo
}

// AddValues adds the "values" edges to the SagaValue entity.
func (seuo *SagaExecutionUpdateOne) AddValues(s ...*SagaValue) *SagaExecutionUpdateOne {
	ids := make([]schema.SagaValueID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return seuo.AddValueIDs(ids...)
}

// Mutation returns the SagaExecutionMutation object of the builder.
func (seuo *SagaExecutionUpdateOne) Mutation() *SagaExecutionMutation {
	return seuo.mutation
}

// ClearSaga clears the "saga" edge to the SagaEntity entity.
func (seuo *SagaExecutionUpdateOne) ClearSaga() *SagaExecutionUpdateOne {
	seuo.mutation.ClearSaga()
	return seuo
}

// ClearExecutionData clears the "execution_data" edge to the SagaExecutionData entity.
func (seuo *SagaExecutionUpdateOne) ClearExecutionData() *SagaExecutionUpdateOne {
	seuo.mutation.ClearExecutionData()
	return seuo
}

// ClearValues clears all "values" edges to the SagaValue entity.
func (seuo *SagaExecutionUpdateOne) ClearValues() *SagaExecutionUpdateOne {
	seuo.mutation.ClearValues()
	return seuo
}

// RemoveValueIDs removes the "values" edge to SagaValue entities by IDs.
func (seuo *SagaExecutionUpdateOne) RemoveValueIDs(ids ...schema.SagaValueID) *SagaExecutionUpdateOne {
	seuo.mutation.RemoveValueIDs(ids...)
	return seuo
}

// RemoveValues removes "values" edges to SagaValue entities.
func (seuo *SagaExecutionUpdateOne) RemoveValues(s ...*SagaValue) *SagaExecutionUpdateOne {
	ids := make([]schema.SagaValueID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return seuo.RemoveValueIDs(ids...)
}

// Where appends a list predicates to the SagaExecutionUpdate builder.
func (seuo *SagaExecutionUpdateOne) Where(ps ...predicate.SagaExecution) *SagaExecutionUpdateOne {
	seuo.mutation.Where(ps...)
	return seuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (seuo *SagaExecutionUpdateOne) Select(field string, fields ...string) *SagaExecutionUpdateOne {
	seuo.fields = append([]string{field}, fields...)
	return seuo
}

// Save executes the query and returns the updated SagaExecution entity.
func (seuo *SagaExecutionUpdateOne) Save(ctx context.Context) (*SagaExecution, error) {
	seuo.defaults()
	return withHooks(ctx, seuo.sqlSave, seuo.mutation, seuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (seuo *SagaExecutionUpdateOne) SaveX(ctx context.Context) *SagaExecution {
	node, err := seuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (seuo *SagaExecutionUpdateOne) Exec(ctx context.Context) error {
	_, err := seuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (seuo *SagaExecutionUpdateOne) ExecX(ctx context.Context) {
	if err := seuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (seuo *SagaExecutionUpdateOne) defaults() {
	if _, ok := seuo.mutation.UpdatedAt(); !ok {
		v := sagaexecution.UpdateDefaultUpdatedAt()
		seuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (seuo *SagaExecutionUpdateOne) check() error {
	if seuo.mutation.SagaCleared() && len(seuo.mutation.SagaIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SagaExecution.saga"`)
	}
	return nil
}

func (seuo *SagaExecutionUpdateOne) sqlSave(ctx context.Context) (_node *SagaExecution, err error) {
	if err := seuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(sagaexecution.Table, sagaexecution.Columns, sqlgraph.NewFieldSpec(sagaexecution.FieldID, field.TypeInt))
	id, ok := seuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SagaExecution.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := seuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sagaexecution.FieldID)
		for _, f := range fields {
			if !sagaexecution.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sagaexecution.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := seuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := seuo.mutation.ExecutionType(); ok {
		_spec.SetField(sagaexecution.FieldExecutionType, field.TypeString, value)
	}
	if value, ok := seuo.mutation.StartedAt(); ok {
		_spec.SetField(sagaexecution.FieldStartedAt, field.TypeTime, value)
	}
	if value, ok := seuo.mutation.CompletedAt(); ok {
		_spec.SetField(sagaexecution.FieldCompletedAt, field.TypeTime, value)
	}
	if seuo.mutation.CompletedAtCleared() {
		_spec.ClearField(sagaexecution.FieldCompletedAt, field.TypeTime)
	}
	if value, ok := seuo.mutation.Status(); ok {
		_spec.SetField(sagaexecution.FieldStatus, field.TypeString, value)
	}
	if value, ok := seuo.mutation.Error(); ok {
		_spec.SetField(sagaexecution.FieldError, field.TypeString, value)
	}
	if seuo.mutation.ErrorCleared() {
		_spec.ClearField(sagaexecution.FieldError, field.TypeString)
	}
	if value, ok := seuo.mutation.StackTrace(); ok {
		_spec.SetField(sagaexecution.FieldStackTrace, field.TypeString, value)
	}
	if seuo.mutation.StackTraceCleared() {
		_spec.ClearField(sagaexecution.FieldStackTrace, field.TypeString)
	}
	if value, ok := seuo.mutation.CreatedAt(); ok {
		_spec.SetField(sagaexecution.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := seuo.mutation.UpdatedAt(); ok {
		_spec.SetField(sagaexecution.FieldUpdatedAt, field.TypeTime, value)
	}
	if seuo.mutation.SagaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sagaexecution.SagaTable,
			Columns: []string{sagaexecution.SagaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagaentity.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := seuo.mutation.SagaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sagaexecution.SagaTable,
			Columns: []string{sagaexecution.SagaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagaentity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if seuo.mutation.ExecutionDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   sagaexecution.ExecutionDataTable,
			Columns: []string{sagaexecution.ExecutionDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagaexecutiondata.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := seuo.mutation.ExecutionDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   sagaexecution.ExecutionDataTable,
			Columns: []string{sagaexecution.ExecutionDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagaexecutiondata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if seuo.mutation.ValuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sagaexecution.ValuesTable,
			Columns: []string{sagaexecution.ValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagavalue.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := seuo.mutation.RemovedValuesIDs(); len(nodes) > 0 && !seuo.mutation.ValuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sagaexecution.ValuesTable,
			Columns: []string{sagaexecution.ValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagavalue.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := seuo.mutation.ValuesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sagaexecution.ValuesTable,
			Columns: []string{sagaexecution.ValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagavalue.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SagaExecution{config: seuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, seuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sagaexecution.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	seuo.mutation.done = true
	return _node, nil
}
