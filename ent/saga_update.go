// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/tempolite/ent/predicate"
	"github.com/davidroman0O/tempolite/ent/saga"
	"github.com/davidroman0O/tempolite/ent/sagaexecution"
	"github.com/davidroman0O/tempolite/ent/schema"
)

// SagaUpdate is the builder for updating Saga entities.
type SagaUpdate struct {
	config
	hooks    []Hook
	mutation *SagaMutation
}

// Where appends a list predicates to the SagaUpdate builder.
func (su *SagaUpdate) Where(ps ...predicate.Saga) *SagaUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetRunID sets the "run_id" field.
func (su *SagaUpdate) SetRunID(s string) *SagaUpdate {
	su.mutation.SetRunID(s)
	return su
}

// SetNillableRunID sets the "run_id" field if the given value is not nil.
func (su *SagaUpdate) SetNillableRunID(s *string) *SagaUpdate {
	if s != nil {
		su.SetRunID(*s)
	}
	return su
}

// SetStepID sets the "step_id" field.
func (su *SagaUpdate) SetStepID(s string) *SagaUpdate {
	su.mutation.SetStepID(s)
	return su
}

// SetNillableStepID sets the "step_id" field if the given value is not nil.
func (su *SagaUpdate) SetNillableStepID(s *string) *SagaUpdate {
	if s != nil {
		su.SetStepID(*s)
	}
	return su
}

// SetStatus sets the "status" field.
func (su *SagaUpdate) SetStatus(s saga.Status) *SagaUpdate {
	su.mutation.SetStatus(s)
	return su
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (su *SagaUpdate) SetNillableStatus(s *saga.Status) *SagaUpdate {
	if s != nil {
		su.SetStatus(*s)
	}
	return su
}

// SetQueueName sets the "queue_name" field.
func (su *SagaUpdate) SetQueueName(s string) *SagaUpdate {
	su.mutation.SetQueueName(s)
	return su
}

// SetNillableQueueName sets the "queue_name" field if the given value is not nil.
func (su *SagaUpdate) SetNillableQueueName(s *string) *SagaUpdate {
	if s != nil {
		su.SetQueueName(*s)
	}
	return su
}

// SetSagaDefinition sets the "saga_definition" field.
func (su *SagaUpdate) SetSagaDefinition(sdd schema.SagaDefinitionData) *SagaUpdate {
	su.mutation.SetSagaDefinition(sdd)
	return su
}

// SetNillableSagaDefinition sets the "saga_definition" field if the given value is not nil.
func (su *SagaUpdate) SetNillableSagaDefinition(sdd *schema.SagaDefinitionData) *SagaUpdate {
	if sdd != nil {
		su.SetSagaDefinition(*sdd)
	}
	return su
}

// SetError sets the "error" field.
func (su *SagaUpdate) SetError(s string) *SagaUpdate {
	su.mutation.SetError(s)
	return su
}

// SetNillableError sets the "error" field if the given value is not nil.
func (su *SagaUpdate) SetNillableError(s *string) *SagaUpdate {
	if s != nil {
		su.SetError(*s)
	}
	return su
}

// ClearError clears the value of the "error" field.
func (su *SagaUpdate) ClearError() *SagaUpdate {
	su.mutation.ClearError()
	return su
}

// SetCreatedAt sets the "created_at" field.
func (su *SagaUpdate) SetCreatedAt(t time.Time) *SagaUpdate {
	su.mutation.SetCreatedAt(t)
	return su
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (su *SagaUpdate) SetNillableCreatedAt(t *time.Time) *SagaUpdate {
	if t != nil {
		su.SetCreatedAt(*t)
	}
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *SagaUpdate) SetUpdatedAt(t time.Time) *SagaUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// AddStepIDs adds the "steps" edge to the SagaExecution entity by IDs.
func (su *SagaUpdate) AddStepIDs(ids ...string) *SagaUpdate {
	su.mutation.AddStepIDs(ids...)
	return su
}

// AddSteps adds the "steps" edges to the SagaExecution entity.
func (su *SagaUpdate) AddSteps(s ...*SagaExecution) *SagaUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddStepIDs(ids...)
}

// Mutation returns the SagaMutation object of the builder.
func (su *SagaUpdate) Mutation() *SagaMutation {
	return su.mutation
}

// ClearSteps clears all "steps" edges to the SagaExecution entity.
func (su *SagaUpdate) ClearSteps() *SagaUpdate {
	su.mutation.ClearSteps()
	return su
}

// RemoveStepIDs removes the "steps" edge to SagaExecution entities by IDs.
func (su *SagaUpdate) RemoveStepIDs(ids ...string) *SagaUpdate {
	su.mutation.RemoveStepIDs(ids...)
	return su
}

// RemoveSteps removes "steps" edges to SagaExecution entities.
func (su *SagaUpdate) RemoveSteps(s ...*SagaExecution) *SagaUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveStepIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SagaUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SagaUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SagaUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SagaUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *SagaUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := saga.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SagaUpdate) check() error {
	if v, ok := su.mutation.StepID(); ok {
		if err := saga.StepIDValidator(v); err != nil {
			return &ValidationError{Name: "step_id", err: fmt.Errorf(`ent: validator failed for field "Saga.step_id": %w`, err)}
		}
	}
	if v, ok := su.mutation.Status(); ok {
		if err := saga.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Saga.status": %w`, err)}
		}
	}
	if v, ok := su.mutation.QueueName(); ok {
		if err := saga.QueueNameValidator(v); err != nil {
			return &ValidationError{Name: "queue_name", err: fmt.Errorf(`ent: validator failed for field "Saga.queue_name": %w`, err)}
		}
	}
	return nil
}

func (su *SagaUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(saga.Table, saga.Columns, sqlgraph.NewFieldSpec(saga.FieldID, field.TypeString))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.RunID(); ok {
		_spec.SetField(saga.FieldRunID, field.TypeString, value)
	}
	if value, ok := su.mutation.StepID(); ok {
		_spec.SetField(saga.FieldStepID, field.TypeString, value)
	}
	if value, ok := su.mutation.Status(); ok {
		_spec.SetField(saga.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := su.mutation.QueueName(); ok {
		_spec.SetField(saga.FieldQueueName, field.TypeString, value)
	}
	if value, ok := su.mutation.SagaDefinition(); ok {
		_spec.SetField(saga.FieldSagaDefinition, field.TypeJSON, value)
	}
	if value, ok := su.mutation.Error(); ok {
		_spec.SetField(saga.FieldError, field.TypeString, value)
	}
	if su.mutation.ErrorCleared() {
		_spec.ClearField(saga.FieldError, field.TypeString)
	}
	if value, ok := su.mutation.CreatedAt(); ok {
		_spec.SetField(saga.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(saga.FieldUpdatedAt, field.TypeTime, value)
	}
	if su.mutation.StepsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   saga.StepsTable,
			Columns: []string{saga.StepsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagaexecution.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedStepsIDs(); len(nodes) > 0 && !su.mutation.StepsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   saga.StepsTable,
			Columns: []string{saga.StepsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagaexecution.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.StepsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   saga.StepsTable,
			Columns: []string{saga.StepsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagaexecution.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{saga.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SagaUpdateOne is the builder for updating a single Saga entity.
type SagaUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SagaMutation
}

// SetRunID sets the "run_id" field.
func (suo *SagaUpdateOne) SetRunID(s string) *SagaUpdateOne {
	suo.mutation.SetRunID(s)
	return suo
}

// SetNillableRunID sets the "run_id" field if the given value is not nil.
func (suo *SagaUpdateOne) SetNillableRunID(s *string) *SagaUpdateOne {
	if s != nil {
		suo.SetRunID(*s)
	}
	return suo
}

// SetStepID sets the "step_id" field.
func (suo *SagaUpdateOne) SetStepID(s string) *SagaUpdateOne {
	suo.mutation.SetStepID(s)
	return suo
}

// SetNillableStepID sets the "step_id" field if the given value is not nil.
func (suo *SagaUpdateOne) SetNillableStepID(s *string) *SagaUpdateOne {
	if s != nil {
		suo.SetStepID(*s)
	}
	return suo
}

// SetStatus sets the "status" field.
func (suo *SagaUpdateOne) SetStatus(s saga.Status) *SagaUpdateOne {
	suo.mutation.SetStatus(s)
	return suo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (suo *SagaUpdateOne) SetNillableStatus(s *saga.Status) *SagaUpdateOne {
	if s != nil {
		suo.SetStatus(*s)
	}
	return suo
}

// SetQueueName sets the "queue_name" field.
func (suo *SagaUpdateOne) SetQueueName(s string) *SagaUpdateOne {
	suo.mutation.SetQueueName(s)
	return suo
}

// SetNillableQueueName sets the "queue_name" field if the given value is not nil.
func (suo *SagaUpdateOne) SetNillableQueueName(s *string) *SagaUpdateOne {
	if s != nil {
		suo.SetQueueName(*s)
	}
	return suo
}

// SetSagaDefinition sets the "saga_definition" field.
func (suo *SagaUpdateOne) SetSagaDefinition(sdd schema.SagaDefinitionData) *SagaUpdateOne {
	suo.mutation.SetSagaDefinition(sdd)
	return suo
}

// SetNillableSagaDefinition sets the "saga_definition" field if the given value is not nil.
func (suo *SagaUpdateOne) SetNillableSagaDefinition(sdd *schema.SagaDefinitionData) *SagaUpdateOne {
	if sdd != nil {
		suo.SetSagaDefinition(*sdd)
	}
	return suo
}

// SetError sets the "error" field.
func (suo *SagaUpdateOne) SetError(s string) *SagaUpdateOne {
	suo.mutation.SetError(s)
	return suo
}

// SetNillableError sets the "error" field if the given value is not nil.
func (suo *SagaUpdateOne) SetNillableError(s *string) *SagaUpdateOne {
	if s != nil {
		suo.SetError(*s)
	}
	return suo
}

// ClearError clears the value of the "error" field.
func (suo *SagaUpdateOne) ClearError() *SagaUpdateOne {
	suo.mutation.ClearError()
	return suo
}

// SetCreatedAt sets the "created_at" field.
func (suo *SagaUpdateOne) SetCreatedAt(t time.Time) *SagaUpdateOne {
	suo.mutation.SetCreatedAt(t)
	return suo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (suo *SagaUpdateOne) SetNillableCreatedAt(t *time.Time) *SagaUpdateOne {
	if t != nil {
		suo.SetCreatedAt(*t)
	}
	return suo
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *SagaUpdateOne) SetUpdatedAt(t time.Time) *SagaUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// AddStepIDs adds the "steps" edge to the SagaExecution entity by IDs.
func (suo *SagaUpdateOne) AddStepIDs(ids ...string) *SagaUpdateOne {
	suo.mutation.AddStepIDs(ids...)
	return suo
}

// AddSteps adds the "steps" edges to the SagaExecution entity.
func (suo *SagaUpdateOne) AddSteps(s ...*SagaExecution) *SagaUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddStepIDs(ids...)
}

// Mutation returns the SagaMutation object of the builder.
func (suo *SagaUpdateOne) Mutation() *SagaMutation {
	return suo.mutation
}

// ClearSteps clears all "steps" edges to the SagaExecution entity.
func (suo *SagaUpdateOne) ClearSteps() *SagaUpdateOne {
	suo.mutation.ClearSteps()
	return suo
}

// RemoveStepIDs removes the "steps" edge to SagaExecution entities by IDs.
func (suo *SagaUpdateOne) RemoveStepIDs(ids ...string) *SagaUpdateOne {
	suo.mutation.RemoveStepIDs(ids...)
	return suo
}

// RemoveSteps removes "steps" edges to SagaExecution entities.
func (suo *SagaUpdateOne) RemoveSteps(s ...*SagaExecution) *SagaUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveStepIDs(ids...)
}

// Where appends a list predicates to the SagaUpdate builder.
func (suo *SagaUpdateOne) Where(ps ...predicate.Saga) *SagaUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SagaUpdateOne) Select(field string, fields ...string) *SagaUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Saga entity.
func (suo *SagaUpdateOne) Save(ctx context.Context) (*Saga, error) {
	suo.defaults()
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SagaUpdateOne) SaveX(ctx context.Context) *Saga {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SagaUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SagaUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *SagaUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := saga.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SagaUpdateOne) check() error {
	if v, ok := suo.mutation.StepID(); ok {
		if err := saga.StepIDValidator(v); err != nil {
			return &ValidationError{Name: "step_id", err: fmt.Errorf(`ent: validator failed for field "Saga.step_id": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Status(); ok {
		if err := saga.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Saga.status": %w`, err)}
		}
	}
	if v, ok := suo.mutation.QueueName(); ok {
		if err := saga.QueueNameValidator(v); err != nil {
			return &ValidationError{Name: "queue_name", err: fmt.Errorf(`ent: validator failed for field "Saga.queue_name": %w`, err)}
		}
	}
	return nil
}

func (suo *SagaUpdateOne) sqlSave(ctx context.Context) (_node *Saga, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(saga.Table, saga.Columns, sqlgraph.NewFieldSpec(saga.FieldID, field.TypeString))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Saga.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, saga.FieldID)
		for _, f := range fields {
			if !saga.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != saga.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.RunID(); ok {
		_spec.SetField(saga.FieldRunID, field.TypeString, value)
	}
	if value, ok := suo.mutation.StepID(); ok {
		_spec.SetField(saga.FieldStepID, field.TypeString, value)
	}
	if value, ok := suo.mutation.Status(); ok {
		_spec.SetField(saga.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := suo.mutation.QueueName(); ok {
		_spec.SetField(saga.FieldQueueName, field.TypeString, value)
	}
	if value, ok := suo.mutation.SagaDefinition(); ok {
		_spec.SetField(saga.FieldSagaDefinition, field.TypeJSON, value)
	}
	if value, ok := suo.mutation.Error(); ok {
		_spec.SetField(saga.FieldError, field.TypeString, value)
	}
	if suo.mutation.ErrorCleared() {
		_spec.ClearField(saga.FieldError, field.TypeString)
	}
	if value, ok := suo.mutation.CreatedAt(); ok {
		_spec.SetField(saga.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(saga.FieldUpdatedAt, field.TypeTime, value)
	}
	if suo.mutation.StepsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   saga.StepsTable,
			Columns: []string{saga.StepsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagaexecution.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedStepsIDs(); len(nodes) > 0 && !suo.mutation.StepsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   saga.StepsTable,
			Columns: []string{saga.StepsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagaexecution.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.StepsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   saga.StepsTable,
			Columns: []string{saga.StepsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagaexecution.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Saga{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{saga.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
