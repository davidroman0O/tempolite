// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/tempolite/ent/activitydata"
	"github.com/davidroman0O/tempolite/ent/activityentity"
	"github.com/davidroman0O/tempolite/ent/predicate"
	"github.com/davidroman0O/tempolite/ent/schema"
)

// ActivityDataUpdate is the builder for updating ActivityData entities.
type ActivityDataUpdate struct {
	config
	hooks    []Hook
	mutation *ActivityDataMutation
}

// Where appends a list predicates to the ActivityDataUpdate builder.
func (adu *ActivityDataUpdate) Where(ps ...predicate.ActivityData) *ActivityDataUpdate {
	adu.mutation.Where(ps...)
	return adu
}

// SetEntityID sets the "entity_id" field.
func (adu *ActivityDataUpdate) SetEntityID(sei schema.ActivityEntityID) *ActivityDataUpdate {
	adu.mutation.SetEntityID(sei)
	return adu
}

// SetNillableEntityID sets the "entity_id" field if the given value is not nil.
func (adu *ActivityDataUpdate) SetNillableEntityID(sei *schema.ActivityEntityID) *ActivityDataUpdate {
	if sei != nil {
		adu.SetEntityID(*sei)
	}
	return adu
}

// SetInputs sets the "inputs" field.
func (adu *ActivityDataUpdate) SetInputs(b []byte) *ActivityDataUpdate {
	adu.mutation.SetInputs(b)
	return adu
}

// ClearInputs clears the value of the "inputs" field.
func (adu *ActivityDataUpdate) ClearInputs() *ActivityDataUpdate {
	adu.mutation.ClearInputs()
	return adu
}

// SetOutput sets the "output" field.
func (adu *ActivityDataUpdate) SetOutput(b []byte) *ActivityDataUpdate {
	adu.mutation.SetOutput(b)
	return adu
}

// ClearOutput clears the value of the "output" field.
func (adu *ActivityDataUpdate) ClearOutput() *ActivityDataUpdate {
	adu.mutation.ClearOutput()
	return adu
}

// SetCreatedAt sets the "created_at" field.
func (adu *ActivityDataUpdate) SetCreatedAt(t time.Time) *ActivityDataUpdate {
	adu.mutation.SetCreatedAt(t)
	return adu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (adu *ActivityDataUpdate) SetNillableCreatedAt(t *time.Time) *ActivityDataUpdate {
	if t != nil {
		adu.SetCreatedAt(*t)
	}
	return adu
}

// SetUpdatedAt sets the "updated_at" field.
func (adu *ActivityDataUpdate) SetUpdatedAt(t time.Time) *ActivityDataUpdate {
	adu.mutation.SetUpdatedAt(t)
	return adu
}

// SetActivityID sets the "activity" edge to the ActivityEntity entity by ID.
func (adu *ActivityDataUpdate) SetActivityID(id schema.ActivityEntityID) *ActivityDataUpdate {
	adu.mutation.SetActivityID(id)
	return adu
}

// SetActivity sets the "activity" edge to the ActivityEntity entity.
func (adu *ActivityDataUpdate) SetActivity(a *ActivityEntity) *ActivityDataUpdate {
	return adu.SetActivityID(a.ID)
}

// Mutation returns the ActivityDataMutation object of the builder.
func (adu *ActivityDataUpdate) Mutation() *ActivityDataMutation {
	return adu.mutation
}

// ClearActivity clears the "activity" edge to the ActivityEntity entity.
func (adu *ActivityDataUpdate) ClearActivity() *ActivityDataUpdate {
	adu.mutation.ClearActivity()
	return adu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (adu *ActivityDataUpdate) Save(ctx context.Context) (int, error) {
	adu.defaults()
	return withHooks(ctx, adu.sqlSave, adu.mutation, adu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (adu *ActivityDataUpdate) SaveX(ctx context.Context) int {
	affected, err := adu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (adu *ActivityDataUpdate) Exec(ctx context.Context) error {
	_, err := adu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (adu *ActivityDataUpdate) ExecX(ctx context.Context) {
	if err := adu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (adu *ActivityDataUpdate) defaults() {
	if _, ok := adu.mutation.UpdatedAt(); !ok {
		v := activitydata.UpdateDefaultUpdatedAt()
		adu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (adu *ActivityDataUpdate) check() error {
	if adu.mutation.ActivityCleared() && len(adu.mutation.ActivityIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ActivityData.activity"`)
	}
	return nil
}

func (adu *ActivityDataUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := adu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(activitydata.Table, activitydata.Columns, sqlgraph.NewFieldSpec(activitydata.FieldID, field.TypeInt))
	if ps := adu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := adu.mutation.Inputs(); ok {
		_spec.SetField(activitydata.FieldInputs, field.TypeBytes, value)
	}
	if adu.mutation.InputsCleared() {
		_spec.ClearField(activitydata.FieldInputs, field.TypeBytes)
	}
	if value, ok := adu.mutation.Output(); ok {
		_spec.SetField(activitydata.FieldOutput, field.TypeBytes, value)
	}
	if adu.mutation.OutputCleared() {
		_spec.ClearField(activitydata.FieldOutput, field.TypeBytes)
	}
	if value, ok := adu.mutation.CreatedAt(); ok {
		_spec.SetField(activitydata.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := adu.mutation.UpdatedAt(); ok {
		_spec.SetField(activitydata.FieldUpdatedAt, field.TypeTime, value)
	}
	if adu.mutation.ActivityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   activitydata.ActivityTable,
			Columns: []string{activitydata.ActivityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activityentity.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := adu.mutation.ActivityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   activitydata.ActivityTable,
			Columns: []string{activitydata.ActivityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activityentity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, adu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{activitydata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	adu.mutation.done = true
	return n, nil
}

// ActivityDataUpdateOne is the builder for updating a single ActivityData entity.
type ActivityDataUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ActivityDataMutation
}

// SetEntityID sets the "entity_id" field.
func (aduo *ActivityDataUpdateOne) SetEntityID(sei schema.ActivityEntityID) *ActivityDataUpdateOne {
	aduo.mutation.SetEntityID(sei)
	return aduo
}

// SetNillableEntityID sets the "entity_id" field if the given value is not nil.
func (aduo *ActivityDataUpdateOne) SetNillableEntityID(sei *schema.ActivityEntityID) *ActivityDataUpdateOne {
	if sei != nil {
		aduo.SetEntityID(*sei)
	}
	return aduo
}

// SetInputs sets the "inputs" field.
func (aduo *ActivityDataUpdateOne) SetInputs(b []byte) *ActivityDataUpdateOne {
	aduo.mutation.SetInputs(b)
	return aduo
}

// ClearInputs clears the value of the "inputs" field.
func (aduo *ActivityDataUpdateOne) ClearInputs() *ActivityDataUpdateOne {
	aduo.mutation.ClearInputs()
	return aduo
}

// SetOutput sets the "output" field.
func (aduo *ActivityDataUpdateOne) SetOutput(b []byte) *ActivityDataUpdateOne {
	aduo.mutation.SetOutput(b)
	return aduo
}

// ClearOutput clears the value of the "output" field.
func (aduo *ActivityDataUpdateOne) ClearOutput() *ActivityDataUpdateOne {
	aduo.mutation.ClearOutput()
	return aduo
}

// SetCreatedAt sets the "created_at" field.
func (aduo *ActivityDataUpdateOne) SetCreatedAt(t time.Time) *ActivityDataUpdateOne {
	aduo.mutation.SetCreatedAt(t)
	return aduo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (aduo *ActivityDataUpdateOne) SetNillableCreatedAt(t *time.Time) *ActivityDataUpdateOne {
	if t != nil {
		aduo.SetCreatedAt(*t)
	}
	return aduo
}

// SetUpdatedAt sets the "updated_at" field.
func (aduo *ActivityDataUpdateOne) SetUpdatedAt(t time.Time) *ActivityDataUpdateOne {
	aduo.mutation.SetUpdatedAt(t)
	return aduo
}

// SetActivityID sets the "activity" edge to the ActivityEntity entity by ID.
func (aduo *ActivityDataUpdateOne) SetActivityID(id schema.ActivityEntityID) *ActivityDataUpdateOne {
	aduo.mutation.SetActivityID(id)
	return aduo
}

// SetActivity sets the "activity" edge to the ActivityEntity entity.
func (aduo *ActivityDataUpdateOne) SetActivity(a *ActivityEntity) *ActivityDataUpdateOne {
	return aduo.SetActivityID(a.ID)
}

// Mutation returns the ActivityDataMutation object of the builder.
func (aduo *ActivityDataUpdateOne) Mutation() *ActivityDataMutation {
	return aduo.mutation
}

// ClearActivity clears the "activity" edge to the ActivityEntity entity.
func (aduo *ActivityDataUpdateOne) ClearActivity() *ActivityDataUpdateOne {
	aduo.mutation.ClearActivity()
	return aduo
}

// Where appends a list predicates to the ActivityDataUpdate builder.
func (aduo *ActivityDataUpdateOne) Where(ps ...predicate.ActivityData) *ActivityDataUpdateOne {
	aduo.mutation.Where(ps...)
	return aduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aduo *ActivityDataUpdateOne) Select(field string, fields ...string) *ActivityDataUpdateOne {
	aduo.fields = append([]string{field}, fields...)
	return aduo
}

// Save executes the query and returns the updated ActivityData entity.
func (aduo *ActivityDataUpdateOne) Save(ctx context.Context) (*ActivityData, error) {
	aduo.defaults()
	return withHooks(ctx, aduo.sqlSave, aduo.mutation, aduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aduo *ActivityDataUpdateOne) SaveX(ctx context.Context) *ActivityData {
	node, err := aduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aduo *ActivityDataUpdateOne) Exec(ctx context.Context) error {
	_, err := aduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aduo *ActivityDataUpdateOne) ExecX(ctx context.Context) {
	if err := aduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aduo *ActivityDataUpdateOne) defaults() {
	if _, ok := aduo.mutation.UpdatedAt(); !ok {
		v := activitydata.UpdateDefaultUpdatedAt()
		aduo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aduo *ActivityDataUpdateOne) check() error {
	if aduo.mutation.ActivityCleared() && len(aduo.mutation.ActivityIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ActivityData.activity"`)
	}
	return nil
}

func (aduo *ActivityDataUpdateOne) sqlSave(ctx context.Context) (_node *ActivityData, err error) {
	if err := aduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(activitydata.Table, activitydata.Columns, sqlgraph.NewFieldSpec(activitydata.FieldID, field.TypeInt))
	id, ok := aduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ActivityData.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, activitydata.FieldID)
		for _, f := range fields {
			if !activitydata.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != activitydata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aduo.mutation.Inputs(); ok {
		_spec.SetField(activitydata.FieldInputs, field.TypeBytes, value)
	}
	if aduo.mutation.InputsCleared() {
		_spec.ClearField(activitydata.FieldInputs, field.TypeBytes)
	}
	if value, ok := aduo.mutation.Output(); ok {
		_spec.SetField(activitydata.FieldOutput, field.TypeBytes, value)
	}
	if aduo.mutation.OutputCleared() {
		_spec.ClearField(activitydata.FieldOutput, field.TypeBytes)
	}
	if value, ok := aduo.mutation.CreatedAt(); ok {
		_spec.SetField(activitydata.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := aduo.mutation.UpdatedAt(); ok {
		_spec.SetField(activitydata.FieldUpdatedAt, field.TypeTime, value)
	}
	if aduo.mutation.ActivityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   activitydata.ActivityTable,
			Columns: []string{activitydata.ActivityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activityentity.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aduo.mutation.ActivityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   activitydata.ActivityTable,
			Columns: []string{activitydata.ActivityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activityentity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ActivityData{config: aduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{activitydata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aduo.mutation.done = true
	return _node, nil
}
