// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/tempolite/ent/predicate"
	"github.com/davidroman0O/tempolite/ent/schema"
	"github.com/davidroman0O/tempolite/ent/sideeffectdata"
	"github.com/davidroman0O/tempolite/ent/sideeffectentity"
	"github.com/davidroman0O/tempolite/ent/sideeffectexecution"
	"github.com/davidroman0O/tempolite/ent/workflowentity"
)

// SideEffectEntityQuery is the builder for querying SideEffectEntity entities.
type SideEffectEntityQuery struct {
	config
	ctx                *QueryContext
	order              []sideeffectentity.OrderOption
	inters             []Interceptor
	predicates         []predicate.SideEffectEntity
	withWorkflow       *WorkflowEntityQuery
	withSideEffectData *SideEffectDataQuery
	withExecutions     *SideEffectExecutionQuery
	withFKs            bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SideEffectEntityQuery builder.
func (seeq *SideEffectEntityQuery) Where(ps ...predicate.SideEffectEntity) *SideEffectEntityQuery {
	seeq.predicates = append(seeq.predicates, ps...)
	return seeq
}

// Limit the number of records to be returned by this query.
func (seeq *SideEffectEntityQuery) Limit(limit int) *SideEffectEntityQuery {
	seeq.ctx.Limit = &limit
	return seeq
}

// Offset to start from.
func (seeq *SideEffectEntityQuery) Offset(offset int) *SideEffectEntityQuery {
	seeq.ctx.Offset = &offset
	return seeq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (seeq *SideEffectEntityQuery) Unique(unique bool) *SideEffectEntityQuery {
	seeq.ctx.Unique = &unique
	return seeq
}

// Order specifies how the records should be ordered.
func (seeq *SideEffectEntityQuery) Order(o ...sideeffectentity.OrderOption) *SideEffectEntityQuery {
	seeq.order = append(seeq.order, o...)
	return seeq
}

// QueryWorkflow chains the current query on the "workflow" edge.
func (seeq *SideEffectEntityQuery) QueryWorkflow() *WorkflowEntityQuery {
	query := (&WorkflowEntityClient{config: seeq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := seeq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := seeq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(sideeffectentity.Table, sideeffectentity.FieldID, selector),
			sqlgraph.To(workflowentity.Table, workflowentity.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sideeffectentity.WorkflowTable, sideeffectentity.WorkflowColumn),
		)
		fromU = sqlgraph.SetNeighbors(seeq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySideEffectData chains the current query on the "side_effect_data" edge.
func (seeq *SideEffectEntityQuery) QuerySideEffectData() *SideEffectDataQuery {
	query := (&SideEffectDataClient{config: seeq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := seeq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := seeq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(sideeffectentity.Table, sideeffectentity.FieldID, selector),
			sqlgraph.To(sideeffectdata.Table, sideeffectdata.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, sideeffectentity.SideEffectDataTable, sideeffectentity.SideEffectDataColumn),
		)
		fromU = sqlgraph.SetNeighbors(seeq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryExecutions chains the current query on the "executions" edge.
func (seeq *SideEffectEntityQuery) QueryExecutions() *SideEffectExecutionQuery {
	query := (&SideEffectExecutionClient{config: seeq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := seeq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := seeq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(sideeffectentity.Table, sideeffectentity.FieldID, selector),
			sqlgraph.To(sideeffectexecution.Table, sideeffectexecution.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, sideeffectentity.ExecutionsTable, sideeffectentity.ExecutionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(seeq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first SideEffectEntity entity from the query.
// Returns a *NotFoundError when no SideEffectEntity was found.
func (seeq *SideEffectEntityQuery) First(ctx context.Context) (*SideEffectEntity, error) {
	nodes, err := seeq.Limit(1).All(setContextOp(ctx, seeq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{sideeffectentity.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (seeq *SideEffectEntityQuery) FirstX(ctx context.Context) *SideEffectEntity {
	node, err := seeq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SideEffectEntity ID from the query.
// Returns a *NotFoundError when no SideEffectEntity ID was found.
func (seeq *SideEffectEntityQuery) FirstID(ctx context.Context) (id schema.SideEffectEntityID, err error) {
	var ids []schema.SideEffectEntityID
	if ids, err = seeq.Limit(1).IDs(setContextOp(ctx, seeq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{sideeffectentity.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (seeq *SideEffectEntityQuery) FirstIDX(ctx context.Context) schema.SideEffectEntityID {
	id, err := seeq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SideEffectEntity entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one SideEffectEntity entity is found.
// Returns a *NotFoundError when no SideEffectEntity entities are found.
func (seeq *SideEffectEntityQuery) Only(ctx context.Context) (*SideEffectEntity, error) {
	nodes, err := seeq.Limit(2).All(setContextOp(ctx, seeq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{sideeffectentity.Label}
	default:
		return nil, &NotSingularError{sideeffectentity.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (seeq *SideEffectEntityQuery) OnlyX(ctx context.Context) *SideEffectEntity {
	node, err := seeq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SideEffectEntity ID in the query.
// Returns a *NotSingularError when more than one SideEffectEntity ID is found.
// Returns a *NotFoundError when no entities are found.
func (seeq *SideEffectEntityQuery) OnlyID(ctx context.Context) (id schema.SideEffectEntityID, err error) {
	var ids []schema.SideEffectEntityID
	if ids, err = seeq.Limit(2).IDs(setContextOp(ctx, seeq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{sideeffectentity.Label}
	default:
		err = &NotSingularError{sideeffectentity.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (seeq *SideEffectEntityQuery) OnlyIDX(ctx context.Context) schema.SideEffectEntityID {
	id, err := seeq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SideEffectEntities.
func (seeq *SideEffectEntityQuery) All(ctx context.Context) ([]*SideEffectEntity, error) {
	ctx = setContextOp(ctx, seeq.ctx, ent.OpQueryAll)
	if err := seeq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*SideEffectEntity, *SideEffectEntityQuery]()
	return withInterceptors[[]*SideEffectEntity](ctx, seeq, qr, seeq.inters)
}

// AllX is like All, but panics if an error occurs.
func (seeq *SideEffectEntityQuery) AllX(ctx context.Context) []*SideEffectEntity {
	nodes, err := seeq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SideEffectEntity IDs.
func (seeq *SideEffectEntityQuery) IDs(ctx context.Context) (ids []schema.SideEffectEntityID, err error) {
	if seeq.ctx.Unique == nil && seeq.path != nil {
		seeq.Unique(true)
	}
	ctx = setContextOp(ctx, seeq.ctx, ent.OpQueryIDs)
	if err = seeq.Select(sideeffectentity.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (seeq *SideEffectEntityQuery) IDsX(ctx context.Context) []schema.SideEffectEntityID {
	ids, err := seeq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (seeq *SideEffectEntityQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, seeq.ctx, ent.OpQueryCount)
	if err := seeq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, seeq, querierCount[*SideEffectEntityQuery](), seeq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (seeq *SideEffectEntityQuery) CountX(ctx context.Context) int {
	count, err := seeq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (seeq *SideEffectEntityQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, seeq.ctx, ent.OpQueryExist)
	switch _, err := seeq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (seeq *SideEffectEntityQuery) ExistX(ctx context.Context) bool {
	exist, err := seeq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SideEffectEntityQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (seeq *SideEffectEntityQuery) Clone() *SideEffectEntityQuery {
	if seeq == nil {
		return nil
	}
	return &SideEffectEntityQuery{
		config:             seeq.config,
		ctx:                seeq.ctx.Clone(),
		order:              append([]sideeffectentity.OrderOption{}, seeq.order...),
		inters:             append([]Interceptor{}, seeq.inters...),
		predicates:         append([]predicate.SideEffectEntity{}, seeq.predicates...),
		withWorkflow:       seeq.withWorkflow.Clone(),
		withSideEffectData: seeq.withSideEffectData.Clone(),
		withExecutions:     seeq.withExecutions.Clone(),
		// clone intermediate query.
		sql:  seeq.sql.Clone(),
		path: seeq.path,
	}
}

// WithWorkflow tells the query-builder to eager-load the nodes that are connected to
// the "workflow" edge. The optional arguments are used to configure the query builder of the edge.
func (seeq *SideEffectEntityQuery) WithWorkflow(opts ...func(*WorkflowEntityQuery)) *SideEffectEntityQuery {
	query := (&WorkflowEntityClient{config: seeq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	seeq.withWorkflow = query
	return seeq
}

// WithSideEffectData tells the query-builder to eager-load the nodes that are connected to
// the "side_effect_data" edge. The optional arguments are used to configure the query builder of the edge.
func (seeq *SideEffectEntityQuery) WithSideEffectData(opts ...func(*SideEffectDataQuery)) *SideEffectEntityQuery {
	query := (&SideEffectDataClient{config: seeq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	seeq.withSideEffectData = query
	return seeq
}

// WithExecutions tells the query-builder to eager-load the nodes that are connected to
// the "executions" edge. The optional arguments are used to configure the query builder of the edge.
func (seeq *SideEffectEntityQuery) WithExecutions(opts ...func(*SideEffectExecutionQuery)) *SideEffectEntityQuery {
	query := (&SideEffectExecutionClient{config: seeq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	seeq.withExecutions = query
	return seeq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		HandlerName string `json:"handler_name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SideEffectEntity.Query().
//		GroupBy(sideeffectentity.FieldHandlerName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (seeq *SideEffectEntityQuery) GroupBy(field string, fields ...string) *SideEffectEntityGroupBy {
	seeq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &SideEffectEntityGroupBy{build: seeq}
	grbuild.flds = &seeq.ctx.Fields
	grbuild.label = sideeffectentity.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		HandlerName string `json:"handler_name,omitempty"`
//	}
//
//	client.SideEffectEntity.Query().
//		Select(sideeffectentity.FieldHandlerName).
//		Scan(ctx, &v)
func (seeq *SideEffectEntityQuery) Select(fields ...string) *SideEffectEntitySelect {
	seeq.ctx.Fields = append(seeq.ctx.Fields, fields...)
	sbuild := &SideEffectEntitySelect{SideEffectEntityQuery: seeq}
	sbuild.label = sideeffectentity.Label
	sbuild.flds, sbuild.scan = &seeq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a SideEffectEntitySelect configured with the given aggregations.
func (seeq *SideEffectEntityQuery) Aggregate(fns ...AggregateFunc) *SideEffectEntitySelect {
	return seeq.Select().Aggregate(fns...)
}

func (seeq *SideEffectEntityQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range seeq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, seeq); err != nil {
				return err
			}
		}
	}
	for _, f := range seeq.ctx.Fields {
		if !sideeffectentity.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if seeq.path != nil {
		prev, err := seeq.path(ctx)
		if err != nil {
			return err
		}
		seeq.sql = prev
	}
	return nil
}

func (seeq *SideEffectEntityQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*SideEffectEntity, error) {
	var (
		nodes       = []*SideEffectEntity{}
		withFKs     = seeq.withFKs
		_spec       = seeq.querySpec()
		loadedTypes = [3]bool{
			seeq.withWorkflow != nil,
			seeq.withSideEffectData != nil,
			seeq.withExecutions != nil,
		}
	)
	if seeq.withWorkflow != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, sideeffectentity.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*SideEffectEntity).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &SideEffectEntity{config: seeq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, seeq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := seeq.withWorkflow; query != nil {
		if err := seeq.loadWorkflow(ctx, query, nodes, nil,
			func(n *SideEffectEntity, e *WorkflowEntity) { n.Edges.Workflow = e }); err != nil {
			return nil, err
		}
	}
	if query := seeq.withSideEffectData; query != nil {
		if err := seeq.loadSideEffectData(ctx, query, nodes, nil,
			func(n *SideEffectEntity, e *SideEffectData) { n.Edges.SideEffectData = e }); err != nil {
			return nil, err
		}
	}
	if query := seeq.withExecutions; query != nil {
		if err := seeq.loadExecutions(ctx, query, nodes,
			func(n *SideEffectEntity) { n.Edges.Executions = []*SideEffectExecution{} },
			func(n *SideEffectEntity, e *SideEffectExecution) { n.Edges.Executions = append(n.Edges.Executions, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (seeq *SideEffectEntityQuery) loadWorkflow(ctx context.Context, query *WorkflowEntityQuery, nodes []*SideEffectEntity, init func(*SideEffectEntity), assign func(*SideEffectEntity, *WorkflowEntity)) error {
	ids := make([]schema.WorkflowEntityID, 0, len(nodes))
	nodeids := make(map[schema.WorkflowEntityID][]*SideEffectEntity)
	for i := range nodes {
		if nodes[i].workflow_entity_side_effect_children == nil {
			continue
		}
		fk := *nodes[i].workflow_entity_side_effect_children
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(workflowentity.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "workflow_entity_side_effect_children" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (seeq *SideEffectEntityQuery) loadSideEffectData(ctx context.Context, query *SideEffectDataQuery, nodes []*SideEffectEntity, init func(*SideEffectEntity), assign func(*SideEffectEntity, *SideEffectData)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[schema.SideEffectEntityID]*SideEffectEntity)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(sideeffectdata.FieldEntityID)
	}
	query.Where(predicate.SideEffectData(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(sideeffectentity.SideEffectDataColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.EntityID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "entity_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (seeq *SideEffectEntityQuery) loadExecutions(ctx context.Context, query *SideEffectExecutionQuery, nodes []*SideEffectEntity, init func(*SideEffectEntity), assign func(*SideEffectEntity, *SideEffectExecution)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[schema.SideEffectEntityID]*SideEffectEntity)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(sideeffectexecution.FieldSideEffectEntityID)
	}
	query.Where(predicate.SideEffectExecution(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(sideeffectentity.ExecutionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.SideEffectEntityID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "side_effect_entity_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (seeq *SideEffectEntityQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := seeq.querySpec()
	_spec.Node.Columns = seeq.ctx.Fields
	if len(seeq.ctx.Fields) > 0 {
		_spec.Unique = seeq.ctx.Unique != nil && *seeq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, seeq.driver, _spec)
}

func (seeq *SideEffectEntityQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(sideeffectentity.Table, sideeffectentity.Columns, sqlgraph.NewFieldSpec(sideeffectentity.FieldID, field.TypeInt))
	_spec.From = seeq.sql
	if unique := seeq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if seeq.path != nil {
		_spec.Unique = true
	}
	if fields := seeq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sideeffectentity.FieldID)
		for i := range fields {
			if fields[i] != sideeffectentity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := seeq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := seeq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := seeq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := seeq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (seeq *SideEffectEntityQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(seeq.driver.Dialect())
	t1 := builder.Table(sideeffectentity.Table)
	columns := seeq.ctx.Fields
	if len(columns) == 0 {
		columns = sideeffectentity.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if seeq.sql != nil {
		selector = seeq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if seeq.ctx.Unique != nil && *seeq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range seeq.predicates {
		p(selector)
	}
	for _, p := range seeq.order {
		p(selector)
	}
	if offset := seeq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := seeq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// SideEffectEntityGroupBy is the group-by builder for SideEffectEntity entities.
type SideEffectEntityGroupBy struct {
	selector
	build *SideEffectEntityQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (seegb *SideEffectEntityGroupBy) Aggregate(fns ...AggregateFunc) *SideEffectEntityGroupBy {
	seegb.fns = append(seegb.fns, fns...)
	return seegb
}

// Scan applies the selector query and scans the result into the given value.
func (seegb *SideEffectEntityGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, seegb.build.ctx, ent.OpQueryGroupBy)
	if err := seegb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SideEffectEntityQuery, *SideEffectEntityGroupBy](ctx, seegb.build, seegb, seegb.build.inters, v)
}

func (seegb *SideEffectEntityGroupBy) sqlScan(ctx context.Context, root *SideEffectEntityQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(seegb.fns))
	for _, fn := range seegb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*seegb.flds)+len(seegb.fns))
		for _, f := range *seegb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*seegb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := seegb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// SideEffectEntitySelect is the builder for selecting fields of SideEffectEntity entities.
type SideEffectEntitySelect struct {
	*SideEffectEntityQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (sees *SideEffectEntitySelect) Aggregate(fns ...AggregateFunc) *SideEffectEntitySelect {
	sees.fns = append(sees.fns, fns...)
	return sees
}

// Scan applies the selector query and scans the result into the given value.
func (sees *SideEffectEntitySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sees.ctx, ent.OpQuerySelect)
	if err := sees.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SideEffectEntityQuery, *SideEffectEntitySelect](ctx, sees.SideEffectEntityQuery, sees, sees.inters, v)
}

func (sees *SideEffectEntitySelect) sqlScan(ctx context.Context, root *SideEffectEntityQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(sees.fns))
	for _, fn := range sees.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*sees.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sees.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
