// Code generated by ent, DO NOT EDIT.

package sagaexecutiondata

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the sagaexecutiondata type in the database.
	Label = "saga_execution_data"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldExecutionID holds the string denoting the execution_id field in the database.
	FieldExecutionID = "execution_id"
	// FieldLastHeartbeat holds the string denoting the last_heartbeat field in the database.
	FieldLastHeartbeat = "last_heartbeat"
	// FieldStepIndex holds the string denoting the step_index field in the database.
	FieldStepIndex = "step_index"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeExecution holds the string denoting the execution edge name in mutations.
	EdgeExecution = "execution"
	// EdgeValues holds the string denoting the values edge name in mutations.
	EdgeValues = "values"
	// Table holds the table name of the sagaexecutiondata in the database.
	Table = "saga_execution_data"
	// ExecutionTable is the table that holds the execution relation/edge.
	ExecutionTable = "saga_execution_data"
	// ExecutionInverseTable is the table name for the SagaExecution entity.
	// It exists in this package in order to avoid circular dependency with the "sagaexecution" package.
	ExecutionInverseTable = "saga_executions"
	// ExecutionColumn is the table column denoting the execution relation/edge.
	ExecutionColumn = "execution_id"
	// ValuesTable is the table that holds the values relation/edge.
	ValuesTable = "saga_values"
	// ValuesInverseTable is the table name for the SagaValue entity.
	// It exists in this package in order to avoid circular dependency with the "sagavalue" package.
	ValuesInverseTable = "saga_values"
	// ValuesColumn is the table column denoting the values relation/edge.
	ValuesColumn = "saga_execution_data_values"
)

// Columns holds all SQL columns for sagaexecutiondata fields.
var Columns = []string{
	FieldID,
	FieldExecutionID,
	FieldLastHeartbeat,
	FieldStepIndex,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the SagaExecutionData queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByExecutionID orders the results by the execution_id field.
func ByExecutionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExecutionID, opts...).ToFunc()
}

// ByLastHeartbeat orders the results by the last_heartbeat field.
func ByLastHeartbeat(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastHeartbeat, opts...).ToFunc()
}

// ByStepIndex orders the results by the step_index field.
func ByStepIndex(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStepIndex, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByExecutionField orders the results by execution field.
func ByExecutionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExecutionStep(), sql.OrderByField(field, opts...))
	}
}

// ByValuesCount orders the results by values count.
func ByValuesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newValuesStep(), opts...)
	}
}

// ByValues orders the results by values terms.
func ByValues(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newValuesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newExecutionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExecutionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, ExecutionTable, ExecutionColumn),
	)
}
func newValuesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ValuesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ValuesTable, ValuesColumn),
	)
}
