// Code generated by ent, DO NOT EDIT.

package sagaexecutiondata

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/davidroman0O/tempolite/ent/predicate"
	"github.com/davidroman0O/tempolite/ent/schema"
)

// ID filters vertices based on their ID field.
func ID(id schema.SagaExecutionDataID) predicate.SagaExecutionData {
	return predicate.SagaExecutionData(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id schema.SagaExecutionDataID) predicate.SagaExecutionData {
	return predicate.SagaExecutionData(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id schema.SagaExecutionDataID) predicate.SagaExecutionData {
	return predicate.SagaExecutionData(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...schema.SagaExecutionDataID) predicate.SagaExecutionData {
	return predicate.SagaExecutionData(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...schema.SagaExecutionDataID) predicate.SagaExecutionData {
	return predicate.SagaExecutionData(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id schema.SagaExecutionDataID) predicate.SagaExecutionData {
	return predicate.SagaExecutionData(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id schema.SagaExecutionDataID) predicate.SagaExecutionData {
	return predicate.SagaExecutionData(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id schema.SagaExecutionDataID) predicate.SagaExecutionData {
	return predicate.SagaExecutionData(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id schema.SagaExecutionDataID) predicate.SagaExecutionData {
	return predicate.SagaExecutionData(sql.FieldLTE(FieldID, id))
}

// ExecutionID applies equality check predicate on the "execution_id" field. It's identical to ExecutionIDEQ.
func ExecutionID(v schema.SagaExecutionID) predicate.SagaExecutionData {
	vc := int(v)
	return predicate.SagaExecutionData(sql.FieldEQ(FieldExecutionID, vc))
}

// LastHeartbeat applies equality check predicate on the "last_heartbeat" field. It's identical to LastHeartbeatEQ.
func LastHeartbeat(v time.Time) predicate.SagaExecutionData {
	return predicate.SagaExecutionData(sql.FieldEQ(FieldLastHeartbeat, v))
}

// StepIndex applies equality check predicate on the "step_index" field. It's identical to StepIndexEQ.
func StepIndex(v int) predicate.SagaExecutionData {
	return predicate.SagaExecutionData(sql.FieldEQ(FieldStepIndex, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.SagaExecutionData {
	return predicate.SagaExecutionData(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.SagaExecutionData {
	return predicate.SagaExecutionData(sql.FieldEQ(FieldUpdatedAt, v))
}

// ExecutionIDEQ applies the EQ predicate on the "execution_id" field.
func ExecutionIDEQ(v schema.SagaExecutionID) predicate.SagaExecutionData {
	vc := int(v)
	return predicate.SagaExecutionData(sql.FieldEQ(FieldExecutionID, vc))
}

// ExecutionIDNEQ applies the NEQ predicate on the "execution_id" field.
func ExecutionIDNEQ(v schema.SagaExecutionID) predicate.SagaExecutionData {
	vc := int(v)
	return predicate.SagaExecutionData(sql.FieldNEQ(FieldExecutionID, vc))
}

// ExecutionIDIn applies the In predicate on the "execution_id" field.
func ExecutionIDIn(vs ...schema.SagaExecutionID) predicate.SagaExecutionData {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int(vs[i])
	}
	return predicate.SagaExecutionData(sql.FieldIn(FieldExecutionID, v...))
}

// ExecutionIDNotIn applies the NotIn predicate on the "execution_id" field.
func ExecutionIDNotIn(vs ...schema.SagaExecutionID) predicate.SagaExecutionData {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int(vs[i])
	}
	return predicate.SagaExecutionData(sql.FieldNotIn(FieldExecutionID, v...))
}

// LastHeartbeatEQ applies the EQ predicate on the "last_heartbeat" field.
func LastHeartbeatEQ(v time.Time) predicate.SagaExecutionData {
	return predicate.SagaExecutionData(sql.FieldEQ(FieldLastHeartbeat, v))
}

// LastHeartbeatNEQ applies the NEQ predicate on the "last_heartbeat" field.
func LastHeartbeatNEQ(v time.Time) predicate.SagaExecutionData {
	return predicate.SagaExecutionData(sql.FieldNEQ(FieldLastHeartbeat, v))
}

// LastHeartbeatIn applies the In predicate on the "last_heartbeat" field.
func LastHeartbeatIn(vs ...time.Time) predicate.SagaExecutionData {
	return predicate.SagaExecutionData(sql.FieldIn(FieldLastHeartbeat, vs...))
}

// LastHeartbeatNotIn applies the NotIn predicate on the "last_heartbeat" field.
func LastHeartbeatNotIn(vs ...time.Time) predicate.SagaExecutionData {
	return predicate.SagaExecutionData(sql.FieldNotIn(FieldLastHeartbeat, vs...))
}

// LastHeartbeatGT applies the GT predicate on the "last_heartbeat" field.
func LastHeartbeatGT(v time.Time) predicate.SagaExecutionData {
	return predicate.SagaExecutionData(sql.FieldGT(FieldLastHeartbeat, v))
}

// LastHeartbeatGTE applies the GTE predicate on the "last_heartbeat" field.
func LastHeartbeatGTE(v time.Time) predicate.SagaExecutionData {
	return predicate.SagaExecutionData(sql.FieldGTE(FieldLastHeartbeat, v))
}

// LastHeartbeatLT applies the LT predicate on the "last_heartbeat" field.
func LastHeartbeatLT(v time.Time) predicate.SagaExecutionData {
	return predicate.SagaExecutionData(sql.FieldLT(FieldLastHeartbeat, v))
}

// LastHeartbeatLTE applies the LTE predicate on the "last_heartbeat" field.
func LastHeartbeatLTE(v time.Time) predicate.SagaExecutionData {
	return predicate.SagaExecutionData(sql.FieldLTE(FieldLastHeartbeat, v))
}

// LastHeartbeatIsNil applies the IsNil predicate on the "last_heartbeat" field.
func LastHeartbeatIsNil() predicate.SagaExecutionData {
	return predicate.SagaExecutionData(sql.FieldIsNull(FieldLastHeartbeat))
}

// LastHeartbeatNotNil applies the NotNil predicate on the "last_heartbeat" field.
func LastHeartbeatNotNil() predicate.SagaExecutionData {
	return predicate.SagaExecutionData(sql.FieldNotNull(FieldLastHeartbeat))
}

// StepIndexEQ applies the EQ predicate on the "step_index" field.
func StepIndexEQ(v int) predicate.SagaExecutionData {
	return predicate.SagaExecutionData(sql.FieldEQ(FieldStepIndex, v))
}

// StepIndexNEQ applies the NEQ predicate on the "step_index" field.
func StepIndexNEQ(v int) predicate.SagaExecutionData {
	return predicate.SagaExecutionData(sql.FieldNEQ(FieldStepIndex, v))
}

// StepIndexIn applies the In predicate on the "step_index" field.
func StepIndexIn(vs ...int) predicate.SagaExecutionData {
	return predicate.SagaExecutionData(sql.FieldIn(FieldStepIndex, vs...))
}

// StepIndexNotIn applies the NotIn predicate on the "step_index" field.
func StepIndexNotIn(vs ...int) predicate.SagaExecutionData {
	return predicate.SagaExecutionData(sql.FieldNotIn(FieldStepIndex, vs...))
}

// StepIndexGT applies the GT predicate on the "step_index" field.
func StepIndexGT(v int) predicate.SagaExecutionData {
	return predicate.SagaExecutionData(sql.FieldGT(FieldStepIndex, v))
}

// StepIndexGTE applies the GTE predicate on the "step_index" field.
func StepIndexGTE(v int) predicate.SagaExecutionData {
	return predicate.SagaExecutionData(sql.FieldGTE(FieldStepIndex, v))
}

// StepIndexLT applies the LT predicate on the "step_index" field.
func StepIndexLT(v int) predicate.SagaExecutionData {
	return predicate.SagaExecutionData(sql.FieldLT(FieldStepIndex, v))
}

// StepIndexLTE applies the LTE predicate on the "step_index" field.
func StepIndexLTE(v int) predicate.SagaExecutionData {
	return predicate.SagaExecutionData(sql.FieldLTE(FieldStepIndex, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.SagaExecutionData {
	return predicate.SagaExecutionData(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.SagaExecutionData {
	return predicate.SagaExecutionData(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.SagaExecutionData {
	return predicate.SagaExecutionData(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.SagaExecutionData {
	return predicate.SagaExecutionData(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.SagaExecutionData {
	return predicate.SagaExecutionData(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.SagaExecutionData {
	return predicate.SagaExecutionData(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.SagaExecutionData {
	return predicate.SagaExecutionData(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.SagaExecutionData {
	return predicate.SagaExecutionData(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.SagaExecutionData {
	return predicate.SagaExecutionData(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.SagaExecutionData {
	return predicate.SagaExecutionData(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.SagaExecutionData {
	return predicate.SagaExecutionData(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.SagaExecutionData {
	return predicate.SagaExecutionData(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.SagaExecutionData {
	return predicate.SagaExecutionData(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.SagaExecutionData {
	return predicate.SagaExecutionData(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.SagaExecutionData {
	return predicate.SagaExecutionData(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.SagaExecutionData {
	return predicate.SagaExecutionData(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasExecution applies the HasEdge predicate on the "execution" edge.
func HasExecution() predicate.SagaExecutionData {
	return predicate.SagaExecutionData(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ExecutionTable, ExecutionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExecutionWith applies the HasEdge predicate on the "execution" edge with a given conditions (other predicates).
func HasExecutionWith(preds ...predicate.SagaExecution) predicate.SagaExecutionData {
	return predicate.SagaExecutionData(func(s *sql.Selector) {
		step := newExecutionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasValues applies the HasEdge predicate on the "values" edge.
func HasValues() predicate.SagaExecutionData {
	return predicate.SagaExecutionData(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ValuesTable, ValuesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasValuesWith applies the HasEdge predicate on the "values" edge with a given conditions (other predicates).
func HasValuesWith(preds ...predicate.SagaValue) predicate.SagaExecutionData {
	return predicate.SagaExecutionData(func(s *sql.Selector) {
		step := newValuesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SagaExecutionData) predicate.SagaExecutionData {
	return predicate.SagaExecutionData(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SagaExecutionData) predicate.SagaExecutionData {
	return predicate.SagaExecutionData(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SagaExecutionData) predicate.SagaExecutionData {
	return predicate.SagaExecutionData(sql.NotPredicates(p))
}
