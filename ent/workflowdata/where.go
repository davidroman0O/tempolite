// Code generated by ent, DO NOT EDIT.

package workflowdata

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/davidroman0O/tempolite/ent/predicate"
	"github.com/davidroman0O/tempolite/ent/schema"
)

// ID filters vertices based on their ID field.
func ID(id schema.WorkflowDataID) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id schema.WorkflowDataID) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id schema.WorkflowDataID) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...schema.WorkflowDataID) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...schema.WorkflowDataID) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id schema.WorkflowDataID) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id schema.WorkflowDataID) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id schema.WorkflowDataID) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id schema.WorkflowDataID) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldLTE(FieldID, id))
}

// EntityID applies equality check predicate on the "entity_id" field. It's identical to EntityIDEQ.
func EntityID(v schema.WorkflowEntityID) predicate.WorkflowData {
	vc := int(v)
	return predicate.WorkflowData(sql.FieldEQ(FieldEntityID, vc))
}

// Duration applies equality check predicate on the "duration" field. It's identical to DurationEQ.
func Duration(v string) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldEQ(FieldDuration, v))
}

// Paused applies equality check predicate on the "paused" field. It's identical to PausedEQ.
func Paused(v bool) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldEQ(FieldPaused, v))
}

// Resumable applies equality check predicate on the "resumable" field. It's identical to ResumableEQ.
func Resumable(v bool) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldEQ(FieldResumable, v))
}

// IsRoot applies equality check predicate on the "is_root" field. It's identical to IsRootEQ.
func IsRoot(v bool) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldEQ(FieldIsRoot, v))
}

// Inputs applies equality check predicate on the "inputs" field. It's identical to InputsEQ.
func Inputs(v []byte) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldEQ(FieldInputs, v))
}

// ContinuedFrom applies equality check predicate on the "continued_from" field. It's identical to ContinuedFromEQ.
func ContinuedFrom(v schema.WorkflowEntityID) predicate.WorkflowData {
	vc := int(v)
	return predicate.WorkflowData(sql.FieldEQ(FieldContinuedFrom, vc))
}

// ContinuedExecutionFrom applies equality check predicate on the "continued_execution_from" field. It's identical to ContinuedExecutionFromEQ.
func ContinuedExecutionFrom(v schema.WorkflowExecutionID) predicate.WorkflowData {
	vc := int(v)
	return predicate.WorkflowData(sql.FieldEQ(FieldContinuedExecutionFrom, vc))
}

// WorkflowStepID applies equality check predicate on the "workflow_step_id" field. It's identical to WorkflowStepIDEQ.
func WorkflowStepID(v string) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldEQ(FieldWorkflowStepID, v))
}

// WorkflowFrom applies equality check predicate on the "workflow_from" field. It's identical to WorkflowFromEQ.
func WorkflowFrom(v schema.WorkflowEntityID) predicate.WorkflowData {
	vc := int(v)
	return predicate.WorkflowData(sql.FieldEQ(FieldWorkflowFrom, vc))
}

// WorkflowExecutionFrom applies equality check predicate on the "workflow_execution_from" field. It's identical to WorkflowExecutionFromEQ.
func WorkflowExecutionFrom(v schema.WorkflowExecutionID) predicate.WorkflowData {
	vc := int(v)
	return predicate.WorkflowData(sql.FieldEQ(FieldWorkflowExecutionFrom, vc))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldEQ(FieldUpdatedAt, v))
}

// EntityIDEQ applies the EQ predicate on the "entity_id" field.
func EntityIDEQ(v schema.WorkflowEntityID) predicate.WorkflowData {
	vc := int(v)
	return predicate.WorkflowData(sql.FieldEQ(FieldEntityID, vc))
}

// EntityIDNEQ applies the NEQ predicate on the "entity_id" field.
func EntityIDNEQ(v schema.WorkflowEntityID) predicate.WorkflowData {
	vc := int(v)
	return predicate.WorkflowData(sql.FieldNEQ(FieldEntityID, vc))
}

// EntityIDIn applies the In predicate on the "entity_id" field.
func EntityIDIn(vs ...schema.WorkflowEntityID) predicate.WorkflowData {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int(vs[i])
	}
	return predicate.WorkflowData(sql.FieldIn(FieldEntityID, v...))
}

// EntityIDNotIn applies the NotIn predicate on the "entity_id" field.
func EntityIDNotIn(vs ...schema.WorkflowEntityID) predicate.WorkflowData {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int(vs[i])
	}
	return predicate.WorkflowData(sql.FieldNotIn(FieldEntityID, v...))
}

// DurationEQ applies the EQ predicate on the "duration" field.
func DurationEQ(v string) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldEQ(FieldDuration, v))
}

// DurationNEQ applies the NEQ predicate on the "duration" field.
func DurationNEQ(v string) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldNEQ(FieldDuration, v))
}

// DurationIn applies the In predicate on the "duration" field.
func DurationIn(vs ...string) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldIn(FieldDuration, vs...))
}

// DurationNotIn applies the NotIn predicate on the "duration" field.
func DurationNotIn(vs ...string) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldNotIn(FieldDuration, vs...))
}

// DurationGT applies the GT predicate on the "duration" field.
func DurationGT(v string) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldGT(FieldDuration, v))
}

// DurationGTE applies the GTE predicate on the "duration" field.
func DurationGTE(v string) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldGTE(FieldDuration, v))
}

// DurationLT applies the LT predicate on the "duration" field.
func DurationLT(v string) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldLT(FieldDuration, v))
}

// DurationLTE applies the LTE predicate on the "duration" field.
func DurationLTE(v string) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldLTE(FieldDuration, v))
}

// DurationContains applies the Contains predicate on the "duration" field.
func DurationContains(v string) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldContains(FieldDuration, v))
}

// DurationHasPrefix applies the HasPrefix predicate on the "duration" field.
func DurationHasPrefix(v string) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldHasPrefix(FieldDuration, v))
}

// DurationHasSuffix applies the HasSuffix predicate on the "duration" field.
func DurationHasSuffix(v string) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldHasSuffix(FieldDuration, v))
}

// DurationIsNil applies the IsNil predicate on the "duration" field.
func DurationIsNil() predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldIsNull(FieldDuration))
}

// DurationNotNil applies the NotNil predicate on the "duration" field.
func DurationNotNil() predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldNotNull(FieldDuration))
}

// DurationEqualFold applies the EqualFold predicate on the "duration" field.
func DurationEqualFold(v string) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldEqualFold(FieldDuration, v))
}

// DurationContainsFold applies the ContainsFold predicate on the "duration" field.
func DurationContainsFold(v string) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldContainsFold(FieldDuration, v))
}

// PausedEQ applies the EQ predicate on the "paused" field.
func PausedEQ(v bool) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldEQ(FieldPaused, v))
}

// PausedNEQ applies the NEQ predicate on the "paused" field.
func PausedNEQ(v bool) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldNEQ(FieldPaused, v))
}

// ResumableEQ applies the EQ predicate on the "resumable" field.
func ResumableEQ(v bool) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldEQ(FieldResumable, v))
}

// ResumableNEQ applies the NEQ predicate on the "resumable" field.
func ResumableNEQ(v bool) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldNEQ(FieldResumable, v))
}

// IsRootEQ applies the EQ predicate on the "is_root" field.
func IsRootEQ(v bool) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldEQ(FieldIsRoot, v))
}

// IsRootNEQ applies the NEQ predicate on the "is_root" field.
func IsRootNEQ(v bool) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldNEQ(FieldIsRoot, v))
}

// InputsEQ applies the EQ predicate on the "inputs" field.
func InputsEQ(v []byte) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldEQ(FieldInputs, v))
}

// InputsNEQ applies the NEQ predicate on the "inputs" field.
func InputsNEQ(v []byte) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldNEQ(FieldInputs, v))
}

// InputsIn applies the In predicate on the "inputs" field.
func InputsIn(vs ...[]byte) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldIn(FieldInputs, vs...))
}

// InputsNotIn applies the NotIn predicate on the "inputs" field.
func InputsNotIn(vs ...[]byte) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldNotIn(FieldInputs, vs...))
}

// InputsGT applies the GT predicate on the "inputs" field.
func InputsGT(v []byte) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldGT(FieldInputs, v))
}

// InputsGTE applies the GTE predicate on the "inputs" field.
func InputsGTE(v []byte) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldGTE(FieldInputs, v))
}

// InputsLT applies the LT predicate on the "inputs" field.
func InputsLT(v []byte) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldLT(FieldInputs, v))
}

// InputsLTE applies the LTE predicate on the "inputs" field.
func InputsLTE(v []byte) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldLTE(FieldInputs, v))
}

// InputsIsNil applies the IsNil predicate on the "inputs" field.
func InputsIsNil() predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldIsNull(FieldInputs))
}

// InputsNotNil applies the NotNil predicate on the "inputs" field.
func InputsNotNil() predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldNotNull(FieldInputs))
}

// ContinuedFromEQ applies the EQ predicate on the "continued_from" field.
func ContinuedFromEQ(v schema.WorkflowEntityID) predicate.WorkflowData {
	vc := int(v)
	return predicate.WorkflowData(sql.FieldEQ(FieldContinuedFrom, vc))
}

// ContinuedFromNEQ applies the NEQ predicate on the "continued_from" field.
func ContinuedFromNEQ(v schema.WorkflowEntityID) predicate.WorkflowData {
	vc := int(v)
	return predicate.WorkflowData(sql.FieldNEQ(FieldContinuedFrom, vc))
}

// ContinuedFromIn applies the In predicate on the "continued_from" field.
func ContinuedFromIn(vs ...schema.WorkflowEntityID) predicate.WorkflowData {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int(vs[i])
	}
	return predicate.WorkflowData(sql.FieldIn(FieldContinuedFrom, v...))
}

// ContinuedFromNotIn applies the NotIn predicate on the "continued_from" field.
func ContinuedFromNotIn(vs ...schema.WorkflowEntityID) predicate.WorkflowData {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int(vs[i])
	}
	return predicate.WorkflowData(sql.FieldNotIn(FieldContinuedFrom, v...))
}

// ContinuedFromGT applies the GT predicate on the "continued_from" field.
func ContinuedFromGT(v schema.WorkflowEntityID) predicate.WorkflowData {
	vc := int(v)
	return predicate.WorkflowData(sql.FieldGT(FieldContinuedFrom, vc))
}

// ContinuedFromGTE applies the GTE predicate on the "continued_from" field.
func ContinuedFromGTE(v schema.WorkflowEntityID) predicate.WorkflowData {
	vc := int(v)
	return predicate.WorkflowData(sql.FieldGTE(FieldContinuedFrom, vc))
}

// ContinuedFromLT applies the LT predicate on the "continued_from" field.
func ContinuedFromLT(v schema.WorkflowEntityID) predicate.WorkflowData {
	vc := int(v)
	return predicate.WorkflowData(sql.FieldLT(FieldContinuedFrom, vc))
}

// ContinuedFromLTE applies the LTE predicate on the "continued_from" field.
func ContinuedFromLTE(v schema.WorkflowEntityID) predicate.WorkflowData {
	vc := int(v)
	return predicate.WorkflowData(sql.FieldLTE(FieldContinuedFrom, vc))
}

// ContinuedFromIsNil applies the IsNil predicate on the "continued_from" field.
func ContinuedFromIsNil() predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldIsNull(FieldContinuedFrom))
}

// ContinuedFromNotNil applies the NotNil predicate on the "continued_from" field.
func ContinuedFromNotNil() predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldNotNull(FieldContinuedFrom))
}

// ContinuedExecutionFromEQ applies the EQ predicate on the "continued_execution_from" field.
func ContinuedExecutionFromEQ(v schema.WorkflowExecutionID) predicate.WorkflowData {
	vc := int(v)
	return predicate.WorkflowData(sql.FieldEQ(FieldContinuedExecutionFrom, vc))
}

// ContinuedExecutionFromNEQ applies the NEQ predicate on the "continued_execution_from" field.
func ContinuedExecutionFromNEQ(v schema.WorkflowExecutionID) predicate.WorkflowData {
	vc := int(v)
	return predicate.WorkflowData(sql.FieldNEQ(FieldContinuedExecutionFrom, vc))
}

// ContinuedExecutionFromIn applies the In predicate on the "continued_execution_from" field.
func ContinuedExecutionFromIn(vs ...schema.WorkflowExecutionID) predicate.WorkflowData {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int(vs[i])
	}
	return predicate.WorkflowData(sql.FieldIn(FieldContinuedExecutionFrom, v...))
}

// ContinuedExecutionFromNotIn applies the NotIn predicate on the "continued_execution_from" field.
func ContinuedExecutionFromNotIn(vs ...schema.WorkflowExecutionID) predicate.WorkflowData {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int(vs[i])
	}
	return predicate.WorkflowData(sql.FieldNotIn(FieldContinuedExecutionFrom, v...))
}

// ContinuedExecutionFromGT applies the GT predicate on the "continued_execution_from" field.
func ContinuedExecutionFromGT(v schema.WorkflowExecutionID) predicate.WorkflowData {
	vc := int(v)
	return predicate.WorkflowData(sql.FieldGT(FieldContinuedExecutionFrom, vc))
}

// ContinuedExecutionFromGTE applies the GTE predicate on the "continued_execution_from" field.
func ContinuedExecutionFromGTE(v schema.WorkflowExecutionID) predicate.WorkflowData {
	vc := int(v)
	return predicate.WorkflowData(sql.FieldGTE(FieldContinuedExecutionFrom, vc))
}

// ContinuedExecutionFromLT applies the LT predicate on the "continued_execution_from" field.
func ContinuedExecutionFromLT(v schema.WorkflowExecutionID) predicate.WorkflowData {
	vc := int(v)
	return predicate.WorkflowData(sql.FieldLT(FieldContinuedExecutionFrom, vc))
}

// ContinuedExecutionFromLTE applies the LTE predicate on the "continued_execution_from" field.
func ContinuedExecutionFromLTE(v schema.WorkflowExecutionID) predicate.WorkflowData {
	vc := int(v)
	return predicate.WorkflowData(sql.FieldLTE(FieldContinuedExecutionFrom, vc))
}

// ContinuedExecutionFromIsNil applies the IsNil predicate on the "continued_execution_from" field.
func ContinuedExecutionFromIsNil() predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldIsNull(FieldContinuedExecutionFrom))
}

// ContinuedExecutionFromNotNil applies the NotNil predicate on the "continued_execution_from" field.
func ContinuedExecutionFromNotNil() predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldNotNull(FieldContinuedExecutionFrom))
}

// WorkflowStepIDEQ applies the EQ predicate on the "workflow_step_id" field.
func WorkflowStepIDEQ(v string) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldEQ(FieldWorkflowStepID, v))
}

// WorkflowStepIDNEQ applies the NEQ predicate on the "workflow_step_id" field.
func WorkflowStepIDNEQ(v string) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldNEQ(FieldWorkflowStepID, v))
}

// WorkflowStepIDIn applies the In predicate on the "workflow_step_id" field.
func WorkflowStepIDIn(vs ...string) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldIn(FieldWorkflowStepID, vs...))
}

// WorkflowStepIDNotIn applies the NotIn predicate on the "workflow_step_id" field.
func WorkflowStepIDNotIn(vs ...string) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldNotIn(FieldWorkflowStepID, vs...))
}

// WorkflowStepIDGT applies the GT predicate on the "workflow_step_id" field.
func WorkflowStepIDGT(v string) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldGT(FieldWorkflowStepID, v))
}

// WorkflowStepIDGTE applies the GTE predicate on the "workflow_step_id" field.
func WorkflowStepIDGTE(v string) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldGTE(FieldWorkflowStepID, v))
}

// WorkflowStepIDLT applies the LT predicate on the "workflow_step_id" field.
func WorkflowStepIDLT(v string) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldLT(FieldWorkflowStepID, v))
}

// WorkflowStepIDLTE applies the LTE predicate on the "workflow_step_id" field.
func WorkflowStepIDLTE(v string) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldLTE(FieldWorkflowStepID, v))
}

// WorkflowStepIDContains applies the Contains predicate on the "workflow_step_id" field.
func WorkflowStepIDContains(v string) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldContains(FieldWorkflowStepID, v))
}

// WorkflowStepIDHasPrefix applies the HasPrefix predicate on the "workflow_step_id" field.
func WorkflowStepIDHasPrefix(v string) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldHasPrefix(FieldWorkflowStepID, v))
}

// WorkflowStepIDHasSuffix applies the HasSuffix predicate on the "workflow_step_id" field.
func WorkflowStepIDHasSuffix(v string) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldHasSuffix(FieldWorkflowStepID, v))
}

// WorkflowStepIDIsNil applies the IsNil predicate on the "workflow_step_id" field.
func WorkflowStepIDIsNil() predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldIsNull(FieldWorkflowStepID))
}

// WorkflowStepIDNotNil applies the NotNil predicate on the "workflow_step_id" field.
func WorkflowStepIDNotNil() predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldNotNull(FieldWorkflowStepID))
}

// WorkflowStepIDEqualFold applies the EqualFold predicate on the "workflow_step_id" field.
func WorkflowStepIDEqualFold(v string) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldEqualFold(FieldWorkflowStepID, v))
}

// WorkflowStepIDContainsFold applies the ContainsFold predicate on the "workflow_step_id" field.
func WorkflowStepIDContainsFold(v string) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldContainsFold(FieldWorkflowStepID, v))
}

// WorkflowFromEQ applies the EQ predicate on the "workflow_from" field.
func WorkflowFromEQ(v schema.WorkflowEntityID) predicate.WorkflowData {
	vc := int(v)
	return predicate.WorkflowData(sql.FieldEQ(FieldWorkflowFrom, vc))
}

// WorkflowFromNEQ applies the NEQ predicate on the "workflow_from" field.
func WorkflowFromNEQ(v schema.WorkflowEntityID) predicate.WorkflowData {
	vc := int(v)
	return predicate.WorkflowData(sql.FieldNEQ(FieldWorkflowFrom, vc))
}

// WorkflowFromIn applies the In predicate on the "workflow_from" field.
func WorkflowFromIn(vs ...schema.WorkflowEntityID) predicate.WorkflowData {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int(vs[i])
	}
	return predicate.WorkflowData(sql.FieldIn(FieldWorkflowFrom, v...))
}

// WorkflowFromNotIn applies the NotIn predicate on the "workflow_from" field.
func WorkflowFromNotIn(vs ...schema.WorkflowEntityID) predicate.WorkflowData {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int(vs[i])
	}
	return predicate.WorkflowData(sql.FieldNotIn(FieldWorkflowFrom, v...))
}

// WorkflowFromGT applies the GT predicate on the "workflow_from" field.
func WorkflowFromGT(v schema.WorkflowEntityID) predicate.WorkflowData {
	vc := int(v)
	return predicate.WorkflowData(sql.FieldGT(FieldWorkflowFrom, vc))
}

// WorkflowFromGTE applies the GTE predicate on the "workflow_from" field.
func WorkflowFromGTE(v schema.WorkflowEntityID) predicate.WorkflowData {
	vc := int(v)
	return predicate.WorkflowData(sql.FieldGTE(FieldWorkflowFrom, vc))
}

// WorkflowFromLT applies the LT predicate on the "workflow_from" field.
func WorkflowFromLT(v schema.WorkflowEntityID) predicate.WorkflowData {
	vc := int(v)
	return predicate.WorkflowData(sql.FieldLT(FieldWorkflowFrom, vc))
}

// WorkflowFromLTE applies the LTE predicate on the "workflow_from" field.
func WorkflowFromLTE(v schema.WorkflowEntityID) predicate.WorkflowData {
	vc := int(v)
	return predicate.WorkflowData(sql.FieldLTE(FieldWorkflowFrom, vc))
}

// WorkflowFromIsNil applies the IsNil predicate on the "workflow_from" field.
func WorkflowFromIsNil() predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldIsNull(FieldWorkflowFrom))
}

// WorkflowFromNotNil applies the NotNil predicate on the "workflow_from" field.
func WorkflowFromNotNil() predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldNotNull(FieldWorkflowFrom))
}

// WorkflowExecutionFromEQ applies the EQ predicate on the "workflow_execution_from" field.
func WorkflowExecutionFromEQ(v schema.WorkflowExecutionID) predicate.WorkflowData {
	vc := int(v)
	return predicate.WorkflowData(sql.FieldEQ(FieldWorkflowExecutionFrom, vc))
}

// WorkflowExecutionFromNEQ applies the NEQ predicate on the "workflow_execution_from" field.
func WorkflowExecutionFromNEQ(v schema.WorkflowExecutionID) predicate.WorkflowData {
	vc := int(v)
	return predicate.WorkflowData(sql.FieldNEQ(FieldWorkflowExecutionFrom, vc))
}

// WorkflowExecutionFromIn applies the In predicate on the "workflow_execution_from" field.
func WorkflowExecutionFromIn(vs ...schema.WorkflowExecutionID) predicate.WorkflowData {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int(vs[i])
	}
	return predicate.WorkflowData(sql.FieldIn(FieldWorkflowExecutionFrom, v...))
}

// WorkflowExecutionFromNotIn applies the NotIn predicate on the "workflow_execution_from" field.
func WorkflowExecutionFromNotIn(vs ...schema.WorkflowExecutionID) predicate.WorkflowData {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int(vs[i])
	}
	return predicate.WorkflowData(sql.FieldNotIn(FieldWorkflowExecutionFrom, v...))
}

// WorkflowExecutionFromGT applies the GT predicate on the "workflow_execution_from" field.
func WorkflowExecutionFromGT(v schema.WorkflowExecutionID) predicate.WorkflowData {
	vc := int(v)
	return predicate.WorkflowData(sql.FieldGT(FieldWorkflowExecutionFrom, vc))
}

// WorkflowExecutionFromGTE applies the GTE predicate on the "workflow_execution_from" field.
func WorkflowExecutionFromGTE(v schema.WorkflowExecutionID) predicate.WorkflowData {
	vc := int(v)
	return predicate.WorkflowData(sql.FieldGTE(FieldWorkflowExecutionFrom, vc))
}

// WorkflowExecutionFromLT applies the LT predicate on the "workflow_execution_from" field.
func WorkflowExecutionFromLT(v schema.WorkflowExecutionID) predicate.WorkflowData {
	vc := int(v)
	return predicate.WorkflowData(sql.FieldLT(FieldWorkflowExecutionFrom, vc))
}

// WorkflowExecutionFromLTE applies the LTE predicate on the "workflow_execution_from" field.
func WorkflowExecutionFromLTE(v schema.WorkflowExecutionID) predicate.WorkflowData {
	vc := int(v)
	return predicate.WorkflowData(sql.FieldLTE(FieldWorkflowExecutionFrom, vc))
}

// WorkflowExecutionFromIsNil applies the IsNil predicate on the "workflow_execution_from" field.
func WorkflowExecutionFromIsNil() predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldIsNull(FieldWorkflowExecutionFrom))
}

// WorkflowExecutionFromNotNil applies the NotNil predicate on the "workflow_execution_from" field.
func WorkflowExecutionFromNotNil() predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldNotNull(FieldWorkflowExecutionFrom))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.WorkflowData {
	return predicate.WorkflowData(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasWorkflow applies the HasEdge predicate on the "workflow" edge.
func HasWorkflow() predicate.WorkflowData {
	return predicate.WorkflowData(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, WorkflowTable, WorkflowColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWorkflowWith applies the HasEdge predicate on the "workflow" edge with a given conditions (other predicates).
func HasWorkflowWith(preds ...predicate.WorkflowEntity) predicate.WorkflowData {
	return predicate.WorkflowData(func(s *sql.Selector) {
		step := newWorkflowStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.WorkflowData) predicate.WorkflowData {
	return predicate.WorkflowData(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.WorkflowData) predicate.WorkflowData {
	return predicate.WorkflowData(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.WorkflowData) predicate.WorkflowData {
	return predicate.WorkflowData(sql.NotPredicates(p))
}
