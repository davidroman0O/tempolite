// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/tempolite/ent/predicate"
	"github.com/davidroman0O/tempolite/ent/schema"
	"github.com/davidroman0O/tempolite/ent/signaldata"
	"github.com/davidroman0O/tempolite/ent/signalentity"
)

// SignalDataUpdate is the builder for updating SignalData entities.
type SignalDataUpdate struct {
	config
	hooks    []Hook
	mutation *SignalDataMutation
}

// Where appends a list predicates to the SignalDataUpdate builder.
func (sdu *SignalDataUpdate) Where(ps ...predicate.SignalData) *SignalDataUpdate {
	sdu.mutation.Where(ps...)
	return sdu
}

// SetEntityID sets the "entity_id" field.
func (sdu *SignalDataUpdate) SetEntityID(sei schema.SignalEntityID) *SignalDataUpdate {
	sdu.mutation.SetEntityID(sei)
	return sdu
}

// SetNillableEntityID sets the "entity_id" field if the given value is not nil.
func (sdu *SignalDataUpdate) SetNillableEntityID(sei *schema.SignalEntityID) *SignalDataUpdate {
	if sei != nil {
		sdu.SetEntityID(*sei)
	}
	return sdu
}

// SetName sets the "name" field.
func (sdu *SignalDataUpdate) SetName(s string) *SignalDataUpdate {
	sdu.mutation.SetName(s)
	return sdu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (sdu *SignalDataUpdate) SetNillableName(s *string) *SignalDataUpdate {
	if s != nil {
		sdu.SetName(*s)
	}
	return sdu
}

// SetCreatedAt sets the "created_at" field.
func (sdu *SignalDataUpdate) SetCreatedAt(t time.Time) *SignalDataUpdate {
	sdu.mutation.SetCreatedAt(t)
	return sdu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sdu *SignalDataUpdate) SetNillableCreatedAt(t *time.Time) *SignalDataUpdate {
	if t != nil {
		sdu.SetCreatedAt(*t)
	}
	return sdu
}

// SetUpdatedAt sets the "updated_at" field.
func (sdu *SignalDataUpdate) SetUpdatedAt(t time.Time) *SignalDataUpdate {
	sdu.mutation.SetUpdatedAt(t)
	return sdu
}

// SetSignalID sets the "signal" edge to the SignalEntity entity by ID.
func (sdu *SignalDataUpdate) SetSignalID(id schema.SignalEntityID) *SignalDataUpdate {
	sdu.mutation.SetSignalID(id)
	return sdu
}

// SetSignal sets the "signal" edge to the SignalEntity entity.
func (sdu *SignalDataUpdate) SetSignal(s *SignalEntity) *SignalDataUpdate {
	return sdu.SetSignalID(s.ID)
}

// Mutation returns the SignalDataMutation object of the builder.
func (sdu *SignalDataUpdate) Mutation() *SignalDataMutation {
	return sdu.mutation
}

// ClearSignal clears the "signal" edge to the SignalEntity entity.
func (sdu *SignalDataUpdate) ClearSignal() *SignalDataUpdate {
	sdu.mutation.ClearSignal()
	return sdu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sdu *SignalDataUpdate) Save(ctx context.Context) (int, error) {
	sdu.defaults()
	return withHooks(ctx, sdu.sqlSave, sdu.mutation, sdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sdu *SignalDataUpdate) SaveX(ctx context.Context) int {
	affected, err := sdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sdu *SignalDataUpdate) Exec(ctx context.Context) error {
	_, err := sdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sdu *SignalDataUpdate) ExecX(ctx context.Context) {
	if err := sdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sdu *SignalDataUpdate) defaults() {
	if _, ok := sdu.mutation.UpdatedAt(); !ok {
		v := signaldata.UpdateDefaultUpdatedAt()
		sdu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sdu *SignalDataUpdate) check() error {
	if sdu.mutation.SignalCleared() && len(sdu.mutation.SignalIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SignalData.signal"`)
	}
	return nil
}

func (sdu *SignalDataUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sdu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(signaldata.Table, signaldata.Columns, sqlgraph.NewFieldSpec(signaldata.FieldID, field.TypeInt))
	if ps := sdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sdu.mutation.Name(); ok {
		_spec.SetField(signaldata.FieldName, field.TypeString, value)
	}
	if value, ok := sdu.mutation.CreatedAt(); ok {
		_spec.SetField(signaldata.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := sdu.mutation.UpdatedAt(); ok {
		_spec.SetField(signaldata.FieldUpdatedAt, field.TypeTime, value)
	}
	if sdu.mutation.SignalCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   signaldata.SignalTable,
			Columns: []string{signaldata.SignalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signalentity.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sdu.mutation.SignalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   signaldata.SignalTable,
			Columns: []string{signaldata.SignalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signalentity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{signaldata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sdu.mutation.done = true
	return n, nil
}

// SignalDataUpdateOne is the builder for updating a single SignalData entity.
type SignalDataUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SignalDataMutation
}

// SetEntityID sets the "entity_id" field.
func (sduo *SignalDataUpdateOne) SetEntityID(sei schema.SignalEntityID) *SignalDataUpdateOne {
	sduo.mutation.SetEntityID(sei)
	return sduo
}

// SetNillableEntityID sets the "entity_id" field if the given value is not nil.
func (sduo *SignalDataUpdateOne) SetNillableEntityID(sei *schema.SignalEntityID) *SignalDataUpdateOne {
	if sei != nil {
		sduo.SetEntityID(*sei)
	}
	return sduo
}

// SetName sets the "name" field.
func (sduo *SignalDataUpdateOne) SetName(s string) *SignalDataUpdateOne {
	sduo.mutation.SetName(s)
	return sduo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (sduo *SignalDataUpdateOne) SetNillableName(s *string) *SignalDataUpdateOne {
	if s != nil {
		sduo.SetName(*s)
	}
	return sduo
}

// SetCreatedAt sets the "created_at" field.
func (sduo *SignalDataUpdateOne) SetCreatedAt(t time.Time) *SignalDataUpdateOne {
	sduo.mutation.SetCreatedAt(t)
	return sduo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sduo *SignalDataUpdateOne) SetNillableCreatedAt(t *time.Time) *SignalDataUpdateOne {
	if t != nil {
		sduo.SetCreatedAt(*t)
	}
	return sduo
}

// SetUpdatedAt sets the "updated_at" field.
func (sduo *SignalDataUpdateOne) SetUpdatedAt(t time.Time) *SignalDataUpdateOne {
	sduo.mutation.SetUpdatedAt(t)
	return sduo
}

// SetSignalID sets the "signal" edge to the SignalEntity entity by ID.
func (sduo *SignalDataUpdateOne) SetSignalID(id schema.SignalEntityID) *SignalDataUpdateOne {
	sduo.mutation.SetSignalID(id)
	return sduo
}

// SetSignal sets the "signal" edge to the SignalEntity entity.
func (sduo *SignalDataUpdateOne) SetSignal(s *SignalEntity) *SignalDataUpdateOne {
	return sduo.SetSignalID(s.ID)
}

// Mutation returns the SignalDataMutation object of the builder.
func (sduo *SignalDataUpdateOne) Mutation() *SignalDataMutation {
	return sduo.mutation
}

// ClearSignal clears the "signal" edge to the SignalEntity entity.
func (sduo *SignalDataUpdateOne) ClearSignal() *SignalDataUpdateOne {
	sduo.mutation.ClearSignal()
	return sduo
}

// Where appends a list predicates to the SignalDataUpdate builder.
func (sduo *SignalDataUpdateOne) Where(ps ...predicate.SignalData) *SignalDataUpdateOne {
	sduo.mutation.Where(ps...)
	return sduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sduo *SignalDataUpdateOne) Select(field string, fields ...string) *SignalDataUpdateOne {
	sduo.fields = append([]string{field}, fields...)
	return sduo
}

// Save executes the query and returns the updated SignalData entity.
func (sduo *SignalDataUpdateOne) Save(ctx context.Context) (*SignalData, error) {
	sduo.defaults()
	return withHooks(ctx, sduo.sqlSave, sduo.mutation, sduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sduo *SignalDataUpdateOne) SaveX(ctx context.Context) *SignalData {
	node, err := sduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sduo *SignalDataUpdateOne) Exec(ctx context.Context) error {
	_, err := sduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sduo *SignalDataUpdateOne) ExecX(ctx context.Context) {
	if err := sduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sduo *SignalDataUpdateOne) defaults() {
	if _, ok := sduo.mutation.UpdatedAt(); !ok {
		v := signaldata.UpdateDefaultUpdatedAt()
		sduo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sduo *SignalDataUpdateOne) check() error {
	if sduo.mutation.SignalCleared() && len(sduo.mutation.SignalIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SignalData.signal"`)
	}
	return nil
}

func (sduo *SignalDataUpdateOne) sqlSave(ctx context.Context) (_node *SignalData, err error) {
	if err := sduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(signaldata.Table, signaldata.Columns, sqlgraph.NewFieldSpec(signaldata.FieldID, field.TypeInt))
	id, ok := sduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SignalData.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, signaldata.FieldID)
		for _, f := range fields {
			if !signaldata.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != signaldata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sduo.mutation.Name(); ok {
		_spec.SetField(signaldata.FieldName, field.TypeString, value)
	}
	if value, ok := sduo.mutation.CreatedAt(); ok {
		_spec.SetField(signaldata.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := sduo.mutation.UpdatedAt(); ok {
		_spec.SetField(signaldata.FieldUpdatedAt, field.TypeTime, value)
	}
	if sduo.mutation.SignalCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   signaldata.SignalTable,
			Columns: []string{signaldata.SignalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signalentity.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sduo.mutation.SignalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   signaldata.SignalTable,
			Columns: []string{signaldata.SignalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signalentity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SignalData{config: sduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{signaldata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sduo.mutation.done = true
	return _node, nil
}
