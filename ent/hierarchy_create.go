// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/tempolite/ent/hierarchy"
	"github.com/davidroman0O/tempolite/ent/run"
	"github.com/davidroman0O/tempolite/ent/schema"
)

// HierarchyCreate is the builder for creating a Hierarchy entity.
type HierarchyCreate struct {
	config
	mutation *HierarchyMutation
	hooks    []Hook
}

// SetRunID sets the "run_id" field.
func (hc *HierarchyCreate) SetRunID(si schema.RunID) *HierarchyCreate {
	hc.mutation.SetRunID(si)
	return hc
}

// SetParentEntityID sets the "parent_entity_id" field.
func (hc *HierarchyCreate) SetParentEntityID(i int) *HierarchyCreate {
	hc.mutation.SetParentEntityID(i)
	return hc
}

// SetChildEntityID sets the "child_entity_id" field.
func (hc *HierarchyCreate) SetChildEntityID(i int) *HierarchyCreate {
	hc.mutation.SetChildEntityID(i)
	return hc
}

// SetParentExecutionID sets the "parent_execution_id" field.
func (hc *HierarchyCreate) SetParentExecutionID(i int) *HierarchyCreate {
	hc.mutation.SetParentExecutionID(i)
	return hc
}

// SetChildExecutionID sets the "child_execution_id" field.
func (hc *HierarchyCreate) SetChildExecutionID(i int) *HierarchyCreate {
	hc.mutation.SetChildExecutionID(i)
	return hc
}

// SetParentStepID sets the "parent_step_id" field.
func (hc *HierarchyCreate) SetParentStepID(s string) *HierarchyCreate {
	hc.mutation.SetParentStepID(s)
	return hc
}

// SetChildStepID sets the "child_step_id" field.
func (hc *HierarchyCreate) SetChildStepID(s string) *HierarchyCreate {
	hc.mutation.SetChildStepID(s)
	return hc
}

// SetParentType sets the "parent_type" field.
func (hc *HierarchyCreate) SetParentType(st schema.EntityType) *HierarchyCreate {
	hc.mutation.SetParentType(st)
	return hc
}

// SetChildType sets the "child_type" field.
func (hc *HierarchyCreate) SetChildType(st schema.EntityType) *HierarchyCreate {
	hc.mutation.SetChildType(st)
	return hc
}

// SetCreatedAt sets the "created_at" field.
func (hc *HierarchyCreate) SetCreatedAt(t time.Time) *HierarchyCreate {
	hc.mutation.SetCreatedAt(t)
	return hc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (hc *HierarchyCreate) SetNillableCreatedAt(t *time.Time) *HierarchyCreate {
	if t != nil {
		hc.SetCreatedAt(*t)
	}
	return hc
}

// SetUpdatedAt sets the "updated_at" field.
func (hc *HierarchyCreate) SetUpdatedAt(t time.Time) *HierarchyCreate {
	hc.mutation.SetUpdatedAt(t)
	return hc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (hc *HierarchyCreate) SetNillableUpdatedAt(t *time.Time) *HierarchyCreate {
	if t != nil {
		hc.SetUpdatedAt(*t)
	}
	return hc
}

// SetID sets the "id" field.
func (hc *HierarchyCreate) SetID(si schema.HierarchyID) *HierarchyCreate {
	hc.mutation.SetID(si)
	return hc
}

// SetRun sets the "run" edge to the Run entity.
func (hc *HierarchyCreate) SetRun(r *Run) *HierarchyCreate {
	return hc.SetRunID(r.ID)
}

// Mutation returns the HierarchyMutation object of the builder.
func (hc *HierarchyCreate) Mutation() *HierarchyMutation {
	return hc.mutation
}

// Save creates the Hierarchy in the database.
func (hc *HierarchyCreate) Save(ctx context.Context) (*Hierarchy, error) {
	hc.defaults()
	return withHooks(ctx, hc.sqlSave, hc.mutation, hc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (hc *HierarchyCreate) SaveX(ctx context.Context) *Hierarchy {
	v, err := hc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hc *HierarchyCreate) Exec(ctx context.Context) error {
	_, err := hc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hc *HierarchyCreate) ExecX(ctx context.Context) {
	if err := hc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hc *HierarchyCreate) defaults() {
	if _, ok := hc.mutation.CreatedAt(); !ok {
		v := hierarchy.DefaultCreatedAt()
		hc.mutation.SetCreatedAt(v)
	}
	if _, ok := hc.mutation.UpdatedAt(); !ok {
		v := hierarchy.DefaultUpdatedAt()
		hc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hc *HierarchyCreate) check() error {
	if _, ok := hc.mutation.RunID(); !ok {
		return &ValidationError{Name: "run_id", err: errors.New(`ent: missing required field "Hierarchy.run_id"`)}
	}
	if _, ok := hc.mutation.ParentEntityID(); !ok {
		return &ValidationError{Name: "parent_entity_id", err: errors.New(`ent: missing required field "Hierarchy.parent_entity_id"`)}
	}
	if _, ok := hc.mutation.ChildEntityID(); !ok {
		return &ValidationError{Name: "child_entity_id", err: errors.New(`ent: missing required field "Hierarchy.child_entity_id"`)}
	}
	if _, ok := hc.mutation.ParentExecutionID(); !ok {
		return &ValidationError{Name: "parent_execution_id", err: errors.New(`ent: missing required field "Hierarchy.parent_execution_id"`)}
	}
	if _, ok := hc.mutation.ChildExecutionID(); !ok {
		return &ValidationError{Name: "child_execution_id", err: errors.New(`ent: missing required field "Hierarchy.child_execution_id"`)}
	}
	if _, ok := hc.mutation.ParentStepID(); !ok {
		return &ValidationError{Name: "parent_step_id", err: errors.New(`ent: missing required field "Hierarchy.parent_step_id"`)}
	}
	if _, ok := hc.mutation.ChildStepID(); !ok {
		return &ValidationError{Name: "child_step_id", err: errors.New(`ent: missing required field "Hierarchy.child_step_id"`)}
	}
	if _, ok := hc.mutation.ParentType(); !ok {
		return &ValidationError{Name: "parent_type", err: errors.New(`ent: missing required field "Hierarchy.parent_type"`)}
	}
	if _, ok := hc.mutation.ChildType(); !ok {
		return &ValidationError{Name: "child_type", err: errors.New(`ent: missing required field "Hierarchy.child_type"`)}
	}
	if _, ok := hc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Hierarchy.created_at"`)}
	}
	if _, ok := hc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Hierarchy.updated_at"`)}
	}
	if len(hc.mutation.RunIDs()) == 0 {
		return &ValidationError{Name: "run", err: errors.New(`ent: missing required edge "Hierarchy.run"`)}
	}
	return nil
}

func (hc *HierarchyCreate) sqlSave(ctx context.Context) (*Hierarchy, error) {
	if err := hc.check(); err != nil {
		return nil, err
	}
	_node, _spec := hc.createSpec()
	if err := sqlgraph.CreateNode(ctx, hc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = schema.HierarchyID(id)
	}
	hc.mutation.id = &_node.ID
	hc.mutation.done = true
	return _node, nil
}

func (hc *HierarchyCreate) createSpec() (*Hierarchy, *sqlgraph.CreateSpec) {
	var (
		_node = &Hierarchy{config: hc.config}
		_spec = sqlgraph.NewCreateSpec(hierarchy.Table, sqlgraph.NewFieldSpec(hierarchy.FieldID, field.TypeInt))
	)
	if id, ok := hc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := hc.mutation.ParentEntityID(); ok {
		_spec.SetField(hierarchy.FieldParentEntityID, field.TypeInt, value)
		_node.ParentEntityID = value
	}
	if value, ok := hc.mutation.ChildEntityID(); ok {
		_spec.SetField(hierarchy.FieldChildEntityID, field.TypeInt, value)
		_node.ChildEntityID = value
	}
	if value, ok := hc.mutation.ParentExecutionID(); ok {
		_spec.SetField(hierarchy.FieldParentExecutionID, field.TypeInt, value)
		_node.ParentExecutionID = value
	}
	if value, ok := hc.mutation.ChildExecutionID(); ok {
		_spec.SetField(hierarchy.FieldChildExecutionID, field.TypeInt, value)
		_node.ChildExecutionID = value
	}
	if value, ok := hc.mutation.ParentStepID(); ok {
		_spec.SetField(hierarchy.FieldParentStepID, field.TypeString, value)
		_node.ParentStepID = value
	}
	if value, ok := hc.mutation.ChildStepID(); ok {
		_spec.SetField(hierarchy.FieldChildStepID, field.TypeString, value)
		_node.ChildStepID = value
	}
	if value, ok := hc.mutation.ParentType(); ok {
		_spec.SetField(hierarchy.FieldParentType, field.TypeString, value)
		_node.ParentType = value
	}
	if value, ok := hc.mutation.ChildType(); ok {
		_spec.SetField(hierarchy.FieldChildType, field.TypeString, value)
		_node.ChildType = value
	}
	if value, ok := hc.mutation.CreatedAt(); ok {
		_spec.SetField(hierarchy.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := hc.mutation.UpdatedAt(); ok {
		_spec.SetField(hierarchy.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := hc.mutation.RunIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hierarchy.RunTable,
			Columns: []string{hierarchy.RunColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(run.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RunID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// HierarchyCreateBulk is the builder for creating many Hierarchy entities in bulk.
type HierarchyCreateBulk struct {
	config
	err      error
	builders []*HierarchyCreate
}

// Save creates the Hierarchy entities in the database.
func (hcb *HierarchyCreateBulk) Save(ctx context.Context) ([]*Hierarchy, error) {
	if hcb.err != nil {
		return nil, hcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(hcb.builders))
	nodes := make([]*Hierarchy, len(hcb.builders))
	mutators := make([]Mutator, len(hcb.builders))
	for i := range hcb.builders {
		func(i int, root context.Context) {
			builder := hcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HierarchyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = schema.HierarchyID(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hcb *HierarchyCreateBulk) SaveX(ctx context.Context) []*Hierarchy {
	v, err := hcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hcb *HierarchyCreateBulk) Exec(ctx context.Context) error {
	_, err := hcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hcb *HierarchyCreateBulk) ExecX(ctx context.Context) {
	if err := hcb.Exec(ctx); err != nil {
		panic(err)
	}
}
