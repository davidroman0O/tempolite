// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/tempolite/ent/activityentity"
	"github.com/davidroman0O/tempolite/ent/eventlog"
	"github.com/davidroman0O/tempolite/ent/predicate"
	"github.com/davidroman0O/tempolite/ent/queue"
	"github.com/davidroman0O/tempolite/ent/run"
	"github.com/davidroman0O/tempolite/ent/sagaentity"
	"github.com/davidroman0O/tempolite/ent/schema"
	"github.com/davidroman0O/tempolite/ent/sideeffectentity"
	"github.com/davidroman0O/tempolite/ent/version"
	"github.com/davidroman0O/tempolite/ent/workflowdata"
	"github.com/davidroman0O/tempolite/ent/workflowentity"
	"github.com/davidroman0O/tempolite/ent/workflowexecution"
)

// WorkflowEntityUpdate is the builder for updating WorkflowEntity entities.
type WorkflowEntityUpdate struct {
	config
	hooks    []Hook
	mutation *WorkflowEntityMutation
}

// Where appends a list predicates to the WorkflowEntityUpdate builder.
func (weu *WorkflowEntityUpdate) Where(ps ...predicate.WorkflowEntity) *WorkflowEntityUpdate {
	weu.mutation.Where(ps...)
	return weu
}

// SetHandlerName sets the "handler_name" field.
func (weu *WorkflowEntityUpdate) SetHandlerName(s string) *WorkflowEntityUpdate {
	weu.mutation.SetHandlerName(s)
	return weu
}

// SetNillableHandlerName sets the "handler_name" field if the given value is not nil.
func (weu *WorkflowEntityUpdate) SetNillableHandlerName(s *string) *WorkflowEntityUpdate {
	if s != nil {
		weu.SetHandlerName(*s)
	}
	return weu
}

// SetType sets the "type" field.
func (weu *WorkflowEntityUpdate) SetType(st schema.EntityType) *WorkflowEntityUpdate {
	weu.mutation.SetType(st)
	return weu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (weu *WorkflowEntityUpdate) SetNillableType(st *schema.EntityType) *WorkflowEntityUpdate {
	if st != nil {
		weu.SetType(*st)
	}
	return weu
}

// SetStatus sets the "status" field.
func (weu *WorkflowEntityUpdate) SetStatus(ss schema.EntityStatus) *WorkflowEntityUpdate {
	weu.mutation.SetStatus(ss)
	return weu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (weu *WorkflowEntityUpdate) SetNillableStatus(ss *schema.EntityStatus) *WorkflowEntityUpdate {
	if ss != nil {
		weu.SetStatus(*ss)
	}
	return weu
}

// SetStepID sets the "step_id" field.
func (weu *WorkflowEntityUpdate) SetStepID(ssi schema.WorkflowStepID) *WorkflowEntityUpdate {
	weu.mutation.SetStepID(ssi)
	return weu
}

// SetNillableStepID sets the "step_id" field if the given value is not nil.
func (weu *WorkflowEntityUpdate) SetNillableStepID(ssi *schema.WorkflowStepID) *WorkflowEntityUpdate {
	if ssi != nil {
		weu.SetStepID(*ssi)
	}
	return weu
}

// SetRunID sets the "run_id" field.
func (weu *WorkflowEntityUpdate) SetRunID(si schema.RunID) *WorkflowEntityUpdate {
	weu.mutation.SetRunID(si)
	return weu
}

// SetNillableRunID sets the "run_id" field if the given value is not nil.
func (weu *WorkflowEntityUpdate) SetNillableRunID(si *schema.RunID) *WorkflowEntityUpdate {
	if si != nil {
		weu.SetRunID(*si)
	}
	return weu
}

// SetRetryPolicy sets the "retry_policy" field.
func (weu *WorkflowEntityUpdate) SetRetryPolicy(sp schema.RetryPolicy) *WorkflowEntityUpdate {
	weu.mutation.SetRetryPolicy(sp)
	return weu
}

// SetNillableRetryPolicy sets the "retry_policy" field if the given value is not nil.
func (weu *WorkflowEntityUpdate) SetNillableRetryPolicy(sp *schema.RetryPolicy) *WorkflowEntityUpdate {
	if sp != nil {
		weu.SetRetryPolicy(*sp)
	}
	return weu
}

// SetRetryState sets the "retry_state" field.
func (weu *WorkflowEntityUpdate) SetRetryState(ss schema.RetryState) *WorkflowEntityUpdate {
	weu.mutation.SetRetryState(ss)
	return weu
}

// SetNillableRetryState sets the "retry_state" field if the given value is not nil.
func (weu *WorkflowEntityUpdate) SetNillableRetryState(ss *schema.RetryState) *WorkflowEntityUpdate {
	if ss != nil {
		weu.SetRetryState(*ss)
	}
	return weu
}

// SetCreatedAt sets the "created_at" field.
func (weu *WorkflowEntityUpdate) SetCreatedAt(t time.Time) *WorkflowEntityUpdate {
	weu.mutation.SetCreatedAt(t)
	return weu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (weu *WorkflowEntityUpdate) SetNillableCreatedAt(t *time.Time) *WorkflowEntityUpdate {
	if t != nil {
		weu.SetCreatedAt(*t)
	}
	return weu
}

// SetUpdatedAt sets the "updated_at" field.
func (weu *WorkflowEntityUpdate) SetUpdatedAt(t time.Time) *WorkflowEntityUpdate {
	weu.mutation.SetUpdatedAt(t)
	return weu
}

// SetQueueID sets the "queue" edge to the Queue entity by ID.
func (weu *WorkflowEntityUpdate) SetQueueID(id schema.QueueID) *WorkflowEntityUpdate {
	weu.mutation.SetQueueID(id)
	return weu
}

// SetNillableQueueID sets the "queue" edge to the Queue entity by ID if the given value is not nil.
func (weu *WorkflowEntityUpdate) SetNillableQueueID(id *schema.QueueID) *WorkflowEntityUpdate {
	if id != nil {
		weu = weu.SetQueueID(*id)
	}
	return weu
}

// SetQueue sets the "queue" edge to the Queue entity.
func (weu *WorkflowEntityUpdate) SetQueue(q *Queue) *WorkflowEntityUpdate {
	return weu.SetQueueID(q.ID)
}

// SetRun sets the "run" edge to the Run entity.
func (weu *WorkflowEntityUpdate) SetRun(r *Run) *WorkflowEntityUpdate {
	return weu.SetRunID(r.ID)
}

// AddVersionIDs adds the "versions" edge to the Version entity by IDs.
func (weu *WorkflowEntityUpdate) AddVersionIDs(ids ...schema.VersionID) *WorkflowEntityUpdate {
	weu.mutation.AddVersionIDs(ids...)
	return weu
}

// AddVersions adds the "versions" edges to the Version entity.
func (weu *WorkflowEntityUpdate) AddVersions(v ...*Version) *WorkflowEntityUpdate {
	ids := make([]schema.VersionID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return weu.AddVersionIDs(ids...)
}

// SetWorkflowDataID sets the "workflow_data" edge to the WorkflowData entity by ID.
func (weu *WorkflowEntityUpdate) SetWorkflowDataID(id schema.WorkflowDataID) *WorkflowEntityUpdate {
	weu.mutation.SetWorkflowDataID(id)
	return weu
}

// SetNillableWorkflowDataID sets the "workflow_data" edge to the WorkflowData entity by ID if the given value is not nil.
func (weu *WorkflowEntityUpdate) SetNillableWorkflowDataID(id *schema.WorkflowDataID) *WorkflowEntityUpdate {
	if id != nil {
		weu = weu.SetWorkflowDataID(*id)
	}
	return weu
}

// SetWorkflowData sets the "workflow_data" edge to the WorkflowData entity.
func (weu *WorkflowEntityUpdate) SetWorkflowData(w *WorkflowData) *WorkflowEntityUpdate {
	return weu.SetWorkflowDataID(w.ID)
}

// AddActivityChildIDs adds the "activity_children" edge to the ActivityEntity entity by IDs.
func (weu *WorkflowEntityUpdate) AddActivityChildIDs(ids ...schema.ActivityEntityID) *WorkflowEntityUpdate {
	weu.mutation.AddActivityChildIDs(ids...)
	return weu
}

// AddActivityChildren adds the "activity_children" edges to the ActivityEntity entity.
func (weu *WorkflowEntityUpdate) AddActivityChildren(a ...*ActivityEntity) *WorkflowEntityUpdate {
	ids := make([]schema.ActivityEntityID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return weu.AddActivityChildIDs(ids...)
}

// AddSagaChildIDs adds the "saga_children" edge to the SagaEntity entity by IDs.
func (weu *WorkflowEntityUpdate) AddSagaChildIDs(ids ...schema.SagaEntityID) *WorkflowEntityUpdate {
	weu.mutation.AddSagaChildIDs(ids...)
	return weu
}

// AddSagaChildren adds the "saga_children" edges to the SagaEntity entity.
func (weu *WorkflowEntityUpdate) AddSagaChildren(s ...*SagaEntity) *WorkflowEntityUpdate {
	ids := make([]schema.SagaEntityID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return weu.AddSagaChildIDs(ids...)
}

// AddSideEffectChildIDs adds the "side_effect_children" edge to the SideEffectEntity entity by IDs.
func (weu *WorkflowEntityUpdate) AddSideEffectChildIDs(ids ...schema.SideEffectEntityID) *WorkflowEntityUpdate {
	weu.mutation.AddSideEffectChildIDs(ids...)
	return weu
}

// AddSideEffectChildren adds the "side_effect_children" edges to the SideEffectEntity entity.
func (weu *WorkflowEntityUpdate) AddSideEffectChildren(s ...*SideEffectEntity) *WorkflowEntityUpdate {
	ids := make([]schema.SideEffectEntityID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return weu.AddSideEffectChildIDs(ids...)
}

// AddExecutionIDs adds the "executions" edge to the WorkflowExecution entity by IDs.
func (weu *WorkflowEntityUpdate) AddExecutionIDs(ids ...schema.WorkflowExecutionID) *WorkflowEntityUpdate {
	weu.mutation.AddExecutionIDs(ids...)
	return weu
}

// AddExecutions adds the "executions" edges to the WorkflowExecution entity.
func (weu *WorkflowEntityUpdate) AddExecutions(w ...*WorkflowExecution) *WorkflowEntityUpdate {
	ids := make([]schema.WorkflowExecutionID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return weu.AddExecutionIDs(ids...)
}

// AddEventIDs adds the "events" edge to the EventLog entity by IDs.
func (weu *WorkflowEntityUpdate) AddEventIDs(ids ...schema.EventLogID) *WorkflowEntityUpdate {
	weu.mutation.AddEventIDs(ids...)
	return weu
}

// AddEvents adds the "events" edges to the EventLog entity.
func (weu *WorkflowEntityUpdate) AddEvents(e ...*EventLog) *WorkflowEntityUpdate {
	ids := make([]schema.EventLogID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return weu.AddEventIDs(ids...)
}

// Mutation returns the WorkflowEntityMutation object of the builder.
func (weu *WorkflowEntityUpdate) Mutation() *WorkflowEntityMutation {
	return weu.mutation
}

// ClearQueue clears the "queue" edge to the Queue entity.
func (weu *WorkflowEntityUpdate) ClearQueue() *WorkflowEntityUpdate {
	weu.mutation.ClearQueue()
	return weu
}

// ClearRun clears the "run" edge to the Run entity.
func (weu *WorkflowEntityUpdate) ClearRun() *WorkflowEntityUpdate {
	weu.mutation.ClearRun()
	return weu
}

// ClearVersions clears all "versions" edges to the Version entity.
func (weu *WorkflowEntityUpdate) ClearVersions() *WorkflowEntityUpdate {
	weu.mutation.ClearVersions()
	return weu
}

// RemoveVersionIDs removes the "versions" edge to Version entities by IDs.
func (weu *WorkflowEntityUpdate) RemoveVersionIDs(ids ...schema.VersionID) *WorkflowEntityUpdate {
	weu.mutation.RemoveVersionIDs(ids...)
	return weu
}

// RemoveVersions removes "versions" edges to Version entities.
func (weu *WorkflowEntityUpdate) RemoveVersions(v ...*Version) *WorkflowEntityUpdate {
	ids := make([]schema.VersionID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return weu.RemoveVersionIDs(ids...)
}

// ClearWorkflowData clears the "workflow_data" edge to the WorkflowData entity.
func (weu *WorkflowEntityUpdate) ClearWorkflowData() *WorkflowEntityUpdate {
	weu.mutation.ClearWorkflowData()
	return weu
}

// ClearActivityChildren clears all "activity_children" edges to the ActivityEntity entity.
func (weu *WorkflowEntityUpdate) ClearActivityChildren() *WorkflowEntityUpdate {
	weu.mutation.ClearActivityChildren()
	return weu
}

// RemoveActivityChildIDs removes the "activity_children" edge to ActivityEntity entities by IDs.
func (weu *WorkflowEntityUpdate) RemoveActivityChildIDs(ids ...schema.ActivityEntityID) *WorkflowEntityUpdate {
	weu.mutation.RemoveActivityChildIDs(ids...)
	return weu
}

// RemoveActivityChildren removes "activity_children" edges to ActivityEntity entities.
func (weu *WorkflowEntityUpdate) RemoveActivityChildren(a ...*ActivityEntity) *WorkflowEntityUpdate {
	ids := make([]schema.ActivityEntityID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return weu.RemoveActivityChildIDs(ids...)
}

// ClearSagaChildren clears all "saga_children" edges to the SagaEntity entity.
func (weu *WorkflowEntityUpdate) ClearSagaChildren() *WorkflowEntityUpdate {
	weu.mutation.ClearSagaChildren()
	return weu
}

// RemoveSagaChildIDs removes the "saga_children" edge to SagaEntity entities by IDs.
func (weu *WorkflowEntityUpdate) RemoveSagaChildIDs(ids ...schema.SagaEntityID) *WorkflowEntityUpdate {
	weu.mutation.RemoveSagaChildIDs(ids...)
	return weu
}

// RemoveSagaChildren removes "saga_children" edges to SagaEntity entities.
func (weu *WorkflowEntityUpdate) RemoveSagaChildren(s ...*SagaEntity) *WorkflowEntityUpdate {
	ids := make([]schema.SagaEntityID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return weu.RemoveSagaChildIDs(ids...)
}

// ClearSideEffectChildren clears all "side_effect_children" edges to the SideEffectEntity entity.
func (weu *WorkflowEntityUpdate) ClearSideEffectChildren() *WorkflowEntityUpdate {
	weu.mutation.ClearSideEffectChildren()
	return weu
}

// RemoveSideEffectChildIDs removes the "side_effect_children" edge to SideEffectEntity entities by IDs.
func (weu *WorkflowEntityUpdate) RemoveSideEffectChildIDs(ids ...schema.SideEffectEntityID) *WorkflowEntityUpdate {
	weu.mutation.RemoveSideEffectChildIDs(ids...)
	return weu
}

// RemoveSideEffectChildren removes "side_effect_children" edges to SideEffectEntity entities.
func (weu *WorkflowEntityUpdate) RemoveSideEffectChildren(s ...*SideEffectEntity) *WorkflowEntityUpdate {
	ids := make([]schema.SideEffectEntityID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return weu.RemoveSideEffectChildIDs(ids...)
}

// ClearExecutions clears all "executions" edges to the WorkflowExecution entity.
func (weu *WorkflowEntityUpdate) ClearExecutions() *WorkflowEntityUpdate {
	weu.mutation.ClearExecutions()
	return weu
}

// RemoveExecutionIDs removes the "executions" edge to WorkflowExecution entities by IDs.
func (weu *WorkflowEntityUpdate) RemoveExecutionIDs(ids ...schema.WorkflowExecutionID) *WorkflowEntityUpdate {
	weu.mutation.RemoveExecutionIDs(ids...)
	return weu
}

// RemoveExecutions removes "executions" edges to WorkflowExecution entities.
func (weu *WorkflowEntityUpdate) RemoveExecutions(w ...*WorkflowExecution) *WorkflowEntityUpdate {
	ids := make([]schema.WorkflowExecutionID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return weu.RemoveExecutionIDs(ids...)
}

// ClearEvents clears all "events" edges to the EventLog entity.
func (weu *WorkflowEntityUpdate) ClearEvents() *WorkflowEntityUpdate {
	weu.mutation.ClearEvents()
	return weu
}

// RemoveEventIDs removes the "events" edge to EventLog entities by IDs.
func (weu *WorkflowEntityUpdate) RemoveEventIDs(ids ...schema.EventLogID) *WorkflowEntityUpdate {
	weu.mutation.RemoveEventIDs(ids...)
	return weu
}

// RemoveEvents removes "events" edges to EventLog entities.
func (weu *WorkflowEntityUpdate) RemoveEvents(e ...*EventLog) *WorkflowEntityUpdate {
	ids := make([]schema.EventLogID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return weu.RemoveEventIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (weu *WorkflowEntityUpdate) Save(ctx context.Context) (int, error) {
	weu.defaults()
	return withHooks(ctx, weu.sqlSave, weu.mutation, weu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (weu *WorkflowEntityUpdate) SaveX(ctx context.Context) int {
	affected, err := weu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (weu *WorkflowEntityUpdate) Exec(ctx context.Context) error {
	_, err := weu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (weu *WorkflowEntityUpdate) ExecX(ctx context.Context) {
	if err := weu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (weu *WorkflowEntityUpdate) defaults() {
	if _, ok := weu.mutation.UpdatedAt(); !ok {
		v := workflowentity.UpdateDefaultUpdatedAt()
		weu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (weu *WorkflowEntityUpdate) check() error {
	if v, ok := weu.mutation.StepID(); ok {
		if err := workflowentity.StepIDValidator(string(v)); err != nil {
			return &ValidationError{Name: "step_id", err: fmt.Errorf(`ent: validator failed for field "WorkflowEntity.step_id": %w`, err)}
		}
	}
	if weu.mutation.RunCleared() && len(weu.mutation.RunIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkflowEntity.run"`)
	}
	return nil
}

func (weu *WorkflowEntityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := weu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(workflowentity.Table, workflowentity.Columns, sqlgraph.NewFieldSpec(workflowentity.FieldID, field.TypeInt))
	if ps := weu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := weu.mutation.HandlerName(); ok {
		_spec.SetField(workflowentity.FieldHandlerName, field.TypeString, value)
	}
	if value, ok := weu.mutation.GetType(); ok {
		_spec.SetField(workflowentity.FieldType, field.TypeString, value)
	}
	if value, ok := weu.mutation.Status(); ok {
		_spec.SetField(workflowentity.FieldStatus, field.TypeString, value)
	}
	if value, ok := weu.mutation.StepID(); ok {
		_spec.SetField(workflowentity.FieldStepID, field.TypeString, value)
	}
	if value, ok := weu.mutation.RetryPolicy(); ok {
		_spec.SetField(workflowentity.FieldRetryPolicy, field.TypeJSON, value)
	}
	if value, ok := weu.mutation.RetryState(); ok {
		_spec.SetField(workflowentity.FieldRetryState, field.TypeJSON, value)
	}
	if value, ok := weu.mutation.CreatedAt(); ok {
		_spec.SetField(workflowentity.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := weu.mutation.UpdatedAt(); ok {
		_spec.SetField(workflowentity.FieldUpdatedAt, field.TypeTime, value)
	}
	if weu.mutation.QueueCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowentity.QueueTable,
			Columns: []string{workflowentity.QueueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(queue.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weu.mutation.QueueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowentity.QueueTable,
			Columns: []string{workflowentity.QueueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(queue.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if weu.mutation.RunCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowentity.RunTable,
			Columns: []string{workflowentity.RunColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(run.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weu.mutation.RunIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowentity.RunTable,
			Columns: []string{workflowentity.RunColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(run.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if weu.mutation.VersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowentity.VersionsTable,
			Columns: []string{workflowentity.VersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(version.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weu.mutation.RemovedVersionsIDs(); len(nodes) > 0 && !weu.mutation.VersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowentity.VersionsTable,
			Columns: []string{workflowentity.VersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(version.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weu.mutation.VersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowentity.VersionsTable,
			Columns: []string{workflowentity.VersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(version.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if weu.mutation.WorkflowDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   workflowentity.WorkflowDataTable,
			Columns: []string{workflowentity.WorkflowDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowdata.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weu.mutation.WorkflowDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   workflowentity.WorkflowDataTable,
			Columns: []string{workflowentity.WorkflowDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowdata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if weu.mutation.ActivityChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowentity.ActivityChildrenTable,
			Columns: []string{workflowentity.ActivityChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activityentity.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weu.mutation.RemovedActivityChildrenIDs(); len(nodes) > 0 && !weu.mutation.ActivityChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowentity.ActivityChildrenTable,
			Columns: []string{workflowentity.ActivityChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activityentity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weu.mutation.ActivityChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowentity.ActivityChildrenTable,
			Columns: []string{workflowentity.ActivityChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activityentity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if weu.mutation.SagaChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowentity.SagaChildrenTable,
			Columns: []string{workflowentity.SagaChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagaentity.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weu.mutation.RemovedSagaChildrenIDs(); len(nodes) > 0 && !weu.mutation.SagaChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowentity.SagaChildrenTable,
			Columns: []string{workflowentity.SagaChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagaentity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weu.mutation.SagaChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowentity.SagaChildrenTable,
			Columns: []string{workflowentity.SagaChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagaentity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if weu.mutation.SideEffectChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowentity.SideEffectChildrenTable,
			Columns: []string{workflowentity.SideEffectChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sideeffectentity.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weu.mutation.RemovedSideEffectChildrenIDs(); len(nodes) > 0 && !weu.mutation.SideEffectChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowentity.SideEffectChildrenTable,
			Columns: []string{workflowentity.SideEffectChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sideeffectentity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weu.mutation.SideEffectChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowentity.SideEffectChildrenTable,
			Columns: []string{workflowentity.SideEffectChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sideeffectentity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if weu.mutation.ExecutionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowentity.ExecutionsTable,
			Columns: []string{workflowentity.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowexecution.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weu.mutation.RemovedExecutionsIDs(); len(nodes) > 0 && !weu.mutation.ExecutionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowentity.ExecutionsTable,
			Columns: []string{workflowentity.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowexecution.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weu.mutation.ExecutionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowentity.ExecutionsTable,
			Columns: []string{workflowentity.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowexecution.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if weu.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowentity.EventsTable,
			Columns: []string{workflowentity.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weu.mutation.RemovedEventsIDs(); len(nodes) > 0 && !weu.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowentity.EventsTable,
			Columns: []string{workflowentity.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weu.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowentity.EventsTable,
			Columns: []string{workflowentity.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, weu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workflowentity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	weu.mutation.done = true
	return n, nil
}

// WorkflowEntityUpdateOne is the builder for updating a single WorkflowEntity entity.
type WorkflowEntityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WorkflowEntityMutation
}

// SetHandlerName sets the "handler_name" field.
func (weuo *WorkflowEntityUpdateOne) SetHandlerName(s string) *WorkflowEntityUpdateOne {
	weuo.mutation.SetHandlerName(s)
	return weuo
}

// SetNillableHandlerName sets the "handler_name" field if the given value is not nil.
func (weuo *WorkflowEntityUpdateOne) SetNillableHandlerName(s *string) *WorkflowEntityUpdateOne {
	if s != nil {
		weuo.SetHandlerName(*s)
	}
	return weuo
}

// SetType sets the "type" field.
func (weuo *WorkflowEntityUpdateOne) SetType(st schema.EntityType) *WorkflowEntityUpdateOne {
	weuo.mutation.SetType(st)
	return weuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (weuo *WorkflowEntityUpdateOne) SetNillableType(st *schema.EntityType) *WorkflowEntityUpdateOne {
	if st != nil {
		weuo.SetType(*st)
	}
	return weuo
}

// SetStatus sets the "status" field.
func (weuo *WorkflowEntityUpdateOne) SetStatus(ss schema.EntityStatus) *WorkflowEntityUpdateOne {
	weuo.mutation.SetStatus(ss)
	return weuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (weuo *WorkflowEntityUpdateOne) SetNillableStatus(ss *schema.EntityStatus) *WorkflowEntityUpdateOne {
	if ss != nil {
		weuo.SetStatus(*ss)
	}
	return weuo
}

// SetStepID sets the "step_id" field.
func (weuo *WorkflowEntityUpdateOne) SetStepID(ssi schema.WorkflowStepID) *WorkflowEntityUpdateOne {
	weuo.mutation.SetStepID(ssi)
	return weuo
}

// SetNillableStepID sets the "step_id" field if the given value is not nil.
func (weuo *WorkflowEntityUpdateOne) SetNillableStepID(ssi *schema.WorkflowStepID) *WorkflowEntityUpdateOne {
	if ssi != nil {
		weuo.SetStepID(*ssi)
	}
	return weuo
}

// SetRunID sets the "run_id" field.
func (weuo *WorkflowEntityUpdateOne) SetRunID(si schema.RunID) *WorkflowEntityUpdateOne {
	weuo.mutation.SetRunID(si)
	return weuo
}

// SetNillableRunID sets the "run_id" field if the given value is not nil.
func (weuo *WorkflowEntityUpdateOne) SetNillableRunID(si *schema.RunID) *WorkflowEntityUpdateOne {
	if si != nil {
		weuo.SetRunID(*si)
	}
	return weuo
}

// SetRetryPolicy sets the "retry_policy" field.
func (weuo *WorkflowEntityUpdateOne) SetRetryPolicy(sp schema.RetryPolicy) *WorkflowEntityUpdateOne {
	weuo.mutation.SetRetryPolicy(sp)
	return weuo
}

// SetNillableRetryPolicy sets the "retry_policy" field if the given value is not nil.
func (weuo *WorkflowEntityUpdateOne) SetNillableRetryPolicy(sp *schema.RetryPolicy) *WorkflowEntityUpdateOne {
	if sp != nil {
		weuo.SetRetryPolicy(*sp)
	}
	return weuo
}

// SetRetryState sets the "retry_state" field.
func (weuo *WorkflowEntityUpdateOne) SetRetryState(ss schema.RetryState) *WorkflowEntityUpdateOne {
	weuo.mutation.SetRetryState(ss)
	return weuo
}

// SetNillableRetryState sets the "retry_state" field if the given value is not nil.
func (weuo *WorkflowEntityUpdateOne) SetNillableRetryState(ss *schema.RetryState) *WorkflowEntityUpdateOne {
	if ss != nil {
		weuo.SetRetryState(*ss)
	}
	return weuo
}

// SetCreatedAt sets the "created_at" field.
func (weuo *WorkflowEntityUpdateOne) SetCreatedAt(t time.Time) *WorkflowEntityUpdateOne {
	weuo.mutation.SetCreatedAt(t)
	return weuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (weuo *WorkflowEntityUpdateOne) SetNillableCreatedAt(t *time.Time) *WorkflowEntityUpdateOne {
	if t != nil {
		weuo.SetCreatedAt(*t)
	}
	return weuo
}

// SetUpdatedAt sets the "updated_at" field.
func (weuo *WorkflowEntityUpdateOne) SetUpdatedAt(t time.Time) *WorkflowEntityUpdateOne {
	weuo.mutation.SetUpdatedAt(t)
	return weuo
}

// SetQueueID sets the "queue" edge to the Queue entity by ID.
func (weuo *WorkflowEntityUpdateOne) SetQueueID(id schema.QueueID) *WorkflowEntityUpdateOne {
	weuo.mutation.SetQueueID(id)
	return weuo
}

// SetNillableQueueID sets the "queue" edge to the Queue entity by ID if the given value is not nil.
func (weuo *WorkflowEntityUpdateOne) SetNillableQueueID(id *schema.QueueID) *WorkflowEntityUpdateOne {
	if id != nil {
		weuo = weuo.SetQueueID(*id)
	}
	return weuo
}

// SetQueue sets the "queue" edge to the Queue entity.
func (weuo *WorkflowEntityUpdateOne) SetQueue(q *Queue) *WorkflowEntityUpdateOne {
	return weuo.SetQueueID(q.ID)
}

// SetRun sets the "run" edge to the Run entity.
func (weuo *WorkflowEntityUpdateOne) SetRun(r *Run) *WorkflowEntityUpdateOne {
	return weuo.SetRunID(r.ID)
}

// AddVersionIDs adds the "versions" edge to the Version entity by IDs.
func (weuo *WorkflowEntityUpdateOne) AddVersionIDs(ids ...schema.VersionID) *WorkflowEntityUpdateOne {
	weuo.mutation.AddVersionIDs(ids...)
	return weuo
}

// AddVersions adds the "versions" edges to the Version entity.
func (weuo *WorkflowEntityUpdateOne) AddVersions(v ...*Version) *WorkflowEntityUpdateOne {
	ids := make([]schema.VersionID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return weuo.AddVersionIDs(ids...)
}

// SetWorkflowDataID sets the "workflow_data" edge to the WorkflowData entity by ID.
func (weuo *WorkflowEntityUpdateOne) SetWorkflowDataID(id schema.WorkflowDataID) *WorkflowEntityUpdateOne {
	weuo.mutation.SetWorkflowDataID(id)
	return weuo
}

// SetNillableWorkflowDataID sets the "workflow_data" edge to the WorkflowData entity by ID if the given value is not nil.
func (weuo *WorkflowEntityUpdateOne) SetNillableWorkflowDataID(id *schema.WorkflowDataID) *WorkflowEntityUpdateOne {
	if id != nil {
		weuo = weuo.SetWorkflowDataID(*id)
	}
	return weuo
}

// SetWorkflowData sets the "workflow_data" edge to the WorkflowData entity.
func (weuo *WorkflowEntityUpdateOne) SetWorkflowData(w *WorkflowData) *WorkflowEntityUpdateOne {
	return weuo.SetWorkflowDataID(w.ID)
}

// AddActivityChildIDs adds the "activity_children" edge to the ActivityEntity entity by IDs.
func (weuo *WorkflowEntityUpdateOne) AddActivityChildIDs(ids ...schema.ActivityEntityID) *WorkflowEntityUpdateOne {
	weuo.mutation.AddActivityChildIDs(ids...)
	return weuo
}

// AddActivityChildren adds the "activity_children" edges to the ActivityEntity entity.
func (weuo *WorkflowEntityUpdateOne) AddActivityChildren(a ...*ActivityEntity) *WorkflowEntityUpdateOne {
	ids := make([]schema.ActivityEntityID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return weuo.AddActivityChildIDs(ids...)
}

// AddSagaChildIDs adds the "saga_children" edge to the SagaEntity entity by IDs.
func (weuo *WorkflowEntityUpdateOne) AddSagaChildIDs(ids ...schema.SagaEntityID) *WorkflowEntityUpdateOne {
	weuo.mutation.AddSagaChildIDs(ids...)
	return weuo
}

// AddSagaChildren adds the "saga_children" edges to the SagaEntity entity.
func (weuo *WorkflowEntityUpdateOne) AddSagaChildren(s ...*SagaEntity) *WorkflowEntityUpdateOne {
	ids := make([]schema.SagaEntityID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return weuo.AddSagaChildIDs(ids...)
}

// AddSideEffectChildIDs adds the "side_effect_children" edge to the SideEffectEntity entity by IDs.
func (weuo *WorkflowEntityUpdateOne) AddSideEffectChildIDs(ids ...schema.SideEffectEntityID) *WorkflowEntityUpdateOne {
	weuo.mutation.AddSideEffectChildIDs(ids...)
	return weuo
}

// AddSideEffectChildren adds the "side_effect_children" edges to the SideEffectEntity entity.
func (weuo *WorkflowEntityUpdateOne) AddSideEffectChildren(s ...*SideEffectEntity) *WorkflowEntityUpdateOne {
	ids := make([]schema.SideEffectEntityID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return weuo.AddSideEffectChildIDs(ids...)
}

// AddExecutionIDs adds the "executions" edge to the WorkflowExecution entity by IDs.
func (weuo *WorkflowEntityUpdateOne) AddExecutionIDs(ids ...schema.WorkflowExecutionID) *WorkflowEntityUpdateOne {
	weuo.mutation.AddExecutionIDs(ids...)
	return weuo
}

// AddExecutions adds the "executions" edges to the WorkflowExecution entity.
func (weuo *WorkflowEntityUpdateOne) AddExecutions(w ...*WorkflowExecution) *WorkflowEntityUpdateOne {
	ids := make([]schema.WorkflowExecutionID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return weuo.AddExecutionIDs(ids...)
}

// AddEventIDs adds the "events" edge to the EventLog entity by IDs.
func (weuo *WorkflowEntityUpdateOne) AddEventIDs(ids ...schema.EventLogID) *WorkflowEntityUpdateOne {
	weuo.mutation.AddEventIDs(ids...)
	return weuo
}

// AddEvents adds the "events" edges to the EventLog entity.
func (weuo *WorkflowEntityUpdateOne) AddEvents(e ...*EventLog) *WorkflowEntityUpdateOne {
	ids := make([]schema.EventLogID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return weuo.AddEventIDs(ids...)
}

// Mutation returns the WorkflowEntityMutation object of the builder.
func (weuo *WorkflowEntityUpdateOne) Mutation() *WorkflowEntityMutation {
	return weuo.mutation
}

// ClearQueue clears the "queue" edge to the Queue entity.
func (weuo *WorkflowEntityUpdateOne) ClearQueue() *WorkflowEntityUpdateOne {
	weuo.mutation.ClearQueue()
	return weuo
}

// ClearRun clears the "run" edge to the Run entity.
func (weuo *WorkflowEntityUpdateOne) ClearRun() *WorkflowEntityUpdateOne {
	weuo.mutation.ClearRun()
	return weuo
}

// ClearVersions clears all "versions" edges to the Version entity.
func (weuo *WorkflowEntityUpdateOne) ClearVersions() *WorkflowEntityUpdateOne {
	weuo.mutation.ClearVersions()
	return weuo
}

// RemoveVersionIDs removes the "versions" edge to Version entities by IDs.
func (weuo *WorkflowEntityUpdateOne) RemoveVersionIDs(ids ...schema.VersionID) *WorkflowEntityUpdateOne {
	weuo.mutation.RemoveVersionIDs(ids...)
	return weuo
}

// RemoveVersions removes "versions" edges to Version entities.
func (weuo *WorkflowEntityUpdateOne) RemoveVersions(v ...*Version) *WorkflowEntityUpdateOne {
	ids := make([]schema.VersionID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return weuo.RemoveVersionIDs(ids...)
}

// ClearWorkflowData clears the "workflow_data" edge to the WorkflowData entity.
func (weuo *WorkflowEntityUpdateOne) ClearWorkflowData() *WorkflowEntityUpdateOne {
	weuo.mutation.ClearWorkflowData()
	return weuo
}

// ClearActivityChildren clears all "activity_children" edges to the ActivityEntity entity.
func (weuo *WorkflowEntityUpdateOne) ClearActivityChildren() *WorkflowEntityUpdateOne {
	weuo.mutation.ClearActivityChildren()
	return weuo
}

// RemoveActivityChildIDs removes the "activity_children" edge to ActivityEntity entities by IDs.
func (weuo *WorkflowEntityUpdateOne) RemoveActivityChildIDs(ids ...schema.ActivityEntityID) *WorkflowEntityUpdateOne {
	weuo.mutation.RemoveActivityChildIDs(ids...)
	return weuo
}

// RemoveActivityChildren removes "activity_children" edges to ActivityEntity entities.
func (weuo *WorkflowEntityUpdateOne) RemoveActivityChildren(a ...*ActivityEntity) *WorkflowEntityUpdateOne {
	ids := make([]schema.ActivityEntityID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return weuo.RemoveActivityChildIDs(ids...)
}

// ClearSagaChildren clears all "saga_children" edges to the SagaEntity entity.
func (weuo *WorkflowEntityUpdateOne) ClearSagaChildren() *WorkflowEntityUpdateOne {
	weuo.mutation.ClearSagaChildren()
	return weuo
}

// RemoveSagaChildIDs removes the "saga_children" edge to SagaEntity entities by IDs.
func (weuo *WorkflowEntityUpdateOne) RemoveSagaChildIDs(ids ...schema.SagaEntityID) *WorkflowEntityUpdateOne {
	weuo.mutation.RemoveSagaChildIDs(ids...)
	return weuo
}

// RemoveSagaChildren removes "saga_children" edges to SagaEntity entities.
func (weuo *WorkflowEntityUpdateOne) RemoveSagaChildren(s ...*SagaEntity) *WorkflowEntityUpdateOne {
	ids := make([]schema.SagaEntityID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return weuo.RemoveSagaChildIDs(ids...)
}

// ClearSideEffectChildren clears all "side_effect_children" edges to the SideEffectEntity entity.
func (weuo *WorkflowEntityUpdateOne) ClearSideEffectChildren() *WorkflowEntityUpdateOne {
	weuo.mutation.ClearSideEffectChildren()
	return weuo
}

// RemoveSideEffectChildIDs removes the "side_effect_children" edge to SideEffectEntity entities by IDs.
func (weuo *WorkflowEntityUpdateOne) RemoveSideEffectChildIDs(ids ...schema.SideEffectEntityID) *WorkflowEntityUpdateOne {
	weuo.mutation.RemoveSideEffectChildIDs(ids...)
	return weuo
}

// RemoveSideEffectChildren removes "side_effect_children" edges to SideEffectEntity entities.
func (weuo *WorkflowEntityUpdateOne) RemoveSideEffectChildren(s ...*SideEffectEntity) *WorkflowEntityUpdateOne {
	ids := make([]schema.SideEffectEntityID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return weuo.RemoveSideEffectChildIDs(ids...)
}

// ClearExecutions clears all "executions" edges to the WorkflowExecution entity.
func (weuo *WorkflowEntityUpdateOne) ClearExecutions() *WorkflowEntityUpdateOne {
	weuo.mutation.ClearExecutions()
	return weuo
}

// RemoveExecutionIDs removes the "executions" edge to WorkflowExecution entities by IDs.
func (weuo *WorkflowEntityUpdateOne) RemoveExecutionIDs(ids ...schema.WorkflowExecutionID) *WorkflowEntityUpdateOne {
	weuo.mutation.RemoveExecutionIDs(ids...)
	return weuo
}

// RemoveExecutions removes "executions" edges to WorkflowExecution entities.
func (weuo *WorkflowEntityUpdateOne) RemoveExecutions(w ...*WorkflowExecution) *WorkflowEntityUpdateOne {
	ids := make([]schema.WorkflowExecutionID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return weuo.RemoveExecutionIDs(ids...)
}

// ClearEvents clears all "events" edges to the EventLog entity.
func (weuo *WorkflowEntityUpdateOne) ClearEvents() *WorkflowEntityUpdateOne {
	weuo.mutation.ClearEvents()
	return weuo
}

// RemoveEventIDs removes the "events" edge to EventLog entities by IDs.
func (weuo *WorkflowEntityUpdateOne) RemoveEventIDs(ids ...schema.EventLogID) *WorkflowEntityUpdateOne {
	weuo.mutation.RemoveEventIDs(ids...)
	return weuo
}

// RemoveEvents removes "events" edges to EventLog entities.
func (weuo *WorkflowEntityUpdateOne) RemoveEvents(e ...*EventLog) *WorkflowEntityUpdateOne {
	ids := make([]schema.EventLogID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return weuo.RemoveEventIDs(ids...)
}

// Where appends a list predicates to the WorkflowEntityUpdate builder.
func (weuo *WorkflowEntityUpdateOne) Where(ps ...predicate.WorkflowEntity) *WorkflowEntityUpdateOne {
	weuo.mutation.Where(ps...)
	return weuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (weuo *WorkflowEntityUpdateOne) Select(field string, fields ...string) *WorkflowEntityUpdateOne {
	weuo.fields = append([]string{field}, fields...)
	return weuo
}

// Save executes the query and returns the updated WorkflowEntity entity.
func (weuo *WorkflowEntityUpdateOne) Save(ctx context.Context) (*WorkflowEntity, error) {
	weuo.defaults()
	return withHooks(ctx, weuo.sqlSave, weuo.mutation, weuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (weuo *WorkflowEntityUpdateOne) SaveX(ctx context.Context) *WorkflowEntity {
	node, err := weuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (weuo *WorkflowEntityUpdateOne) Exec(ctx context.Context) error {
	_, err := weuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (weuo *WorkflowEntityUpdateOne) ExecX(ctx context.Context) {
	if err := weuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (weuo *WorkflowEntityUpdateOne) defaults() {
	if _, ok := weuo.mutation.UpdatedAt(); !ok {
		v := workflowentity.UpdateDefaultUpdatedAt()
		weuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (weuo *WorkflowEntityUpdateOne) check() error {
	if v, ok := weuo.mutation.StepID(); ok {
		if err := workflowentity.StepIDValidator(string(v)); err != nil {
			return &ValidationError{Name: "step_id", err: fmt.Errorf(`ent: validator failed for field "WorkflowEntity.step_id": %w`, err)}
		}
	}
	if weuo.mutation.RunCleared() && len(weuo.mutation.RunIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkflowEntity.run"`)
	}
	return nil
}

func (weuo *WorkflowEntityUpdateOne) sqlSave(ctx context.Context) (_node *WorkflowEntity, err error) {
	if err := weuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(workflowentity.Table, workflowentity.Columns, sqlgraph.NewFieldSpec(workflowentity.FieldID, field.TypeInt))
	id, ok := weuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WorkflowEntity.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := weuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workflowentity.FieldID)
		for _, f := range fields {
			if !workflowentity.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != workflowentity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := weuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := weuo.mutation.HandlerName(); ok {
		_spec.SetField(workflowentity.FieldHandlerName, field.TypeString, value)
	}
	if value, ok := weuo.mutation.GetType(); ok {
		_spec.SetField(workflowentity.FieldType, field.TypeString, value)
	}
	if value, ok := weuo.mutation.Status(); ok {
		_spec.SetField(workflowentity.FieldStatus, field.TypeString, value)
	}
	if value, ok := weuo.mutation.StepID(); ok {
		_spec.SetField(workflowentity.FieldStepID, field.TypeString, value)
	}
	if value, ok := weuo.mutation.RetryPolicy(); ok {
		_spec.SetField(workflowentity.FieldRetryPolicy, field.TypeJSON, value)
	}
	if value, ok := weuo.mutation.RetryState(); ok {
		_spec.SetField(workflowentity.FieldRetryState, field.TypeJSON, value)
	}
	if value, ok := weuo.mutation.CreatedAt(); ok {
		_spec.SetField(workflowentity.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := weuo.mutation.UpdatedAt(); ok {
		_spec.SetField(workflowentity.FieldUpdatedAt, field.TypeTime, value)
	}
	if weuo.mutation.QueueCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowentity.QueueTable,
			Columns: []string{workflowentity.QueueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(queue.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weuo.mutation.QueueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowentity.QueueTable,
			Columns: []string{workflowentity.QueueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(queue.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if weuo.mutation.RunCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowentity.RunTable,
			Columns: []string{workflowentity.RunColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(run.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weuo.mutation.RunIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowentity.RunTable,
			Columns: []string{workflowentity.RunColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(run.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if weuo.mutation.VersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowentity.VersionsTable,
			Columns: []string{workflowentity.VersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(version.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weuo.mutation.RemovedVersionsIDs(); len(nodes) > 0 && !weuo.mutation.VersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowentity.VersionsTable,
			Columns: []string{workflowentity.VersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(version.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weuo.mutation.VersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowentity.VersionsTable,
			Columns: []string{workflowentity.VersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(version.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if weuo.mutation.WorkflowDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   workflowentity.WorkflowDataTable,
			Columns: []string{workflowentity.WorkflowDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowdata.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weuo.mutation.WorkflowDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   workflowentity.WorkflowDataTable,
			Columns: []string{workflowentity.WorkflowDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowdata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if weuo.mutation.ActivityChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowentity.ActivityChildrenTable,
			Columns: []string{workflowentity.ActivityChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activityentity.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weuo.mutation.RemovedActivityChildrenIDs(); len(nodes) > 0 && !weuo.mutation.ActivityChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowentity.ActivityChildrenTable,
			Columns: []string{workflowentity.ActivityChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activityentity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weuo.mutation.ActivityChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowentity.ActivityChildrenTable,
			Columns: []string{workflowentity.ActivityChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activityentity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if weuo.mutation.SagaChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowentity.SagaChildrenTable,
			Columns: []string{workflowentity.SagaChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagaentity.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weuo.mutation.RemovedSagaChildrenIDs(); len(nodes) > 0 && !weuo.mutation.SagaChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowentity.SagaChildrenTable,
			Columns: []string{workflowentity.SagaChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagaentity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weuo.mutation.SagaChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowentity.SagaChildrenTable,
			Columns: []string{workflowentity.SagaChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagaentity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if weuo.mutation.SideEffectChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowentity.SideEffectChildrenTable,
			Columns: []string{workflowentity.SideEffectChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sideeffectentity.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weuo.mutation.RemovedSideEffectChildrenIDs(); len(nodes) > 0 && !weuo.mutation.SideEffectChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowentity.SideEffectChildrenTable,
			Columns: []string{workflowentity.SideEffectChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sideeffectentity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weuo.mutation.SideEffectChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowentity.SideEffectChildrenTable,
			Columns: []string{workflowentity.SideEffectChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sideeffectentity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if weuo.mutation.ExecutionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowentity.ExecutionsTable,
			Columns: []string{workflowentity.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowexecution.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weuo.mutation.RemovedExecutionsIDs(); len(nodes) > 0 && !weuo.mutation.ExecutionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowentity.ExecutionsTable,
			Columns: []string{workflowentity.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowexecution.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weuo.mutation.ExecutionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowentity.ExecutionsTable,
			Columns: []string{workflowentity.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowexecution.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if weuo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowentity.EventsTable,
			Columns: []string{workflowentity.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weuo.mutation.RemovedEventsIDs(); len(nodes) > 0 && !weuo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowentity.EventsTable,
			Columns: []string{workflowentity.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weuo.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowentity.EventsTable,
			Columns: []string{workflowentity.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &WorkflowEntity{config: weuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, weuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workflowentity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	weuo.mutation.done = true
	return _node, nil
}
