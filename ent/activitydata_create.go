// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/tempolite/ent/activitydata"
	"github.com/davidroman0O/tempolite/ent/activityentity"
	"github.com/davidroman0O/tempolite/ent/schema"
)

// ActivityDataCreate is the builder for creating a ActivityData entity.
type ActivityDataCreate struct {
	config
	mutation *ActivityDataMutation
	hooks    []Hook
}

// SetEntityID sets the "entity_id" field.
func (adc *ActivityDataCreate) SetEntityID(sei schema.ActivityEntityID) *ActivityDataCreate {
	adc.mutation.SetEntityID(sei)
	return adc
}

// SetInputs sets the "inputs" field.
func (adc *ActivityDataCreate) SetInputs(u [][]uint8) *ActivityDataCreate {
	adc.mutation.SetInputs(u)
	return adc
}

// SetOutput sets the "output" field.
func (adc *ActivityDataCreate) SetOutput(b []byte) *ActivityDataCreate {
	adc.mutation.SetOutput(b)
	return adc
}

// SetCreatedAt sets the "created_at" field.
func (adc *ActivityDataCreate) SetCreatedAt(t time.Time) *ActivityDataCreate {
	adc.mutation.SetCreatedAt(t)
	return adc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (adc *ActivityDataCreate) SetNillableCreatedAt(t *time.Time) *ActivityDataCreate {
	if t != nil {
		adc.SetCreatedAt(*t)
	}
	return adc
}

// SetUpdatedAt sets the "updated_at" field.
func (adc *ActivityDataCreate) SetUpdatedAt(t time.Time) *ActivityDataCreate {
	adc.mutation.SetUpdatedAt(t)
	return adc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (adc *ActivityDataCreate) SetNillableUpdatedAt(t *time.Time) *ActivityDataCreate {
	if t != nil {
		adc.SetUpdatedAt(*t)
	}
	return adc
}

// SetID sets the "id" field.
func (adc *ActivityDataCreate) SetID(sdi schema.ActivityDataID) *ActivityDataCreate {
	adc.mutation.SetID(sdi)
	return adc
}

// SetActivityID sets the "activity" edge to the ActivityEntity entity by ID.
func (adc *ActivityDataCreate) SetActivityID(id schema.ActivityEntityID) *ActivityDataCreate {
	adc.mutation.SetActivityID(id)
	return adc
}

// SetActivity sets the "activity" edge to the ActivityEntity entity.
func (adc *ActivityDataCreate) SetActivity(a *ActivityEntity) *ActivityDataCreate {
	return adc.SetActivityID(a.ID)
}

// Mutation returns the ActivityDataMutation object of the builder.
func (adc *ActivityDataCreate) Mutation() *ActivityDataMutation {
	return adc.mutation
}

// Save creates the ActivityData in the database.
func (adc *ActivityDataCreate) Save(ctx context.Context) (*ActivityData, error) {
	adc.defaults()
	return withHooks(ctx, adc.sqlSave, adc.mutation, adc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (adc *ActivityDataCreate) SaveX(ctx context.Context) *ActivityData {
	v, err := adc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (adc *ActivityDataCreate) Exec(ctx context.Context) error {
	_, err := adc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (adc *ActivityDataCreate) ExecX(ctx context.Context) {
	if err := adc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (adc *ActivityDataCreate) defaults() {
	if _, ok := adc.mutation.CreatedAt(); !ok {
		v := activitydata.DefaultCreatedAt()
		adc.mutation.SetCreatedAt(v)
	}
	if _, ok := adc.mutation.UpdatedAt(); !ok {
		v := activitydata.DefaultUpdatedAt()
		adc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (adc *ActivityDataCreate) check() error {
	if _, ok := adc.mutation.EntityID(); !ok {
		return &ValidationError{Name: "entity_id", err: errors.New(`ent: missing required field "ActivityData.entity_id"`)}
	}
	if _, ok := adc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ActivityData.created_at"`)}
	}
	if _, ok := adc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ActivityData.updated_at"`)}
	}
	if len(adc.mutation.ActivityIDs()) == 0 {
		return &ValidationError{Name: "activity", err: errors.New(`ent: missing required edge "ActivityData.activity"`)}
	}
	return nil
}

func (adc *ActivityDataCreate) sqlSave(ctx context.Context) (*ActivityData, error) {
	if err := adc.check(); err != nil {
		return nil, err
	}
	_node, _spec := adc.createSpec()
	if err := sqlgraph.CreateNode(ctx, adc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = schema.ActivityDataID(id)
	}
	adc.mutation.id = &_node.ID
	adc.mutation.done = true
	return _node, nil
}

func (adc *ActivityDataCreate) createSpec() (*ActivityData, *sqlgraph.CreateSpec) {
	var (
		_node = &ActivityData{config: adc.config}
		_spec = sqlgraph.NewCreateSpec(activitydata.Table, sqlgraph.NewFieldSpec(activitydata.FieldID, field.TypeInt))
	)
	if id, ok := adc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := adc.mutation.Inputs(); ok {
		_spec.SetField(activitydata.FieldInputs, field.TypeJSON, value)
		_node.Inputs = value
	}
	if value, ok := adc.mutation.Output(); ok {
		_spec.SetField(activitydata.FieldOutput, field.TypeBytes, value)
		_node.Output = value
	}
	if value, ok := adc.mutation.CreatedAt(); ok {
		_spec.SetField(activitydata.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := adc.mutation.UpdatedAt(); ok {
		_spec.SetField(activitydata.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := adc.mutation.ActivityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   activitydata.ActivityTable,
			Columns: []string{activitydata.ActivityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activityentity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EntityID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ActivityDataCreateBulk is the builder for creating many ActivityData entities in bulk.
type ActivityDataCreateBulk struct {
	config
	err      error
	builders []*ActivityDataCreate
}

// Save creates the ActivityData entities in the database.
func (adcb *ActivityDataCreateBulk) Save(ctx context.Context) ([]*ActivityData, error) {
	if adcb.err != nil {
		return nil, adcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(adcb.builders))
	nodes := make([]*ActivityData, len(adcb.builders))
	mutators := make([]Mutator, len(adcb.builders))
	for i := range adcb.builders {
		func(i int, root context.Context) {
			builder := adcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ActivityDataMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, adcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, adcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = schema.ActivityDataID(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, adcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (adcb *ActivityDataCreateBulk) SaveX(ctx context.Context) []*ActivityData {
	v, err := adcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (adcb *ActivityDataCreateBulk) Exec(ctx context.Context) error {
	_, err := adcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (adcb *ActivityDataCreateBulk) ExecX(ctx context.Context) {
	if err := adcb.Exec(ctx); err != nil {
		panic(err)
	}
}
