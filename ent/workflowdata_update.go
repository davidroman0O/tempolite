// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/tempolite/ent/predicate"
	"github.com/davidroman0O/tempolite/ent/schema"
	"github.com/davidroman0O/tempolite/ent/workflowdata"
	"github.com/davidroman0O/tempolite/ent/workflowentity"
)

// WorkflowDataUpdate is the builder for updating WorkflowData entities.
type WorkflowDataUpdate struct {
	config
	hooks    []Hook
	mutation *WorkflowDataMutation
}

// Where appends a list predicates to the WorkflowDataUpdate builder.
func (wdu *WorkflowDataUpdate) Where(ps ...predicate.WorkflowData) *WorkflowDataUpdate {
	wdu.mutation.Where(ps...)
	return wdu
}

// SetEntityID sets the "entity_id" field.
func (wdu *WorkflowDataUpdate) SetEntityID(sei schema.WorkflowEntityID) *WorkflowDataUpdate {
	wdu.mutation.SetEntityID(sei)
	return wdu
}

// SetNillableEntityID sets the "entity_id" field if the given value is not nil.
func (wdu *WorkflowDataUpdate) SetNillableEntityID(sei *schema.WorkflowEntityID) *WorkflowDataUpdate {
	if sei != nil {
		wdu.SetEntityID(*sei)
	}
	return wdu
}

// SetDuration sets the "duration" field.
func (wdu *WorkflowDataUpdate) SetDuration(s string) *WorkflowDataUpdate {
	wdu.mutation.SetDuration(s)
	return wdu
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (wdu *WorkflowDataUpdate) SetNillableDuration(s *string) *WorkflowDataUpdate {
	if s != nil {
		wdu.SetDuration(*s)
	}
	return wdu
}

// ClearDuration clears the value of the "duration" field.
func (wdu *WorkflowDataUpdate) ClearDuration() *WorkflowDataUpdate {
	wdu.mutation.ClearDuration()
	return wdu
}

// SetPaused sets the "paused" field.
func (wdu *WorkflowDataUpdate) SetPaused(b bool) *WorkflowDataUpdate {
	wdu.mutation.SetPaused(b)
	return wdu
}

// SetNillablePaused sets the "paused" field if the given value is not nil.
func (wdu *WorkflowDataUpdate) SetNillablePaused(b *bool) *WorkflowDataUpdate {
	if b != nil {
		wdu.SetPaused(*b)
	}
	return wdu
}

// SetResumable sets the "resumable" field.
func (wdu *WorkflowDataUpdate) SetResumable(b bool) *WorkflowDataUpdate {
	wdu.mutation.SetResumable(b)
	return wdu
}

// SetNillableResumable sets the "resumable" field if the given value is not nil.
func (wdu *WorkflowDataUpdate) SetNillableResumable(b *bool) *WorkflowDataUpdate {
	if b != nil {
		wdu.SetResumable(*b)
	}
	return wdu
}

// SetIsRoot sets the "is_root" field.
func (wdu *WorkflowDataUpdate) SetIsRoot(b bool) *WorkflowDataUpdate {
	wdu.mutation.SetIsRoot(b)
	return wdu
}

// SetNillableIsRoot sets the "is_root" field if the given value is not nil.
func (wdu *WorkflowDataUpdate) SetNillableIsRoot(b *bool) *WorkflowDataUpdate {
	if b != nil {
		wdu.SetIsRoot(*b)
	}
	return wdu
}

// SetInputs sets the "inputs" field.
func (wdu *WorkflowDataUpdate) SetInputs(b []byte) *WorkflowDataUpdate {
	wdu.mutation.SetInputs(b)
	return wdu
}

// ClearInputs clears the value of the "inputs" field.
func (wdu *WorkflowDataUpdate) ClearInputs() *WorkflowDataUpdate {
	wdu.mutation.ClearInputs()
	return wdu
}

// SetContinuedFrom sets the "continued_from" field.
func (wdu *WorkflowDataUpdate) SetContinuedFrom(sei schema.WorkflowEntityID) *WorkflowDataUpdate {
	wdu.mutation.ResetContinuedFrom()
	wdu.mutation.SetContinuedFrom(sei)
	return wdu
}

// SetNillableContinuedFrom sets the "continued_from" field if the given value is not nil.
func (wdu *WorkflowDataUpdate) SetNillableContinuedFrom(sei *schema.WorkflowEntityID) *WorkflowDataUpdate {
	if sei != nil {
		wdu.SetContinuedFrom(*sei)
	}
	return wdu
}

// AddContinuedFrom adds sei to the "continued_from" field.
func (wdu *WorkflowDataUpdate) AddContinuedFrom(sei schema.WorkflowEntityID) *WorkflowDataUpdate {
	wdu.mutation.AddContinuedFrom(sei)
	return wdu
}

// ClearContinuedFrom clears the value of the "continued_from" field.
func (wdu *WorkflowDataUpdate) ClearContinuedFrom() *WorkflowDataUpdate {
	wdu.mutation.ClearContinuedFrom()
	return wdu
}

// SetContinuedExecutionFrom sets the "continued_execution_from" field.
func (wdu *WorkflowDataUpdate) SetContinuedExecutionFrom(sei schema.WorkflowExecutionID) *WorkflowDataUpdate {
	wdu.mutation.ResetContinuedExecutionFrom()
	wdu.mutation.SetContinuedExecutionFrom(sei)
	return wdu
}

// SetNillableContinuedExecutionFrom sets the "continued_execution_from" field if the given value is not nil.
func (wdu *WorkflowDataUpdate) SetNillableContinuedExecutionFrom(sei *schema.WorkflowExecutionID) *WorkflowDataUpdate {
	if sei != nil {
		wdu.SetContinuedExecutionFrom(*sei)
	}
	return wdu
}

// AddContinuedExecutionFrom adds sei to the "continued_execution_from" field.
func (wdu *WorkflowDataUpdate) AddContinuedExecutionFrom(sei schema.WorkflowExecutionID) *WorkflowDataUpdate {
	wdu.mutation.AddContinuedExecutionFrom(sei)
	return wdu
}

// ClearContinuedExecutionFrom clears the value of the "continued_execution_from" field.
func (wdu *WorkflowDataUpdate) ClearContinuedExecutionFrom() *WorkflowDataUpdate {
	wdu.mutation.ClearContinuedExecutionFrom()
	return wdu
}

// SetWorkflowStepID sets the "workflow_step_id" field.
func (wdu *WorkflowDataUpdate) SetWorkflowStepID(s string) *WorkflowDataUpdate {
	wdu.mutation.SetWorkflowStepID(s)
	return wdu
}

// SetNillableWorkflowStepID sets the "workflow_step_id" field if the given value is not nil.
func (wdu *WorkflowDataUpdate) SetNillableWorkflowStepID(s *string) *WorkflowDataUpdate {
	if s != nil {
		wdu.SetWorkflowStepID(*s)
	}
	return wdu
}

// ClearWorkflowStepID clears the value of the "workflow_step_id" field.
func (wdu *WorkflowDataUpdate) ClearWorkflowStepID() *WorkflowDataUpdate {
	wdu.mutation.ClearWorkflowStepID()
	return wdu
}

// SetWorkflowFrom sets the "workflow_from" field.
func (wdu *WorkflowDataUpdate) SetWorkflowFrom(sei schema.WorkflowEntityID) *WorkflowDataUpdate {
	wdu.mutation.ResetWorkflowFrom()
	wdu.mutation.SetWorkflowFrom(sei)
	return wdu
}

// SetNillableWorkflowFrom sets the "workflow_from" field if the given value is not nil.
func (wdu *WorkflowDataUpdate) SetNillableWorkflowFrom(sei *schema.WorkflowEntityID) *WorkflowDataUpdate {
	if sei != nil {
		wdu.SetWorkflowFrom(*sei)
	}
	return wdu
}

// AddWorkflowFrom adds sei to the "workflow_from" field.
func (wdu *WorkflowDataUpdate) AddWorkflowFrom(sei schema.WorkflowEntityID) *WorkflowDataUpdate {
	wdu.mutation.AddWorkflowFrom(sei)
	return wdu
}

// ClearWorkflowFrom clears the value of the "workflow_from" field.
func (wdu *WorkflowDataUpdate) ClearWorkflowFrom() *WorkflowDataUpdate {
	wdu.mutation.ClearWorkflowFrom()
	return wdu
}

// SetWorkflowExecutionFrom sets the "workflow_execution_from" field.
func (wdu *WorkflowDataUpdate) SetWorkflowExecutionFrom(sei schema.WorkflowExecutionID) *WorkflowDataUpdate {
	wdu.mutation.ResetWorkflowExecutionFrom()
	wdu.mutation.SetWorkflowExecutionFrom(sei)
	return wdu
}

// SetNillableWorkflowExecutionFrom sets the "workflow_execution_from" field if the given value is not nil.
func (wdu *WorkflowDataUpdate) SetNillableWorkflowExecutionFrom(sei *schema.WorkflowExecutionID) *WorkflowDataUpdate {
	if sei != nil {
		wdu.SetWorkflowExecutionFrom(*sei)
	}
	return wdu
}

// AddWorkflowExecutionFrom adds sei to the "workflow_execution_from" field.
func (wdu *WorkflowDataUpdate) AddWorkflowExecutionFrom(sei schema.WorkflowExecutionID) *WorkflowDataUpdate {
	wdu.mutation.AddWorkflowExecutionFrom(sei)
	return wdu
}

// ClearWorkflowExecutionFrom clears the value of the "workflow_execution_from" field.
func (wdu *WorkflowDataUpdate) ClearWorkflowExecutionFrom() *WorkflowDataUpdate {
	wdu.mutation.ClearWorkflowExecutionFrom()
	return wdu
}

// SetVersions sets the "versions" field.
func (wdu *WorkflowDataUpdate) SetVersions(m map[string]int) *WorkflowDataUpdate {
	wdu.mutation.SetVersions(m)
	return wdu
}

// SetCreatedAt sets the "created_at" field.
func (wdu *WorkflowDataUpdate) SetCreatedAt(t time.Time) *WorkflowDataUpdate {
	wdu.mutation.SetCreatedAt(t)
	return wdu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wdu *WorkflowDataUpdate) SetNillableCreatedAt(t *time.Time) *WorkflowDataUpdate {
	if t != nil {
		wdu.SetCreatedAt(*t)
	}
	return wdu
}

// SetUpdatedAt sets the "updated_at" field.
func (wdu *WorkflowDataUpdate) SetUpdatedAt(t time.Time) *WorkflowDataUpdate {
	wdu.mutation.SetUpdatedAt(t)
	return wdu
}

// SetWorkflowID sets the "workflow" edge to the WorkflowEntity entity by ID.
func (wdu *WorkflowDataUpdate) SetWorkflowID(id schema.WorkflowEntityID) *WorkflowDataUpdate {
	wdu.mutation.SetWorkflowID(id)
	return wdu
}

// SetWorkflow sets the "workflow" edge to the WorkflowEntity entity.
func (wdu *WorkflowDataUpdate) SetWorkflow(w *WorkflowEntity) *WorkflowDataUpdate {
	return wdu.SetWorkflowID(w.ID)
}

// Mutation returns the WorkflowDataMutation object of the builder.
func (wdu *WorkflowDataUpdate) Mutation() *WorkflowDataMutation {
	return wdu.mutation
}

// ClearWorkflow clears the "workflow" edge to the WorkflowEntity entity.
func (wdu *WorkflowDataUpdate) ClearWorkflow() *WorkflowDataUpdate {
	wdu.mutation.ClearWorkflow()
	return wdu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wdu *WorkflowDataUpdate) Save(ctx context.Context) (int, error) {
	wdu.defaults()
	return withHooks(ctx, wdu.sqlSave, wdu.mutation, wdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wdu *WorkflowDataUpdate) SaveX(ctx context.Context) int {
	affected, err := wdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wdu *WorkflowDataUpdate) Exec(ctx context.Context) error {
	_, err := wdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wdu *WorkflowDataUpdate) ExecX(ctx context.Context) {
	if err := wdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wdu *WorkflowDataUpdate) defaults() {
	if _, ok := wdu.mutation.UpdatedAt(); !ok {
		v := workflowdata.UpdateDefaultUpdatedAt()
		wdu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wdu *WorkflowDataUpdate) check() error {
	if wdu.mutation.WorkflowCleared() && len(wdu.mutation.WorkflowIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkflowData.workflow"`)
	}
	return nil
}

func (wdu *WorkflowDataUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := wdu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(workflowdata.Table, workflowdata.Columns, sqlgraph.NewFieldSpec(workflowdata.FieldID, field.TypeInt))
	if ps := wdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wdu.mutation.Duration(); ok {
		_spec.SetField(workflowdata.FieldDuration, field.TypeString, value)
	}
	if wdu.mutation.DurationCleared() {
		_spec.ClearField(workflowdata.FieldDuration, field.TypeString)
	}
	if value, ok := wdu.mutation.Paused(); ok {
		_spec.SetField(workflowdata.FieldPaused, field.TypeBool, value)
	}
	if value, ok := wdu.mutation.Resumable(); ok {
		_spec.SetField(workflowdata.FieldResumable, field.TypeBool, value)
	}
	if value, ok := wdu.mutation.IsRoot(); ok {
		_spec.SetField(workflowdata.FieldIsRoot, field.TypeBool, value)
	}
	if value, ok := wdu.mutation.Inputs(); ok {
		_spec.SetField(workflowdata.FieldInputs, field.TypeBytes, value)
	}
	if wdu.mutation.InputsCleared() {
		_spec.ClearField(workflowdata.FieldInputs, field.TypeBytes)
	}
	if value, ok := wdu.mutation.ContinuedFrom(); ok {
		_spec.SetField(workflowdata.FieldContinuedFrom, field.TypeInt, value)
	}
	if value, ok := wdu.mutation.AddedContinuedFrom(); ok {
		_spec.AddField(workflowdata.FieldContinuedFrom, field.TypeInt, value)
	}
	if wdu.mutation.ContinuedFromCleared() {
		_spec.ClearField(workflowdata.FieldContinuedFrom, field.TypeInt)
	}
	if value, ok := wdu.mutation.ContinuedExecutionFrom(); ok {
		_spec.SetField(workflowdata.FieldContinuedExecutionFrom, field.TypeInt, value)
	}
	if value, ok := wdu.mutation.AddedContinuedExecutionFrom(); ok {
		_spec.AddField(workflowdata.FieldContinuedExecutionFrom, field.TypeInt, value)
	}
	if wdu.mutation.ContinuedExecutionFromCleared() {
		_spec.ClearField(workflowdata.FieldContinuedExecutionFrom, field.TypeInt)
	}
	if value, ok := wdu.mutation.WorkflowStepID(); ok {
		_spec.SetField(workflowdata.FieldWorkflowStepID, field.TypeString, value)
	}
	if wdu.mutation.WorkflowStepIDCleared() {
		_spec.ClearField(workflowdata.FieldWorkflowStepID, field.TypeString)
	}
	if value, ok := wdu.mutation.WorkflowFrom(); ok {
		_spec.SetField(workflowdata.FieldWorkflowFrom, field.TypeInt, value)
	}
	if value, ok := wdu.mutation.AddedWorkflowFrom(); ok {
		_spec.AddField(workflowdata.FieldWorkflowFrom, field.TypeInt, value)
	}
	if wdu.mutation.WorkflowFromCleared() {
		_spec.ClearField(workflowdata.FieldWorkflowFrom, field.TypeInt)
	}
	if value, ok := wdu.mutation.WorkflowExecutionFrom(); ok {
		_spec.SetField(workflowdata.FieldWorkflowExecutionFrom, field.TypeInt, value)
	}
	if value, ok := wdu.mutation.AddedWorkflowExecutionFrom(); ok {
		_spec.AddField(workflowdata.FieldWorkflowExecutionFrom, field.TypeInt, value)
	}
	if wdu.mutation.WorkflowExecutionFromCleared() {
		_spec.ClearField(workflowdata.FieldWorkflowExecutionFrom, field.TypeInt)
	}
	if value, ok := wdu.mutation.Versions(); ok {
		_spec.SetField(workflowdata.FieldVersions, field.TypeJSON, value)
	}
	if value, ok := wdu.mutation.CreatedAt(); ok {
		_spec.SetField(workflowdata.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := wdu.mutation.UpdatedAt(); ok {
		_spec.SetField(workflowdata.FieldUpdatedAt, field.TypeTime, value)
	}
	if wdu.mutation.WorkflowCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   workflowdata.WorkflowTable,
			Columns: []string{workflowdata.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowentity.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wdu.mutation.WorkflowIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   workflowdata.WorkflowTable,
			Columns: []string{workflowdata.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowentity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workflowdata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wdu.mutation.done = true
	return n, nil
}

// WorkflowDataUpdateOne is the builder for updating a single WorkflowData entity.
type WorkflowDataUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WorkflowDataMutation
}

// SetEntityID sets the "entity_id" field.
func (wduo *WorkflowDataUpdateOne) SetEntityID(sei schema.WorkflowEntityID) *WorkflowDataUpdateOne {
	wduo.mutation.SetEntityID(sei)
	return wduo
}

// SetNillableEntityID sets the "entity_id" field if the given value is not nil.
func (wduo *WorkflowDataUpdateOne) SetNillableEntityID(sei *schema.WorkflowEntityID) *WorkflowDataUpdateOne {
	if sei != nil {
		wduo.SetEntityID(*sei)
	}
	return wduo
}

// SetDuration sets the "duration" field.
func (wduo *WorkflowDataUpdateOne) SetDuration(s string) *WorkflowDataUpdateOne {
	wduo.mutation.SetDuration(s)
	return wduo
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (wduo *WorkflowDataUpdateOne) SetNillableDuration(s *string) *WorkflowDataUpdateOne {
	if s != nil {
		wduo.SetDuration(*s)
	}
	return wduo
}

// ClearDuration clears the value of the "duration" field.
func (wduo *WorkflowDataUpdateOne) ClearDuration() *WorkflowDataUpdateOne {
	wduo.mutation.ClearDuration()
	return wduo
}

// SetPaused sets the "paused" field.
func (wduo *WorkflowDataUpdateOne) SetPaused(b bool) *WorkflowDataUpdateOne {
	wduo.mutation.SetPaused(b)
	return wduo
}

// SetNillablePaused sets the "paused" field if the given value is not nil.
func (wduo *WorkflowDataUpdateOne) SetNillablePaused(b *bool) *WorkflowDataUpdateOne {
	if b != nil {
		wduo.SetPaused(*b)
	}
	return wduo
}

// SetResumable sets the "resumable" field.
func (wduo *WorkflowDataUpdateOne) SetResumable(b bool) *WorkflowDataUpdateOne {
	wduo.mutation.SetResumable(b)
	return wduo
}

// SetNillableResumable sets the "resumable" field if the given value is not nil.
func (wduo *WorkflowDataUpdateOne) SetNillableResumable(b *bool) *WorkflowDataUpdateOne {
	if b != nil {
		wduo.SetResumable(*b)
	}
	return wduo
}

// SetIsRoot sets the "is_root" field.
func (wduo *WorkflowDataUpdateOne) SetIsRoot(b bool) *WorkflowDataUpdateOne {
	wduo.mutation.SetIsRoot(b)
	return wduo
}

// SetNillableIsRoot sets the "is_root" field if the given value is not nil.
func (wduo *WorkflowDataUpdateOne) SetNillableIsRoot(b *bool) *WorkflowDataUpdateOne {
	if b != nil {
		wduo.SetIsRoot(*b)
	}
	return wduo
}

// SetInputs sets the "inputs" field.
func (wduo *WorkflowDataUpdateOne) SetInputs(b []byte) *WorkflowDataUpdateOne {
	wduo.mutation.SetInputs(b)
	return wduo
}

// ClearInputs clears the value of the "inputs" field.
func (wduo *WorkflowDataUpdateOne) ClearInputs() *WorkflowDataUpdateOne {
	wduo.mutation.ClearInputs()
	return wduo
}

// SetContinuedFrom sets the "continued_from" field.
func (wduo *WorkflowDataUpdateOne) SetContinuedFrom(sei schema.WorkflowEntityID) *WorkflowDataUpdateOne {
	wduo.mutation.ResetContinuedFrom()
	wduo.mutation.SetContinuedFrom(sei)
	return wduo
}

// SetNillableContinuedFrom sets the "continued_from" field if the given value is not nil.
func (wduo *WorkflowDataUpdateOne) SetNillableContinuedFrom(sei *schema.WorkflowEntityID) *WorkflowDataUpdateOne {
	if sei != nil {
		wduo.SetContinuedFrom(*sei)
	}
	return wduo
}

// AddContinuedFrom adds sei to the "continued_from" field.
func (wduo *WorkflowDataUpdateOne) AddContinuedFrom(sei schema.WorkflowEntityID) *WorkflowDataUpdateOne {
	wduo.mutation.AddContinuedFrom(sei)
	return wduo
}

// ClearContinuedFrom clears the value of the "continued_from" field.
func (wduo *WorkflowDataUpdateOne) ClearContinuedFrom() *WorkflowDataUpdateOne {
	wduo.mutation.ClearContinuedFrom()
	return wduo
}

// SetContinuedExecutionFrom sets the "continued_execution_from" field.
func (wduo *WorkflowDataUpdateOne) SetContinuedExecutionFrom(sei schema.WorkflowExecutionID) *WorkflowDataUpdateOne {
	wduo.mutation.ResetContinuedExecutionFrom()
	wduo.mutation.SetContinuedExecutionFrom(sei)
	return wduo
}

// SetNillableContinuedExecutionFrom sets the "continued_execution_from" field if the given value is not nil.
func (wduo *WorkflowDataUpdateOne) SetNillableContinuedExecutionFrom(sei *schema.WorkflowExecutionID) *WorkflowDataUpdateOne {
	if sei != nil {
		wduo.SetContinuedExecutionFrom(*sei)
	}
	return wduo
}

// AddContinuedExecutionFrom adds sei to the "continued_execution_from" field.
func (wduo *WorkflowDataUpdateOne) AddContinuedExecutionFrom(sei schema.WorkflowExecutionID) *WorkflowDataUpdateOne {
	wduo.mutation.AddContinuedExecutionFrom(sei)
	return wduo
}

// ClearContinuedExecutionFrom clears the value of the "continued_execution_from" field.
func (wduo *WorkflowDataUpdateOne) ClearContinuedExecutionFrom() *WorkflowDataUpdateOne {
	wduo.mutation.ClearContinuedExecutionFrom()
	return wduo
}

// SetWorkflowStepID sets the "workflow_step_id" field.
func (wduo *WorkflowDataUpdateOne) SetWorkflowStepID(s string) *WorkflowDataUpdateOne {
	wduo.mutation.SetWorkflowStepID(s)
	return wduo
}

// SetNillableWorkflowStepID sets the "workflow_step_id" field if the given value is not nil.
func (wduo *WorkflowDataUpdateOne) SetNillableWorkflowStepID(s *string) *WorkflowDataUpdateOne {
	if s != nil {
		wduo.SetWorkflowStepID(*s)
	}
	return wduo
}

// ClearWorkflowStepID clears the value of the "workflow_step_id" field.
func (wduo *WorkflowDataUpdateOne) ClearWorkflowStepID() *WorkflowDataUpdateOne {
	wduo.mutation.ClearWorkflowStepID()
	return wduo
}

// SetWorkflowFrom sets the "workflow_from" field.
func (wduo *WorkflowDataUpdateOne) SetWorkflowFrom(sei schema.WorkflowEntityID) *WorkflowDataUpdateOne {
	wduo.mutation.ResetWorkflowFrom()
	wduo.mutation.SetWorkflowFrom(sei)
	return wduo
}

// SetNillableWorkflowFrom sets the "workflow_from" field if the given value is not nil.
func (wduo *WorkflowDataUpdateOne) SetNillableWorkflowFrom(sei *schema.WorkflowEntityID) *WorkflowDataUpdateOne {
	if sei != nil {
		wduo.SetWorkflowFrom(*sei)
	}
	return wduo
}

// AddWorkflowFrom adds sei to the "workflow_from" field.
func (wduo *WorkflowDataUpdateOne) AddWorkflowFrom(sei schema.WorkflowEntityID) *WorkflowDataUpdateOne {
	wduo.mutation.AddWorkflowFrom(sei)
	return wduo
}

// ClearWorkflowFrom clears the value of the "workflow_from" field.
func (wduo *WorkflowDataUpdateOne) ClearWorkflowFrom() *WorkflowDataUpdateOne {
	wduo.mutation.ClearWorkflowFrom()
	return wduo
}

// SetWorkflowExecutionFrom sets the "workflow_execution_from" field.
func (wduo *WorkflowDataUpdateOne) SetWorkflowExecutionFrom(sei schema.WorkflowExecutionID) *WorkflowDataUpdateOne {
	wduo.mutation.ResetWorkflowExecutionFrom()
	wduo.mutation.SetWorkflowExecutionFrom(sei)
	return wduo
}

// SetNillableWorkflowExecutionFrom sets the "workflow_execution_from" field if the given value is not nil.
func (wduo *WorkflowDataUpdateOne) SetNillableWorkflowExecutionFrom(sei *schema.WorkflowExecutionID) *WorkflowDataUpdateOne {
	if sei != nil {
		wduo.SetWorkflowExecutionFrom(*sei)
	}
	return wduo
}

// AddWorkflowExecutionFrom adds sei to the "workflow_execution_from" field.
func (wduo *WorkflowDataUpdateOne) AddWorkflowExecutionFrom(sei schema.WorkflowExecutionID) *WorkflowDataUpdateOne {
	wduo.mutation.AddWorkflowExecutionFrom(sei)
	return wduo
}

// ClearWorkflowExecutionFrom clears the value of the "workflow_execution_from" field.
func (wduo *WorkflowDataUpdateOne) ClearWorkflowExecutionFrom() *WorkflowDataUpdateOne {
	wduo.mutation.ClearWorkflowExecutionFrom()
	return wduo
}

// SetVersions sets the "versions" field.
func (wduo *WorkflowDataUpdateOne) SetVersions(m map[string]int) *WorkflowDataUpdateOne {
	wduo.mutation.SetVersions(m)
	return wduo
}

// SetCreatedAt sets the "created_at" field.
func (wduo *WorkflowDataUpdateOne) SetCreatedAt(t time.Time) *WorkflowDataUpdateOne {
	wduo.mutation.SetCreatedAt(t)
	return wduo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wduo *WorkflowDataUpdateOne) SetNillableCreatedAt(t *time.Time) *WorkflowDataUpdateOne {
	if t != nil {
		wduo.SetCreatedAt(*t)
	}
	return wduo
}

// SetUpdatedAt sets the "updated_at" field.
func (wduo *WorkflowDataUpdateOne) SetUpdatedAt(t time.Time) *WorkflowDataUpdateOne {
	wduo.mutation.SetUpdatedAt(t)
	return wduo
}

// SetWorkflowID sets the "workflow" edge to the WorkflowEntity entity by ID.
func (wduo *WorkflowDataUpdateOne) SetWorkflowID(id schema.WorkflowEntityID) *WorkflowDataUpdateOne {
	wduo.mutation.SetWorkflowID(id)
	return wduo
}

// SetWorkflow sets the "workflow" edge to the WorkflowEntity entity.
func (wduo *WorkflowDataUpdateOne) SetWorkflow(w *WorkflowEntity) *WorkflowDataUpdateOne {
	return wduo.SetWorkflowID(w.ID)
}

// Mutation returns the WorkflowDataMutation object of the builder.
func (wduo *WorkflowDataUpdateOne) Mutation() *WorkflowDataMutation {
	return wduo.mutation
}

// ClearWorkflow clears the "workflow" edge to the WorkflowEntity entity.
func (wduo *WorkflowDataUpdateOne) ClearWorkflow() *WorkflowDataUpdateOne {
	wduo.mutation.ClearWorkflow()
	return wduo
}

// Where appends a list predicates to the WorkflowDataUpdate builder.
func (wduo *WorkflowDataUpdateOne) Where(ps ...predicate.WorkflowData) *WorkflowDataUpdateOne {
	wduo.mutation.Where(ps...)
	return wduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wduo *WorkflowDataUpdateOne) Select(field string, fields ...string) *WorkflowDataUpdateOne {
	wduo.fields = append([]string{field}, fields...)
	return wduo
}

// Save executes the query and returns the updated WorkflowData entity.
func (wduo *WorkflowDataUpdateOne) Save(ctx context.Context) (*WorkflowData, error) {
	wduo.defaults()
	return withHooks(ctx, wduo.sqlSave, wduo.mutation, wduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wduo *WorkflowDataUpdateOne) SaveX(ctx context.Context) *WorkflowData {
	node, err := wduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wduo *WorkflowDataUpdateOne) Exec(ctx context.Context) error {
	_, err := wduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wduo *WorkflowDataUpdateOne) ExecX(ctx context.Context) {
	if err := wduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wduo *WorkflowDataUpdateOne) defaults() {
	if _, ok := wduo.mutation.UpdatedAt(); !ok {
		v := workflowdata.UpdateDefaultUpdatedAt()
		wduo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wduo *WorkflowDataUpdateOne) check() error {
	if wduo.mutation.WorkflowCleared() && len(wduo.mutation.WorkflowIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkflowData.workflow"`)
	}
	return nil
}

func (wduo *WorkflowDataUpdateOne) sqlSave(ctx context.Context) (_node *WorkflowData, err error) {
	if err := wduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(workflowdata.Table, workflowdata.Columns, sqlgraph.NewFieldSpec(workflowdata.FieldID, field.TypeInt))
	id, ok := wduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WorkflowData.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workflowdata.FieldID)
		for _, f := range fields {
			if !workflowdata.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != workflowdata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wduo.mutation.Duration(); ok {
		_spec.SetField(workflowdata.FieldDuration, field.TypeString, value)
	}
	if wduo.mutation.DurationCleared() {
		_spec.ClearField(workflowdata.FieldDuration, field.TypeString)
	}
	if value, ok := wduo.mutation.Paused(); ok {
		_spec.SetField(workflowdata.FieldPaused, field.TypeBool, value)
	}
	if value, ok := wduo.mutation.Resumable(); ok {
		_spec.SetField(workflowdata.FieldResumable, field.TypeBool, value)
	}
	if value, ok := wduo.mutation.IsRoot(); ok {
		_spec.SetField(workflowdata.FieldIsRoot, field.TypeBool, value)
	}
	if value, ok := wduo.mutation.Inputs(); ok {
		_spec.SetField(workflowdata.FieldInputs, field.TypeBytes, value)
	}
	if wduo.mutation.InputsCleared() {
		_spec.ClearField(workflowdata.FieldInputs, field.TypeBytes)
	}
	if value, ok := wduo.mutation.ContinuedFrom(); ok {
		_spec.SetField(workflowdata.FieldContinuedFrom, field.TypeInt, value)
	}
	if value, ok := wduo.mutation.AddedContinuedFrom(); ok {
		_spec.AddField(workflowdata.FieldContinuedFrom, field.TypeInt, value)
	}
	if wduo.mutation.ContinuedFromCleared() {
		_spec.ClearField(workflowdata.FieldContinuedFrom, field.TypeInt)
	}
	if value, ok := wduo.mutation.ContinuedExecutionFrom(); ok {
		_spec.SetField(workflowdata.FieldContinuedExecutionFrom, field.TypeInt, value)
	}
	if value, ok := wduo.mutation.AddedContinuedExecutionFrom(); ok {
		_spec.AddField(workflowdata.FieldContinuedExecutionFrom, field.TypeInt, value)
	}
	if wduo.mutation.ContinuedExecutionFromCleared() {
		_spec.ClearField(workflowdata.FieldContinuedExecutionFrom, field.TypeInt)
	}
	if value, ok := wduo.mutation.WorkflowStepID(); ok {
		_spec.SetField(workflowdata.FieldWorkflowStepID, field.TypeString, value)
	}
	if wduo.mutation.WorkflowStepIDCleared() {
		_spec.ClearField(workflowdata.FieldWorkflowStepID, field.TypeString)
	}
	if value, ok := wduo.mutation.WorkflowFrom(); ok {
		_spec.SetField(workflowdata.FieldWorkflowFrom, field.TypeInt, value)
	}
	if value, ok := wduo.mutation.AddedWorkflowFrom(); ok {
		_spec.AddField(workflowdata.FieldWorkflowFrom, field.TypeInt, value)
	}
	if wduo.mutation.WorkflowFromCleared() {
		_spec.ClearField(workflowdata.FieldWorkflowFrom, field.TypeInt)
	}
	if value, ok := wduo.mutation.WorkflowExecutionFrom(); ok {
		_spec.SetField(workflowdata.FieldWorkflowExecutionFrom, field.TypeInt, value)
	}
	if value, ok := wduo.mutation.AddedWorkflowExecutionFrom(); ok {
		_spec.AddField(workflowdata.FieldWorkflowExecutionFrom, field.TypeInt, value)
	}
	if wduo.mutation.WorkflowExecutionFromCleared() {
		_spec.ClearField(workflowdata.FieldWorkflowExecutionFrom, field.TypeInt)
	}
	if value, ok := wduo.mutation.Versions(); ok {
		_spec.SetField(workflowdata.FieldVersions, field.TypeJSON, value)
	}
	if value, ok := wduo.mutation.CreatedAt(); ok {
		_spec.SetField(workflowdata.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := wduo.mutation.UpdatedAt(); ok {
		_spec.SetField(workflowdata.FieldUpdatedAt, field.TypeTime, value)
	}
	if wduo.mutation.WorkflowCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   workflowdata.WorkflowTable,
			Columns: []string{workflowdata.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowentity.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wduo.mutation.WorkflowIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   workflowdata.WorkflowTable,
			Columns: []string{workflowdata.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowentity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &WorkflowData{config: wduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workflowdata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wduo.mutation.done = true
	return _node, nil
}
