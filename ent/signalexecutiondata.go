// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/davidroman0O/tempolite/ent/schema"
	"github.com/davidroman0O/tempolite/ent/signalexecution"
	"github.com/davidroman0O/tempolite/ent/signalexecutiondata"
)

// SignalExecutionData is the model entity for the SignalExecutionData schema.
type SignalExecutionData struct {
	config `json:"-"`
	// ID of the ent.
	ID schema.SignalExecutionDataID `json:"id,omitempty"`
	// ExecutionID holds the value of the "execution_id" field.
	ExecutionID schema.SignalExecutionID `json:"execution_id,omitempty"`
	// Value holds the value of the "value" field.
	Value []byte `json:"value,omitempty"`
	// Kind holds the value of the "kind" field.
	Kind uint `json:"kind,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SignalExecutionDataQuery when eager-loading is set.
	Edges        SignalExecutionDataEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SignalExecutionDataEdges holds the relations/edges for other nodes in the graph.
type SignalExecutionDataEdges struct {
	// Execution holds the value of the execution edge.
	Execution *SignalExecution `json:"execution,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ExecutionOrErr returns the Execution value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SignalExecutionDataEdges) ExecutionOrErr() (*SignalExecution, error) {
	if e.Execution != nil {
		return e.Execution, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: signalexecution.Label}
	}
	return nil, &NotLoadedError{edge: "execution"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SignalExecutionData) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case signalexecutiondata.FieldValue:
			values[i] = new([]byte)
		case signalexecutiondata.FieldID, signalexecutiondata.FieldExecutionID, signalexecutiondata.FieldKind:
			values[i] = new(sql.NullInt64)
		case signalexecutiondata.FieldCreatedAt, signalexecutiondata.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SignalExecutionData fields.
func (sed *SignalExecutionData) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case signalexecutiondata.FieldID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				sed.ID = schema.SignalExecutionDataID(value.Int64)
			}
		case signalexecutiondata.FieldExecutionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field execution_id", values[i])
			} else if value.Valid {
				sed.ExecutionID = schema.SignalExecutionID(value.Int64)
			}
		case signalexecutiondata.FieldValue:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value != nil {
				sed.Value = *value
			}
		case signalexecutiondata.FieldKind:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field kind", values[i])
			} else if value.Valid {
				sed.Kind = uint(value.Int64)
			}
		case signalexecutiondata.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sed.CreatedAt = value.Time
			}
		case signalexecutiondata.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sed.UpdatedAt = value.Time
			}
		default:
			sed.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the SignalExecutionData.
// This includes values selected through modifiers, order, etc.
func (sed *SignalExecutionData) GetValue(name string) (ent.Value, error) {
	return sed.selectValues.Get(name)
}

// QueryExecution queries the "execution" edge of the SignalExecutionData entity.
func (sed *SignalExecutionData) QueryExecution() *SignalExecutionQuery {
	return NewSignalExecutionDataClient(sed.config).QueryExecution(sed)
}

// Update returns a builder for updating this SignalExecutionData.
// Note that you need to call SignalExecutionData.Unwrap() before calling this method if this SignalExecutionData
// was returned from a transaction, and the transaction was committed or rolled back.
func (sed *SignalExecutionData) Update() *SignalExecutionDataUpdateOne {
	return NewSignalExecutionDataClient(sed.config).UpdateOne(sed)
}

// Unwrap unwraps the SignalExecutionData entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sed *SignalExecutionData) Unwrap() *SignalExecutionData {
	_tx, ok := sed.config.driver.(*txDriver)
	if !ok {
		panic("ent: SignalExecutionData is not a transactional entity")
	}
	sed.config.driver = _tx.drv
	return sed
}

// String implements the fmt.Stringer.
func (sed *SignalExecutionData) String() string {
	var builder strings.Builder
	builder.WriteString("SignalExecutionData(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sed.ID))
	builder.WriteString("execution_id=")
	builder.WriteString(fmt.Sprintf("%v", sed.ExecutionID))
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(fmt.Sprintf("%v", sed.Value))
	builder.WriteString(", ")
	builder.WriteString("kind=")
	builder.WriteString(fmt.Sprintf("%v", sed.Kind))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(sed.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sed.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SignalExecutionDataSlice is a parsable slice of SignalExecutionData.
type SignalExecutionDataSlice []*SignalExecutionData
