// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/tempolite/ent/predicate"
	"github.com/davidroman0O/tempolite/ent/schema"
	"github.com/davidroman0O/tempolite/ent/signalentity"
	"github.com/davidroman0O/tempolite/ent/signalexecution"
	"github.com/davidroman0O/tempolite/ent/signalexecutiondata"
)

// SignalExecutionUpdate is the builder for updating SignalExecution entities.
type SignalExecutionUpdate struct {
	config
	hooks    []Hook
	mutation *SignalExecutionMutation
}

// Where appends a list predicates to the SignalExecutionUpdate builder.
func (seu *SignalExecutionUpdate) Where(ps ...predicate.SignalExecution) *SignalExecutionUpdate {
	seu.mutation.Where(ps...)
	return seu
}

// SetEntityID sets the "entity_id" field.
func (seu *SignalExecutionUpdate) SetEntityID(sei schema.SignalEntityID) *SignalExecutionUpdate {
	seu.mutation.SetEntityID(sei)
	return seu
}

// SetNillableEntityID sets the "entity_id" field if the given value is not nil.
func (seu *SignalExecutionUpdate) SetNillableEntityID(sei *schema.SignalEntityID) *SignalExecutionUpdate {
	if sei != nil {
		seu.SetEntityID(*sei)
	}
	return seu
}

// SetStartedAt sets the "started_at" field.
func (seu *SignalExecutionUpdate) SetStartedAt(t time.Time) *SignalExecutionUpdate {
	seu.mutation.SetStartedAt(t)
	return seu
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (seu *SignalExecutionUpdate) SetNillableStartedAt(t *time.Time) *SignalExecutionUpdate {
	if t != nil {
		seu.SetStartedAt(*t)
	}
	return seu
}

// SetCompletedAt sets the "completed_at" field.
func (seu *SignalExecutionUpdate) SetCompletedAt(t time.Time) *SignalExecutionUpdate {
	seu.mutation.SetCompletedAt(t)
	return seu
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (seu *SignalExecutionUpdate) SetNillableCompletedAt(t *time.Time) *SignalExecutionUpdate {
	if t != nil {
		seu.SetCompletedAt(*t)
	}
	return seu
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (seu *SignalExecutionUpdate) ClearCompletedAt() *SignalExecutionUpdate {
	seu.mutation.ClearCompletedAt()
	return seu
}

// SetStatus sets the "status" field.
func (seu *SignalExecutionUpdate) SetStatus(ss schema.ExecutionStatus) *SignalExecutionUpdate {
	seu.mutation.SetStatus(ss)
	return seu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (seu *SignalExecutionUpdate) SetNillableStatus(ss *schema.ExecutionStatus) *SignalExecutionUpdate {
	if ss != nil {
		seu.SetStatus(*ss)
	}
	return seu
}

// SetError sets the "error" field.
func (seu *SignalExecutionUpdate) SetError(s string) *SignalExecutionUpdate {
	seu.mutation.SetError(s)
	return seu
}

// SetNillableError sets the "error" field if the given value is not nil.
func (seu *SignalExecutionUpdate) SetNillableError(s *string) *SignalExecutionUpdate {
	if s != nil {
		seu.SetError(*s)
	}
	return seu
}

// ClearError clears the value of the "error" field.
func (seu *SignalExecutionUpdate) ClearError() *SignalExecutionUpdate {
	seu.mutation.ClearError()
	return seu
}

// SetStackTrace sets the "stack_trace" field.
func (seu *SignalExecutionUpdate) SetStackTrace(s string) *SignalExecutionUpdate {
	seu.mutation.SetStackTrace(s)
	return seu
}

// SetNillableStackTrace sets the "stack_trace" field if the given value is not nil.
func (seu *SignalExecutionUpdate) SetNillableStackTrace(s *string) *SignalExecutionUpdate {
	if s != nil {
		seu.SetStackTrace(*s)
	}
	return seu
}

// ClearStackTrace clears the value of the "stack_trace" field.
func (seu *SignalExecutionUpdate) ClearStackTrace() *SignalExecutionUpdate {
	seu.mutation.ClearStackTrace()
	return seu
}

// SetCreatedAt sets the "created_at" field.
func (seu *SignalExecutionUpdate) SetCreatedAt(t time.Time) *SignalExecutionUpdate {
	seu.mutation.SetCreatedAt(t)
	return seu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (seu *SignalExecutionUpdate) SetNillableCreatedAt(t *time.Time) *SignalExecutionUpdate {
	if t != nil {
		seu.SetCreatedAt(*t)
	}
	return seu
}

// SetUpdatedAt sets the "updated_at" field.
func (seu *SignalExecutionUpdate) SetUpdatedAt(t time.Time) *SignalExecutionUpdate {
	seu.mutation.SetUpdatedAt(t)
	return seu
}

// SetSignalID sets the "signal" edge to the SignalEntity entity by ID.
func (seu *SignalExecutionUpdate) SetSignalID(id schema.SignalEntityID) *SignalExecutionUpdate {
	seu.mutation.SetSignalID(id)
	return seu
}

// SetSignal sets the "signal" edge to the SignalEntity entity.
func (seu *SignalExecutionUpdate) SetSignal(s *SignalEntity) *SignalExecutionUpdate {
	return seu.SetSignalID(s.ID)
}

// SetExecutionDataID sets the "execution_data" edge to the SignalExecutionData entity by ID.
func (seu *SignalExecutionUpdate) SetExecutionDataID(id schema.SignalExecutionDataID) *SignalExecutionUpdate {
	seu.mutation.SetExecutionDataID(id)
	return seu
}

// SetNillableExecutionDataID sets the "execution_data" edge to the SignalExecutionData entity by ID if the given value is not nil.
func (seu *SignalExecutionUpdate) SetNillableExecutionDataID(id *schema.SignalExecutionDataID) *SignalExecutionUpdate {
	if id != nil {
		seu = seu.SetExecutionDataID(*id)
	}
	return seu
}

// SetExecutionData sets the "execution_data" edge to the SignalExecutionData entity.
func (seu *SignalExecutionUpdate) SetExecutionData(s *SignalExecutionData) *SignalExecutionUpdate {
	return seu.SetExecutionDataID(s.ID)
}

// Mutation returns the SignalExecutionMutation object of the builder.
func (seu *SignalExecutionUpdate) Mutation() *SignalExecutionMutation {
	return seu.mutation
}

// ClearSignal clears the "signal" edge to the SignalEntity entity.
func (seu *SignalExecutionUpdate) ClearSignal() *SignalExecutionUpdate {
	seu.mutation.ClearSignal()
	return seu
}

// ClearExecutionData clears the "execution_data" edge to the SignalExecutionData entity.
func (seu *SignalExecutionUpdate) ClearExecutionData() *SignalExecutionUpdate {
	seu.mutation.ClearExecutionData()
	return seu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (seu *SignalExecutionUpdate) Save(ctx context.Context) (int, error) {
	seu.defaults()
	return withHooks(ctx, seu.sqlSave, seu.mutation, seu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (seu *SignalExecutionUpdate) SaveX(ctx context.Context) int {
	affected, err := seu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (seu *SignalExecutionUpdate) Exec(ctx context.Context) error {
	_, err := seu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (seu *SignalExecutionUpdate) ExecX(ctx context.Context) {
	if err := seu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (seu *SignalExecutionUpdate) defaults() {
	if _, ok := seu.mutation.UpdatedAt(); !ok {
		v := signalexecution.UpdateDefaultUpdatedAt()
		seu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (seu *SignalExecutionUpdate) check() error {
	if seu.mutation.SignalCleared() && len(seu.mutation.SignalIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SignalExecution.signal"`)
	}
	return nil
}

func (seu *SignalExecutionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := seu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(signalexecution.Table, signalexecution.Columns, sqlgraph.NewFieldSpec(signalexecution.FieldID, field.TypeInt))
	if ps := seu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := seu.mutation.StartedAt(); ok {
		_spec.SetField(signalexecution.FieldStartedAt, field.TypeTime, value)
	}
	if value, ok := seu.mutation.CompletedAt(); ok {
		_spec.SetField(signalexecution.FieldCompletedAt, field.TypeTime, value)
	}
	if seu.mutation.CompletedAtCleared() {
		_spec.ClearField(signalexecution.FieldCompletedAt, field.TypeTime)
	}
	if value, ok := seu.mutation.Status(); ok {
		_spec.SetField(signalexecution.FieldStatus, field.TypeString, value)
	}
	if value, ok := seu.mutation.Error(); ok {
		_spec.SetField(signalexecution.FieldError, field.TypeString, value)
	}
	if seu.mutation.ErrorCleared() {
		_spec.ClearField(signalexecution.FieldError, field.TypeString)
	}
	if value, ok := seu.mutation.StackTrace(); ok {
		_spec.SetField(signalexecution.FieldStackTrace, field.TypeString, value)
	}
	if seu.mutation.StackTraceCleared() {
		_spec.ClearField(signalexecution.FieldStackTrace, field.TypeString)
	}
	if value, ok := seu.mutation.CreatedAt(); ok {
		_spec.SetField(signalexecution.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := seu.mutation.UpdatedAt(); ok {
		_spec.SetField(signalexecution.FieldUpdatedAt, field.TypeTime, value)
	}
	if seu.mutation.SignalCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   signalexecution.SignalTable,
			Columns: []string{signalexecution.SignalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signalentity.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := seu.mutation.SignalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   signalexecution.SignalTable,
			Columns: []string{signalexecution.SignalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signalentity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if seu.mutation.ExecutionDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   signalexecution.ExecutionDataTable,
			Columns: []string{signalexecution.ExecutionDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signalexecutiondata.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := seu.mutation.ExecutionDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   signalexecution.ExecutionDataTable,
			Columns: []string{signalexecution.ExecutionDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signalexecutiondata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, seu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{signalexecution.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	seu.mutation.done = true
	return n, nil
}

// SignalExecutionUpdateOne is the builder for updating a single SignalExecution entity.
type SignalExecutionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SignalExecutionMutation
}

// SetEntityID sets the "entity_id" field.
func (seuo *SignalExecutionUpdateOne) SetEntityID(sei schema.SignalEntityID) *SignalExecutionUpdateOne {
	seuo.mutation.SetEntityID(sei)
	return seuo
}

// SetNillableEntityID sets the "entity_id" field if the given value is not nil.
func (seuo *SignalExecutionUpdateOne) SetNillableEntityID(sei *schema.SignalEntityID) *SignalExecutionUpdateOne {
	if sei != nil {
		seuo.SetEntityID(*sei)
	}
	return seuo
}

// SetStartedAt sets the "started_at" field.
func (seuo *SignalExecutionUpdateOne) SetStartedAt(t time.Time) *SignalExecutionUpdateOne {
	seuo.mutation.SetStartedAt(t)
	return seuo
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (seuo *SignalExecutionUpdateOne) SetNillableStartedAt(t *time.Time) *SignalExecutionUpdateOne {
	if t != nil {
		seuo.SetStartedAt(*t)
	}
	return seuo
}

// SetCompletedAt sets the "completed_at" field.
func (seuo *SignalExecutionUpdateOne) SetCompletedAt(t time.Time) *SignalExecutionUpdateOne {
	seuo.mutation.SetCompletedAt(t)
	return seuo
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (seuo *SignalExecutionUpdateOne) SetNillableCompletedAt(t *time.Time) *SignalExecutionUpdateOne {
	if t != nil {
		seuo.SetCompletedAt(*t)
	}
	return seuo
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (seuo *SignalExecutionUpdateOne) ClearCompletedAt() *SignalExecutionUpdateOne {
	seuo.mutation.ClearCompletedAt()
	return seuo
}

// SetStatus sets the "status" field.
func (seuo *SignalExecutionUpdateOne) SetStatus(ss schema.ExecutionStatus) *SignalExecutionUpdateOne {
	seuo.mutation.SetStatus(ss)
	return seuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (seuo *SignalExecutionUpdateOne) SetNillableStatus(ss *schema.ExecutionStatus) *SignalExecutionUpdateOne {
	if ss != nil {
		seuo.SetStatus(*ss)
	}
	return seuo
}

// SetError sets the "error" field.
func (seuo *SignalExecutionUpdateOne) SetError(s string) *SignalExecutionUpdateOne {
	seuo.mutation.SetError(s)
	return seuo
}

// SetNillableError sets the "error" field if the given value is not nil.
func (seuo *SignalExecutionUpdateOne) SetNillableError(s *string) *SignalExecutionUpdateOne {
	if s != nil {
		seuo.SetError(*s)
	}
	return seuo
}

// ClearError clears the value of the "error" field.
func (seuo *SignalExecutionUpdateOne) ClearError() *SignalExecutionUpdateOne {
	seuo.mutation.ClearError()
	return seuo
}

// SetStackTrace sets the "stack_trace" field.
func (seuo *SignalExecutionUpdateOne) SetStackTrace(s string) *SignalExecutionUpdateOne {
	seuo.mutation.SetStackTrace(s)
	return seuo
}

// SetNillableStackTrace sets the "stack_trace" field if the given value is not nil.
func (seuo *SignalExecutionUpdateOne) SetNillableStackTrace(s *string) *SignalExecutionUpdateOne {
	if s != nil {
		seuo.SetStackTrace(*s)
	}
	return seuo
}

// ClearStackTrace clears the value of the "stack_trace" field.
func (seuo *SignalExecutionUpdateOne) ClearStackTrace() *SignalExecutionUpdateOne {
	seuo.mutation.ClearStackTrace()
	return seuo
}

// SetCreatedAt sets the "created_at" field.
func (seuo *SignalExecutionUpdateOne) SetCreatedAt(t time.Time) *SignalExecutionUpdateOne {
	seuo.mutation.SetCreatedAt(t)
	return seuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (seuo *SignalExecutionUpdateOne) SetNillableCreatedAt(t *time.Time) *SignalExecutionUpdateOne {
	if t != nil {
		seuo.SetCreatedAt(*t)
	}
	return seuo
}

// SetUpdatedAt sets the "updated_at" field.
func (seuo *SignalExecutionUpdateOne) SetUpdatedAt(t time.Time) *SignalExecutionUpdateOne {
	seuo.mutation.SetUpdatedAt(t)
	return seuo
}

// SetSignalID sets the "signal" edge to the SignalEntity entity by ID.
func (seuo *SignalExecutionUpdateOne) SetSignalID(id schema.SignalEntityID) *SignalExecutionUpdateOne {
	seuo.mutation.SetSignalID(id)
	return seuo
}

// SetSignal sets the "signal" edge to the SignalEntity entity.
func (seuo *SignalExecutionUpdateOne) SetSignal(s *SignalEntity) *SignalExecutionUpdateOne {
	return seuo.SetSignalID(s.ID)
}

// SetExecutionDataID sets the "execution_data" edge to the SignalExecutionData entity by ID.
func (seuo *SignalExecutionUpdateOne) SetExecutionDataID(id schema.SignalExecutionDataID) *SignalExecutionUpdateOne {
	seuo.mutation.SetExecutionDataID(id)
	return seuo
}

// SetNillableExecutionDataID sets the "execution_data" edge to the SignalExecutionData entity by ID if the given value is not nil.
func (seuo *SignalExecutionUpdateOne) SetNillableExecutionDataID(id *schema.SignalExecutionDataID) *SignalExecutionUpdateOne {
	if id != nil {
		seuo = seuo.SetExecutionDataID(*id)
	}
	return seuo
}

// SetExecutionData sets the "execution_data" edge to the SignalExecutionData entity.
func (seuo *SignalExecutionUpdateOne) SetExecutionData(s *SignalExecutionData) *SignalExecutionUpdateOne {
	return seuo.SetExecutionDataID(s.ID)
}

// Mutation returns the SignalExecutionMutation object of the builder.
func (seuo *SignalExecutionUpdateOne) Mutation() *SignalExecutionMutation {
	return seuo.mutation
}

// ClearSignal clears the "signal" edge to the SignalEntity entity.
func (seuo *SignalExecutionUpdateOne) ClearSignal() *SignalExecutionUpdateOne {
	seuo.mutation.ClearSignal()
	return seuo
}

// ClearExecutionData clears the "execution_data" edge to the SignalExecutionData entity.
func (seuo *SignalExecutionUpdateOne) ClearExecutionData() *SignalExecutionUpdateOne {
	seuo.mutation.ClearExecutionData()
	return seuo
}

// Where appends a list predicates to the SignalExecutionUpdate builder.
func (seuo *SignalExecutionUpdateOne) Where(ps ...predicate.SignalExecution) *SignalExecutionUpdateOne {
	seuo.mutation.Where(ps...)
	return seuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (seuo *SignalExecutionUpdateOne) Select(field string, fields ...string) *SignalExecutionUpdateOne {
	seuo.fields = append([]string{field}, fields...)
	return seuo
}

// Save executes the query and returns the updated SignalExecution entity.
func (seuo *SignalExecutionUpdateOne) Save(ctx context.Context) (*SignalExecution, error) {
	seuo.defaults()
	return withHooks(ctx, seuo.sqlSave, seuo.mutation, seuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (seuo *SignalExecutionUpdateOne) SaveX(ctx context.Context) *SignalExecution {
	node, err := seuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (seuo *SignalExecutionUpdateOne) Exec(ctx context.Context) error {
	_, err := seuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (seuo *SignalExecutionUpdateOne) ExecX(ctx context.Context) {
	if err := seuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (seuo *SignalExecutionUpdateOne) defaults() {
	if _, ok := seuo.mutation.UpdatedAt(); !ok {
		v := signalexecution.UpdateDefaultUpdatedAt()
		seuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (seuo *SignalExecutionUpdateOne) check() error {
	if seuo.mutation.SignalCleared() && len(seuo.mutation.SignalIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SignalExecution.signal"`)
	}
	return nil
}

func (seuo *SignalExecutionUpdateOne) sqlSave(ctx context.Context) (_node *SignalExecution, err error) {
	if err := seuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(signalexecution.Table, signalexecution.Columns, sqlgraph.NewFieldSpec(signalexecution.FieldID, field.TypeInt))
	id, ok := seuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SignalExecution.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := seuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, signalexecution.FieldID)
		for _, f := range fields {
			if !signalexecution.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != signalexecution.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := seuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := seuo.mutation.StartedAt(); ok {
		_spec.SetField(signalexecution.FieldStartedAt, field.TypeTime, value)
	}
	if value, ok := seuo.mutation.CompletedAt(); ok {
		_spec.SetField(signalexecution.FieldCompletedAt, field.TypeTime, value)
	}
	if seuo.mutation.CompletedAtCleared() {
		_spec.ClearField(signalexecution.FieldCompletedAt, field.TypeTime)
	}
	if value, ok := seuo.mutation.Status(); ok {
		_spec.SetField(signalexecution.FieldStatus, field.TypeString, value)
	}
	if value, ok := seuo.mutation.Error(); ok {
		_spec.SetField(signalexecution.FieldError, field.TypeString, value)
	}
	if seuo.mutation.ErrorCleared() {
		_spec.ClearField(signalexecution.FieldError, field.TypeString)
	}
	if value, ok := seuo.mutation.StackTrace(); ok {
		_spec.SetField(signalexecution.FieldStackTrace, field.TypeString, value)
	}
	if seuo.mutation.StackTraceCleared() {
		_spec.ClearField(signalexecution.FieldStackTrace, field.TypeString)
	}
	if value, ok := seuo.mutation.CreatedAt(); ok {
		_spec.SetField(signalexecution.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := seuo.mutation.UpdatedAt(); ok {
		_spec.SetField(signalexecution.FieldUpdatedAt, field.TypeTime, value)
	}
	if seuo.mutation.SignalCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   signalexecution.SignalTable,
			Columns: []string{signalexecution.SignalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signalentity.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := seuo.mutation.SignalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   signalexecution.SignalTable,
			Columns: []string{signalexecution.SignalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signalentity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if seuo.mutation.ExecutionDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   signalexecution.ExecutionDataTable,
			Columns: []string{signalexecution.ExecutionDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signalexecutiondata.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := seuo.mutation.ExecutionDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   signalexecution.ExecutionDataTable,
			Columns: []string{signalexecution.ExecutionDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signalexecutiondata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SignalExecution{config: seuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, seuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{signalexecution.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	seuo.mutation.done = true
	return _node, nil
}
