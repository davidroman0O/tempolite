// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/tempolite/ent/predicate"
	"github.com/davidroman0O/tempolite/ent/sagaexecution"
	"github.com/davidroman0O/tempolite/ent/sagaexecutiondata"
	"github.com/davidroman0O/tempolite/ent/sagavalue"
	"github.com/davidroman0O/tempolite/ent/schema"
)

// SagaExecutionDataUpdate is the builder for updating SagaExecutionData entities.
type SagaExecutionDataUpdate struct {
	config
	hooks    []Hook
	mutation *SagaExecutionDataMutation
}

// Where appends a list predicates to the SagaExecutionDataUpdate builder.
func (sedu *SagaExecutionDataUpdate) Where(ps ...predicate.SagaExecutionData) *SagaExecutionDataUpdate {
	sedu.mutation.Where(ps...)
	return sedu
}

// SetExecutionID sets the "execution_id" field.
func (sedu *SagaExecutionDataUpdate) SetExecutionID(sei schema.SagaExecutionID) *SagaExecutionDataUpdate {
	sedu.mutation.SetExecutionID(sei)
	return sedu
}

// SetNillableExecutionID sets the "execution_id" field if the given value is not nil.
func (sedu *SagaExecutionDataUpdate) SetNillableExecutionID(sei *schema.SagaExecutionID) *SagaExecutionDataUpdate {
	if sei != nil {
		sedu.SetExecutionID(*sei)
	}
	return sedu
}

// SetLastHeartbeat sets the "last_heartbeat" field.
func (sedu *SagaExecutionDataUpdate) SetLastHeartbeat(t time.Time) *SagaExecutionDataUpdate {
	sedu.mutation.SetLastHeartbeat(t)
	return sedu
}

// SetNillableLastHeartbeat sets the "last_heartbeat" field if the given value is not nil.
func (sedu *SagaExecutionDataUpdate) SetNillableLastHeartbeat(t *time.Time) *SagaExecutionDataUpdate {
	if t != nil {
		sedu.SetLastHeartbeat(*t)
	}
	return sedu
}

// ClearLastHeartbeat clears the value of the "last_heartbeat" field.
func (sedu *SagaExecutionDataUpdate) ClearLastHeartbeat() *SagaExecutionDataUpdate {
	sedu.mutation.ClearLastHeartbeat()
	return sedu
}

// SetStepIndex sets the "step_index" field.
func (sedu *SagaExecutionDataUpdate) SetStepIndex(i int) *SagaExecutionDataUpdate {
	sedu.mutation.ResetStepIndex()
	sedu.mutation.SetStepIndex(i)
	return sedu
}

// SetNillableStepIndex sets the "step_index" field if the given value is not nil.
func (sedu *SagaExecutionDataUpdate) SetNillableStepIndex(i *int) *SagaExecutionDataUpdate {
	if i != nil {
		sedu.SetStepIndex(*i)
	}
	return sedu
}

// AddStepIndex adds i to the "step_index" field.
func (sedu *SagaExecutionDataUpdate) AddStepIndex(i int) *SagaExecutionDataUpdate {
	sedu.mutation.AddStepIndex(i)
	return sedu
}

// SetCreatedAt sets the "created_at" field.
func (sedu *SagaExecutionDataUpdate) SetCreatedAt(t time.Time) *SagaExecutionDataUpdate {
	sedu.mutation.SetCreatedAt(t)
	return sedu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sedu *SagaExecutionDataUpdate) SetNillableCreatedAt(t *time.Time) *SagaExecutionDataUpdate {
	if t != nil {
		sedu.SetCreatedAt(*t)
	}
	return sedu
}

// SetUpdatedAt sets the "updated_at" field.
func (sedu *SagaExecutionDataUpdate) SetUpdatedAt(t time.Time) *SagaExecutionDataUpdate {
	sedu.mutation.SetUpdatedAt(t)
	return sedu
}

// SetExecution sets the "execution" edge to the SagaExecution entity.
func (sedu *SagaExecutionDataUpdate) SetExecution(s *SagaExecution) *SagaExecutionDataUpdate {
	return sedu.SetExecutionID(s.ID)
}

// AddValueIDs adds the "values" edge to the SagaValue entity by IDs.
func (sedu *SagaExecutionDataUpdate) AddValueIDs(ids ...schema.SagaValueID) *SagaExecutionDataUpdate {
	sedu.mutation.AddValueIDs(ids...)
	return sedu
}

// AddValues adds the "values" edges to the SagaValue entity.
func (sedu *SagaExecutionDataUpdate) AddValues(s ...*SagaValue) *SagaExecutionDataUpdate {
	ids := make([]schema.SagaValueID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sedu.AddValueIDs(ids...)
}

// Mutation returns the SagaExecutionDataMutation object of the builder.
func (sedu *SagaExecutionDataUpdate) Mutation() *SagaExecutionDataMutation {
	return sedu.mutation
}

// ClearExecution clears the "execution" edge to the SagaExecution entity.
func (sedu *SagaExecutionDataUpdate) ClearExecution() *SagaExecutionDataUpdate {
	sedu.mutation.ClearExecution()
	return sedu
}

// ClearValues clears all "values" edges to the SagaValue entity.
func (sedu *SagaExecutionDataUpdate) ClearValues() *SagaExecutionDataUpdate {
	sedu.mutation.ClearValues()
	return sedu
}

// RemoveValueIDs removes the "values" edge to SagaValue entities by IDs.
func (sedu *SagaExecutionDataUpdate) RemoveValueIDs(ids ...schema.SagaValueID) *SagaExecutionDataUpdate {
	sedu.mutation.RemoveValueIDs(ids...)
	return sedu
}

// RemoveValues removes "values" edges to SagaValue entities.
func (sedu *SagaExecutionDataUpdate) RemoveValues(s ...*SagaValue) *SagaExecutionDataUpdate {
	ids := make([]schema.SagaValueID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sedu.RemoveValueIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sedu *SagaExecutionDataUpdate) Save(ctx context.Context) (int, error) {
	sedu.defaults()
	return withHooks(ctx, sedu.sqlSave, sedu.mutation, sedu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sedu *SagaExecutionDataUpdate) SaveX(ctx context.Context) int {
	affected, err := sedu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sedu *SagaExecutionDataUpdate) Exec(ctx context.Context) error {
	_, err := sedu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sedu *SagaExecutionDataUpdate) ExecX(ctx context.Context) {
	if err := sedu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sedu *SagaExecutionDataUpdate) defaults() {
	if _, ok := sedu.mutation.UpdatedAt(); !ok {
		v := sagaexecutiondata.UpdateDefaultUpdatedAt()
		sedu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sedu *SagaExecutionDataUpdate) check() error {
	if sedu.mutation.ExecutionCleared() && len(sedu.mutation.ExecutionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SagaExecutionData.execution"`)
	}
	return nil
}

func (sedu *SagaExecutionDataUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sedu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(sagaexecutiondata.Table, sagaexecutiondata.Columns, sqlgraph.NewFieldSpec(sagaexecutiondata.FieldID, field.TypeInt))
	if ps := sedu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sedu.mutation.LastHeartbeat(); ok {
		_spec.SetField(sagaexecutiondata.FieldLastHeartbeat, field.TypeTime, value)
	}
	if sedu.mutation.LastHeartbeatCleared() {
		_spec.ClearField(sagaexecutiondata.FieldLastHeartbeat, field.TypeTime)
	}
	if value, ok := sedu.mutation.StepIndex(); ok {
		_spec.SetField(sagaexecutiondata.FieldStepIndex, field.TypeInt, value)
	}
	if value, ok := sedu.mutation.AddedStepIndex(); ok {
		_spec.AddField(sagaexecutiondata.FieldStepIndex, field.TypeInt, value)
	}
	if value, ok := sedu.mutation.CreatedAt(); ok {
		_spec.SetField(sagaexecutiondata.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := sedu.mutation.UpdatedAt(); ok {
		_spec.SetField(sagaexecutiondata.FieldUpdatedAt, field.TypeTime, value)
	}
	if sedu.mutation.ExecutionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   sagaexecutiondata.ExecutionTable,
			Columns: []string{sagaexecutiondata.ExecutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagaexecution.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sedu.mutation.ExecutionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   sagaexecutiondata.ExecutionTable,
			Columns: []string{sagaexecutiondata.ExecutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagaexecution.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sedu.mutation.ValuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sagaexecutiondata.ValuesTable,
			Columns: []string{sagaexecutiondata.ValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagavalue.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sedu.mutation.RemovedValuesIDs(); len(nodes) > 0 && !sedu.mutation.ValuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sagaexecutiondata.ValuesTable,
			Columns: []string{sagaexecutiondata.ValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagavalue.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sedu.mutation.ValuesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sagaexecutiondata.ValuesTable,
			Columns: []string{sagaexecutiondata.ValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagavalue.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sedu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sagaexecutiondata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sedu.mutation.done = true
	return n, nil
}

// SagaExecutionDataUpdateOne is the builder for updating a single SagaExecutionData entity.
type SagaExecutionDataUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SagaExecutionDataMutation
}

// SetExecutionID sets the "execution_id" field.
func (seduo *SagaExecutionDataUpdateOne) SetExecutionID(sei schema.SagaExecutionID) *SagaExecutionDataUpdateOne {
	seduo.mutation.SetExecutionID(sei)
	return seduo
}

// SetNillableExecutionID sets the "execution_id" field if the given value is not nil.
func (seduo *SagaExecutionDataUpdateOne) SetNillableExecutionID(sei *schema.SagaExecutionID) *SagaExecutionDataUpdateOne {
	if sei != nil {
		seduo.SetExecutionID(*sei)
	}
	return seduo
}

// SetLastHeartbeat sets the "last_heartbeat" field.
func (seduo *SagaExecutionDataUpdateOne) SetLastHeartbeat(t time.Time) *SagaExecutionDataUpdateOne {
	seduo.mutation.SetLastHeartbeat(t)
	return seduo
}

// SetNillableLastHeartbeat sets the "last_heartbeat" field if the given value is not nil.
func (seduo *SagaExecutionDataUpdateOne) SetNillableLastHeartbeat(t *time.Time) *SagaExecutionDataUpdateOne {
	if t != nil {
		seduo.SetLastHeartbeat(*t)
	}
	return seduo
}

// ClearLastHeartbeat clears the value of the "last_heartbeat" field.
func (seduo *SagaExecutionDataUpdateOne) ClearLastHeartbeat() *SagaExecutionDataUpdateOne {
	seduo.mutation.ClearLastHeartbeat()
	return seduo
}

// SetStepIndex sets the "step_index" field.
func (seduo *SagaExecutionDataUpdateOne) SetStepIndex(i int) *SagaExecutionDataUpdateOne {
	seduo.mutation.ResetStepIndex()
	seduo.mutation.SetStepIndex(i)
	return seduo
}

// SetNillableStepIndex sets the "step_index" field if the given value is not nil.
func (seduo *SagaExecutionDataUpdateOne) SetNillableStepIndex(i *int) *SagaExecutionDataUpdateOne {
	if i != nil {
		seduo.SetStepIndex(*i)
	}
	return seduo
}

// AddStepIndex adds i to the "step_index" field.
func (seduo *SagaExecutionDataUpdateOne) AddStepIndex(i int) *SagaExecutionDataUpdateOne {
	seduo.mutation.AddStepIndex(i)
	return seduo
}

// SetCreatedAt sets the "created_at" field.
func (seduo *SagaExecutionDataUpdateOne) SetCreatedAt(t time.Time) *SagaExecutionDataUpdateOne {
	seduo.mutation.SetCreatedAt(t)
	return seduo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (seduo *SagaExecutionDataUpdateOne) SetNillableCreatedAt(t *time.Time) *SagaExecutionDataUpdateOne {
	if t != nil {
		seduo.SetCreatedAt(*t)
	}
	return seduo
}

// SetUpdatedAt sets the "updated_at" field.
func (seduo *SagaExecutionDataUpdateOne) SetUpdatedAt(t time.Time) *SagaExecutionDataUpdateOne {
	seduo.mutation.SetUpdatedAt(t)
	return seduo
}

// SetExecution sets the "execution" edge to the SagaExecution entity.
func (seduo *SagaExecutionDataUpdateOne) SetExecution(s *SagaExecution) *SagaExecutionDataUpdateOne {
	return seduo.SetExecutionID(s.ID)
}

// AddValueIDs adds the "values" edge to the SagaValue entity by IDs.
func (seduo *SagaExecutionDataUpdateOne) AddValueIDs(ids ...schema.SagaValueID) *SagaExecutionDataUpdateOne {
	seduo.mutation.AddValueIDs(ids...)
	return seduo
}

// AddValues adds the "values" edges to the SagaValue entity.
func (seduo *SagaExecutionDataUpdateOne) AddValues(s ...*SagaValue) *SagaExecutionDataUpdateOne {
	ids := make([]schema.SagaValueID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return seduo.AddValueIDs(ids...)
}

// Mutation returns the SagaExecutionDataMutation object of the builder.
func (seduo *SagaExecutionDataUpdateOne) Mutation() *SagaExecutionDataMutation {
	return seduo.mutation
}

// ClearExecution clears the "execution" edge to the SagaExecution entity.
func (seduo *SagaExecutionDataUpdateOne) ClearExecution() *SagaExecutionDataUpdateOne {
	seduo.mutation.ClearExecution()
	return seduo
}

// ClearValues clears all "values" edges to the SagaValue entity.
func (seduo *SagaExecutionDataUpdateOne) ClearValues() *SagaExecutionDataUpdateOne {
	seduo.mutation.ClearValues()
	return seduo
}

// RemoveValueIDs removes the "values" edge to SagaValue entities by IDs.
func (seduo *SagaExecutionDataUpdateOne) RemoveValueIDs(ids ...schema.SagaValueID) *SagaExecutionDataUpdateOne {
	seduo.mutation.RemoveValueIDs(ids...)
	return seduo
}

// RemoveValues removes "values" edges to SagaValue entities.
func (seduo *SagaExecutionDataUpdateOne) RemoveValues(s ...*SagaValue) *SagaExecutionDataUpdateOne {
	ids := make([]schema.SagaValueID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return seduo.RemoveValueIDs(ids...)
}

// Where appends a list predicates to the SagaExecutionDataUpdate builder.
func (seduo *SagaExecutionDataUpdateOne) Where(ps ...predicate.SagaExecutionData) *SagaExecutionDataUpdateOne {
	seduo.mutation.Where(ps...)
	return seduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (seduo *SagaExecutionDataUpdateOne) Select(field string, fields ...string) *SagaExecutionDataUpdateOne {
	seduo.fields = append([]string{field}, fields...)
	return seduo
}

// Save executes the query and returns the updated SagaExecutionData entity.
func (seduo *SagaExecutionDataUpdateOne) Save(ctx context.Context) (*SagaExecutionData, error) {
	seduo.defaults()
	return withHooks(ctx, seduo.sqlSave, seduo.mutation, seduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (seduo *SagaExecutionDataUpdateOne) SaveX(ctx context.Context) *SagaExecutionData {
	node, err := seduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (seduo *SagaExecutionDataUpdateOne) Exec(ctx context.Context) error {
	_, err := seduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (seduo *SagaExecutionDataUpdateOne) ExecX(ctx context.Context) {
	if err := seduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (seduo *SagaExecutionDataUpdateOne) defaults() {
	if _, ok := seduo.mutation.UpdatedAt(); !ok {
		v := sagaexecutiondata.UpdateDefaultUpdatedAt()
		seduo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (seduo *SagaExecutionDataUpdateOne) check() error {
	if seduo.mutation.ExecutionCleared() && len(seduo.mutation.ExecutionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SagaExecutionData.execution"`)
	}
	return nil
}

func (seduo *SagaExecutionDataUpdateOne) sqlSave(ctx context.Context) (_node *SagaExecutionData, err error) {
	if err := seduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(sagaexecutiondata.Table, sagaexecutiondata.Columns, sqlgraph.NewFieldSpec(sagaexecutiondata.FieldID, field.TypeInt))
	id, ok := seduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SagaExecutionData.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := seduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sagaexecutiondata.FieldID)
		for _, f := range fields {
			if !sagaexecutiondata.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sagaexecutiondata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := seduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := seduo.mutation.LastHeartbeat(); ok {
		_spec.SetField(sagaexecutiondata.FieldLastHeartbeat, field.TypeTime, value)
	}
	if seduo.mutation.LastHeartbeatCleared() {
		_spec.ClearField(sagaexecutiondata.FieldLastHeartbeat, field.TypeTime)
	}
	if value, ok := seduo.mutation.StepIndex(); ok {
		_spec.SetField(sagaexecutiondata.FieldStepIndex, field.TypeInt, value)
	}
	if value, ok := seduo.mutation.AddedStepIndex(); ok {
		_spec.AddField(sagaexecutiondata.FieldStepIndex, field.TypeInt, value)
	}
	if value, ok := seduo.mutation.CreatedAt(); ok {
		_spec.SetField(sagaexecutiondata.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := seduo.mutation.UpdatedAt(); ok {
		_spec.SetField(sagaexecutiondata.FieldUpdatedAt, field.TypeTime, value)
	}
	if seduo.mutation.ExecutionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   sagaexecutiondata.ExecutionTable,
			Columns: []string{sagaexecutiondata.ExecutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagaexecution.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := seduo.mutation.ExecutionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   sagaexecutiondata.ExecutionTable,
			Columns: []string{sagaexecutiondata.ExecutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagaexecution.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if seduo.mutation.ValuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sagaexecutiondata.ValuesTable,
			Columns: []string{sagaexecutiondata.ValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagavalue.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := seduo.mutation.RemovedValuesIDs(); len(nodes) > 0 && !seduo.mutation.ValuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sagaexecutiondata.ValuesTable,
			Columns: []string{sagaexecutiondata.ValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagavalue.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := seduo.mutation.ValuesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sagaexecutiondata.ValuesTable,
			Columns: []string{sagaexecutiondata.ValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagavalue.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SagaExecutionData{config: seduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, seduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sagaexecutiondata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	seduo.mutation.done = true
	return _node, nil
}
