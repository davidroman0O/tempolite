// Code generated by ent, DO NOT EDIT.

package hierarchy

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the hierarchy type in the database.
	Label = "hierarchy"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRunID holds the string denoting the run_id field in the database.
	FieldRunID = "run_id"
	// FieldParentEntityID holds the string denoting the parent_entity_id field in the database.
	FieldParentEntityID = "parent_entity_id"
	// FieldChildEntityID holds the string denoting the child_entity_id field in the database.
	FieldChildEntityID = "child_entity_id"
	// FieldParentExecutionID holds the string denoting the parent_execution_id field in the database.
	FieldParentExecutionID = "parent_execution_id"
	// FieldChildExecutionID holds the string denoting the child_execution_id field in the database.
	FieldChildExecutionID = "child_execution_id"
	// FieldParentStepID holds the string denoting the parent_step_id field in the database.
	FieldParentStepID = "parent_step_id"
	// FieldChildStepID holds the string denoting the child_step_id field in the database.
	FieldChildStepID = "child_step_id"
	// FieldParentType holds the string denoting the parent_type field in the database.
	FieldParentType = "parent_type"
	// FieldChildType holds the string denoting the child_type field in the database.
	FieldChildType = "child_type"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeRun holds the string denoting the run edge name in mutations.
	EdgeRun = "run"
	// Table holds the table name of the hierarchy in the database.
	Table = "hierarchies"
	// RunTable is the table that holds the run relation/edge.
	RunTable = "hierarchies"
	// RunInverseTable is the table name for the Run entity.
	// It exists in this package in order to avoid circular dependency with the "run" package.
	RunInverseTable = "runs"
	// RunColumn is the table column denoting the run relation/edge.
	RunColumn = "run_id"
)

// Columns holds all SQL columns for hierarchy fields.
var Columns = []string{
	FieldID,
	FieldRunID,
	FieldParentEntityID,
	FieldChildEntityID,
	FieldParentExecutionID,
	FieldChildExecutionID,
	FieldParentStepID,
	FieldChildStepID,
	FieldParentType,
	FieldChildType,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the Hierarchy queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByRunID orders the results by the run_id field.
func ByRunID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRunID, opts...).ToFunc()
}

// ByParentEntityID orders the results by the parent_entity_id field.
func ByParentEntityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParentEntityID, opts...).ToFunc()
}

// ByChildEntityID orders the results by the child_entity_id field.
func ByChildEntityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChildEntityID, opts...).ToFunc()
}

// ByParentExecutionID orders the results by the parent_execution_id field.
func ByParentExecutionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParentExecutionID, opts...).ToFunc()
}

// ByChildExecutionID orders the results by the child_execution_id field.
func ByChildExecutionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChildExecutionID, opts...).ToFunc()
}

// ByParentStepID orders the results by the parent_step_id field.
func ByParentStepID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParentStepID, opts...).ToFunc()
}

// ByChildStepID orders the results by the child_step_id field.
func ByChildStepID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChildStepID, opts...).ToFunc()
}

// ByParentType orders the results by the parent_type field.
func ByParentType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParentType, opts...).ToFunc()
}

// ByChildType orders the results by the child_type field.
func ByChildType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChildType, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByRunField orders the results by run field.
func ByRunField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRunStep(), sql.OrderByField(field, opts...))
	}
}
func newRunStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RunInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, RunTable, RunColumn),
	)
}
