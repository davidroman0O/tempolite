// Code generated by ent, DO NOT EDIT.

package hierarchy

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/davidroman0O/tempolite/ent/predicate"
	"github.com/davidroman0O/tempolite/ent/schema"
)

// ID filters vertices based on their ID field.
func ID(id schema.HierarchyID) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id schema.HierarchyID) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id schema.HierarchyID) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...schema.HierarchyID) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...schema.HierarchyID) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id schema.HierarchyID) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id schema.HierarchyID) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id schema.HierarchyID) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id schema.HierarchyID) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldLTE(FieldID, id))
}

// RunID applies equality check predicate on the "run_id" field. It's identical to RunIDEQ.
func RunID(v schema.RunID) predicate.Hierarchy {
	vc := int(v)
	return predicate.Hierarchy(sql.FieldEQ(FieldRunID, vc))
}

// ParentEntityID applies equality check predicate on the "parent_entity_id" field. It's identical to ParentEntityIDEQ.
func ParentEntityID(v int) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldEQ(FieldParentEntityID, v))
}

// ChildEntityID applies equality check predicate on the "child_entity_id" field. It's identical to ChildEntityIDEQ.
func ChildEntityID(v int) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldEQ(FieldChildEntityID, v))
}

// ParentExecutionID applies equality check predicate on the "parent_execution_id" field. It's identical to ParentExecutionIDEQ.
func ParentExecutionID(v int) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldEQ(FieldParentExecutionID, v))
}

// ChildExecutionID applies equality check predicate on the "child_execution_id" field. It's identical to ChildExecutionIDEQ.
func ChildExecutionID(v int) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldEQ(FieldChildExecutionID, v))
}

// ParentStepID applies equality check predicate on the "parent_step_id" field. It's identical to ParentStepIDEQ.
func ParentStepID(v string) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldEQ(FieldParentStepID, v))
}

// ChildStepID applies equality check predicate on the "child_step_id" field. It's identical to ChildStepIDEQ.
func ChildStepID(v string) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldEQ(FieldChildStepID, v))
}

// ParentType applies equality check predicate on the "parent_type" field. It's identical to ParentTypeEQ.
func ParentType(v schema.EntityType) predicate.Hierarchy {
	vc := string(v)
	return predicate.Hierarchy(sql.FieldEQ(FieldParentType, vc))
}

// ChildType applies equality check predicate on the "child_type" field. It's identical to ChildTypeEQ.
func ChildType(v schema.EntityType) predicate.Hierarchy {
	vc := string(v)
	return predicate.Hierarchy(sql.FieldEQ(FieldChildType, vc))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldEQ(FieldUpdatedAt, v))
}

// RunIDEQ applies the EQ predicate on the "run_id" field.
func RunIDEQ(v schema.RunID) predicate.Hierarchy {
	vc := int(v)
	return predicate.Hierarchy(sql.FieldEQ(FieldRunID, vc))
}

// RunIDNEQ applies the NEQ predicate on the "run_id" field.
func RunIDNEQ(v schema.RunID) predicate.Hierarchy {
	vc := int(v)
	return predicate.Hierarchy(sql.FieldNEQ(FieldRunID, vc))
}

// RunIDIn applies the In predicate on the "run_id" field.
func RunIDIn(vs ...schema.RunID) predicate.Hierarchy {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int(vs[i])
	}
	return predicate.Hierarchy(sql.FieldIn(FieldRunID, v...))
}

// RunIDNotIn applies the NotIn predicate on the "run_id" field.
func RunIDNotIn(vs ...schema.RunID) predicate.Hierarchy {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int(vs[i])
	}
	return predicate.Hierarchy(sql.FieldNotIn(FieldRunID, v...))
}

// ParentEntityIDEQ applies the EQ predicate on the "parent_entity_id" field.
func ParentEntityIDEQ(v int) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldEQ(FieldParentEntityID, v))
}

// ParentEntityIDNEQ applies the NEQ predicate on the "parent_entity_id" field.
func ParentEntityIDNEQ(v int) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldNEQ(FieldParentEntityID, v))
}

// ParentEntityIDIn applies the In predicate on the "parent_entity_id" field.
func ParentEntityIDIn(vs ...int) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldIn(FieldParentEntityID, vs...))
}

// ParentEntityIDNotIn applies the NotIn predicate on the "parent_entity_id" field.
func ParentEntityIDNotIn(vs ...int) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldNotIn(FieldParentEntityID, vs...))
}

// ParentEntityIDGT applies the GT predicate on the "parent_entity_id" field.
func ParentEntityIDGT(v int) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldGT(FieldParentEntityID, v))
}

// ParentEntityIDGTE applies the GTE predicate on the "parent_entity_id" field.
func ParentEntityIDGTE(v int) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldGTE(FieldParentEntityID, v))
}

// ParentEntityIDLT applies the LT predicate on the "parent_entity_id" field.
func ParentEntityIDLT(v int) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldLT(FieldParentEntityID, v))
}

// ParentEntityIDLTE applies the LTE predicate on the "parent_entity_id" field.
func ParentEntityIDLTE(v int) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldLTE(FieldParentEntityID, v))
}

// ChildEntityIDEQ applies the EQ predicate on the "child_entity_id" field.
func ChildEntityIDEQ(v int) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldEQ(FieldChildEntityID, v))
}

// ChildEntityIDNEQ applies the NEQ predicate on the "child_entity_id" field.
func ChildEntityIDNEQ(v int) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldNEQ(FieldChildEntityID, v))
}

// ChildEntityIDIn applies the In predicate on the "child_entity_id" field.
func ChildEntityIDIn(vs ...int) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldIn(FieldChildEntityID, vs...))
}

// ChildEntityIDNotIn applies the NotIn predicate on the "child_entity_id" field.
func ChildEntityIDNotIn(vs ...int) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldNotIn(FieldChildEntityID, vs...))
}

// ChildEntityIDGT applies the GT predicate on the "child_entity_id" field.
func ChildEntityIDGT(v int) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldGT(FieldChildEntityID, v))
}

// ChildEntityIDGTE applies the GTE predicate on the "child_entity_id" field.
func ChildEntityIDGTE(v int) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldGTE(FieldChildEntityID, v))
}

// ChildEntityIDLT applies the LT predicate on the "child_entity_id" field.
func ChildEntityIDLT(v int) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldLT(FieldChildEntityID, v))
}

// ChildEntityIDLTE applies the LTE predicate on the "child_entity_id" field.
func ChildEntityIDLTE(v int) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldLTE(FieldChildEntityID, v))
}

// ParentExecutionIDEQ applies the EQ predicate on the "parent_execution_id" field.
func ParentExecutionIDEQ(v int) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldEQ(FieldParentExecutionID, v))
}

// ParentExecutionIDNEQ applies the NEQ predicate on the "parent_execution_id" field.
func ParentExecutionIDNEQ(v int) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldNEQ(FieldParentExecutionID, v))
}

// ParentExecutionIDIn applies the In predicate on the "parent_execution_id" field.
func ParentExecutionIDIn(vs ...int) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldIn(FieldParentExecutionID, vs...))
}

// ParentExecutionIDNotIn applies the NotIn predicate on the "parent_execution_id" field.
func ParentExecutionIDNotIn(vs ...int) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldNotIn(FieldParentExecutionID, vs...))
}

// ParentExecutionIDGT applies the GT predicate on the "parent_execution_id" field.
func ParentExecutionIDGT(v int) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldGT(FieldParentExecutionID, v))
}

// ParentExecutionIDGTE applies the GTE predicate on the "parent_execution_id" field.
func ParentExecutionIDGTE(v int) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldGTE(FieldParentExecutionID, v))
}

// ParentExecutionIDLT applies the LT predicate on the "parent_execution_id" field.
func ParentExecutionIDLT(v int) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldLT(FieldParentExecutionID, v))
}

// ParentExecutionIDLTE applies the LTE predicate on the "parent_execution_id" field.
func ParentExecutionIDLTE(v int) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldLTE(FieldParentExecutionID, v))
}

// ChildExecutionIDEQ applies the EQ predicate on the "child_execution_id" field.
func ChildExecutionIDEQ(v int) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldEQ(FieldChildExecutionID, v))
}

// ChildExecutionIDNEQ applies the NEQ predicate on the "child_execution_id" field.
func ChildExecutionIDNEQ(v int) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldNEQ(FieldChildExecutionID, v))
}

// ChildExecutionIDIn applies the In predicate on the "child_execution_id" field.
func ChildExecutionIDIn(vs ...int) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldIn(FieldChildExecutionID, vs...))
}

// ChildExecutionIDNotIn applies the NotIn predicate on the "child_execution_id" field.
func ChildExecutionIDNotIn(vs ...int) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldNotIn(FieldChildExecutionID, vs...))
}

// ChildExecutionIDGT applies the GT predicate on the "child_execution_id" field.
func ChildExecutionIDGT(v int) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldGT(FieldChildExecutionID, v))
}

// ChildExecutionIDGTE applies the GTE predicate on the "child_execution_id" field.
func ChildExecutionIDGTE(v int) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldGTE(FieldChildExecutionID, v))
}

// ChildExecutionIDLT applies the LT predicate on the "child_execution_id" field.
func ChildExecutionIDLT(v int) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldLT(FieldChildExecutionID, v))
}

// ChildExecutionIDLTE applies the LTE predicate on the "child_execution_id" field.
func ChildExecutionIDLTE(v int) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldLTE(FieldChildExecutionID, v))
}

// ParentStepIDEQ applies the EQ predicate on the "parent_step_id" field.
func ParentStepIDEQ(v string) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldEQ(FieldParentStepID, v))
}

// ParentStepIDNEQ applies the NEQ predicate on the "parent_step_id" field.
func ParentStepIDNEQ(v string) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldNEQ(FieldParentStepID, v))
}

// ParentStepIDIn applies the In predicate on the "parent_step_id" field.
func ParentStepIDIn(vs ...string) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldIn(FieldParentStepID, vs...))
}

// ParentStepIDNotIn applies the NotIn predicate on the "parent_step_id" field.
func ParentStepIDNotIn(vs ...string) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldNotIn(FieldParentStepID, vs...))
}

// ParentStepIDGT applies the GT predicate on the "parent_step_id" field.
func ParentStepIDGT(v string) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldGT(FieldParentStepID, v))
}

// ParentStepIDGTE applies the GTE predicate on the "parent_step_id" field.
func ParentStepIDGTE(v string) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldGTE(FieldParentStepID, v))
}

// ParentStepIDLT applies the LT predicate on the "parent_step_id" field.
func ParentStepIDLT(v string) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldLT(FieldParentStepID, v))
}

// ParentStepIDLTE applies the LTE predicate on the "parent_step_id" field.
func ParentStepIDLTE(v string) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldLTE(FieldParentStepID, v))
}

// ParentStepIDContains applies the Contains predicate on the "parent_step_id" field.
func ParentStepIDContains(v string) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldContains(FieldParentStepID, v))
}

// ParentStepIDHasPrefix applies the HasPrefix predicate on the "parent_step_id" field.
func ParentStepIDHasPrefix(v string) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldHasPrefix(FieldParentStepID, v))
}

// ParentStepIDHasSuffix applies the HasSuffix predicate on the "parent_step_id" field.
func ParentStepIDHasSuffix(v string) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldHasSuffix(FieldParentStepID, v))
}

// ParentStepIDEqualFold applies the EqualFold predicate on the "parent_step_id" field.
func ParentStepIDEqualFold(v string) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldEqualFold(FieldParentStepID, v))
}

// ParentStepIDContainsFold applies the ContainsFold predicate on the "parent_step_id" field.
func ParentStepIDContainsFold(v string) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldContainsFold(FieldParentStepID, v))
}

// ChildStepIDEQ applies the EQ predicate on the "child_step_id" field.
func ChildStepIDEQ(v string) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldEQ(FieldChildStepID, v))
}

// ChildStepIDNEQ applies the NEQ predicate on the "child_step_id" field.
func ChildStepIDNEQ(v string) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldNEQ(FieldChildStepID, v))
}

// ChildStepIDIn applies the In predicate on the "child_step_id" field.
func ChildStepIDIn(vs ...string) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldIn(FieldChildStepID, vs...))
}

// ChildStepIDNotIn applies the NotIn predicate on the "child_step_id" field.
func ChildStepIDNotIn(vs ...string) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldNotIn(FieldChildStepID, vs...))
}

// ChildStepIDGT applies the GT predicate on the "child_step_id" field.
func ChildStepIDGT(v string) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldGT(FieldChildStepID, v))
}

// ChildStepIDGTE applies the GTE predicate on the "child_step_id" field.
func ChildStepIDGTE(v string) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldGTE(FieldChildStepID, v))
}

// ChildStepIDLT applies the LT predicate on the "child_step_id" field.
func ChildStepIDLT(v string) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldLT(FieldChildStepID, v))
}

// ChildStepIDLTE applies the LTE predicate on the "child_step_id" field.
func ChildStepIDLTE(v string) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldLTE(FieldChildStepID, v))
}

// ChildStepIDContains applies the Contains predicate on the "child_step_id" field.
func ChildStepIDContains(v string) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldContains(FieldChildStepID, v))
}

// ChildStepIDHasPrefix applies the HasPrefix predicate on the "child_step_id" field.
func ChildStepIDHasPrefix(v string) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldHasPrefix(FieldChildStepID, v))
}

// ChildStepIDHasSuffix applies the HasSuffix predicate on the "child_step_id" field.
func ChildStepIDHasSuffix(v string) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldHasSuffix(FieldChildStepID, v))
}

// ChildStepIDEqualFold applies the EqualFold predicate on the "child_step_id" field.
func ChildStepIDEqualFold(v string) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldEqualFold(FieldChildStepID, v))
}

// ChildStepIDContainsFold applies the ContainsFold predicate on the "child_step_id" field.
func ChildStepIDContainsFold(v string) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldContainsFold(FieldChildStepID, v))
}

// ParentTypeEQ applies the EQ predicate on the "parent_type" field.
func ParentTypeEQ(v schema.EntityType) predicate.Hierarchy {
	vc := string(v)
	return predicate.Hierarchy(sql.FieldEQ(FieldParentType, vc))
}

// ParentTypeNEQ applies the NEQ predicate on the "parent_type" field.
func ParentTypeNEQ(v schema.EntityType) predicate.Hierarchy {
	vc := string(v)
	return predicate.Hierarchy(sql.FieldNEQ(FieldParentType, vc))
}

// ParentTypeIn applies the In predicate on the "parent_type" field.
func ParentTypeIn(vs ...schema.EntityType) predicate.Hierarchy {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.Hierarchy(sql.FieldIn(FieldParentType, v...))
}

// ParentTypeNotIn applies the NotIn predicate on the "parent_type" field.
func ParentTypeNotIn(vs ...schema.EntityType) predicate.Hierarchy {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.Hierarchy(sql.FieldNotIn(FieldParentType, v...))
}

// ParentTypeGT applies the GT predicate on the "parent_type" field.
func ParentTypeGT(v schema.EntityType) predicate.Hierarchy {
	vc := string(v)
	return predicate.Hierarchy(sql.FieldGT(FieldParentType, vc))
}

// ParentTypeGTE applies the GTE predicate on the "parent_type" field.
func ParentTypeGTE(v schema.EntityType) predicate.Hierarchy {
	vc := string(v)
	return predicate.Hierarchy(sql.FieldGTE(FieldParentType, vc))
}

// ParentTypeLT applies the LT predicate on the "parent_type" field.
func ParentTypeLT(v schema.EntityType) predicate.Hierarchy {
	vc := string(v)
	return predicate.Hierarchy(sql.FieldLT(FieldParentType, vc))
}

// ParentTypeLTE applies the LTE predicate on the "parent_type" field.
func ParentTypeLTE(v schema.EntityType) predicate.Hierarchy {
	vc := string(v)
	return predicate.Hierarchy(sql.FieldLTE(FieldParentType, vc))
}

// ParentTypeContains applies the Contains predicate on the "parent_type" field.
func ParentTypeContains(v schema.EntityType) predicate.Hierarchy {
	vc := string(v)
	return predicate.Hierarchy(sql.FieldContains(FieldParentType, vc))
}

// ParentTypeHasPrefix applies the HasPrefix predicate on the "parent_type" field.
func ParentTypeHasPrefix(v schema.EntityType) predicate.Hierarchy {
	vc := string(v)
	return predicate.Hierarchy(sql.FieldHasPrefix(FieldParentType, vc))
}

// ParentTypeHasSuffix applies the HasSuffix predicate on the "parent_type" field.
func ParentTypeHasSuffix(v schema.EntityType) predicate.Hierarchy {
	vc := string(v)
	return predicate.Hierarchy(sql.FieldHasSuffix(FieldParentType, vc))
}

// ParentTypeEqualFold applies the EqualFold predicate on the "parent_type" field.
func ParentTypeEqualFold(v schema.EntityType) predicate.Hierarchy {
	vc := string(v)
	return predicate.Hierarchy(sql.FieldEqualFold(FieldParentType, vc))
}

// ParentTypeContainsFold applies the ContainsFold predicate on the "parent_type" field.
func ParentTypeContainsFold(v schema.EntityType) predicate.Hierarchy {
	vc := string(v)
	return predicate.Hierarchy(sql.FieldContainsFold(FieldParentType, vc))
}

// ChildTypeEQ applies the EQ predicate on the "child_type" field.
func ChildTypeEQ(v schema.EntityType) predicate.Hierarchy {
	vc := string(v)
	return predicate.Hierarchy(sql.FieldEQ(FieldChildType, vc))
}

// ChildTypeNEQ applies the NEQ predicate on the "child_type" field.
func ChildTypeNEQ(v schema.EntityType) predicate.Hierarchy {
	vc := string(v)
	return predicate.Hierarchy(sql.FieldNEQ(FieldChildType, vc))
}

// ChildTypeIn applies the In predicate on the "child_type" field.
func ChildTypeIn(vs ...schema.EntityType) predicate.Hierarchy {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.Hierarchy(sql.FieldIn(FieldChildType, v...))
}

// ChildTypeNotIn applies the NotIn predicate on the "child_type" field.
func ChildTypeNotIn(vs ...schema.EntityType) predicate.Hierarchy {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.Hierarchy(sql.FieldNotIn(FieldChildType, v...))
}

// ChildTypeGT applies the GT predicate on the "child_type" field.
func ChildTypeGT(v schema.EntityType) predicate.Hierarchy {
	vc := string(v)
	return predicate.Hierarchy(sql.FieldGT(FieldChildType, vc))
}

// ChildTypeGTE applies the GTE predicate on the "child_type" field.
func ChildTypeGTE(v schema.EntityType) predicate.Hierarchy {
	vc := string(v)
	return predicate.Hierarchy(sql.FieldGTE(FieldChildType, vc))
}

// ChildTypeLT applies the LT predicate on the "child_type" field.
func ChildTypeLT(v schema.EntityType) predicate.Hierarchy {
	vc := string(v)
	return predicate.Hierarchy(sql.FieldLT(FieldChildType, vc))
}

// ChildTypeLTE applies the LTE predicate on the "child_type" field.
func ChildTypeLTE(v schema.EntityType) predicate.Hierarchy {
	vc := string(v)
	return predicate.Hierarchy(sql.FieldLTE(FieldChildType, vc))
}

// ChildTypeContains applies the Contains predicate on the "child_type" field.
func ChildTypeContains(v schema.EntityType) predicate.Hierarchy {
	vc := string(v)
	return predicate.Hierarchy(sql.FieldContains(FieldChildType, vc))
}

// ChildTypeHasPrefix applies the HasPrefix predicate on the "child_type" field.
func ChildTypeHasPrefix(v schema.EntityType) predicate.Hierarchy {
	vc := string(v)
	return predicate.Hierarchy(sql.FieldHasPrefix(FieldChildType, vc))
}

// ChildTypeHasSuffix applies the HasSuffix predicate on the "child_type" field.
func ChildTypeHasSuffix(v schema.EntityType) predicate.Hierarchy {
	vc := string(v)
	return predicate.Hierarchy(sql.FieldHasSuffix(FieldChildType, vc))
}

// ChildTypeEqualFold applies the EqualFold predicate on the "child_type" field.
func ChildTypeEqualFold(v schema.EntityType) predicate.Hierarchy {
	vc := string(v)
	return predicate.Hierarchy(sql.FieldEqualFold(FieldChildType, vc))
}

// ChildTypeContainsFold applies the ContainsFold predicate on the "child_type" field.
func ChildTypeContainsFold(v schema.EntityType) predicate.Hierarchy {
	vc := string(v)
	return predicate.Hierarchy(sql.FieldContainsFold(FieldChildType, vc))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Hierarchy {
	return predicate.Hierarchy(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasRun applies the HasEdge predicate on the "run" edge.
func HasRun() predicate.Hierarchy {
	return predicate.Hierarchy(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RunTable, RunColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRunWith applies the HasEdge predicate on the "run" edge with a given conditions (other predicates).
func HasRunWith(preds ...predicate.Run) predicate.Hierarchy {
	return predicate.Hierarchy(func(s *sql.Selector) {
		step := newRunStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Hierarchy) predicate.Hierarchy {
	return predicate.Hierarchy(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Hierarchy) predicate.Hierarchy {
	return predicate.Hierarchy(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Hierarchy) predicate.Hierarchy {
	return predicate.Hierarchy(sql.NotPredicates(p))
}
