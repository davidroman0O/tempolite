// Code generated by ent, DO NOT EDIT.

package sagaentity

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/davidroman0O/tempolite/ent/predicate"
	"github.com/davidroman0O/tempolite/ent/schema"
)

// ID filters vertices based on their ID field.
func ID(id schema.SagaEntityID) predicate.SagaEntity {
	return predicate.SagaEntity(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id schema.SagaEntityID) predicate.SagaEntity {
	return predicate.SagaEntity(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id schema.SagaEntityID) predicate.SagaEntity {
	return predicate.SagaEntity(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...schema.SagaEntityID) predicate.SagaEntity {
	return predicate.SagaEntity(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...schema.SagaEntityID) predicate.SagaEntity {
	return predicate.SagaEntity(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id schema.SagaEntityID) predicate.SagaEntity {
	return predicate.SagaEntity(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id schema.SagaEntityID) predicate.SagaEntity {
	return predicate.SagaEntity(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id schema.SagaEntityID) predicate.SagaEntity {
	return predicate.SagaEntity(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id schema.SagaEntityID) predicate.SagaEntity {
	return predicate.SagaEntity(sql.FieldLTE(FieldID, id))
}

// HandlerName applies equality check predicate on the "handler_name" field. It's identical to HandlerNameEQ.
func HandlerName(v string) predicate.SagaEntity {
	return predicate.SagaEntity(sql.FieldEQ(FieldHandlerName, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v schema.EntityType) predicate.SagaEntity {
	vc := string(v)
	return predicate.SagaEntity(sql.FieldEQ(FieldType, vc))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v schema.EntityStatus) predicate.SagaEntity {
	vc := string(v)
	return predicate.SagaEntity(sql.FieldEQ(FieldStatus, vc))
}

// StepID applies equality check predicate on the "step_id" field. It's identical to StepIDEQ.
func StepID(v string) predicate.SagaEntity {
	return predicate.SagaEntity(sql.FieldEQ(FieldStepID, v))
}

// RunID applies equality check predicate on the "run_id" field. It's identical to RunIDEQ.
func RunID(v schema.RunID) predicate.SagaEntity {
	vc := int(v)
	return predicate.SagaEntity(sql.FieldEQ(FieldRunID, vc))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.SagaEntity {
	return predicate.SagaEntity(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.SagaEntity {
	return predicate.SagaEntity(sql.FieldEQ(FieldUpdatedAt, v))
}

// HandlerNameEQ applies the EQ predicate on the "handler_name" field.
func HandlerNameEQ(v string) predicate.SagaEntity {
	return predicate.SagaEntity(sql.FieldEQ(FieldHandlerName, v))
}

// HandlerNameNEQ applies the NEQ predicate on the "handler_name" field.
func HandlerNameNEQ(v string) predicate.SagaEntity {
	return predicate.SagaEntity(sql.FieldNEQ(FieldHandlerName, v))
}

// HandlerNameIn applies the In predicate on the "handler_name" field.
func HandlerNameIn(vs ...string) predicate.SagaEntity {
	return predicate.SagaEntity(sql.FieldIn(FieldHandlerName, vs...))
}

// HandlerNameNotIn applies the NotIn predicate on the "handler_name" field.
func HandlerNameNotIn(vs ...string) predicate.SagaEntity {
	return predicate.SagaEntity(sql.FieldNotIn(FieldHandlerName, vs...))
}

// HandlerNameGT applies the GT predicate on the "handler_name" field.
func HandlerNameGT(v string) predicate.SagaEntity {
	return predicate.SagaEntity(sql.FieldGT(FieldHandlerName, v))
}

// HandlerNameGTE applies the GTE predicate on the "handler_name" field.
func HandlerNameGTE(v string) predicate.SagaEntity {
	return predicate.SagaEntity(sql.FieldGTE(FieldHandlerName, v))
}

// HandlerNameLT applies the LT predicate on the "handler_name" field.
func HandlerNameLT(v string) predicate.SagaEntity {
	return predicate.SagaEntity(sql.FieldLT(FieldHandlerName, v))
}

// HandlerNameLTE applies the LTE predicate on the "handler_name" field.
func HandlerNameLTE(v string) predicate.SagaEntity {
	return predicate.SagaEntity(sql.FieldLTE(FieldHandlerName, v))
}

// HandlerNameContains applies the Contains predicate on the "handler_name" field.
func HandlerNameContains(v string) predicate.SagaEntity {
	return predicate.SagaEntity(sql.FieldContains(FieldHandlerName, v))
}

// HandlerNameHasPrefix applies the HasPrefix predicate on the "handler_name" field.
func HandlerNameHasPrefix(v string) predicate.SagaEntity {
	return predicate.SagaEntity(sql.FieldHasPrefix(FieldHandlerName, v))
}

// HandlerNameHasSuffix applies the HasSuffix predicate on the "handler_name" field.
func HandlerNameHasSuffix(v string) predicate.SagaEntity {
	return predicate.SagaEntity(sql.FieldHasSuffix(FieldHandlerName, v))
}

// HandlerNameEqualFold applies the EqualFold predicate on the "handler_name" field.
func HandlerNameEqualFold(v string) predicate.SagaEntity {
	return predicate.SagaEntity(sql.FieldEqualFold(FieldHandlerName, v))
}

// HandlerNameContainsFold applies the ContainsFold predicate on the "handler_name" field.
func HandlerNameContainsFold(v string) predicate.SagaEntity {
	return predicate.SagaEntity(sql.FieldContainsFold(FieldHandlerName, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v schema.EntityType) predicate.SagaEntity {
	vc := string(v)
	return predicate.SagaEntity(sql.FieldEQ(FieldType, vc))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v schema.EntityType) predicate.SagaEntity {
	vc := string(v)
	return predicate.SagaEntity(sql.FieldNEQ(FieldType, vc))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...schema.EntityType) predicate.SagaEntity {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.SagaEntity(sql.FieldIn(FieldType, v...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...schema.EntityType) predicate.SagaEntity {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.SagaEntity(sql.FieldNotIn(FieldType, v...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v schema.EntityType) predicate.SagaEntity {
	vc := string(v)
	return predicate.SagaEntity(sql.FieldGT(FieldType, vc))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v schema.EntityType) predicate.SagaEntity {
	vc := string(v)
	return predicate.SagaEntity(sql.FieldGTE(FieldType, vc))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v schema.EntityType) predicate.SagaEntity {
	vc := string(v)
	return predicate.SagaEntity(sql.FieldLT(FieldType, vc))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v schema.EntityType) predicate.SagaEntity {
	vc := string(v)
	return predicate.SagaEntity(sql.FieldLTE(FieldType, vc))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v schema.EntityType) predicate.SagaEntity {
	vc := string(v)
	return predicate.SagaEntity(sql.FieldContains(FieldType, vc))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v schema.EntityType) predicate.SagaEntity {
	vc := string(v)
	return predicate.SagaEntity(sql.FieldHasPrefix(FieldType, vc))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v schema.EntityType) predicate.SagaEntity {
	vc := string(v)
	return predicate.SagaEntity(sql.FieldHasSuffix(FieldType, vc))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v schema.EntityType) predicate.SagaEntity {
	vc := string(v)
	return predicate.SagaEntity(sql.FieldEqualFold(FieldType, vc))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v schema.EntityType) predicate.SagaEntity {
	vc := string(v)
	return predicate.SagaEntity(sql.FieldContainsFold(FieldType, vc))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v schema.EntityStatus) predicate.SagaEntity {
	vc := string(v)
	return predicate.SagaEntity(sql.FieldEQ(FieldStatus, vc))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v schema.EntityStatus) predicate.SagaEntity {
	vc := string(v)
	return predicate.SagaEntity(sql.FieldNEQ(FieldStatus, vc))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...schema.EntityStatus) predicate.SagaEntity {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.SagaEntity(sql.FieldIn(FieldStatus, v...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...schema.EntityStatus) predicate.SagaEntity {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.SagaEntity(sql.FieldNotIn(FieldStatus, v...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v schema.EntityStatus) predicate.SagaEntity {
	vc := string(v)
	return predicate.SagaEntity(sql.FieldGT(FieldStatus, vc))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v schema.EntityStatus) predicate.SagaEntity {
	vc := string(v)
	return predicate.SagaEntity(sql.FieldGTE(FieldStatus, vc))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v schema.EntityStatus) predicate.SagaEntity {
	vc := string(v)
	return predicate.SagaEntity(sql.FieldLT(FieldStatus, vc))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v schema.EntityStatus) predicate.SagaEntity {
	vc := string(v)
	return predicate.SagaEntity(sql.FieldLTE(FieldStatus, vc))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v schema.EntityStatus) predicate.SagaEntity {
	vc := string(v)
	return predicate.SagaEntity(sql.FieldContains(FieldStatus, vc))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v schema.EntityStatus) predicate.SagaEntity {
	vc := string(v)
	return predicate.SagaEntity(sql.FieldHasPrefix(FieldStatus, vc))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v schema.EntityStatus) predicate.SagaEntity {
	vc := string(v)
	return predicate.SagaEntity(sql.FieldHasSuffix(FieldStatus, vc))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v schema.EntityStatus) predicate.SagaEntity {
	vc := string(v)
	return predicate.SagaEntity(sql.FieldEqualFold(FieldStatus, vc))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v schema.EntityStatus) predicate.SagaEntity {
	vc := string(v)
	return predicate.SagaEntity(sql.FieldContainsFold(FieldStatus, vc))
}

// StepIDEQ applies the EQ predicate on the "step_id" field.
func StepIDEQ(v string) predicate.SagaEntity {
	return predicate.SagaEntity(sql.FieldEQ(FieldStepID, v))
}

// StepIDNEQ applies the NEQ predicate on the "step_id" field.
func StepIDNEQ(v string) predicate.SagaEntity {
	return predicate.SagaEntity(sql.FieldNEQ(FieldStepID, v))
}

// StepIDIn applies the In predicate on the "step_id" field.
func StepIDIn(vs ...string) predicate.SagaEntity {
	return predicate.SagaEntity(sql.FieldIn(FieldStepID, vs...))
}

// StepIDNotIn applies the NotIn predicate on the "step_id" field.
func StepIDNotIn(vs ...string) predicate.SagaEntity {
	return predicate.SagaEntity(sql.FieldNotIn(FieldStepID, vs...))
}

// StepIDGT applies the GT predicate on the "step_id" field.
func StepIDGT(v string) predicate.SagaEntity {
	return predicate.SagaEntity(sql.FieldGT(FieldStepID, v))
}

// StepIDGTE applies the GTE predicate on the "step_id" field.
func StepIDGTE(v string) predicate.SagaEntity {
	return predicate.SagaEntity(sql.FieldGTE(FieldStepID, v))
}

// StepIDLT applies the LT predicate on the "step_id" field.
func StepIDLT(v string) predicate.SagaEntity {
	return predicate.SagaEntity(sql.FieldLT(FieldStepID, v))
}

// StepIDLTE applies the LTE predicate on the "step_id" field.
func StepIDLTE(v string) predicate.SagaEntity {
	return predicate.SagaEntity(sql.FieldLTE(FieldStepID, v))
}

// StepIDContains applies the Contains predicate on the "step_id" field.
func StepIDContains(v string) predicate.SagaEntity {
	return predicate.SagaEntity(sql.FieldContains(FieldStepID, v))
}

// StepIDHasPrefix applies the HasPrefix predicate on the "step_id" field.
func StepIDHasPrefix(v string) predicate.SagaEntity {
	return predicate.SagaEntity(sql.FieldHasPrefix(FieldStepID, v))
}

// StepIDHasSuffix applies the HasSuffix predicate on the "step_id" field.
func StepIDHasSuffix(v string) predicate.SagaEntity {
	return predicate.SagaEntity(sql.FieldHasSuffix(FieldStepID, v))
}

// StepIDEqualFold applies the EqualFold predicate on the "step_id" field.
func StepIDEqualFold(v string) predicate.SagaEntity {
	return predicate.SagaEntity(sql.FieldEqualFold(FieldStepID, v))
}

// StepIDContainsFold applies the ContainsFold predicate on the "step_id" field.
func StepIDContainsFold(v string) predicate.SagaEntity {
	return predicate.SagaEntity(sql.FieldContainsFold(FieldStepID, v))
}

// RunIDEQ applies the EQ predicate on the "run_id" field.
func RunIDEQ(v schema.RunID) predicate.SagaEntity {
	vc := int(v)
	return predicate.SagaEntity(sql.FieldEQ(FieldRunID, vc))
}

// RunIDNEQ applies the NEQ predicate on the "run_id" field.
func RunIDNEQ(v schema.RunID) predicate.SagaEntity {
	vc := int(v)
	return predicate.SagaEntity(sql.FieldNEQ(FieldRunID, vc))
}

// RunIDIn applies the In predicate on the "run_id" field.
func RunIDIn(vs ...schema.RunID) predicate.SagaEntity {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int(vs[i])
	}
	return predicate.SagaEntity(sql.FieldIn(FieldRunID, v...))
}

// RunIDNotIn applies the NotIn predicate on the "run_id" field.
func RunIDNotIn(vs ...schema.RunID) predicate.SagaEntity {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int(vs[i])
	}
	return predicate.SagaEntity(sql.FieldNotIn(FieldRunID, v...))
}

// RunIDGT applies the GT predicate on the "run_id" field.
func RunIDGT(v schema.RunID) predicate.SagaEntity {
	vc := int(v)
	return predicate.SagaEntity(sql.FieldGT(FieldRunID, vc))
}

// RunIDGTE applies the GTE predicate on the "run_id" field.
func RunIDGTE(v schema.RunID) predicate.SagaEntity {
	vc := int(v)
	return predicate.SagaEntity(sql.FieldGTE(FieldRunID, vc))
}

// RunIDLT applies the LT predicate on the "run_id" field.
func RunIDLT(v schema.RunID) predicate.SagaEntity {
	vc := int(v)
	return predicate.SagaEntity(sql.FieldLT(FieldRunID, vc))
}

// RunIDLTE applies the LTE predicate on the "run_id" field.
func RunIDLTE(v schema.RunID) predicate.SagaEntity {
	vc := int(v)
	return predicate.SagaEntity(sql.FieldLTE(FieldRunID, vc))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.SagaEntity {
	return predicate.SagaEntity(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.SagaEntity {
	return predicate.SagaEntity(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.SagaEntity {
	return predicate.SagaEntity(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.SagaEntity {
	return predicate.SagaEntity(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.SagaEntity {
	return predicate.SagaEntity(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.SagaEntity {
	return predicate.SagaEntity(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.SagaEntity {
	return predicate.SagaEntity(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.SagaEntity {
	return predicate.SagaEntity(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.SagaEntity {
	return predicate.SagaEntity(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.SagaEntity {
	return predicate.SagaEntity(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.SagaEntity {
	return predicate.SagaEntity(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.SagaEntity {
	return predicate.SagaEntity(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.SagaEntity {
	return predicate.SagaEntity(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.SagaEntity {
	return predicate.SagaEntity(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.SagaEntity {
	return predicate.SagaEntity(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.SagaEntity {
	return predicate.SagaEntity(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasWorkflow applies the HasEdge predicate on the "workflow" edge.
func HasWorkflow() predicate.SagaEntity {
	return predicate.SagaEntity(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, WorkflowTable, WorkflowColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWorkflowWith applies the HasEdge predicate on the "workflow" edge with a given conditions (other predicates).
func HasWorkflowWith(preds ...predicate.WorkflowEntity) predicate.SagaEntity {
	return predicate.SagaEntity(func(s *sql.Selector) {
		step := newWorkflowStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSagaData applies the HasEdge predicate on the "saga_data" edge.
func HasSagaData() predicate.SagaEntity {
	return predicate.SagaEntity(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, SagaDataTable, SagaDataColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSagaDataWith applies the HasEdge predicate on the "saga_data" edge with a given conditions (other predicates).
func HasSagaDataWith(preds ...predicate.SagaData) predicate.SagaEntity {
	return predicate.SagaEntity(func(s *sql.Selector) {
		step := newSagaDataStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExecutions applies the HasEdge predicate on the "executions" edge.
func HasExecutions() predicate.SagaEntity {
	return predicate.SagaEntity(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ExecutionsTable, ExecutionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExecutionsWith applies the HasEdge predicate on the "executions" edge with a given conditions (other predicates).
func HasExecutionsWith(preds ...predicate.SagaExecution) predicate.SagaEntity {
	return predicate.SagaEntity(func(s *sql.Selector) {
		step := newExecutionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasValues applies the HasEdge predicate on the "values" edge.
func HasValues() predicate.SagaEntity {
	return predicate.SagaEntity(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ValuesTable, ValuesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasValuesWith applies the HasEdge predicate on the "values" edge with a given conditions (other predicates).
func HasValuesWith(preds ...predicate.SagaValue) predicate.SagaEntity {
	return predicate.SagaEntity(func(s *sql.Selector) {
		step := newValuesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SagaEntity) predicate.SagaEntity {
	return predicate.SagaEntity(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SagaEntity) predicate.SagaEntity {
	return predicate.SagaEntity(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SagaEntity) predicate.SagaEntity {
	return predicate.SagaEntity(sql.NotPredicates(p))
}
