// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/davidroman0O/tempolite/ent/schema"
	"github.com/davidroman0O/tempolite/ent/version"
	"github.com/davidroman0O/tempolite/ent/workflowentity"
)

// Version is the model entity for the Version schema.
type Version struct {
	config `json:"-"`
	// ID of the ent.
	ID schema.VersionID `json:"id,omitempty"`
	// EntityID holds the value of the "entity_id" field.
	EntityID schema.WorkflowEntityID `json:"entity_id,omitempty"`
	// ChangeID holds the value of the "change_id" field.
	ChangeID schema.VersionChange `json:"change_id,omitempty"`
	// Version holds the value of the "version" field.
	Version schema.VersionNumber `json:"version,omitempty"`
	// Data holds the value of the "data" field.
	Data map[string]interface{} `json:"data,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VersionQuery when eager-loading is set.
	Edges        VersionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// VersionEdges holds the relations/edges for other nodes in the graph.
type VersionEdges struct {
	// Workflow holds the value of the workflow edge.
	Workflow *WorkflowEntity `json:"workflow,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// WorkflowOrErr returns the Workflow value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VersionEdges) WorkflowOrErr() (*WorkflowEntity, error) {
	if e.Workflow != nil {
		return e.Workflow, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: workflowentity.Label}
	}
	return nil, &NotLoadedError{edge: "workflow"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Version) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case version.FieldData:
			values[i] = new([]byte)
		case version.FieldID, version.FieldEntityID, version.FieldVersion:
			values[i] = new(sql.NullInt64)
		case version.FieldChangeID:
			values[i] = new(sql.NullString)
		case version.FieldCreatedAt, version.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Version fields.
func (v *Version) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case version.FieldID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				v.ID = schema.VersionID(value.Int64)
			}
		case version.FieldEntityID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field entity_id", values[i])
			} else if value.Valid {
				v.EntityID = schema.WorkflowEntityID(value.Int64)
			}
		case version.FieldChangeID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field change_id", values[i])
			} else if value.Valid {
				v.ChangeID = schema.VersionChange(value.String)
			}
		case version.FieldVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				v.Version = schema.VersionNumber(value.Int64)
			}
		case version.FieldData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field data", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &v.Data); err != nil {
					return fmt.Errorf("unmarshal field data: %w", err)
				}
			}
		case version.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				v.CreatedAt = value.Time
			}
		case version.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				v.UpdatedAt = value.Time
			}
		default:
			v.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Version.
// This includes values selected through modifiers, order, etc.
func (v *Version) Value(name string) (ent.Value, error) {
	return v.selectValues.Get(name)
}

// QueryWorkflow queries the "workflow" edge of the Version entity.
func (v *Version) QueryWorkflow() *WorkflowEntityQuery {
	return NewVersionClient(v.config).QueryWorkflow(v)
}

// Update returns a builder for updating this Version.
// Note that you need to call Version.Unwrap() before calling this method if this Version
// was returned from a transaction, and the transaction was committed or rolled back.
func (v *Version) Update() *VersionUpdateOne {
	return NewVersionClient(v.config).UpdateOne(v)
}

// Unwrap unwraps the Version entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (v *Version) Unwrap() *Version {
	_tx, ok := v.config.driver.(*txDriver)
	if !ok {
		panic("ent: Version is not a transactional entity")
	}
	v.config.driver = _tx.drv
	return v
}

// String implements the fmt.Stringer.
func (v *Version) String() string {
	var builder strings.Builder
	builder.WriteString("Version(")
	builder.WriteString(fmt.Sprintf("id=%v, ", v.ID))
	builder.WriteString("entity_id=")
	builder.WriteString(fmt.Sprintf("%v", v.EntityID))
	builder.WriteString(", ")
	builder.WriteString("change_id=")
	builder.WriteString(fmt.Sprintf("%v", v.ChangeID))
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(fmt.Sprintf("%v", v.Version))
	builder.WriteString(", ")
	builder.WriteString("data=")
	builder.WriteString(fmt.Sprintf("%v", v.Data))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(v.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(v.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Versions is a parsable slice of Version.
type Versions []*Version
